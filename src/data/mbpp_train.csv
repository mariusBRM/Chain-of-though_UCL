task_id,text,code,test_list,test_setup_code,challenge_test_list,instruction
601,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","['assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3'
 'assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4'
 'assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5']",,[],"class Pair():
	""""""Write a function to find the longest chain which can be formed from the given set of pairs."""""""
602,Write a python function to find the first repeated character in a given string.,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""","['assert first_repeated_char(""abcabc"") == ""a""'
 'assert first_repeated_char(""abc"") == ""None""'
 'assert first_repeated_char(""123123"") == ""1""']",,[],"def first_repeated_char(str1):
	""""""Write a python function to find the first repeated character in a given string."""""""
603,Write a function to get a lucid number smaller than or equal to n.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics","['assert get_ludic(10) == [1, 2, 3, 5, 7]'
 'assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]'
 'assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]']",,[],"def get_ludic(n):
	""""""Write a function to get a lucid number smaller than or equal to n."""""""
604,Write a function to reverse words in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))","['assert reverse_words(""python program"")==(""program python"")'
 'assert reverse_words(""java language"")==(""language java"")'
 'assert reverse_words(""indian man"")==(""man indian"")']",,[],"def reverse_words(s):
	""""""Write a function to reverse words in a given string."""""""
605,Write a function to check if the given integer is a prime number.,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False","['assert prime_num(13)==True' 'assert prime_num(7)==True'
 'assert prime_num(-1010)==False']",,[],"def prime_num(num):
	""""""Write a function to check if the given integer is a prime number."""""""
606,Write a function to convert degrees to radians.,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian","['assert radian_degree(90)==1.5707963267948966'
 'assert radian_degree(60)==1.0471975511965976'
 'assert radian_degree(120)==2.0943951023931953']",,[],"def radian_degree(degree):
	""""""Write a function to convert degrees to radians."""""""
607,Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)","[""assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)""
 ""assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)""
 ""assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)""]",,[],"def find_literals(text, pattern):
	""""""Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex."""""""
608,Write a python function to find nth bell number.,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ","['assert bell_Number(2) == 2' 'assert bell_Number(3) == 5'
 'assert bell_Number(4) == 15']",,[],"def bell_Number(n):
	""""""Write a python function to find nth bell number."""""""
609,Write a python function to find minimum possible value for the given periodic function.,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","['assert floor_Min(10,20,30) == 15' 'assert floor_Min(1,2,1) == 0'
 'assert floor_Min(11,10,9) == 9']",,[],"def floor_Min(A,B,N):
	""""""Write a python function to find minimum possible value for the given periodic function."""""""
610,Write a python function to remove the k'th element from a given list.,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]","['assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]'
 'assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]'
 'assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]']",,[],"def remove_kth_element(list1, L):
	""""""Write a python function to remove the k'th element from a given list."""""""
611,Write a function to find the maximum of nth column from the given tuple list.,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ","['assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19'
 'assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10'
 'assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11']",,[],"def max_of_nth(test_list, N):
	""""""Write a function to find the maximum of nth column from the given tuple list."""""""
612,Write a python function to merge the first and last elements separately in a list of lists.,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ","[""assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]""
 'assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]'
 ""assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]""]",,[],"def merge(lst):
	""""""Write a python function to merge the first and last elements separately in a list of lists."""""""
613,Write a function to find the maximum value in record list as tuple attribute in the given tuple list.,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ","[""assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]""
 ""assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]""
 ""assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]""]",,[],"def maximum_value(test_list):
	""""""Write a function to find the maximum value in record list as tuple attribute in the given tuple list."""""""
614,Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)","['assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30'
 'assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37'
 'assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44']",,[],"def cummulative_sum(test_list):
	""""""Write a function to find the cumulative sum of all the values that are present in the given tuple list."""""""
615,Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]'
 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]'
 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']",,[],"def average_tuple(nums):
	""""""Write a function to find average value of the numbers in a given tuple of tuples."""""""
616,Write a function to perfom the modulo of tuple elements in the given two tuples.,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ","['assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)'
 'assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)'
 'assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)']",,[],"def tuple_modulo(test_tup1, test_tup2):
	""""""Write a function to perfom the modulo of tuple elements in the given two tuples."""""""
617,"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2","['assert min_Jumps(3,4,11)==3.5' 'assert min_Jumps(3,4,0)==0'
 'assert min_Jumps(11,14,11)==1']",,[],"def min_Jumps(a, b, d):
	""""""Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane."""""""
618,Write a function to divide two lists using map and lambda function.,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)","['assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]'
 'assert div_list([3,2],[1,4])==[3.0, 0.5]'
 'assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]']",,[],"def div_list(nums1,nums2):
	""""""Write a function to divide two lists using map and lambda function."""""""
619,Write a function to move all the numbers in it to the given string.,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ","[""assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'""
 ""assert move_num('Avengers124Assemble') == 'AvengersAssemble124'""
 ""assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'""]",,[],"def move_num(test_str):
	""""""Write a function to move all the numbers in it to the given string."""""""
620,Write a function to find the largest subset where each pair is divisible.,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)","['assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4'
 'assert largest_subset([10, 5, 3, 15, 20], 5) == 3'
 'assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4']",,[],"def largest_subset(a, n):
	""""""Write a function to find the largest subset where each pair is divisible."""""""
621,Write a function to increment the numeric values in the given strings by k.,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ","['assert increment_numerics([""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""] , 6) == [\'MSM\', \'240\', \'is\', \'104\', \'129\', \'best\', \'10\']'
 'assert increment_numerics([""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6""] , 12) == [\'Dart\', \'368\', \'is\', \'100\', \'181\', \'Super\', \'18\']'
 'assert increment_numerics([""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12""] , 33) == [\'Flutter\', \'484\', \'is\', \'77\', \'129\', \'Magnificent\', \'45\']']",,[],"def increment_numerics(test_list, K):
	""""""Write a function to increment the numeric values in the given strings by k."""""""
622,Write a function to find the median of two sorted arrays of same size.,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2","['assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0'
 'assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5'
 'assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0']",,[],"def get_median(arr1, arr2, n):
	""""""Write a function to find the median of two sorted arrays of same size."""""""
623,Write a function to find the n-th power of individual elements in a list using lambda function.,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums","['assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]'
 'assert nth_nums([10,20,30],3)==([1000, 8000, 27000])'
 'assert nth_nums([12,15],5)==([248832, 759375])']",,[],"def nth_nums(nums,n):
	""""""Write a function to find the n-th power of individual elements in a list using lambda function."""""""
624,Write a python function to convert the given string to upper case.,"def is_upper(string):
  return (string.upper())","['assert is_upper(""person"") ==""PERSON""'
 'assert is_upper(""final"") == ""FINAL""'
 'assert is_upper(""Valid"") == ""VALID""']",,[],"def is_upper(string):
	""""""Write a python function to convert the given string to upper case."""""""
625,Write a python function to interchange first and last elements in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ","['assert swap_List([1,2,3]) == [3,2,1]'
 'assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]'
 'assert swap_List([4,5,6]) == [6,5,4]']",,[],"def swap_List(newList):
	""""""Write a python function to interchange first and last elements in a given list."""""""
626,Write a python function to find the largest triangle that can be inscribed in the semicircle.,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ","['assert triangle_area(0) == 0' 'assert triangle_area(-1) == -1'
 'assert triangle_area(2) == 4']",,[],"def triangle_area(r):
	""""""Write a python function to find the largest triangle that can be inscribed in the semicircle."""""""
627,Write a python function to find the smallest missing number from the given array.,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ","['assert find_First_Missing([0,1,2,3],0,3) == 4'
 'assert find_First_Missing([0,1,2,6,9],0,4) == 3'
 'assert find_First_Missing([2,3,5,8,9],0,4) == 0']",,[],"def find_First_Missing(array,start,end):
	""""""Write a python function to find the smallest missing number from the given array."""""""
628,Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)","['assert replace_spaces(""My Name is Dawood"") == \'My%20Name%20is%20Dawood\''
 'assert replace_spaces(""I am a Programmer"") == \'I%20am%20a%20Programmer\''
 'assert replace_spaces(""I love Coding"") == \'I%20love%20Coding\'']",,[],"def replace_spaces(string):
	""""""Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'."""""""
629,Write a python function to find even numbers from a mixed list.,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li","['assert Split([1,2,3,4,5]) == [2,4]'
 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]'
 'assert Split ([8,12,15,19]) == [8,12]']",,[],"def Split(list):
	""""""Write a python function to find even numbers from a mixed list."""""""
630,Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ","['assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]'
 'assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]'
 'assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]']",,[],"def adjac(ele, sub = []):
	""""""Write a function to extract all the adjacent coordinates of the given coordinate tuple."""""""
631,Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)","[""assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'""
 ""assert replace_spaces('The Avengers') == 'The_Avengers'""
 ""assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'""]",,[],"def replace_spaces(text):
	""""""Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex."""""""
632,Write a python function to move all zeroes to the end of the given list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)","['assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]'
 'assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]'
 'assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]']",,[],"def move_zero(num_list):
	""""""Write a python function to move all zeroes to the end of the given list."""""""
633,Write a python function to find the sum of xor of all pairs of numbers in the given array.,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ","['assert pair_OR_Sum([5,9,7,6],4) == 47'
 'assert pair_OR_Sum([7,3,5],3) == 12' 'assert pair_OR_Sum([7,3],2) == 4']",,[],"def pair_OR_Sum(arr,n):
	""""""Write a python function to find the sum of xor of all pairs of numbers in the given array."""""""
634,Write a python function to find the sum of fourth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ","['assert even_Power_Sum(2) == 272' 'assert even_Power_Sum(3) == 1568'
 'assert even_Power_Sum(4) == 5664']",,[],"def even_Power_Sum(n):
	""""""Write a python function to find the sum of fourth power of first n even natural numbers."""""""
635,Write a function to push all values into a heap and then pop off the smallest values one at a time.,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]","['assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'
 'assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]'
 'assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]']",,[],"def heap_sort(iterable):
	""""""Write a function to push all values into a heap and then pop off the smallest values one at a time."""""""
636,Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ","['assert Check_Solution(2,0,2) == ""Yes""'
 'assert Check_Solution(2,-5,2) == ""Yes""'
 'assert Check_Solution(1,2,3) == ""No""']",,[],"def Check_Solution(a,b,c):
	""""""Write a python function to check if roots of a quadratic equation are reciprocal of each other or not."""""""
637,Write a function to check whether the given amount has no profit and no loss,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False","['assert noprofit_noloss(1500,1200)==False'
 'assert noprofit_noloss(100,100)==True'
 'assert noprofit_noloss(2000,5000)==False']",,[],"def noprofit_noloss(actual_cost,sale_amount):
	""""""Write a function to check whether the given amount has no profit and no loss"""""""
638,Write a function to calculate wind chill index.,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))","['assert wind_chill(120,35)==40' 'assert wind_chill(40,70)==86'
 'assert wind_chill(10,100)==116']",,[],"def wind_chill(v,t):
	""""""Write a function to calculate wind chill index."""""""
639,Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))","[""assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16""
 'assert sample_nam([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==10'
 'assert sample_nam([""abcd"", ""Python"", ""abba"", ""aba""])==6']",,[],"def sample_nam(sample_names):
	""""""Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter."""""""
640,Write a function to remove the parenthesis area in a string.,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))","['assert remove_parenthesis([""python (chrome)""])==(""python"")'
 'assert remove_parenthesis([""string(.abc)""])==(""string"")'
 'assert remove_parenthesis([""alpha(num)""])==(""alpha"")']",,[],"def remove_parenthesis(items):
	""""""Write a function to remove the parenthesis area in a string."""""""
641,Write a function to find the nth nonagonal number.,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ","['assert is_nonagonal(10) == 325' 'assert is_nonagonal(15) == 750'
 'assert is_nonagonal(18) == 1089']",,[],"def is_nonagonal(n):
	""""""Write a function to find the nth nonagonal number."""""""
642,Write a function to remove similar rows from the given tuple matrix.,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ","['assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}'
 'assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}'
 'assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}']",,[],"def remove_similar_row(test_list):
	""""""Write a function to remove similar rows from the given tuple matrix."""""""
643,"Write a function that matches a word containing 'z', not at the start or end of the word.","import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_match_wordz_middle(""pythonzabc."")==(\'Found a match!\')'
 'assert text_match_wordz_middle(""xyzabc."")==(\'Found a match!\')'
 'assert text_match_wordz_middle(""  lang  ."")==(\'Not matched!\')']",,[],"def text_match_wordz_middle(text):
	""""""Write a function that matches a word containing 'z', not at the start or end of the word."""""""
644,Write a python function to reverse an array upto a given position.,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ","['assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]'
 'assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]'
 'assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]']",,[],"def reverse_Array_Upto_K(input, k):
	""""""Write a python function to reverse an array upto a given position."""""""
645,Write a function to find the product of it’s kth index in the given tuples.,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ","['assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665'
 'assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280'
 'assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210']",,[],"def get_product(val):
	""""""Write a function to find the product of it’s kth index in the given tuples."""""""
646,Write a python function to count number of cubes of size k in a cube of size n.,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","['assert No_of_cubes(2,1) == 8' 'assert No_of_cubes(5,2) == 64'
 'assert No_of_cubes(1,1) == 1']",,[],"def No_of_cubes(N,K):
	""""""Write a python function to count number of cubes of size k in a cube of size n."""""""
647,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","['assert split_upperstring(""PythonProgramLanguage"")==[\'Python\',\'Program\',\'Language\']'
 'assert split_upperstring(""PythonProgram"")==[\'Python\',\'Program\']'
 'assert split_upperstring(""ProgrammingLanguage"")==[\'Programming\',\'Language\']']",,[],"def split_upperstring(text):
	""""""Write a function to split a string at uppercase letters."""""""
648,Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))","['assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] '
 'assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] '
 'assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ']",,[],"def exchange_elements(lst):
	""""""Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list."""""""
649,Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ","['assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29'
 'assert sum_Range_list([1,2,3,4,5],1,2) == 5'
 'assert sum_Range_list([1,0,1,2,5,6],4,5) == 11']",,[],"def sum_Range_list(nums, m, n):
	""""""Write a python function to calculate the sum of the numbers in a list between the indices of a specified range."""""""
650,Write a python function to check whether the given two arrays are equal or not.,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True","['assert are_Equal([1,2,3],[3,2,1],3,3) == True'
 'assert are_Equal([1,1,1],[2,2,2],3,3) == False'
 'assert are_Equal([8,9],[4,5,6],2,3) == False']",,[],"def are_Equal(arr1,arr2,n,m):
	""""""Write a python function to check whether the given two arrays are equal or not."""""""
651,Write a function to check if one tuple is a subset of another tuple.,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ","['assert check_subset((10, 4, 5, 6), (5, 10)) == True'
 'assert check_subset((1, 2, 3, 4), (5, 6)) == False'
 'assert check_subset((7, 8, 9, 10), (10, 8)) == True']",,[],"def check_subset(test_tup1, test_tup2):
	""""""Write a function to check if one tuple is a subset of another tuple."""""""
652,Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","[""assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'""
 ""assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'""
 ""assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'""]",,[],"def matrix_to_list(test_list):
	""""""Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column."""""""
653,Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d","[""assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})""
 ""assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})""
 ""assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})""]",,[],"def grouping_dictionary(l):
	""""""Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module."""""""
654,Write a function to find the perimeter of a rectangle.,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter","['assert rectangle_perimeter(10,20)==60'
 'assert rectangle_perimeter(10,5)==30'
 'assert rectangle_perimeter(4,2)==12']",,[],"def rectangle_perimeter(l,b):
	""""""Write a function to find the perimeter of a rectangle."""""""
655,Write a python function to find the sum of fifth power of n natural numbers.,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ","['assert fifth_Power_Sum(2) == 33' 'assert fifth_Power_Sum(4) == 1300'
 'assert fifth_Power_Sum(3) == 276']",,[],"def fifth_Power_Sum(n):
	""""""Write a python function to find the sum of fifth power of n natural numbers."""""""
656,Write a python function to find the minimum sum of absolute differences of two arrays.,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum","['assert find_Min_Sum([3,2,1],[2,1,3],3) == 0'
 'assert find_Min_Sum([1,2,3],[4,5,6],3) == 9'
 'assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6']",,[],"def find_Min_Sum(a,b,n):
	""""""Write a python function to find the minimum sum of absolute differences of two arrays."""""""
657,Write a python function to find the first digit in factorial of a given number.,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ","['assert first_Digit(5) == 1' 'assert first_Digit(10) == 3'
 'assert first_Digit(7) == 5']",,[],"def first_Digit(n):
	""""""Write a python function to find the first digit in factorial of a given number."""""""
658,Write a function to find the item with maximum occurrences in a given list.,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2'
 'assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1'
 'assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1']",,[],"def max_occurrences(list1):
	""""""Write a function to find the item with maximum occurrences in a given list."""""""
659,Write a python function to print duplicants from a list of integers.,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ","['assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]'
 'assert Repeat([-1, 1, -1, 8]) == [-1]'
 'assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]']",,[],"def Repeat(x):
	""""""Write a python function to print duplicants from a list of integers."""""""
660,Write a python function to choose points from two ranges such that no point lies in both the ranges.,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)","['assert find_Points(5,10,1,5) == (1,10)'
 'assert find_Points(3,5,7,9) == (3,9)'
 'assert find_Points(1,5,2,8) == (1,8)']",,[],"def find_Points(l1,r1,l2,r2):
	""""""Write a python function to choose points from two ranges such that no point lies in both the ranges."""""""
661,Write a function to find the maximum sum that can be formed which has no three consecutive elements present.,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]","['assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101'
 'assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013'
 'assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27']",,[],"def max_sum_of_three_consecutive(arr, n):
	""""""Write a function to find the maximum sum that can be formed which has no three consecutive elements present."""""""
662,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","[""assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}""
 ""assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}""
 ""assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}""]",,[],"def sorted_dict(dict1):
	""""""Write a function to sort a list in a dictionary."""""""
663,Write a function to find the largest possible value of k such that k modulo x is y.,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ","['assert find_max_val(15, 10, 5) == 15'
 'assert find_max_val(187, 10, 5) == 185'
 'assert find_max_val(16, 11, 1) == 12']",,[],"def find_max_val(n, x, y):
	""""""Write a function to find the largest possible value of k such that k modulo x is y."""""""
664,Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","['assert average_Even(2) == 2' 'assert average_Even(4) == 3'
 'assert average_Even(100) == 51']",,[],"def average_Even(n):
	""""""Write a python function to find the average of even numbers till a given even number."""""""
665,Write a python function to shift first element to the end of given list.,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)","['assert move_last([1,2,3,4]) == [2,3,4,1]'
 'assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]'
 'assert move_last([5,4,3,2,1]) == [4,3,2,1,5]']",,[],"def move_last(num_list):
	""""""Write a python function to shift first element to the end of given list."""""""
666,Write a function to count occurrence of a character in a string.,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count","['assert count_char(""Python"",\'o\')==1'
 'assert count_char(""little"",\'t\')==2'
 'assert count_char(""assert"",\'s\')==2']",,[],"def count_char(string,char):
	""""""Write a function to count occurrence of a character in a string."""""""
667,Write a python function to count number of vowels in the string.,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
","[""assert Check_Vow('corner','AaEeIiOoUu') == 2""
 ""assert Check_Vow('valid','AaEeIiOoUu') == 2""
 ""assert Check_Vow('true','AaEeIiOoUu') ==2""]",,[],"def Check_Vow(string, vowels):
	""""""Write a python function to count number of vowels in the string."""""""
668,Write a python function to replace multiple occurence of character by single.,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ","[""assert replace('peep','e') == 'pep'""
 ""assert replace('Greek','e') == 'Grek'""
 ""assert replace('Moon','o') == 'Mon'""]",,[],"def replace(string, char):
	""""""Write a python function to replace multiple occurence of character by single."""""""
669,Write a function to check whether the given ip address is valid or not using regex.,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ","['assert check_IP(""192.168.0.1"") == \'Valid IP address\''
 'assert check_IP(""110.234.52.124"") == \'Valid IP address\''
 'assert check_IP(""366.1.2.2"") == \'Invalid IP address\'']",,[],"def check_IP(Ip):
	""""""Write a function to check whether the given ip address is valid or not using regex."""""""
670,Write a python function to check whether a sequence of numbers has a decreasing trend or not.,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","['assert decreasing_trend([-4,-3,-2,-1]) == True'
 'assert decreasing_trend([1,2,3]) == True'
 'assert decreasing_trend([3,2,1]) == False']",,[],"def decreasing_trend(nums):
	""""""Write a python function to check whether a sequence of numbers has a decreasing trend or not."""""""
671,Write a python function to set the right most unset bit.,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ","['assert set_Right_most_Unset_Bit(21) == 23'
 'assert set_Right_most_Unset_Bit(11) == 15'
 'assert set_Right_most_Unset_Bit(15) == 15']",,[],"def get_Pos_Of_Right_most_Set_Bit(n):
	""""""Write a python function to set the right most unset bit."""""""
672,Write a function to find maximum of three numbers.,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum","['assert max_of_three(10,20,30)==30' 'assert max_of_three(55,47,39)==55'
 'assert max_of_three(10,49,30)==49']",,[],"def max_of_three(num1,num2,num3):
	""""""Write a function to find maximum of three numbers."""""""
673,Write a python function to convert a list of multiple integers into a single integer.,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ","['assert convert([1,2,3]) == 123' 'assert convert([4,5,6]) == 456'
 'assert convert([7,8,9]) == 789']",,[],"def convert(list):
	""""""Write a python function to convert a list of multiple integers into a single integer."""""""
674,Write a function to remove duplicate words from a given string using collections module.,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result","['assert remove_duplicate(""Python Exercises Practice Solution Exercises"")==(""Python Exercises Practice Solution"")'
 'assert remove_duplicate(""Python Exercises Practice Solution Python"")==(""Python Exercises Practice Solution"")'
 'assert remove_duplicate(""Python Exercises Practice Solution Practice"")==(""Python Exercises Practice Solution"")']",,[],"def remove_duplicate(string):
	""""""Write a function to remove duplicate words from a given string using collections module."""""""
675,"Write a function to add two integers. however, if the sum is between the given range it will return 20.","def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums","['assert sum_nums(2,10,11,20)==20' 'assert sum_nums(15,17,1,10)==32'
 'assert sum_nums(10,15,5,30)==20']",,[],"def sum_nums(x, y,m,n):
	""""""Write a function to add two integers. however, if the sum is between the given range it will return 20."""""""
676,Write a function to remove everything except alphanumeric characters from the given string by using regex.,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))","[""assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'""
 ""assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'""
 ""assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'""]",,[],"def remove_extra_char(text1):
	""""""Write a function to remove everything except alphanumeric characters from the given string by using regex."""""""
677,Write a function to check if the triangle is valid or not.,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False","['assert validity_triangle(60,50,90)==False'
 'assert validity_triangle(45,75,60)==True'
 'assert validity_triangle(30,50,100)==True']",,[],"def validity_triangle(a,b,c):
	""""""Write a function to check if the triangle is valid or not."""""""
678,Write a python function to remove spaces from a given string.,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","['assert remove_spaces(""a b c"") == ""abc""'
 'assert remove_spaces(""1 2 3"") == ""123""'
 'assert remove_spaces("" b c"") == ""bc""']",,[],"def remove_spaces(str1):
	""""""Write a python function to remove spaces from a given string."""""""
679,Write a function to access dictionary key’s element by index.,"def access_key(ditionary,key):
  return list(ditionary)[key]","[""assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'""
 ""assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'""
 ""assert access_key({'program':15,'computer':45},1)== 'computer'""]",,[],"def access_key(ditionary,key):
	""""""Write a function to access dictionary key’s element by index."""""""
680,Write a python function to check whether a sequence of numbers has an increasing trend or not.,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","['assert increasing_trend([1,2,3,4]) == True'
 'assert increasing_trend([4,3,2,1]) == False'
 'assert increasing_trend([0,1,4,9]) == True']",,[],"def increasing_trend(nums):
	""""""Write a python function to check whether a sequence of numbers has an increasing trend or not."""""""
681,Write a python function to find the smallest prime divisor of a number.,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ","['assert smallest_Divisor(10) == 2' 'assert smallest_Divisor(25) == 5'
 'assert smallest_Divisor(31) == 31']",,[],"def smallest_Divisor(n):
	""""""Write a python function to find the smallest prime divisor of a number."""""""
682,Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","['assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]'
 'assert mul_list([1,2],[3,4])==[3,8]'
 'assert mul_list([90,120],[50,70])==[4500,8400]']",,[],"def mul_list(nums1,nums2):
	""""""Write a function to multiply two lists using map and lambda function."""""""
683,Write a python function to check whether the given number can be represented by sum of two squares or not.,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False","['assert sum_Square(25) == True' 'assert sum_Square(24) == False'
 'assert sum_Square(17) == True']",,[],"def sum_Square(n):
	""""""Write a python function to check whether the given number can be represented by sum of two squares or not."""""""
684,Write a python function to count occurences of a character in a repeated string.,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ","['assert count_Char(""abcac"",\'a\') == 4'
 'assert count_Char(""abca"",\'c\') == 2'
 'assert count_Char(""aba"",\'a\') == 7']",,[],"def count_Char(str,x):
	""""""Write a python function to count occurences of a character in a repeated string."""""""
685,Write a python function to find sum of prime numbers between 1 to n.,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum","['assert sum_Of_Primes(10) == 17' 'assert sum_Of_Primes(20) == 77'
 'assert sum_Of_Primes(5) == 10']",,[],"def sum_Of_Primes(n):
	""""""Write a python function to find sum of prime numbers between 1 to n."""""""
686,Write a function to find the frequency of each element in the given list.,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ","[""assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'""
 ""assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'""
 ""assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'""]",,[],"def freq_element(test_tup):
	""""""Write a function to find the frequency of each element in the given list."""""""
687,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","['assert recur_gcd(12,14) == 2' 'assert recur_gcd(13,17) == 1'
 'assert recur_gcd(9, 3) == 3']",,[],"def recur_gcd(a, b):
	""""""Write a function to find the greatest common divisor (gcd) of two integers by using recursion."""""""
688,Write a function to get the length of a complex number.,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length","['assert len_complex(3,4)==5.0'
 'assert len_complex(9,10)==13.45362404707371'
 'assert len_complex(7,9)==11.40175425099138']",,[],"def len_complex(a,b):
	""""""Write a function to get the length of a complex number."""""""
689,## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]","['assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3'
 'assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3'
 'assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10']",,[],"def min_jumps(arr, n):
	""""""## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block"""""""
690,Write a function to multiply consecutive numbers of a given list.,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result","['assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]'
 'assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]'
 'assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]']",,[],"def mul_consecutive_nums(nums):
	""""""Write a function to multiply consecutive numbers of a given list."""""""
691,Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
","['assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}'
 'assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}'
 'assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}']",,[],"def group_element(test_list):
	""""""Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list."""""""
692,Write a python function to find the last two digits in factorial of a given number.,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ","['assert last_Two_Digits(7) == 40' 'assert last_Two_Digits(5) == 20'
 'assert last_Two_Digits(2) == 2']",,[],"def last_Two_Digits(N):
	""""""Write a python function to find the last two digits in factorial of a given number."""""""
693,Write a function to remove multiple spaces in a string by using regex.,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))","[""assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'""
 ""assert remove_multiple_spaces('Quad      Core') == 'Quad Core'""
 ""assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'""]",,[],"def remove_multiple_spaces(text1):
	""""""Write a function to remove multiple spaces in a string by using regex."""""""
694,Write a function to extract unique values from the given dictionary values.,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res","[""assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]""
 ""assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]""
 ""assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]""]",,[],"def extract_unique(test_dict):
	""""""Write a function to extract unique values from the given dictionary values."""""""
695,Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ","['assert check_greater((10, 4, 5), (13, 5, 18)) == True'
 'assert check_greater((1, 2, 3), (2, 1, 4)) == False'
 'assert check_greater((4, 5, 6), (5, 6, 7)) == True']",,[],"def check_greater(test_tup1, test_tup2):
	""""""Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple."""""""
696,Write a function to zip two given lists of lists.,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result","['assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]'
 'assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]'
 ""assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]""]",,[],"def zip_list(list1,list2):
	""""""Write a function to zip two given lists of lists."""""""
697,Write a function to find number of even elements in the given list using lambda function.,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even","['assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3'
 'assert count_even([10,15,14,13,-18,12,-20])==5'
 'assert count_even([1, 2, 4, 8, 9])==3']",,[],"def count_even(array_nums):
	""""""Write a function to find number of even elements in the given list using lambda function."""""""
698,Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
","['assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}'
 'assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}'
 'assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}']",,[],"def sort_dict_item(test_dict):
	""""""Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys."""""""
699,Write a python function to find the minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ","['assert min_Swaps(""1101"",""1110"") == 1'
 'assert min_Swaps(""1111"",""0100"") == ""Not Possible""'
 'assert min_Swaps(""1110000"",""0001101"") == 3']",,[],"def min_Swaps(str1,str2):
	""""""Write a python function to find the minimum number of swaps required to convert one binary string to another."""""""
700,Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","['assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6'
 ""assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5""
 'assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3']",,[],"def count_range_in_list(li, min, max):
	""""""Write a function to count the number of elements in a list which are within a specific range."""""""
701,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","['assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3'
 'assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3'
 'assert equilibrium_index([1, 2, 3]) == -1']",,[],"def equilibrium_index(arr):
	""""""Write a function to find the equilibrium index of the given array."""""""
702,Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans","['assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5'
 'assert removals([1, 5, 6, 2, 8], 5, 2) == 3'
 'assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2']",,[],"def find_ind(key, i, n, 
			k, arr):
	""""""Write a function to find the minimum number of elements that should be removed such that amax-amin<=k."""""""
703,Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","['assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True'
 'assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True'
 'assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False']",,[],"def is_key_present(d,x):
	""""""Write a function to check whether the given key is present in the dictionary or not."""""""
704,Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))","['assert harmonic_sum(10)==2.9289682539682538'
 'assert harmonic_sum(4)==2.083333333333333'
 'assert harmonic_sum(7)==2.5928571428571425 ']",,[],"def harmonic_sum(n):
	""""""Write a function to calculate the harmonic sum of n-1."""""""
705,Write a function to sort a list of lists by length and value.,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1","['assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]'
 'assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]'
 'assert sort_sublists([[""python""],[""java"",""C"",""C++""],[""DBMS""],[""SQL"",""HTML""]])==[[\'DBMS\'], [\'python\'], [\'SQL\', \'HTML\'], [\'java\', \'C\', \'C++\']]']",,[],"def sort_sublists(list1):
	""""""Write a function to sort a list of lists by length and value."""""""
706,Write a function to find whether an array is subset of another array.,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		","['assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True'
 'assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True'
 'assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False']",,[],"def is_subset(arr1, m, arr2, n):
	""""""Write a function to find whether an array is subset of another array."""""""
707,Write a python function to count the total set bits from 1 to n.,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ","['assert count_Set_Bits(16) == 33' 'assert count_Set_Bits(2) == 2'
 'assert count_Set_Bits(14) == 28']",,[],"def count_Set_Bits(n):
	""""""Write a python function to count the total set bits from 1 to n."""""""
708,Write a python function to convert a string to a list.,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ","[""assert Convert('python program') == ['python','program']""
 ""assert Convert('Data Analysis') ==['Data','Analysis']""
 ""assert Convert('Hadoop Training') == ['Hadoop','Training']""]",,[],"def Convert(string):
	""""""Write a python function to convert a string to a list."""""""
709,Write a function to count unique keys for each value present in the tuple.,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ","[""assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'""
 ""assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'""
 ""assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'""]",,[],"def get_unique(test_list):
	""""""Write a function to count unique keys for each value present in the tuple."""""""
710,Write a function to access the initial and last data of the given tuple record.,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ","['assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)'
 'assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)'
 'assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)']",,[],"def front_and_rear(test_tup):
	""""""Write a function to access the initial and last data of the given tuple record."""""""
711,Write a python function to check whether the product of digits of a number at even and odd places is equal or not.,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False","['assert product_Equal(2841) == True'
 'assert product_Equal(1234) == False'
 'assert product_Equal(1212) == False']",,[],"def product_Equal(n):
	""""""Write a python function to check whether the product of digits of a number at even and odd places is equal or not."""""""
712,Write a function to remove duplicates from a list of lists.,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate","['assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] '
 'assert remove_duplicate([""a"", ""b"", ""a"", ""c"", ""c""] )==[""a"", ""b"", ""c""]'
 'assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]']",,[],"def remove_duplicate(list1):
	""""""Write a function to remove duplicates from a list of lists."""""""
713,Write a function to check if the given tuple contains all valid values or not.,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ","['assert check_valid((True, True, True, True) ) == True'
 'assert check_valid((True, False, True, True) ) == False'
 'assert check_valid((True, True, True, True) ) == True']",,[],"def check_valid(test_tup):
	""""""Write a function to check if the given tuple contains all valid values or not."""""""
714,Write a python function to count the number of distinct power of prime factor of given number.,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ","['assert count_Fac(24) == 3' 'assert count_Fac(12) == 2'
 'assert count_Fac(4) == 1']",,[],"def count_Fac(n):
	""""""Write a python function to count the number of distinct power of prime factor of given number."""""""
715,Write a function to convert the given string of integers into a tuple.,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ","['assert str_to_tuple(""1, -5, 4, 6, 7"") == (1, -5, 4, 6, 7)'
 'assert str_to_tuple(""1, 2, 3, 4, 5"") == (1, 2, 3, 4, 5)'
 'assert str_to_tuple(""4, 6, 9, 11, 13, 14"") == (4, 6, 9, 11, 13, 14)']",,[],"def str_to_tuple(test_str):
	""""""Write a function to convert the given string of integers into a tuple."""""""
716,Write a function to find the perimeter of a rombus.,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter","['assert rombus_perimeter(10)==40' 'assert rombus_perimeter(5)==20'
 'assert rombus_perimeter(4)==16']",,[],"def rombus_perimeter(a):
	""""""Write a function to find the perimeter of a rombus."""""""
717,Write a function to calculate the standard deviation.,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean","['assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979'
 'assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287'
 'assert sd_calc([5,9,10,15,6,4])==4.070217029430577']",,[],"def sd_calc(data):
	""""""Write a function to calculate the standard deviation."""""""
718,Write a function to create a list taking alternate elements from another given list.,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ","['assert alternate_elements([""red"", ""black"", ""white"", ""green"", ""orange""])==[\'red\', \'white\', \'orange\']'
 'assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]'
 'assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]']",,[],"def alternate_elements(list1):
	""""""Write a function to create a list taking alternate elements from another given list."""""""
719,Write a function that matches a string that has an a followed by zero or more b's.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_match(""ac"")==(\'Found a match!\')'
 'assert text_match(""dc"")==(\'Not matched!\')'
 'assert text_match(""abba"")==(\'Found a match!\')']",,[],"def text_match(text):
	""""""Write a function that matches a string that has an a followed by zero or more b's."""""""
720,Write a function to add a dictionary to the tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ","['assert add_dict_to_tuple((4, 5, 6), {""MSAM"" : 1, ""is"" : 2, ""best"" : 3} ) == (4, 5, 6, {\'MSAM\': 1, \'is\': 2, \'best\': 3})'
 'assert add_dict_to_tuple((1, 2, 3), {""UTS"" : 2, ""is"" : 3, ""Worst"" : 4} ) == (1, 2, 3, {\'UTS\': 2, \'is\': 3, \'Worst\': 4})'
 'assert add_dict_to_tuple((8, 9, 10), {""POS"" : 3, ""is"" : 4, ""Okay"" : 5} ) == (8, 9, 10, {\'POS\': 3, \'is\': 4, \'Okay\': 5})']",,[],"def add_dict_to_tuple(test_tup, test_dict):
	""""""Write a function to add a dictionary to the tuple."""""""
721,Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)","['assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2'
 'assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2'
 'assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ']",,[],"def maxAverageOfPath(cost, N):
	""""""Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n."""""""
722,Write a function to filter the height and width of students which are stored in a dictionary.,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ","[""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}""
 ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}""
 ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}""]",,[],"def filter_data(students,h,w):
	""""""Write a function to filter the height and width of students which are stored in a dictionary."""""""
723,Write a function to count the same pair in two given lists using map function.,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result","['assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4'
 'assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11'
 'assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1']",,[],"def count_same_pair(nums1, nums2):
	""""""Write a function to count the same pair in two given lists using map function."""""""
724,Write a function to calculate the sum of all digits of the base to the specified power.,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])","['assert power_base_sum(2,100)==115' 'assert power_base_sum(8,10)==37'
 'assert power_base_sum(8,15)==62']",,[],"def power_base_sum(base, power):
	""""""Write a function to calculate the sum of all digits of the base to the specified power."""""""
725,Write a function to extract values between quotation marks of the given string by using regex.,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))","['assert extract_quotation(\'Cortex ""A53"" Based ""multi"" tasking ""Processor""\') == [\'A53\', \'multi\', \'Processor\']'
 'assert extract_quotation(\'Cast your ""favorite"" entertainment ""apps""\') == [\'favorite\', \'apps\']'
 'assert extract_quotation(\'Watch content ""4k Ultra HD"" resolution with ""HDR 10"" Support\') == [\'4k Ultra HD\', \'HDR 10\']']",,[],"def extract_quotation(text1):
	""""""Write a function to extract values between quotation marks of the given string by using regex."""""""
726,Write a function to multiply the adjacent elements of the given tuple.,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","['assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)'
 'assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)'
 'assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)']",,[],"def multiply_elements(test_tup):
	""""""Write a function to multiply the adjacent elements of the given tuple."""""""
727,Write a function to remove all characters except letters and numbers using regex,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result","['assert remove_char(""123abcjw:, .@! eiw"") == \'123abcjweiw\''
 'assert remove_char(""Hello1234:, ! Howare33u"") == \'Hello1234Howare33u\''
 'assert remove_char(""Cool543Triks@:, Make@987Trips"") == \'Cool543TriksMake987Trips\' ']",,[],"def remove_char(S):
	""""""Write a function to remove all characters except letters and numbers using regex"""""""
728,Write a function to sum elements in two lists.,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list","['assert sum_list([10,20,30],[15,25,35])==[25,45,65]'
 'assert sum_list([1,2,3],[5,6,7])==[6,8,10]'
 'assert sum_list([15,20,30],[15,45,75])==[30,65,105]']",,[],"def sum_list(lst1,lst2):
	""""""Write a function to sum elements in two lists."""""""
729,Write a function to add two lists using map and lambda function.,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)","['assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]'
 'assert add_list([1,2],[3,4])==[4,6]'
 'assert add_list([10,20],[50,70])==[60,90]']",,[],"def add_list(nums1,nums2):
	""""""Write a function to add two lists using map and lambda function."""""""
730,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","['assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]'
 'assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]'
 ""assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']""]",,[],"def consecutive_duplicates(nums):
	""""""Write a function to remove consecutive duplicates of a given list."""""""
731,Write a function to find the lateral surface area of a cone.,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA","['assert lateralsurface_cone(5,12)==204.20352248333654'
 'assert lateralsurface_cone(10,15)==566.3586699569488'
 'assert lateralsurface_cone(19,17)==1521.8090132193388']",,[],"def lateralsurface_cone(r,h):
	""""""Write a function to find the lateral surface area of a cone."""""""
732,"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))","[""assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')""
 ""assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')""
 ""assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')""]",,[],"def replace_specialchar(text):
	""""""Write a function to replace all occurrences of spaces, commas, or dots with a colon."""""""
733,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","['assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1'
 'assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2'
 'assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4']",,[],"def find_first_occurrence(A, x):
	""""""Write a function to find the index of the first occurrence of a given number in a sorted array."""""""
734,Write a python function to find sum of products of all possible subarrays.,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)","['assert sum_Of_Subarray_Prod([1,2,3],3) == 20'
 'assert sum_Of_Subarray_Prod([1,2],2) == 5'
 'assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84']",,[],"def sum_Of_Subarray_Prod(arr,n):
	""""""Write a python function to find sum of products of all possible subarrays."""""""
735,Write a python function to toggle bits of the number except the first and the last bit.,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ","['assert toggle_middle_bits(9) == 15'
 'assert toggle_middle_bits(10) == 12'
 'assert toggle_middle_bits(11) == 13']",,[],"def set_middle_bits(n):
	""""""Write a python function to toggle bits of the number except the first and the last bit."""""""
736,Write a function to locate the left insertion point for a specified value in sorted order.,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i","['assert left_insertion([1,2,4,5],6)==4'
 'assert left_insertion([1,2,4,5],3)==2'
 'assert left_insertion([1,2,4,5],7)==4']",,[],"def left_insertion(a, x):
	""""""Write a function to locate the left insertion point for a specified value in sorted order."""""""
737,Write a function to check whether the given string is starting with a vowel or not using regex.,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ","['assert check_str(""annie"") == \'Valid\''
 'assert check_str(""dawood"") == \'Invalid\''
 'assert check_str(""Else"") == \'Valid\'']",,[],"def check_str(string):
	""""""Write a function to check whether the given string is starting with a vowel or not using regex."""""""
738,Write a function to calculate the geometric sum of n-1.,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)","['assert geometric_sum(7) == 1.9921875'
 'assert geometric_sum(4) == 1.9375'
 'assert geometric_sum(8) == 1.99609375']",,[],"def geometric_sum(n):
	""""""Write a function to calculate the geometric sum of n-1."""""""
739,Write a python function to find the index of smallest triangular number with n digits.,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ","['assert find_Index(2) == 4' 'assert find_Index(3) == 14'
 'assert find_Index(4) == 45']",,[],"def find_Index(n):
	""""""Write a python function to find the index of smallest triangular number with n digits."""""""
740,Write a function to convert the given tuple to a key-value dictionary using adjacent elements.,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ","['assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}'
 'assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}'
 'assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}']",,[],"def tuple_to_dict(test_tup):
	""""""Write a function to convert the given tuple to a key-value dictionary using adjacent elements."""""""
741,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True","['assert all_Characters_Same(""python"") == False'
 'assert all_Characters_Same(""aaa"") == True'
 'assert all_Characters_Same(""data"") == False']",,[],"def all_Characters_Same(s):
	""""""Write a python function to check whether all the characters are same or not."""""""
742,Write a function to caluclate the area of a tetrahedron.,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area","['assert area_tetrahedron(3)==15.588457268119894'
 'assert area_tetrahedron(20)==692.8203230275509'
 'assert area_tetrahedron(10)==173.20508075688772']",,[],"def area_tetrahedron(side):
	""""""Write a function to caluclate the area of a tetrahedron."""""""
743,Write a function to rotate a given list by specified number of items to the right direction.,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result","['assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]'
 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]'
 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]']",,[],"def rotate_right(list1,m,n):
	""""""Write a function to rotate a given list by specified number of items to the right direction."""""""
744,Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","['assert check_none((10, 4, 5, 6, None)) == True'
 'assert check_none((7, 8, 9, 11, 14)) == False'
 'assert check_none((1, 2, 3, 4, None)) == True']",,[],"def check_none(test_tup):
	""""""Write a function to check if the given tuple has any none value or not."""""""
745,Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","['assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]'
 'assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]'
 'assert divisible_by_digits(20,25)==[22, 24]']",,[],"def divisible_by_digits(startnum, endnum):
	""""""Write a function to find numbers within a given range where every number is divisible by every digit it contains."""""""
746,Write a function to find area of a sector.,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea","['assert sector_area(4,45)==6.285714285714286'
 'assert sector_area(9,45)==31.82142857142857'
 'assert sector_area(9,360)==None']",,[],"def sector_area(r,a):
	""""""Write a function to find area of a sector."""""""
747,Write a function to find the longest common subsequence for the given three string sequence.,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]","[""assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2""
 ""assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ""
 ""assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3""]",,[],"def lcs_of_three(X, Y, Z, m, n, o):
	""""""Write a function to find the longest common subsequence for the given three string sequence."""""""
748,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","['assert capital_words_spaces(""Python"") == \'Python\''
 'assert capital_words_spaces(""PythonProgrammingExamples"") == \'Python Programming Examples\''
 'assert capital_words_spaces(""GetReadyToBeCodingFreak"") == \'Get Ready To Be Coding Freak\'']",,[],"def capital_words_spaces(str1):
	""""""Write a function to put spaces between words starting with capital letters in a given string by using regex."""""""
749,Write a function to sort a given list of strings of numbers numerically.,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result","[""assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]""
 ""assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]""
 ""assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]""]",,[],"def sort_numeric_strings(nums_str):
	""""""Write a function to sort a given list of strings of numbers numerically."""""""
750,Write a function to add the given tuple to the given list.,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ","['assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]'
 'assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]'
 'assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]']",,[],"def add_tuple(test_list, test_tup):
	""""""Write a function to add the given tuple to the given list."""""""
751,Write a function to check if the given array represents min heap or not.,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child","['assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True'
 'assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True'
 'assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False']",,[],"def check_min_heap(arr, i):
	""""""Write a function to check if the given array represents min heap or not."""""""
752,Write a function to find the nth jacobsthal number.,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]","['assert jacobsthal_num(5) == 11' 'assert jacobsthal_num(2) == 1'
 'assert jacobsthal_num(4) == 5']",,[],"def jacobsthal_num(n):
	""""""Write a function to find the nth jacobsthal number."""""""
753,Write a function to find minimum k records from tuple list.,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ","[""assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]""
 ""assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]""
 ""assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]""]",,[],"def min_k(test_list, K):
	""""""Write a function to find minimum k records from tuple list."""""""
754,Write a function to find common index elements from three lists.,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result","['assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]'
 'assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]'
 'assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]']",,[],"def extract_index_list(l1, l2, l3):
	""""""Write a function to find common index elements from three lists."""""""
755,Write a function to find the second smallest number in a list.,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ","['assert second_smallest([1, 2, -8, -2, 0, -2])==-2'
 'assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5'
 'assert second_smallest([2,2])==None']",,[],"def second_smallest(numbers):
	""""""Write a function to find the second smallest number in a list."""""""
756,Write a function that matches a string that has an a followed by zero or one 'b'.,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_match_zero_one(""ac"")==(\'Found a match!\')'
 'assert text_match_zero_one(""dc"")==(\'Not matched!\')'
 'assert text_match_zero_one(""abbbba"")==(\'Found a match!\')']",,[],"def text_match_zero_one(text):
	""""""Write a function that matches a string that has an a followed by zero or one 'b'."""""""
757,Write a function to count the pairs of reverse strings in the given string list.,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)","['assert count_reverse_pairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""])== \'2\''
 'assert count_reverse_pairs([""geeks"", ""best"", ""for"", ""skeeg""]) == \'1\''
 'assert count_reverse_pairs([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) == \'2\' ']",,[],"def count_reverse_pairs(test_list):
	""""""Write a function to count the pairs of reverse strings in the given string list."""""""
758,Write a function to count number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result","['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}'
 ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}""
 'assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}']",,[],"def unique_sublists(list1):
	""""""Write a function to count number of unique lists within a list."""""""
759,Write a function to check a decimal with a precision of 2.,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)","[""assert is_decimal('123.11')==True"" ""assert is_decimal('e666.86')==False""
 ""assert is_decimal('3.124587')==False""]",,[],"def is_decimal(num):
	""""""Write a function to check a decimal with a precision of 2."""""""
760,Write a python function to check whether an array contains only one distinct element or not.,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')","[""assert unique_Element([1,1,1],3) == 'YES'""
 ""assert unique_Element([1,2,1,2],4) == 'NO'""
 ""assert unique_Element([1,2,3,4,5],5) == 'NO'""]",,[],"def unique_Element(arr,n):
	""""""Write a python function to check whether an array contains only one distinct element or not."""""""
761,Write a function to caluclate arc length of an angle.,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength","['assert arc_length(9,45)==3.5357142857142856'
 'assert arc_length(9,480)==None'
 'assert arc_length(5,270)==11.785714285714285']",,[],"def arc_length(d,a):
	""""""Write a function to caluclate arc length of an angle."""""""
762,Write a function to check whether the given month number contains 30 days or not.,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False","['assert check_monthnumber_number(6)==True'
 'assert check_monthnumber_number(2)==False'
 'assert check_monthnumber_number(12)==False']",,[],"def check_monthnumber_number(monthnum3):
	""""""Write a function to check whether the given month number contains 30 days or not."""""""
763,Write a python function to find the minimum difference between any two elements in a given array.,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ","['assert find_Min_Diff((1,5,3,19,18,25),6) == 1'
 'assert find_Min_Diff((4,3,2,6),4) == 1'
 'assert find_Min_Diff((30,5,20,9),4) == 4']",,[],"def find_Min_Diff(arr,n):
	""""""Write a python function to find the minimum difference between any two elements in a given array."""""""
764,Write a python function to count numeric values in a given string.,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr","[""assert number_ctr('program2bedone') == 1""
 ""assert number_ctr('3wonders') ==1"" ""assert number_ctr('123') == 3""]",,[],"def number_ctr(str):
	""""""Write a python function to count numeric values in a given string."""""""
765,Write a function to find nth polite number.,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ","['assert is_polite(7) == 11' 'assert is_polite(4) == 7'
 'assert is_polite(9) == 13']",,[],"def is_polite(n):
	""""""Write a function to find nth polite number."""""""
766,Write a function to iterate over all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp","['assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]'
 'assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]'
 'assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]']",,[],"def pair_wise(l1):
	""""""Write a function to iterate over all pairs of consecutive items in a given list."""""""
767,Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","['assert get_Pairs_Count([1,1,1,1],4,2) == 6'
 'assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3'
 'assert get_Pairs_Count([1,-2,3],3,1) == 1']",,[],"def get_Pairs_Count(arr,n,sum):
	""""""Write a python function to count the number of pairs whose sum is equal to ‘sum’."""""""
768,Write a python function to check for odd parity of a given number.,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False","['assert check_Odd_Parity(13) == True'
 'assert check_Odd_Parity(21) == True'
 'assert check_Odd_Parity(18) == False']",,[],"def check_Odd_Parity(x):
	""""""Write a python function to check for odd parity of a given number."""""""
769,Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ","['assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]'
 'assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]'
 'assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]']",,[],"def Diff(li1,li2):
	""""""Write a python function to get the difference between two lists."""""""
770,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","['assert odd_Num_Sum(2) == 82' 'assert odd_Num_Sum(3) == 707'
 'assert odd_Num_Sum(4) == 3108']",,[],"def odd_Num_Sum(n):
	""""""Write a python function to find the sum of fourth power of first n odd natural numbers."""""""
771,Write a function to check if the given expression is balanced or not.,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack","['assert check_expression(""{()}[{}]"") == True'
 'assert check_expression(""{()}[{]"") == False'
 'assert check_expression(""{()}[{}][]({})"") == True']",,[],"def check_expression(exp):
	""""""Write a function to check if the given expression is balanced or not."""""""
772,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","[""assert remove_length('The person is most value tet', 3) == 'person is most value'""
 ""assert remove_length('If you told me about this ok', 4) == 'If you me about ok'""
 ""assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'""]",,[],"def remove_length(test_str, K):
	""""""Write a function to remove all the words with k length in the given string."""""""
773,Write a function to find the occurrence and position of the substrings within a string.,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)","[""assert occurance_substring('python programming, python language','python')==('python', 0, 6)""
 ""assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)""
 ""assert occurance_substring('python programming,programming language','language')==('language', 31, 39)""]",,[],"def occurance_substring(text,pattern):
	""""""Write a function to find the occurrence and position of the substrings within a string."""""""
774,Write a function to check if the string is a valid email address or not using regex.,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ","['assert check_email(""ankitrai326@gmail.com"") == \'Valid Email\''
 'assert check_email(""my.ownsite@ourearth.org"") == \'Valid Email\''
 'assert check_email(""ankitaoie326.com"") == \'Invalid Email\'']",,[],"def check_email(email):
	""""""Write a function to check if the string is a valid email address or not using regex."""""""
775,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","['assert odd_position([2,1,4,3,6,7,6,3]) == True'
 'assert odd_position([4,1,2]) == True'
 'assert odd_position([1,2,3]) == False']",,[],"def odd_position(nums):
	""""""Write a python function to check whether every odd index contains odd numbers of a given list."""""""
776,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","[""assert count_vowels('bestinstareels') == 7""
 ""assert count_vowels('partofthejourneyistheend') == 12""
 ""assert count_vowels('amazonprime') == 5""]",,[],"def count_vowels(test_str):
	""""""Write a function to count those characters which have vowels as their neighbors in the given string."""""""
777,Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","['assert find_Sum([1,2,3,1,1,4,5,6],8) == 21'
 'assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71'
 'assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78']",,[],"def find_Sum(arr,n):
	""""""Write a python function to find the sum of non-repeated elements in a given array."""""""
778,Write a function to pack consecutive duplicates of a given list elements into sublists.,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]","['assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]'
 'assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]'
 ""assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]""]",,[],"def pack_consecutive_duplicates(list1):
	""""""Write a function to pack consecutive duplicates of a given list elements into sublists."""""""
779,Write a function to count the number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result","['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}'
 ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}""
 'assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}']",,[],"def unique_sublists(list1):
	""""""Write a function to count the number of unique lists within a list."""""""
780,Write a function to find the combinations of sums with tuples in the given tuple list.,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ","['assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]'
 'assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]'
 'assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]']",,[],"def find_combinations(test_list):
	""""""Write a function to find the combinations of sums with tuples in the given tuple list."""""""
781,Write a python function to check whether the count of divisors is even or odd.,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ","['assert count_Divisors(10) == ""Even""'
 'assert count_Divisors(100) == ""Odd""'
 'assert count_Divisors(125) == ""Even""']",,[],"def count_Divisors(n):
	""""""Write a python function to check whether the count of divisors is even or odd."""""""
782,Write a python function to find the sum of all odd length subarrays.,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum","['assert Odd_Length_Sum([1,2,4]) == 14'
 'assert Odd_Length_Sum([1,2,1,2]) == 15'
 'assert Odd_Length_Sum([1,7]) == 8']",,[],"def Odd_Length_Sum(arr):
	""""""Write a python function to find the sum of all odd length subarrays."""""""
783,Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","['assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)'
 'assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)'
 'assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)']",,[],"def rgb_to_hsv(r, g, b):
	""""""Write a function to convert rgb color to hsv color."""""""
784,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)","['assert mul_even_odd([1,3,5,7,4,1,6,8])==4'
 'assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2'
 'assert mul_even_odd([1,5,7,9,10])==10']",,[],"def mul_even_odd(list1):
	""""""Write a function to find the product of first even and odd number of a given list."""""""
785,Write a function to convert tuple string to integer tuple.,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ","['assert tuple_str_int(""(7, 8, 9)"") == (7, 8, 9)'
 'assert tuple_str_int(""(1, 2, 3)"") == (1, 2, 3)'
 'assert tuple_str_int(""(4, 5, 6)"") == (4, 5, 6)']",,[],"def tuple_str_int(test_str):
	""""""Write a function to convert tuple string to integer tuple."""""""
786,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i","['assert right_insertion([1,2,4,5],6)==4'
 'assert right_insertion([1,2,4,5],3)==2'
 'assert right_insertion([1,2,4,5],7)==4']",,[],"def right_insertion(a, x):
	""""""Write a function to locate the right insertion point for a specified value in sorted order."""""""
787,Write a function that matches a string that has an a followed by three 'b'.,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_match_three(""ac"")==(\'Not matched!\')'
 'assert text_match_three(""dc"")==(\'Not matched!\')'
 'assert text_match_three(""abbbba"")==(\'Found a match!\')']",,[],"def text_match_three(text):
	""""""Write a function that matches a string that has an a followed by three 'b'."""""""
788,Write a function to create a new tuple from the given string and list.,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ","['assert new_tuple([""WEB"", ""is""], ""best"") == (\'WEB\', \'is\', \'best\')'
 'assert new_tuple([""We"", ""are""], ""Developers"") == (\'We\', \'are\', \'Developers\')'
 'assert new_tuple([""Part"", ""is""], ""Wrong"") == (\'Part\', \'is\', \'Wrong\')']",,[],"def new_tuple(test_list, test_str):
	""""""Write a function to create a new tuple from the given string and list."""""""
789,Write a function to calculate the perimeter of a regular polygon.,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter","['assert perimeter_polygon(4,20)==80'
 'assert perimeter_polygon(10,15)==150'
 'assert perimeter_polygon(9,7)==63']",,[],"def perimeter_polygon(s,l):
	""""""Write a function to calculate the perimeter of a regular polygon."""""""
790,Write a python function to check whether every even index contains even numbers of a given list.,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","['assert even_position([3,2,1]) == False'
 'assert even_position([1,2,3]) == False'
 'assert even_position([2,1,4]) == True']",,[],"def even_position(nums):
	""""""Write a python function to check whether every even index contains even numbers of a given list."""""""
791,Write a function to remove the nested record from the given tuple.,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ","['assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)'
 'assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)'
 'assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)']",,[],"def remove_nested(test_tup):
	""""""Write a function to remove the nested record from the given tuple."""""""
792,Write a python function to count the number of lists in a given number of lists.,"def count_list(input_list): 
    return len(input_list)","['assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4'
 'assert count_list([[1,2],[2,3],[4,5]]) == 3'
 'assert count_list([[1,0],[2,0]]) == 2']",,[],"def count_list(input_list):
	""""""Write a python function to count the number of lists in a given number of lists."""""""
793,Write a python function to find the last position of an element in a sorted array.,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res","['assert last([1,2,3],1,3) == 0' 'assert last([1,1,1,2,3,4],1,6) == 2'
 'assert last([2,3,2,3,6,8,9],3,8) == 3']",,[],"def last(arr,x,n):
	""""""Write a python function to find the last position of an element in a sorted array."""""""
794,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_starta_endb(""aabbbb"")==(\'Found a match!\')'
 'assert text_starta_endb(""aabAbbbc"")==(\'Not matched!\')'
 'assert text_starta_endb(""accddbbjjj"")==(\'Not matched!\')']",,[],"def text_starta_endb(text):
	""""""Write a function that matches a string that has an 'a' followed by anything, ending in 'b'."""""""
795,Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items","[""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]""
 ""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]""
 ""assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]""]",,[],"def cheap_items(items,n):
	""""""Write a function to find the n - cheap price items from a given dataset using heap queue algorithm."""""""
796,Write function to find the sum of all items in the given dictionary.,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum","[""assert return_sum({'a': 100, 'b':200, 'c':300}) == 600""
 ""assert return_sum({'a': 25, 'b':18, 'c':45}) == 88""
 ""assert return_sum({'a': 36, 'b':39, 'c':49}) == 124""]",,[],"def return_sum(dict):
	""""""Write function to find the sum of all items in the given dictionary."""""""
797,Write a python function to find the sum of all odd natural numbers within the range l and r.,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)","['assert sum_in_Range(2,5) == 8' 'assert sum_in_Range(5,7) == 12'
 'assert sum_in_Range(7,13) == 40']",,[],"def sum_Odd(n):
	""""""Write a python function to find the sum of all odd natural numbers within the range l and r."""""""
798,Write a python function to find the sum of an array.,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ","['assert _sum([1, 2, 3]) == 6' 'assert _sum([15, 12, 13, 10]) == 50'
 'assert _sum([0, 1, 2]) == 3']",,[],"def _sum(arr):
	""""""Write a python function to find the sum of an array."""""""
799,Write a python function to left rotate the bits of a given number.,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ","['assert left_Rotate(16,2) == 64' 'assert left_Rotate(10,2) == 40'
 'assert left_Rotate(99,3) == 792']",,[],"def left_Rotate(n,d):
	""""""Write a python function to left rotate the bits of a given number."""""""
800,Write a function to remove all whitespaces from a string.,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))","[""assert remove_all_spaces('python  program')==('pythonprogram')""
 ""assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')""
 ""assert remove_all_spaces('python                     program')==('pythonprogram')""]",,[],"def remove_all_spaces(text):
	""""""Write a function to remove all whitespaces from a string."""""""
801,Write a python function to count the number of equal numbers from three given integers.,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))","['assert test_three_equal(1,1,1) == 3'
 'assert test_three_equal(-1,-2,-3) == 0'
 'assert test_three_equal(1,2,2) == 2']",,[],"def test_three_equal(x,y,z):
	""""""Write a python function to count the number of equal numbers from three given integers."""""""
802,Write a python function to count the number of rotations required to generate a sorted array.,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0","['assert count_Rotation([3,2,1],3) == 1'
 'assert count_Rotation([4,5,1,2,3],5) == 2'
 'assert count_Rotation([7,8,9,1,2,3],6) == 3']",,[],"def count_Rotation(arr,n):
	""""""Write a python function to count the number of rotations required to generate a sorted array."""""""
803,Write a python function to check whether the given number is a perfect square or not.,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False","['assert is_Perfect_Square(10) == False'
 'assert is_Perfect_Square(36) == True'
 'assert is_Perfect_Square(14) == False']",,[],"def is_Perfect_Square(n):
	""""""Write a python function to check whether the given number is a perfect square or not."""""""
804,Write a python function to check whether the product of numbers is even or not.,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False","['assert is_Product_Even([1,2,3],3) == True'
 'assert is_Product_Even([1,2,1,4],4) == True'
 'assert is_Product_Even([1,1],2) == False']",,[],"def is_Product_Even(arr,n):
	""""""Write a python function to check whether the product of numbers is even or not."""""""
805,Write a function to find the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)","['assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] '
 'assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] '
 'assert max_sum_list([[2,3,1]])==[2,3,1] ']",,[],"def max_sum_list(lists):
	""""""Write a function to find the list in a list of lists whose sum of elements is the highest."""""""
806,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","[""assert max_run_uppercase('GeMKSForGERksISBESt') == 5""
 ""assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6""
 ""assert max_run_uppercase('GooGLEFluTTER') == 4""]",,[],"def max_run_uppercase(test_str):
	""""""Write a function to find maximum run of uppercase characters in the given string."""""""
807,Write a python function to find the first odd number in a given list of numbers.,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd","['assert first_odd([1,3,5]) == 1' 'assert first_odd([2,4,1,3]) == 1'
 'assert first_odd ([8,9,1]) == 9']",,[],"def first_odd(nums):
	""""""Write a python function to find the first odd number in a given list of numbers."""""""
808,Write a function to check if the given tuples contain the k or not.,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ","['assert check_K((10, 4, 5, 6, 8), 6) == True'
 'assert check_K((1, 2, 3, 4, 5, 6), 7) == False'
 'assert check_K((7, 8, 9, 44, 11, 12), 11) == True']",,[],"def check_K(test_tup, K):
	""""""Write a function to check if the given tuples contain the k or not."""""""
809,Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ","['assert check_smaller((1, 2, 3), (2, 3, 4)) == False'
 'assert check_smaller((4, 5, 6), (3, 4, 5)) == True'
 'assert check_smaller((11, 12, 13), (10, 11, 12)) == True']",,[],"def check_smaller(test_tup1, test_tup2):
	""""""Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple."""""""
810,Write a function to iterate over elements repeating each as many times as its count.,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())","[""assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ""
 ""assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ""
 ""assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']""]",,[],"def count_variable(a,b,c,d):
	""""""Write a function to iterate over elements repeating each as many times as its count."""""""
811,Write a function to check if two lists of tuples are identical or not.,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ","['assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True'
 'assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False'
 'assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True']",,[],"def check_identical(test_list1, test_list2):
	""""""Write a function to check if two lists of tuples are identical or not."""""""
812,Write a function to abbreviate 'road' as 'rd.' in a given string.,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))","['assert road_rd(""ravipadu Road"")==(\'ravipadu Rd.\')'
 'assert road_rd(""palnadu Road"")==(\'palnadu Rd.\')'
 'assert road_rd(""eshwar enclave Road"")==(\'eshwar enclave Rd.\')']",,[],"def road_rd(street):
	""""""Write a function to abbreviate 'road' as 'rd.' in a given string."""""""
813,Write a function to find length of the string.,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count","[""assert string_length('python')==6"" ""assert string_length('program')==7""
 ""assert string_length('language')==8""]",,[],"def string_length(str1):
	""""""Write a function to find length of the string."""""""
814,Write a function to find the area of a rombus.,"def rombus_area(p,q):
  area=(p*q)/2
  return area","['assert rombus_area(10,20)==100' 'assert rombus_area(10,5)==25'
 'assert rombus_area(4,2)==4']",,[],"def rombus_area(p,q):
	""""""Write a function to find the area of a rombus."""""""
815,"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr","['assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]'
 'assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]'
 'assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]']",,[],"def sort_by_dnf(arr, n):
	""""""Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2."""""""
816,Write a function to clear the values of the given tuples.,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ","['assert clear_tuple((1, 5, 3, 6, 8)) == ()'
 'assert clear_tuple((2, 1, 4 ,5 ,6)) == ()'
 'assert clear_tuple((3, 2, 5, 6, 8)) == ()']",,[],"def clear_tuple(test_tup):
	""""""Write a function to clear the values of the given tuples."""""""
817,Write a function to find numbers divisible by m or n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result","['assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]'
 'assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]'
 'assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]']",,[],"def div_of_nums(nums,m,n):
	""""""Write a function to find numbers divisible by m or n from a list of numbers using lambda function."""""""
818,Write a python function to count lower case letters in a given string.,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr","[""assert lower_ctr('abc') == 3"" ""assert lower_ctr('string') == 6""
 ""assert lower_ctr('Python') == 5""]",,[],"def lower_ctr(str):
	""""""Write a python function to count lower case letters in a given string."""""""
819,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","['assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])'
 'assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])'
 'assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])']",,[],"def count_duplic(lists):
	""""""Write a function to count the frequency of consecutive duplicate elements in a given list of numbers."""""""
820,Write a function to check whether the given month number contains 28 days or not.,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False","['assert check_monthnum_number(2)==True'
 'assert check_monthnum_number(1)==False'
 'assert check_monthnum_number(3)==False']",,[],"def check_monthnum_number(monthnum1):
	""""""Write a function to check whether the given month number contains 28 days or not."""""""
821,Write a function to merge two dictionaries into a single expression.,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict","['assert merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\'}'
 'assert merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'O\': \'Orange\', \'P\': \'Pink\', \'B\': \'Black\', \'W\': \'White\', \'R\': \'Red\'}'
 'assert merge_dictionaries({ ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'W\': \'White\', \'O\': \'Orange\', \'G\': \'Green\', \'B\': \'Black\'}']",,[],"def merge_dictionaries(dict1,dict2):
	""""""Write a function to merge two dictionaries into a single expression."""""""
822,Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","['assert pass_validity(""password"")==False'
 'assert pass_validity(""Password@10"")==True'
 'assert pass_validity(""password@10"")==False']",,[],"def pass_validity(p):
	""""""Write a function to return true if the password is valid."""""""
823,Write a function to check if the given string starts with a substring using regex.,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")","['assert check_substring(""dreams for dreams makes life fun"", ""makes"") == \'string doesnt start with the given substring\''
 'assert check_substring(""Hi there how are you Hi alex"", ""Hi"") == \'string starts with the given substring\''
 'assert check_substring(""Its been a long day"", ""been"") == \'string doesnt start with the given substring\'']",,[],"def check_substring(string, sample):
	""""""Write a function to check if the given string starts with a substring using regex."""""""
824,Write a python function to remove even numbers from a given list.,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l","['assert remove_even([1,3,5,2]) == [1,3,5]'
 'assert remove_even([5,6,7]) == [5,7]'
 'assert remove_even([1,2,3,4]) == [1,3]']",,[],"def remove_even(l):
	""""""Write a python function to remove even numbers from a given list."""""""
825,Write a python function to access multiple elements of specified index from a given list.,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result","['assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]'
 'assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]'
 'assert access_elements([1,0,2,3],[0,1]) == [1,0]']",,[],"def access_elements(nums, list_index):
	""""""Write a python function to access multiple elements of specified index from a given list."""""""
826,Write a python function to find the type of triangle from the given sides.,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ","['assert check_Type_Of_Triangle(1,2,3) == ""Obtuse-angled Triangle""'
 'assert check_Type_Of_Triangle(2,2,2) == ""Acute-angled Triangle""'
 'assert check_Type_Of_Triangle(1,0,1) == ""Right-angled Triangle""']",,[],"def check_Type_Of_Triangle(a,b,c):
	""""""Write a python function to find the type of triangle from the given sides."""""""
827,Write a function to sum a specific column of a list in a given list of lists.,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result","['assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12'
 'assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15'
 'assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9']",,[],"def sum_column(list1, C):
	""""""Write a function to sum a specific column of a list in a given list of lists."""""""
828,"Write a function to count alphabets,digits and special charactes in a given string.","def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ","['assert count_alpha_dig_spl(""abc!@#123"")==(3,3,3)'
 'assert count_alpha_dig_spl(""dgsuy@#$%&1255"")==(5,4,5)'
 'assert count_alpha_dig_spl(""fjdsif627348#%$^&"")==(6,6,5)']",,[],"def count_alpha_dig_spl(string):
	""""""Write a function to count alphabets,digits and special charactes in a given string."""""""
829,Write a function to find out the second most repeated (or frequent) string in the given sequence.,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ","[""assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'""
 ""assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'""
 ""assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'""]",,[],"def second_frequent(input):
	""""""Write a function to find out the second most repeated (or frequent) string in the given sequence."""""""
830,Write a function to round up a number to specific digits.,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)","['assert round_up(123.01247,0)==124' 'assert round_up(123.01247,1)==123.1'
 'assert round_up(123.01247,2)==123.02']",,[],"def round_up(a, digits):
	""""""Write a function to round up a number to specific digits."""""""
831,Write a python function to count equal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ","['assert count_Pairs([1,1,1,1],4) == 6'
 'assert count_Pairs([1,5,1],3) == 1'
 'assert count_Pairs([3,2,1,7,8,9],6) == 0']",,[],"def count_Pairs(arr,n):
	""""""Write a python function to count equal element pairs from the given array."""""""
832,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","[""assert extract_max('100klh564abc365bg') == 564""
 ""assert extract_max('hello300how546mer231') == 546""
 ""assert extract_max('its233beenalong343journey234') == 343""]",,[],"def extract_max(input):
	""""""Write a function to extract the maximum numeric value from a string by using regex."""""""
833,Write a function to get dictionary keys as a list.,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list","[""assert get_key({1:'python',2:'java'})==[1,2]""
 ""assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]""
 ""assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]""]",,[],"def get_key(dict):
	""""""Write a function to get dictionary keys as a list."""""""
834,Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix","['assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] '
 'assert generate_matrix(2)==[[1,2],[4,3]]'
 'assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]']",,[],"def generate_matrix(n):
	""""""Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order."""""""
835,Write a python function to find the slope of a line.,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ","['assert slope(4,2,2,5) == -1.5' 'assert slope(2,4,4,6) == 1'
 'assert slope(1,2,4,2) == 0']",,[],"def slope(x1,y1,x2,y2):
	""""""Write a python function to find the slope of a line."""""""
836,Write a function to find length of the subarray having maximum sum.,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)","['assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5'
 'assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2'
 'assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3']",,[],"def max_sub_array_sum(a,size):
	""""""Write a function to find length of the subarray having maximum sum."""""""
837,Write a python function to find the cube sum of first n odd natural numbers.,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum","['assert cube_Sum(2) == 28' 'assert cube_Sum(3) == 153'
 'assert cube_Sum(4) == 496']",,[],"def cube_Sum(n):
	""""""Write a python function to find the cube sum of first n odd natural numbers."""""""
838,Write a python function to find minimum number swaps required to make two binary strings equal.,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ","['assert min_Swaps(""0011"",""1111"") == 1'
 'assert min_Swaps(""00011"",""01001"") == 2'
 'assert min_Swaps(""111"",""111"") == 0']",,[],"def min_Swaps(s1,s2):
	""""""Write a python function to find minimum number swaps required to make two binary strings equal."""""""
839,Write a function to sort the tuples alphabetically by the first item of each tuple.,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup","['assert sort_tuple([(""Amana"", 28), (""Zenat"", 30), (""Abhishek"", 29),(""Nikhil"", 21), (""B"", ""C"")]) == [(\'Abhishek\', 29), (\'Amana\', 28), (\'B\', \'C\'), (\'Nikhil\', 21), (\'Zenat\', 30)]'
 'assert sort_tuple([(""aaaa"", 28), (""aa"", 30), (""bab"", 29), (""bb"", 21), (""csa"", ""C"")]) == [(\'aa\', 30), (\'aaaa\', 28), (\'bab\', 29), (\'bb\', 21), (\'csa\', \'C\')]'
 'assert sort_tuple([(""Sarala"", 28), (""Ayesha"", 30), (""Suman"", 29),(""Sai"", 21), (""G"", ""H"")]) == [(\'Ayesha\', 30), (\'G\', \'H\'), (\'Sai\', 21), (\'Sarala\', 28), (\'Suman\', 29)]']",,[],"def sort_tuple(tup):
	""""""Write a function to sort the tuples alphabetically by the first item of each tuple."""""""
840,Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ","['assert Check_Solution(2,0,-1) == ""Yes""'
 'assert Check_Solution(1,-5,6) == ""No""'
 'assert Check_Solution(2,0,2) == ""Yes""']",,[],"def Check_Solution(a,b,c):
	""""""Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not."""""""
841,Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","['assert get_inv_count([1, 20, 6, 4, 5], 5) == 5'
 'assert get_inv_count([8, 4, 2, 1], 4) == 6'
 'assert get_inv_count([3, 1, 2], 3) == 2']",,[],"def get_inv_count(arr, n):
	""""""Write a function to count the number of inversions in the given array."""""""
842,Write a function to find the number which occurs for odd number of times in the given array.,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1","['assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5'
 'assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3'
 'assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5']",,[],"def get_odd_occurence(arr, arr_size):
	""""""Write a function to find the number which occurs for odd number of times in the given array."""""""
843,Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]","['assert nth_super_ugly_number(12,[2,7,13,19])==32'
 'assert nth_super_ugly_number(10,[2,7,13,19])==26'
 'assert nth_super_ugly_number(100,[2,7,13,19])==5408']",,[],"def nth_super_ugly_number(n, primes):
	""""""Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm."""""""
844,Write a python function to find the kth element in an array containing odd elements first and then even elements.,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ","['assert get_Number(8,5) == 2' 'assert get_Number(7,2) == 3'
 'assert get_Number(5,2) == 3']",,[],"def get_Number(n, k):
	""""""Write a python function to find the kth element in an array containing odd elements first and then even elements."""""""
845,Write a python function to count the number of digits in factorial of a given number.,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ","['assert find_Digits(7) == 4' 'assert find_Digits(5) == 3'
 'assert find_Digits(4) == 2']",,[],"def find_Digits(n):
	""""""Write a python function to count the number of digits in factorial of a given number."""""""
846,Write a function to find the minimum number of platforms required for a railway/bus station.,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result","['assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3'
 'assert find_platform([100,200,300,400],[700,800,900,1000],4)==4'
 'assert find_platform([5,6,7,8],[4,3,2,1],4)==1']",,[],"def find_platform(arr, dep, n):
	""""""Write a function to find the minimum number of platforms required for a railway/bus station."""""""
847,Write a python function to copy a list from a singleton tuple.,"def lcopy(xs):
  return xs[:]
","['assert lcopy([1, 2, 3]) == [1, 2, 3]'
 'assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]'
 'assert lcopy([4, 5, 6]) == [4, 5, 6]\n']",,[],"def lcopy(xs):
	""""""Write a python function to copy a list from a singleton tuple."""""""
848,Write a function to find the area of a trapezium.,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area","['assert area_trapezium(6,9,4)==30' 'assert area_trapezium(10,20,30)==450'
 'assert area_trapezium(15,25,35)==700']",,[],"def area_trapezium(base1,base2,height):
	""""""Write a function to find the area of a trapezium."""""""
849,Write a python function to find sum of all prime divisors of a given number.,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ",['assert Sum(60) == 10' 'assert Sum(39) == 16' 'assert Sum(40) == 7'],,[],"def Sum(N):
	""""""Write a python function to find sum of all prime divisors of a given number."""""""
850,Write a function to check if a triangle of positive area is possible with the given angles.,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False","['assert is_triangleexists(50,60,70)==True'
 'assert is_triangleexists(90,45,45)==True'
 'assert is_triangleexists(150,30,70)==False']",,[],"def is_triangleexists(a,b,c):
	""""""Write a function to check if a triangle of positive area is possible with the given angles."""""""
851,Write a python function to find sum of inverse of divisors.,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ","['assert Sum_of_Inverse_Divisors(6,12) == 2'
 'assert Sum_of_Inverse_Divisors(9,13) == 1.44'
 'assert Sum_of_Inverse_Divisors(1,4) == 4']",,[],"def Sum_of_Inverse_Divisors(N,Sum):
	""""""Write a python function to find sum of inverse of divisors."""""""
852,Write a python function to remove negative numbers from a list.,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list","['assert remove_negs([1,-2,3,-4]) == [1,3]'
 'assert remove_negs([1,2,3,-4]) == [1,2,3]'
 'assert remove_negs([4,5,-6,7,-8]) == [4,5,7]']",,[],"def remove_negs(num_list):
	""""""Write a python function to remove negative numbers from a list."""""""
853,Write a python function to find sum of odd factors of a number.,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ","['assert sum_of_odd_Factors(30) == 24'
 'assert sum_of_odd_Factors(18) == 13' 'assert sum_of_odd_Factors(2) == 1']",,[],"def sum_of_odd_Factors(n):
	""""""Write a python function to find sum of odd factors of a number."""""""
854,Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap","['assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]'
 'assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]'
 'assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]']",,[],"def raw_heap(rawheap):
	""""""Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm."""""""
855,Write a python function to check for even parity of a given number.,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False","['assert check_Even_Parity(10) == True'
 'assert check_Even_Parity(11) == False'
 'assert check_Even_Parity(18) == True']",,[],"def check_Even_Parity(x):
	""""""Write a python function to check for even parity of a given number."""""""
856,Write a python function to find minimum adjacent swaps required to sort binary array.,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ","['assert find_Min_Swaps([1,0,1,0],4) == 3'
 'assert find_Min_Swaps([0,1,0],3) == 1'
 'assert find_Min_Swaps([0,0,1,1,0],5) == 2']",,[],"def find_Min_Swaps(arr,n):
	""""""Write a python function to find minimum adjacent swaps required to sort binary array."""""""
857,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","[""assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]""
 ""assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]""
 ""assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]""]",,[],"def listify_list(list1):
	""""""Write a function to list out the list of given strings individually using map function."""""""
858,Write a function to count number of lists in a given list of lists and square the count.,"def count_list(input_list): 
    return (len(input_list))**2","['assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25'
 'assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16'
 'assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9']",,[],"def count_list(input_list):
	""""""Write a function to count number of lists in a given list of lists and square the count."""""""
859,Write a function to generate all sublists of a given list.,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs","['assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]'
 ""assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]""
 'assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]']",,[],"def sub_lists(my_list):
	""""""Write a function to generate all sublists of a given list."""""""
860,Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ","['assert check_alphanumeric(""dawood@"") == \'Discard\''
 'assert check_alphanumeric(""skdmsam326"") == \'Accept\''
 'assert check_alphanumeric(""cooltricks@"") == \'Discard\'']",,[],"def check_alphanumeric(string):
	""""""Write a function to check whether the given string is ending with only alphanumeric characters or not using regex."""""""
861,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","['assert anagram_lambda([""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""],""abcd"")==[\'bcda\', \'cbda\', \'adcb\']'
 'assert anagram_lambda([""recitals"","" python""], ""articles"" )==[""recitals""]'
 'assert anagram_lambda(["" keep"","" abcdef"","" xyz""],"" peek"")==["" keep""]']",,[],"def anagram_lambda(texts,str):
	""""""Write a function to find all anagrams of a string in a given list of strings using lambda function."""""""
862,Write a function to find the occurrences of n most common words in a given text.,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)","['assert n_common_words(""python is a programming language"",1)==[(\'python\', 1)]'
 'assert n_common_words(""python is a programming language"",1)==[(\'python\', 1)]'
 'assert n_common_words(""python is a programming language"",5)==[(\'python\', 1),(\'is\', 1), (\'a\', 1), (\'programming\', 1), (\'language\', 1)]']",,[],"def n_common_words(text,n):
	""""""Write a function to find the occurrences of n most common words in a given text."""""""
863,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","['assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3'
 'assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4'
 'assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5']",,[],"def find_longest_conseq_subseq(arr, n):
	""""""Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers."""""""
864,Write a function to find palindromes in a given list of strings using lambda function.,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result","['assert palindrome_lambda([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==[\'php\', \'aaa\']'
 'assert palindrome_lambda([""abcd"", ""Python"", ""abba"", ""aba""])==[\'abba\', \'aba\']'
 'assert palindrome_lambda([""abcd"", ""abbccbba"", ""abba"", ""aba""])==[\'abbccbba\', \'abba\', \'aba\']']",,[],"def palindrome_lambda(texts):
	""""""Write a function to find palindromes in a given list of strings using lambda function."""""""
865,Write a function to print n-times a list using map function.,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)","['assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]'
 'assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]'
 'assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]']",,[],"def ntimes_list(nums,n):
	""""""Write a function to print n-times a list using map function."""""""
866,Write a function to check whether the given month name contains 31 days or not.,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False","['assert check_monthnumb(""February"")==False'
 'assert check_monthnumb(""January"")==True'
 'assert check_monthnumb(""March"")==True']",,[],"def check_monthnumb(monthname2):
	""""""Write a function to check whether the given month name contains 31 days or not."""""""
867,Write a python function to add a minimum number such that the sum of array becomes even.,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2","['assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1'
 'assert min_Num([1,2,3,4,5,6,7,8],8) == 2'
 'assert min_Num([1,2,3],3) == 2']",,[],"def min_Num(arr,n):
	""""""Write a python function to add a minimum number such that the sum of array becomes even."""""""
868,Write a python function to find the length of the last word in a given string.,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ","['assert length_Of_Last_Word(""python language"") == 8'
 'assert length_Of_Last_Word(""PHP"") == 3'
 'assert length_Of_Last_Word("""") == 0']",,[],"def length_Of_Last_Word(a):
	""""""Write a python function to find the length of the last word in a given string."""""""
869,"Write a function to remove sublists from a given list of lists, which are outside a given range.","def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result","['assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]'
 'assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]'
 'assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]']",,[],"def remove_list_range(list1, leftrange, rigthrange):
	""""""Write a function to remove sublists from a given list of lists, which are outside a given range."""""""
870,Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)","['assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48'
 'assert sum_positivenum([10,15,-14,13,-18,12,-20])==50'
 'assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522']",,[],"def sum_positivenum(nums):
	""""""Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function."""""""
871,Write a python function to check whether the given strings are rotations of each other or not.,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False","['assert are_Rotations(""abc"",""cba"") == False'
 'assert are_Rotations(""abcd"",""cdba"") == False'
 'assert are_Rotations(""abacd"",""cdaba"") == True']",,[],"def are_Rotations(string1,string2):
	""""""Write a python function to check whether the given strings are rotations of each other or not."""""""
872,Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","['assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True'
 'assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True'
 'assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False']",,[],"def check_subset(list1,list2):
	""""""Write a function to check if a nested list is a subset of another nested list."""""""
873,Write a function to solve the fibonacci sequence using recursion.,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))","['assert fibonacci(7) == 13' 'assert fibonacci(8) == 21'
 'assert fibonacci(9) == 34']",,[],"def fibonacci(n):
	""""""Write a function to solve the fibonacci sequence using recursion."""""""
874,Write a python function to check if the string is a concatenation of another string.,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True","['assert check_Concat(""abcabcabc"",""abc"") == True'
 'assert check_Concat(""abcab"",""abc"") == False'
 'assert check_Concat(""aba"",""ab"") == False']",,[],"def check_Concat(str1,str2):
	""""""Write a python function to check if the string is a concatenation of another string."""""""
875,Write a function to find the minimum difference in the tuple pairs of given tuples.,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ","['assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1'
 'assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2'
 'assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6']",,[],"def min_difference(test_list):
	""""""Write a function to find the minimum difference in the tuple pairs of given tuples."""""""
876,Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","['assert lcm(4,6) == 12' 'assert lcm(15,17) == 255' 'assert lcm(2,6) == 6']",,[],"def lcm(x, y):
	""""""Write a python function to find lcm of two positive integers."""""""
877,Write a python function to sort the given string.,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ","['assert sort_String(""cba"") == ""abc""'
 'assert sort_String(""data"") == ""aadt""'
 'assert sort_String(""zxy"") == ""xyz""']",,[],"def sort_String(str):
	""""""Write a python function to sort the given string."""""""
878,Write a function to check if the given tuple contains only k elements.,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ","['assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True'
 'assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True'
 'assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False']",,[],"def check_tuples(test_tuple, K):
	""""""Write a function to check if the given tuple contains only k elements."""""""
879,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","['assert text_match(""aabbbbd"") == \'Not matched!\''
 'assert text_match(""aabAbbbc"") == \'Not matched!\''
 'assert text_match(""accddbbjjjb"") == \'Found a match!\'']",,[],"def text_match(text):
	""""""Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex."""""""
880,Write a python function to find number of solutions in quadratic equation.,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ","['assert Check_Solution(2,5,2) == ""2 solutions""'
 'assert Check_Solution(1,1,1) == ""No solutions""'
 'assert Check_Solution(1,2,1) == ""1 solution""']",,[],"def Check_Solution(a,b,c):
	""""""Write a python function to find number of solutions in quadratic equation."""""""
881,Write a function to find the sum of first even and odd number of a given list.,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)","['assert sum_even_odd([1,3,5,7,4,1,6,8])==5'
 'assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3'
 'assert sum_even_odd([1,5,7,9,10])==11']",,[],"def sum_even_odd(list1):
	""""""Write a function to find the sum of first even and odd number of a given list."""""""
882,Write a function to caluclate perimeter of a parallelogram.,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter","['assert parallelogram_perimeter(10,20)==400'
 'assert parallelogram_perimeter(15,20)==600'
 'assert parallelogram_perimeter(8,9)==144']",,[],"def parallelogram_perimeter(b,h):
	""""""Write a function to caluclate perimeter of a parallelogram."""""""
883,Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result","['assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]'
 'assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]'
 'assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]']",,[],"def div_of_nums(nums,m,n):
	""""""Write a function to find numbers divisible by m and n from a list of numbers using lambda function."""""""
884,Write a python function to check whether all the bits are within a given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False","['assert all_Bits_Set_In_The_Given_Range(10,2,1) == True '
 'assert all_Bits_Set_In_The_Given_Range(5,2,4) == False'
 'assert all_Bits_Set_In_The_Given_Range(22,2,3) == True ']",,[],"def all_Bits_Set_In_The_Given_Range(n,l,r):
	""""""Write a python function to check whether all the bits are within a given range or not."""""""
885,Write a python function to check whether the two given strings are isomorphic to each other or not.,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False","['assert is_Isomorphic(""paper"",""title"") == True'
 'assert is_Isomorphic(""ab"",""ba"") == True'
 'assert is_Isomorphic(""ab"",""aa"") == False']",,[],"def is_Isomorphic(str1,str2):
	""""""Write a python function to check whether the two given strings are isomorphic to each other or not."""""""
886,Write a function to add all the numbers in a list and divide it with the length of the list.,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ","['assert sum_num((8, 2, 3, 0, 7))==4.0'
 'assert sum_num((-10,-20,-30))==-20.0'
 'assert sum_num((19,15,18))==17.333333333333332']",,[],"def sum_num(numbers):
	""""""Write a function to add all the numbers in a list and divide it with the length of the list."""""""
887,Write a python function to check whether the given number is odd or not using bitwise operator.,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ","['assert is_odd(5) == True' 'assert is_odd(6) == False'
 'assert is_odd(7) == True']",,[],"def is_odd(n):
	""""""Write a python function to check whether the given number is odd or not using bitwise operator."""""""
888,Write a function to substract the elements of the given nested tuples.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","['assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))'
 'assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))'
 'assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))']",,[],"def substract_elements(test_tup1, test_tup2):
	""""""Write a function to substract the elements of the given nested tuples."""""""
889,Write a function to reverse each list in a given list of lists.,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ","['assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]'
 'assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]'
 'assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]']",,[],"def reverse_list_lists(lists):
	""""""Write a function to reverse each list in a given list of lists."""""""
890,Write a python function to find the index of an extra element present in one sorted array.,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ","['assert find_Extra([1,2,3,4],[1,2,3],3) == 3'
 'assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4'
 'assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5']",,[],"def find_Extra(arr1,arr2,n):
	""""""Write a python function to find the index of an extra element present in one sorted array."""""""
891,Write a python function to check whether the given two numbers have same number of digits or not.,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ","['assert same_Length(12,1) == False' 'assert same_Length(2,2) == True'
 'assert same_Length(10,20) == True']",,[],"def same_Length(A,B):
	""""""Write a python function to check whether the given two numbers have same number of digits or not."""""""
892,Write a function to remove multiple spaces in a string.,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))","[""assert remove_spaces('python  program')==('python program')""
 ""assert remove_spaces('python   programming    language')==('python programming language')""
 ""assert remove_spaces('python                     program')==('python program')""]",,[],"def remove_spaces(text):
	""""""Write a function to remove multiple spaces in a string."""""""
893,Write a python function to get the last element of each sublist.,"def Extract(lst): 
    return [item[-1] for item in lst] ","['assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]'
 ""assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']""
 'assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]']",,[],"def Extract(lst):
	""""""Write a python function to get the last element of each sublist."""""""
894,Write a function to convert the given string of float type into tuple.,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ","['assert float_to_tuple(""1.2, 1.3, 2.3, 2.4, 6.5"") == (1.2, 1.3, 2.3, 2.4, 6.5)'
 'assert float_to_tuple(""2.3, 2.4, 5.6, 5.4, 8.9"") == (2.3, 2.4, 5.6, 5.4, 8.9)'
 'assert float_to_tuple(""0.3, 0.5, 7.8, 9.4"") == (0.3, 0.5, 7.8, 9.4)']",,[],"def float_to_tuple(test_str):
	""""""Write a function to convert the given string of float type into tuple."""""""
895,Write a function to find the maximum sum of subsequences of given array with no adjacent elements.,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]","['assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26'
 'assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28'
 'assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44']",,[],"def max_sum_subseq(A):
	""""""Write a function to find the maximum sum of subsequences of given array with no adjacent elements."""""""
896,Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)","['assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] '
 'assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] '
 'assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ']",,[],"def last(n):
	""""""Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples."""""""
897,Write a python function to check whether the word is present in a given sentence or not.,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False","['assert is_Word_Present(""machine learning"",""machine"") == True'
 'assert is_Word_Present(""easy"",""fun"") == False'
 'assert is_Word_Present(""python language"",""code"") == False']",,[],"def is_Word_Present(sentence,word):
	""""""Write a python function to check whether the word is present in a given sentence or not."""""""
898,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","['assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]'
 'assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]'
 'assert extract_elements([0,0,0,0,0],5)==[0]']",,[],"def extract_elements(numbers, n):
	""""""Write a function to extract specified number of elements from a given list, which follow each other continuously."""""""
899,Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True","['assert check([3,2,1,2,3,4],6) == True'
 'assert check([2,1,4,5,1],5) == True'
 'assert check([1,2,2,1,2,3],6) == True']",,[],"def check(arr,n):
	""""""Write a python function to check whether an array can be sorted or not by picking only the corner elements."""""""
900,Write a function where a string will start with a specific number.,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False","[""assert match_num('5-2345861')==True""
 ""assert match_num('6-2345861')==False"" ""assert match_num('78910')==False""]",,[],"def match_num(string):
	""""""Write a function where a string will start with a specific number."""""""
901,Write a function to find the smallest multiple of the first n numbers.,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i","['assert smallest_multiple(13)==360360' 'assert smallest_multiple(2)==2'
 'assert smallest_multiple(1)==1']",,[],"def smallest_multiple(n):
	""""""Write a function to find the smallest multiple of the first n numbers."""""""
902,Write a function to combine two dictionaries by adding values for common keys.,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict","[""assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ""
 ""assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ""
 ""assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})""]",,[],"def add_dict(d1,d2):
	""""""Write a function to combine two dictionaries by adding values for common keys."""""""
903,Write a python function to count the total unset bits from 1 to n.,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ","['assert count_Unset_Bits(2) == 1' 'assert count_Unset_Bits(5) == 4'
 'assert count_Unset_Bits(14) == 17']",,[],"def count_Unset_Bits(n):
	""""""Write a python function to count the total unset bits from 1 to n."""""""
904,Write a function to return true if the given number is even else return false.,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False","['assert even_num(13.5)==False' 'assert even_num(0)==True'
 'assert even_num(-9)==False']",,[],"def even_num(x):
	""""""Write a function to return true if the given number is even else return false."""""""
905,Write a python function to find the sum of squares of binomial co-efficients.,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ","['assert sum_of_square(4) == 70' 'assert sum_of_square(5) == 252'
 'assert sum_of_square(2) == 6']",,[],"def factorial(start,end):
	""""""Write a python function to find the sum of squares of binomial co-efficients."""""""
906,"Write a function to extract year, month and date from a url by using regex.","import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)","['assert extract_date(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"") == [(\'2016\', \'09\', \'02\')]'
 'assert extract_date(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"") == [(\'2020\', \'11\', \'03\')]'
 'assert extract_date(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"") == [(\'2020\', \'12\', \'29\')]']",,[],"def extract_date(url):
	""""""Write a function to extract year, month and date from a url by using regex."""""""
907,Write a function to print the first n lucky numbers.,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]","['assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] '
 'assert lucky_num(5)==[1, 3, 7, 9, 13]'
 'assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]']",,[],"def lucky_num(n):
	""""""Write a function to print the first n lucky numbers."""""""
908,Write a function to find the fixed point in the given array.,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1","['assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3'
 'assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1'
 'assert find_fixed_point([0, 2, 5, 8, 17],5) == 0']",,[],"def find_fixed_point(arr, n):
	""""""Write a function to find the fixed point in the given array."""""""
909,Write a function to find the previous palindrome of a specified number.,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x","['assert previous_palindrome(99)==88'
 'assert previous_palindrome(1221)==1111'
 'assert previous_palindrome(120)==111']",,[],"def previous_palindrome(num):
	""""""Write a function to find the previous palindrome of a specified number."""""""
910,Write a function to validate a gregorian date.,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False","['assert check_date(11,11,2002)==True'
 'assert check_date(13,11,2002)==False'
 ""assert check_date('11','11','2002')==True""]",,[],"def check_date(m, d, y):
	""""""Write a function to validate a gregorian date."""""""
911,Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])","['assert maximum_product( [12, 74, 9, 50, 61, 41])==225700'
 'assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375'
 'assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520']",,[],"def maximum_product(nums):
	""""""Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm."""""""
912,"Write a function to find ln, m lobb number.","def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))","['assert int(lobb_num(5, 3)) == 35' 'assert int(lobb_num(3, 2)) == 5'
 'assert int(lobb_num(4, 2)) == 20']",,[],"def binomial_coeff(n, k):
	""""""Write a function to find ln, m lobb number."""""""
913,Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","[""assert end_num('abcdef')==False"" ""assert end_num('abcdef7')==True""
 ""assert end_num('abc')==False""]",,[],"def end_num(string):
	""""""Write a function to check for a number at the end of a string."""""""
914,Write a python function to check whether the given string is made up of two alternating characters or not.,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True","['assert is_Two_Alter(""abab"") == True'
 'assert is_Two_Alter(""aaaa"") == False'
 'assert is_Two_Alter(""xyz"") == False']",,[],"def is_Two_Alter(s):
	""""""Write a python function to check whether the given string is made up of two alternating characters or not."""""""
915,Write a function to rearrange positive and negative numbers in a given array using lambda function.,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ","['assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]'
 'assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]'
 'assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]']",,[],"def rearrange_numbs(array_nums):
	""""""Write a function to rearrange positive and negative numbers in a given array using lambda function."""""""
916,Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False","['assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)'
 'assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)'
 'assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)']",,[],"def find_triplet_array(A, arr_size, sum):
	""""""Write a function to find if there is a triplet in the array whose sum is equal to a given value."""""""
917,Write a function to find the sequences of one upper case letter followed by lower case letters.,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')","['assert text_uppercase_lowercase(""AaBbGg"")==(\'Found a match!\')'
 'assert text_uppercase_lowercase(""aA"")==(\'Not matched!\')'
 'assert text_uppercase_lowercase(""PYTHON"")==(\'Not matched!\')']",,[],"def text_uppercase_lowercase(text):
	""""""Write a function to find the sequences of one upper case letter followed by lower case letters."""""""
918,Write a function to count coin change.,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ","['assert coin_change([1, 2, 3],3,4)==4'
 'assert coin_change([4,5,6,7,8,9],6,9)==2'
 'assert coin_change([4,5,6,7,8,9],6,4)==1']",,[],"def coin_change(S, m, n):
	""""""Write a function to count coin change."""""""
919,Write a python function to multiply all items in the list.,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot","['assert multiply_list([1,-2,3]) == -6'
 'assert multiply_list([1,2,3,4]) == 24'
 'assert multiply_list([3,1,2,3]) == 18']",,[],"def multiply_list(items):
	""""""Write a python function to multiply all items in the list."""""""
920,Write a function to remove all tuples with all none values in the given tuple list.,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ","[""assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'""
 ""assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'""
 ""assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'""]",,[],"def remove_tuple(test_list):
	""""""Write a function to remove all tuples with all none values in the given tuple list."""""""
921,Write a function to perform chunking of tuples each of size n.,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ","['assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]'
 'assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]'
 'assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]']",,[],"def chunk_tuples(test_tup, N):
	""""""Write a function to perform chunking of tuples each of size n."""""""
922,Write a function to find a pair with the highest product from a given array of integers.,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ","['assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)'
 'assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)'
 'assert max_product([1, 3, 5, 6, 8, 9])==(8,9)']",,[],"def max_product(arr):
	""""""Write a function to find a pair with the highest product from a given array of integers."""""""
923,Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))","['assert super_seq(""AGGTAB"", ""GXTXAYB"", 6, 7) == 9'
 'assert super_seq(""feek"", ""eke"", 4, 3) == 5'
 'assert super_seq(""PARRT"", ""RTA"", 5, 3) == 6']",,[],"def super_seq(X, Y, m, n):
	""""""Write a function to find the length of the shortest string that has both str1 and str2 as subsequences."""""""
924,Write a function to find maximum of two numbers.,"def max_of_two( x, y ):
    if x > y:
        return x
    return y","['assert max_of_two(10,20)==20' 'assert max_of_two(19,15)==19'
 'assert max_of_two(-10,-20)==-10']",,[],"def max_of_two(x, y):
	""""""Write a function to find maximum of two numbers."""""""
925,Write a python function to calculate the product of all the numbers of a given tuple.,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product","['assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864'
 'assert mutiple_tuple((1,2,3)) == 6'
 'assert mutiple_tuple((-2,-4,-6)) == -48']",,[],"def mutiple_tuple(nums):
	""""""Write a python function to calculate the product of all the numbers of a given tuple."""""""
926,Write a function to find n-th rencontres number.,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))","['assert rencontres_number(7, 2) == 924'
 'assert rencontres_number(3, 0) == 2'
 'assert rencontres_number(3, 1) == 3']",,[],"def binomial_coeffi(n, k):
	""""""Write a function to find n-th rencontres number."""""""
927,Write a function to calculate the height of the given binary tree.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1","['assert (max_height(root)) == 3' 'assert (max_height(root1)) == 5 '
 'assert (max_height(root2)) == 4']","root = Node(1) 
root.left = Node(2) 
root.right = Node(3) 
root.left.left = Node(4) 
root.left.right = Node(5) 
root1 = Node(1);  
root1.left = Node(2);  
root1.right = Node(3);  
root1.left.left = Node(4);  
root1.right.left = Node(5);  
root1.right.right = Node(6);  
root1.right.right.right= Node(7);  
root1.right.right.right.right = Node(8)
root2 = Node(1) 
root2.left = Node(2) 
root2.right = Node(3) 
root2.left.left = Node(4) 
root2.left.right = Node(5)
root2.left.left.left = Node(6)
root2.left.left.right = Node(7)",[],"def __init__(self, data):
	""""""Write a function to calculate the height of the given binary tree."""""""
928,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)","[""assert change_date_format('2026-01-02')=='02-01-2026'""
 ""assert change_date_format('2021-01-04')=='04-01-2021'""
 ""assert change_date_format('2030-06-06')=='06-06-2030'""]",,[],"def change_date_format(dt):
	""""""Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format."""""""
929,Write a function to count repeated items of a tuple.,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count","['assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3'
 'assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2'
 'assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4']",,[],"def count_tuplex(tuplex,value):
	""""""Write a function to count repeated items of a tuple."""""""
930,Write a function that matches a string that has an a followed by zero or more b's by using regex.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')","['assert text_match(""msb"") == \'Not matched!\''
 'assert text_match(""a0c"") == \'Found a match!\''
 'assert text_match(""abbc"") == \'Found a match!\'']",,[],"def text_match(text):
	""""""Write a function that matches a string that has an a followed by zero or more b's by using regex."""""""
931,Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total","['assert sum_series(7)==784' 'assert sum_series(5)==225'
 'assert sum_series(15)==14400']",,[],"def sum_series(number):
	""""""Write a function to calculate the sum of series 1³+2³+3³+….+n³."""""""
932,Write a function to remove duplicate words from a given list of strings.,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp","['assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\']'
 'assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""Java""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\', \'Java\']'
 'assert remove_duplic_list([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""C++"",""C"",""C++""])==[\'Python\', \'Exercises\', \'Practice\', \'Solution\',\'C++\',\'C\']']",,[],"def remove_duplic_list(l):
	""""""Write a function to remove duplicate words from a given list of strings."""""""
933,Write a function to convert camel case string to snake case string by using regex.,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","[""assert camel_to_snake('GoogleAssistant') == 'google_assistant'""
 ""assert camel_to_snake('ChromeCast') == 'chrome_cast'""
 ""assert camel_to_snake('QuadCore') == 'quad_core'""]",,[],"def camel_to_snake(text):
	""""""Write a function to convert camel case string to snake case string by using regex."""""""
934,Write a function to find the nth delannoy number.,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)","['assert dealnnoy_num(3, 4) == 129' 'assert dealnnoy_num(3, 3) == 63'
 'assert dealnnoy_num(4, 5) == 681']",,[],"def dealnnoy_num(n, m):
	""""""Write a function to find the nth delannoy number."""""""
935,Write a function to calculate the sum of series 1²+2²+3²+….+n².,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total","['assert series_sum(6)==91' 'assert series_sum(7)==140'
 'assert series_sum(12)==650']",,[],"def series_sum(number):
	""""""Write a function to calculate the sum of series 1²+2²+3²+….+n²."""""""
936,Write a function to re-arrange the given tuples based on the given ordered list.,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ","['assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]'
 'assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]'
 'assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]']",,[],"def re_arrange_tuples(test_list, ord_list):
	""""""Write a function to re-arrange the given tuples based on the given ordered list."""""""
937,Write a function to count the most common character in a given string.,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char","['assert max_char(""hello world"")==(\'l\')'
 'assert max_char(""hello "")==(\'l\')'
 'assert max_char(""python pr"")==(\'p\')']",,[],"def max_char(str1):
	""""""Write a function to count the most common character in a given string."""""""
938,Write a function to find three closest elements from three sorted arrays.,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]","['assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)'
 'assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)'
 'assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)']",,[],"def find_closet(A, B, C, p, q, r):
	""""""Write a function to find three closest elements from three sorted arrays."""""""
939,Write a function to sort a list of dictionaries using lambda function.,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models","[""assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]""
 ""assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])""
 ""assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])""]",,[],"def sorted_models(models):
	""""""Write a function to sort a list of dictionaries using lambda function."""""""
940,Write a function to sort the given array by using heap sort.,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
","['assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]'
 'assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]'
 'assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]']",,[],"def heap_sort(arr):
	""""""Write a function to sort the given array by using heap sort."""""""
941,Write a function to count the elements in a list until an element is a tuple.,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim","['assert count_elim([10,20,30,(10,20),40])==3'
 'assert count_elim([10,(20,30),(10,20),40])==1'
 'assert count_elim([(10,(20,30,(10,20),40))])==0']",,[],"def count_elim(num):
	""""""Write a function to count the elements in a list until an element is a tuple."""""""
942,Write a function to check if any list element is present in the given list.,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ","['assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True'
 'assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True'
 'assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False']",,[],"def check_element(test_tup, check_list):
	""""""Write a function to check if any list element is present in the given list."""""""
943,Write a function to combine two given sorted lists using heapq module.,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists","['assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]'
 'assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]'
 'assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]']",,[],"def combine_lists(num1,num2):
	""""""Write a function to combine two given sorted lists using heapq module."""""""
944,Write a function to separate and print the numbers and their position of a given string.,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()","['assert num_position(""there are 70 flats in this apartment"")==10'
 'assert num_position(""every adult have 32 teeth"")==17'
 'assert num_position(""isha has 79 chocolates in her bag"")==9']",,[],"def num_position(text):
	""""""Write a function to separate and print the numbers and their position of a given string."""""""
945,Write a function to convert the given tuples into set.,"def tuple_to_set(t):
  s = set(t)
  return (s) ","[""assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}""
 ""assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}""
 ""assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}""]",,[],"def tuple_to_set(t):
	""""""Write a function to convert the given tuples into set."""""""
946,Write a function to find the most common elements and their counts of a specified text.,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem","[""assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ""
 ""assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]""
 ""assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]""]",,[],"def most_common_elem(s,a):
	""""""Write a function to find the most common elements and their counts of a specified text."""""""
947,Write a python function to find the length of the shortest word.,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min","['assert len_log([""win"",""lose"",""great""]) == 3'
 'assert len_log([""a"",""ab"",""abc""]) == 1'
 'assert len_log([""12"",""12"",""1234""]) == 2']",,[],"def len_log(list1):
	""""""Write a python function to find the length of the shortest word."""""""
948,Write a function to get an item of a tuple.,"def get_item(tup1,index):
  item = tup1[index]
  return item","['assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),3)==(\'e\')'
 'assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-4)==(\'u\')'
 'assert get_item((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-3)==(\'r\')']",,[],"def get_item(tup1,index):
	""""""Write a function to get an item of a tuple."""""""
949,Write a function to sort the given tuple list basis the total digits in tuple.,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))","[""assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'""
 ""assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'""
 ""assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'""]",,[],"def count_digs(tup):
	""""""Write a function to sort the given tuple list basis the total digits in tuple."""""""
950,Write a function to display sign of the chinese zodiac for given year.,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign","[""assert chinese_zodiac(1997)==('Ox')""
 ""assert chinese_zodiac(1998)==('Tiger')""
 ""assert chinese_zodiac(1994)==('Dog')""]",,[],"def chinese_zodiac(year):
	""""""Write a function to display sign of the chinese zodiac for given year."""""""
951,Write a function to find the maximum of similar indices in two lists of tuples.,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ","['assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]'
 'assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]'
 'assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]']",,[],"def max_similar_indices(test_list1, test_list2):
	""""""Write a function to find the maximum of similar indices in two lists of tuples."""""""
952,Write a function to compute the value of ncr mod p.,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ","['assert nCr_mod_p(10, 2, 13) == 6' 'assert nCr_mod_p(11, 3, 14) == 11'
 'assert nCr_mod_p(18, 14, 19) == 1']",,[],"def nCr_mod_p(n, r, p):
	""""""Write a function to compute the value of ncr mod p."""""""
953,Write a python function to find the minimun number of subsets with distinct elements.,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ","['assert subset([1, 2, 3, 4],4) == 1'
 'assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2'
 'assert subset([1, 2, 3 ],3) == 1']",,[],"def subset(ar, n):
	""""""Write a python function to find the minimun number of subsets with distinct elements."""""""
954,Write a function that gives profit amount if the given amount has profit else return none.,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None","['assert profit_amount(1500,1200)==300'
 'assert profit_amount(100,200)==None'
 'assert profit_amount(2000,5000)==None']",,[],"def profit_amount(actual_cost,sale_amount):
	""""""Write a function that gives profit amount if the given amount has profit else return none."""""""
955,"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","['assert is_abundant(12)==True' 'assert is_abundant(13)==False'
 'assert is_abundant(9)==False']",,[],"def is_abundant(n):
	""""""Write a function to find out, if the given number is abundant."""""""
956,Write a function to split the given string at uppercase letters by using regex.,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))","['assert split_list(""LearnToBuildAnythingWithGoogle"") == [\'Learn\', \'To\', \'Build\', \'Anything\', \'With\', \'Google\']'
 'assert split_list(""ApmlifyingTheBlack+DeveloperCommunity"") == [\'Apmlifying\', \'The\', \'Black+\', \'Developer\', \'Community\']'
 'assert split_list(""UpdateInTheGoEcoSystem"") == [\'Update\', \'In\', \'The\', \'Go\', \'Eco\', \'System\']']",,[],"def split_list(text):
	""""""Write a function to split the given string at uppercase letters by using regex."""""""
957,Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","['assert get_First_Set_Bit_Pos(12) == 3'
 'assert get_First_Set_Bit_Pos(18) == 2'
 'assert get_First_Set_Bit_Pos(16) == 5']",,[],"def get_First_Set_Bit_Pos(n):
	""""""Write a python function to get the position of rightmost set bit."""""""
958,Write a function to convert an integer into a roman numeral.,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num","['assert int_to_roman(1)==(""I"")' 'assert int_to_roman(50)==(""L"")'
 'assert int_to_roman(4)==(""IV"")']",,[],"def int_to_roman(num):
	""""""Write a function to convert an integer into a roman numeral."""""""
959,Write a python function to find the average of a list.,"def Average(lst): 
    return sum(lst) / len(lst) ","['assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75'
 'assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75'
 'assert Average([1,2,3]) == 2']",,[],"def Average(lst):
	""""""Write a python function to find the average of a list."""""""
960,Write a function to solve tiling problem.,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);","['assert get_noOfways(4)==3' 'assert get_noOfways(3)==2'
 'assert get_noOfways(5)==5']",,[],"def get_noOfways(n):
	""""""Write a function to solve tiling problem."""""""
961,Write a function to convert a roman numeral to an integer.,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val","[""assert roman_to_int('MMMCMLXXXVI')==3986""
 ""assert roman_to_int('MMMM')==4000"" ""assert roman_to_int('C')==100""]",,[],"def roman_to_int(s):
	""""""Write a function to convert a roman numeral to an integer."""""""
962,Write a python function to find the sum of all even natural numbers within the range l and r.,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ","['assert sum_Even(2,5) == 6' 'assert sum_Even(3,8) == 18'
 'assert sum_Even(4,6) == 10']",,[],"def sum_Natural(n):
	""""""Write a python function to find the sum of all even natural numbers within the range l and r."""""""
963,Write a function to calculate the discriminant value.,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)","['assert discriminant_value(4,8,2)==(""Two solutions"",32)'
 'assert discriminant_value(5,7,9)==(""no real solution"",-131)'
 'assert discriminant_value(0,0,9)==(""one solution"",0)']",,[],"def discriminant_value(x,y,z):
	""""""Write a function to calculate the discriminant value."""""""
964,Write a python function to check whether the length of the word is even or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False","['assert word_len(""program"") == False'
 'assert word_len(""solution"") == True' 'assert word_len(""data"") == True']",,[],"def word_len(s):
	""""""Write a python function to check whether the length of the word is even or not."""""""
965,Write a function to convert camel case string to snake case string.,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","[""assert camel_to_snake('PythonProgram')==('python_program')""
 ""assert camel_to_snake('pythonLanguage')==('python_language')""
 ""assert camel_to_snake('ProgrammingLanguage')==('programming_language')""]",,[],"def camel_to_snake(text):
	""""""Write a function to convert camel case string to snake case string."""""""
966,Write a function to remove an empty tuple from a list of tuples.,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1","[""assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ""
 'assert remove_empty([(), (), (\'\',), (""python""), (""program"")])==[(\'\',), (""python""), (""program"")]  '
 'assert remove_empty([(), (), (\'\',), (""java"")])==[(\'\',),(""java"") ]  ']",,[],"def remove_empty(tuple1):
	""""""Write a function to remove an empty tuple from a list of tuples."""""""
967,Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","['assert check(""SEEquoiaL"") == \'accepted\''
 'assert check(\'program\') == ""not accepted""'
 'assert check(\'fine\') == ""not accepted""']",,[],"def check(string):
	""""""Write a python function to accept the strings which contains all vowels."""""""
968,Write a python function to find maximum possible value for the given periodic function.,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B","['assert floor_Max(11,10,9) == 9' 'assert floor_Max(5,7,4) == 2'
 'assert floor_Max(2,2,1) == 1']",,[],"def floor_Max(A,B,N):
	""""""Write a python function to find maximum possible value for the given periodic function."""""""
969,Write a function to join the tuples if they have similar initial elements.,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ","['assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]'
 'assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]'
 'assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]']",,[],"def join_tuples(test_list):
	""""""Write a function to join the tuples if they have similar initial elements."""""""
970,Write a function to find minimum of two numbers.,"def min_of_two( x, y ):
    if x < y:
        return x
    return y","['assert min_of_two(10,20)==10' 'assert min_of_two(19,15)==15'
 'assert min_of_two(-10,-20)==-20']",,[],"def min_of_two(x, y):
	""""""Write a function to find minimum of two numbers."""""""
971,"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]","['assert maximum_segments(7, 5, 2, 5) == 2'
 'assert maximum_segments(17, 2, 1, 3) == 17'
 'assert maximum_segments(18, 16, 3, 6) == 6']",,[],"def maximum_segments(n, a, b, c):
	""""""Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n."""""""
972,Write a function to concatenate the given two tuples to a nested tuple.,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ","['assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)'
 'assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)'
 'assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)']",,[],"def concatenate_nested(test_tup1, test_tup2):
	""""""Write a function to concatenate the given two tuples to a nested tuple."""""""
973,Write a python function to left rotate the string.,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ","['assert left_rotate(""python"",2) == ""thonpy""   '
 'assert left_rotate(""bigdata"",3 ) == ""databig"" '
 'assert left_rotate(""hadoop"",1 ) == ""adooph"" ']",,[],"def left_rotate(s,d):
	""""""Write a python function to left rotate the string."""""""
974,Write a function to find the minimum total path sum in the given triangle.,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]","['assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6'
 'assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 '
 'assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9']",,[],"def min_sum_path(A):
	""""""Write a function to find the minimum total path sum in the given triangle."""""""
