{"text": "Append a string in the middle of another string.", "prompt": "Append a string in the middle of another string.", "code": "def sandwich_string(A):\r\npass", "task_id": "1", "test_setup_code": "", "test_list": ["assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']", "assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']", "assert sandwich_string('aaaaAAAAaaaa') == ['a']", "assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']", "assert sandwich_string('ddddc') == ['c', 'd']"], "challenge_test_list": [], "entry_point": "sandwich_string", "test": "def check(candidate):\n\tassert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']\n\tassert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']\n\tassert sandwich_string('aaaaAAAAaaaa') == ['a']\n\tassert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']\n\tassert sandwich_string('ddddc') == ['c', 'd']", "signature": "def sandwich_string(A):"}
{"text": "Normalize a list of positive integers and print formatted percentages.", "prompt": "Normalize a list of positive integers and print formatted percentages.", "code": "def normalize_integer_list(numbers):\r\npass", "task_id": "2", "test_setup_code": "", "test_list": ["assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']", "assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']", "assert normalize_integer_list([]) == []", "assert normalize_integer_list([1]) == ['100.0']", "assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']"], "challenge_test_list": [], "entry_point": "normalize_integer_list", "test": "def check(candidate):\n\tassert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']\n\tassert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']\n\tassert normalize_integer_list([]) == []\n\tassert normalize_integer_list([1]) == ['100.0']\n\tassert normalize_integer_list([10000, 1]) == ['100.0', '0.0']", "signature": "def normalize_integer_list(numbers):"}
{"text": "Convert units of time.", "prompt": "Convert units of time.", "code": "def convert_time(a1,a2):\r\npass", "task_id": "3", "test_setup_code": "", "test_list": ["assert convert_time(2,13) == 7980", "assert convert_time(1,2) == 3720", "assert convert_time(32,32) == 117120", "assert convert_time(0,32) == 1920", "assert convert_time(1,1) == 3660"], "challenge_test_list": [], "entry_point": "convert_time", "test": "def check(candidate):\n\tassert convert_time(2,13) == 7980\n\tassert convert_time(1,2) == 3720\n\tassert convert_time(32,32) == 117120\n\tassert convert_time(0,32) == 1920\n\tassert convert_time(1,1) == 3660", "signature": "def convert_time(a1,a2):"}
{"text": "Print the squared fibonacci numbers.", "prompt": "Print the squared fibonacci numbers.", "code": "def squared_fibonacci(a1):\r\npass", "task_id": "4", "test_setup_code": "", "test_list": ["assert squared_fibonacci(1) == 1", "assert squared_fibonacci(2) == 1", "assert squared_fibonacci(3) == 4", "assert squared_fibonacci(4) == 9", "assert squared_fibonacci(10) == 3025"], "challenge_test_list": [], "entry_point": "squared_fibonacci", "test": "def check(candidate):\n\tassert squared_fibonacci(1) == 1\n\tassert squared_fibonacci(2) == 1\n\tassert squared_fibonacci(3) == 4\n\tassert squared_fibonacci(4) == 9\n\tassert squared_fibonacci(10) == 3025", "signature": "def squared_fibonacci(a1):"}
{"text": "Count negative numbers in a given list.", "prompt": "Count negative numbers in a given list.", "code": "def count_negative_numbers(A):\r\npass", "task_id": "5", "test_setup_code": "", "test_list": ["assert count_negative_numbers([1, 2, 3, 4]) == 4", "assert count_negative_numbers([-1, 2, 3, 4]) == 3", "assert count_negative_numbers([-1, -2, -3, -4]) == 4", "assert count_negative_numbers([-1000000, 1, 2]) == 2", "assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3"], "challenge_test_list": [], "entry_point": "count_negative_numbers", "test": "def check(candidate):\n\tassert count_negative_numbers([1, 2, 3, 4]) == 4\n\tassert count_negative_numbers([-1, 2, 3, 4]) == 3\n\tassert count_negative_numbers([-1, -2, -3, -4]) == 4\n\tassert count_negative_numbers([-1000000, 1, 2]) == 2\n\tassert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3", "signature": "def count_negative_numbers(A):"}
{"text": "Construct and compute the mean of a pandas df.", "prompt": "Construct and compute the mean of a pandas df.", "code": "def pandas_mean(a1,a2,a3,a4):\r\npass", "task_id": "6", "test_setup_code": "", "test_list": ["assert pandas_mean(50,21,131,2) == [35.5, 66.5]", "assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]", "assert pandas_mean(1,2,3,4) == [1.5, 3.5]", "assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]", "assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]"], "challenge_test_list": [], "entry_point": "pandas_mean", "test": "def check(candidate):\n\tassert pandas_mean(50,21,131,2) == [35.5, 66.5]\n\tassert pandas_mean(-10,10,-20,20) == [0.0, 0.0]\n\tassert pandas_mean(1,2,3,4) == [1.5, 3.5]\n\tassert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]\n\tassert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]", "signature": "def pandas_mean(a1,a2,a3,a4):"}
{"text": "Solve the fizz buzz problem.", "prompt": "Solve the fizz buzz problem.", "code": "def fizz_buzz(a1,a2,a3,a4):\r\npass", "task_id": "7", "test_setup_code": "", "test_list": ["assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]", "assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']", "assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]", "assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]", "assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]"], "challenge_test_list": [], "entry_point": "fizz_buzz", "test": "def check(candidate):\n\tassert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]\n\tassert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']\n\tassert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]\n\tassert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]\n\tassert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]", "signature": "def fizz_buzz(a1,a2,a3,a4):"}
{"text": "Print the bi-grams of a sentence.", "prompt": "Print the bi-grams of a sentence.", "code": "def bi-grams(a1):\r\npass", "task_id": "8", "test_setup_code": "", "test_list": ["assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]", "assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]", "assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]", "assert bi-grams('abc de') == [['abc', 'de']]", "assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]"], "challenge_test_list": [], "entry_point": "bi-grams", "test": "def check(candidate):\n\tassert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]\n\tassert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]\n\tassert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]\n\tassert bi-grams('abc de') == [['abc', 'de']]\n\tassert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]", "signature": "def bi-grams(a1):"}
{"text": "Print name with top note out of a dict.", "prompt": "Print name with top note out of a dict.", "code": "def top_note(a1,a2,a3,a4):\r\npass", "task_id": "9", "test_setup_code": "", "test_list": ["assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'", "assert top_note([0],[1],[2],[3]) == 'Mitch'", "assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'", "assert top_note([-1],[-1],[1],[-1]) == 'Mike'", "assert top_note([0],[10000],[1000],[9999]) == 'John'"], "challenge_test_list": [], "entry_point": "top_note", "test": "def check(candidate):\n\tassert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'\n\tassert top_note([0],[1],[2],[3]) == 'Mitch'\n\tassert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'\n\tassert top_note([-1],[-1],[1],[-1]) == 'Mike'\n\tassert top_note([0],[10000],[1000],[9999]) == 'John'", "signature": "def top_note(a1,a2,a3,a4):"}
{"text": "Hex to binary and reverse.", "prompt": "Hex to binary and reverse.", "code": "def hex_to_binary(a1):\r\npass", "task_id": "10", "test_setup_code": "", "test_list": ["assert hex_to_binary(255) == 255", "assert hex_to_binary(170) == 170", "assert hex_to_binary(175) == 175", "assert hex_to_binary(18) == 18", "assert hex_to_binary(170) == 170"], "challenge_test_list": [], "entry_point": "hex_to_binary", "test": "def check(candidate):\n\tassert hex_to_binary(255) == 255\n\tassert hex_to_binary(170) == 170\n\tassert hex_to_binary(175) == 175\n\tassert hex_to_binary(18) == 18\n\tassert hex_to_binary(170) == 170", "signature": "def hex_to_binary(a1):"}
{"text": "Detect inversion of dict.", "prompt": "Detect inversion of dict.", "code": "def invert_dict(a1,a2,a3):\r\npass", "task_id": "11", "test_setup_code": "", "test_list": ["assert invert_dict(['a', 'b'],[1, 2],'') == False", "assert invert_dict(['a', 'b'],[1, 2],'inverted') == True", "assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False", "assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True", "assert invert_dict(['1'],[1],'') == False"], "challenge_test_list": [], "entry_point": "invert_dict", "test": "def check(candidate):\n\tassert invert_dict(['a', 'b'],[1, 2],'') == False\n\tassert invert_dict(['a', 'b'],[1, 2],'inverted') == True\n\tassert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False\n\tassert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True\n\tassert invert_dict(['1'],[1],'') == False", "signature": "def invert_dict(a1,a2,a3):"}
{"text": "Create POJO class.", "prompt": "Create POJO class.", "code": "def class_definition(a1,a2,a3,a4,a5):\r\npass", "task_id": "12", "test_setup_code": "", "test_list": ["assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'", "assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'", "assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'", "assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'", "assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'"], "challenge_test_list": [], "entry_point": "class_definition", "test": "def check(candidate):\n\tassert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'\n\tassert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'\n\tassert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'\n\tassert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'\n\tassert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'", "signature": "def class_definition(a1,a2,a3,a4,a5):"}
{"text": "Print longest number.", "prompt": "Print longest number.", "code": "def longest_number(a1):\r\npass", "task_id": "13", "test_setup_code": "", "test_list": ["assert longest_number([1, 2, 3, 12]) == 12", "assert longest_number([-123, 2, 3, 12]) == -123", "assert longest_number([1]) == 1", "assert longest_number([-12, 1]) == -12", "assert longest_number([1, 22, 333, 4444, -55555]) == -55555"], "challenge_test_list": [], "entry_point": "longest_number", "test": "def check(candidate):\n\tassert longest_number([1, 2, 3, 12]) == 12\n\tassert longest_number([-123, 2, 3, 12]) == -123\n\tassert longest_number([1]) == 1\n\tassert longest_number([-12, 1]) == -12\n\tassert longest_number([1, 22, 333, 4444, -55555]) == -55555", "signature": "def longest_number(a1):"}
{"text": "Fit linear regression model with specified function and sk-learn.", "prompt": "Fit linear regression model with specified function and sk-learn.", "code": "def linear_regression(a1):\r\npass", "task_id": "14", "test_setup_code": "", "test_list": ["assert linear_regression(1) == 2", "assert linear_regression(2) == 4", "assert linear_regression(3) == 6", "assert linear_regression(4) == 8", "assert linear_regression(5) == 10"], "challenge_test_list": [], "entry_point": "linear_regression", "test": "def check(candidate):\n\tassert linear_regression(1) == 2\n\tassert linear_regression(2) == 4\n\tassert linear_regression(3) == 6\n\tassert linear_regression(4) == 8\n\tassert linear_regression(5) == 10", "signature": "def linear_regression(a1):"}
{"text": "Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.", "prompt": "Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.", "code": "def encrypt_and_decrypt(a1):\r\npass", "task_id": "15", "test_setup_code": "", "test_list": ["assert encrypt_and_decrypt('hi') == ['hi', 'jk']", "assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']", "assert encrypt_and_decrypt('gf') == ['gf', 'ih']", "assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']", "assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']"], "challenge_test_list": [], "entry_point": "encrypt_and_decrypt", "test": "def check(candidate):\n\tassert encrypt_and_decrypt('hi') == ['hi', 'jk']\n\tassert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']\n\tassert encrypt_and_decrypt('gf') == ['gf', 'ih']\n\tassert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']\n\tassert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']", "signature": "def encrypt_and_decrypt(a1):"}
{"text": "Implement a class with __hash__ and obtain a count unique objects.", "prompt": "Implement a class with __hash__ and obtain a count unique objects.", "code": "def compare_object_equivalence(a1,a2,a3):\r\npass", "task_id": "16", "test_setup_code": "", "test_list": ["assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2", "assert compare_object_equivalence('name',(1, 2, 2),'C') == 3", "assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1", "assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3", "assert compare_object_equivalence('name',(1, 1, 1),'B') == 2"], "challenge_test_list": [], "entry_point": "compare_object_equivalence", "test": "def check(candidate):\n\tassert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2\n\tassert compare_object_equivalence('name',(1, 2, 2),'C') == 3\n\tassert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1\n\tassert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3\n\tassert compare_object_equivalence('name',(1, 1, 1),'B') == 2", "signature": "def compare_object_equivalence(a1,a2,a3):"}
{"text": "Overload built-in functions, and write functions which correct drunken functions.", "prompt": "Overload built-in functions, and write functions which correct drunken functions.", "code": "def drunken_python(a1):\r\npass", "task_id": "17", "test_setup_code": "", "test_list": ["assert drunken_python(29348) == [29348, '29348']", "assert drunken_python(1) == [1, '1']", "assert drunken_python(123) == [123, '123']", "assert drunken_python(2344) == [2344, '2344']", "assert drunken_python(-1) == [-1, '-1']"], "challenge_test_list": [], "entry_point": "drunken_python", "test": "def check(candidate):\n\tassert drunken_python(29348) == [29348, '29348']\n\tassert drunken_python(1) == [1, '1']\n\tassert drunken_python(123) == [123, '123']\n\tassert drunken_python(2344) == [2344, '2344']\n\tassert drunken_python(-1) == [-1, '-1']", "signature": "def drunken_python(a1):"}
{"text": "Encode a string into morse code given its conversion rule.", "prompt": "Encode a string into morse code given its conversion rule.", "code": "def morse_code(a1):\r\npass", "task_id": "18", "test_setup_code": "", "test_list": ["assert morse_code('Hello World') == 'HELLO WORLD'", "assert morse_code('Hello Foo') == 'HELLO FOO'", "assert morse_code('Hello WORLD') == 'HELLO WORLD'", "assert morse_code('foo BAR') == 'FOO BAR'", "assert morse_code('This is a long string') == 'THIS IS A LONG STRING'"], "challenge_test_list": [], "entry_point": "morse_code", "test": "def check(candidate):\n\tassert morse_code('Hello World') == 'HELLO WORLD'\n\tassert morse_code('Hello Foo') == 'HELLO FOO'\n\tassert morse_code('Hello WORLD') == 'HELLO WORLD'\n\tassert morse_code('foo BAR') == 'FOO BAR'\n\tassert morse_code('This is a long string') == 'THIS IS A LONG STRING'", "signature": "def morse_code(a1):"}
{"text": "Implement the two-sum problem on a given input pair.", "prompt": "Implement the two-sum problem on a given input pair.", "code": "def two-sum(a1,a2):\r\npass", "task_id": "19", "test_setup_code": "", "test_list": ["assert two-sum([0, 1, 2, 3],4) == [1, 3]", "assert two-sum([1, 11, 111],122) == [1, 2]", "assert two-sum([-1, 0, 2, 4],3) == [0, 3]", "assert two-sum([10, 20, 30, 40],70) == [2, 3]", "assert two-sum([-1, -1, 123, -123],0) == [2, 3]"], "challenge_test_list": [], "entry_point": "two-sum", "test": "def check(candidate):\n\tassert two-sum([0, 1, 2, 3],4) == [1, 3]\n\tassert two-sum([1, 11, 111],122) == [1, 2]\n\tassert two-sum([-1, 0, 2, 4],3) == [0, 3]\n\tassert two-sum([10, 20, 30, 40],70) == [2, 3]\n\tassert two-sum([-1, -1, 123, -123],0) == [2, 3]", "signature": "def two-sum(a1,a2):"}
{"text": "Implement and run k-means on sampled points.", "prompt": "Implement and run k-means on sampled points.", "code": "def k-means(a1):\r\npass", "task_id": "20", "test_setup_code": "", "test_list": ["assert k-means(10) == ((-10, -10), (10, 10))", "assert k-means(20) == ((-20, -20), (20, 20))", "assert k-means(30) == ((-30, -30), (30, 30))", "assert k-means(40) == ((-40, -40), (40, 40))", "assert k-means(50) == ((-50, -50), (50, 50))"], "challenge_test_list": [], "entry_point": "k-means", "test": "def check(candidate):\n\tassert k-means(10) == ((-10, -10), (10, 10))\n\tassert k-means(20) == ((-20, -20), (20, 20))\n\tassert k-means(30) == ((-30, -30), (30, 30))\n\tassert k-means(40) == ((-40, -40), (40, 40))\n\tassert k-means(50) == ((-50, -50), (50, 50))", "signature": "def k-means(a1):"}
{"text": "Print the sum of even and odd numbers in an array.", "prompt": "Print the sum of even and odd numbers in an array.", "code": "def even_odd_sum(numbers):\r\npass", "task_id": "21", "test_setup_code": "", "test_list": ["assert even_odd_sum([1]) == [0, 1]", "assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]", "assert even_odd_sum([]) == [0, 0]", "assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]", "assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]"], "challenge_test_list": [], "entry_point": "even_odd_sum", "test": "def check(candidate):\n\tassert even_odd_sum([1]) == [0, 1]\n\tassert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]\n\tassert even_odd_sum([]) == [0, 0]\n\tassert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]\n\tassert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]", "signature": "def even_odd_sum(numbers):"}
{"text": "Move all the zeroes in a list to the right.", "prompt": "Move all the zeroes in a list to the right.", "code": "def shift_zeros(lst):\r\npass", "task_id": "22", "test_setup_code": "", "test_list": ["assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']", "assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert shift_zeros([0]) == [0]", "assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]", "assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]"], "challenge_test_list": [], "entry_point": "shift_zeros", "test": "def check(candidate):\n\tassert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\tassert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\tassert shift_zeros([0]) == [0]\n\tassert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]\n\tassert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]", "signature": "def shift_zeros(lst):"}
{"text": "Define an array, sample N times, calculate means, calculate the percentile.", "prompt": "Define an array, sample N times, calculate means, calculate the percentile.", "code": "def bootstrap_95%_ci(array,n):\r\npass", "task_id": "23", "test_setup_code": "", "test_list": ["assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]", "assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]", "assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]", "assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]", "assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]"], "challenge_test_list": [], "entry_point": "bootstrap_95%_ci", "test": "def check(candidate):\n\tassert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]\n\tassert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]\n\tassert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]\n\tassert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]\n\tassert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]", "signature": "def bootstrap_95%_ci(array,n):"}
{"text": "Sum even digits between two numbers.", "prompt": "Sum even digits between two numbers.", "code": "def sum_even_digits(a,b):\r\npass", "task_id": "24", "test_setup_code": "", "test_list": ["assert sum_even_digits(8,2) == 20", "assert sum_even_digits(2,8) == 20", "assert sum_even_digits(2,6) == 12", "assert sum_even_digits(132,6) == 14", "assert sum_even_digits(17,96) == 0"], "challenge_test_list": [], "entry_point": "sum_even_digits", "test": "def check(candidate):\n\tassert sum_even_digits(8,2) == 20\n\tassert sum_even_digits(2,8) == 20\n\tassert sum_even_digits(2,6) == 12\n\tassert sum_even_digits(132,6) == 14\n\tassert sum_even_digits(17,96) == 0", "signature": "def sum_even_digits(a,b):"}
{"text": "Compute the difference between maximum and minimum numbers in a list.", "prompt": "Compute the difference between maximum and minimum numbers in a list.", "code": "def min-max_diff(A):\r\npass", "task_id": "25", "test_setup_code": "", "test_list": ["assert min-max_diff([0, 4]) == 4", "assert min-max_diff([4, 0]) == 4", "assert min-max_diff([0]) == 0", "assert min-max_diff([0, 7, 6]) == 7", "assert min-max_diff([2, 4, 7, 20, 6]) == 18"], "challenge_test_list": [], "entry_point": "min-max_diff", "test": "def check(candidate):\n\tassert min-max_diff([0, 4]) == 4\n\tassert min-max_diff([4, 0]) == 4\n\tassert min-max_diff([0]) == 0\n\tassert min-max_diff([0, 7, 6]) == 7\n\tassert min-max_diff([2, 4, 7, 20, 6]) == 18", "signature": "def min-max_diff(A):"}
{"text": "Print the sorted, case-insensitive unique characters of a string.", "prompt": "Print the sorted, case-insensitive unique characters of a string.", "code": "def distinct_chars(A):\r\npass", "task_id": "26", "test_setup_code": "", "test_list": ["assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']", "assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']", "assert distinct_chars('aaaaAAAAaaaa') == ['a']", "assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']", "assert distinct_chars('ddddc') == ['c', 'd']"], "challenge_test_list": [], "entry_point": "distinct_chars", "test": "def check(candidate):\n\tassert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']\n\tassert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']\n\tassert distinct_chars('aaaaAAAAaaaa') == ['a']\n\tassert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']\n\tassert distinct_chars('ddddc') == ['c', 'd']", "signature": "def distinct_chars(A):"}
{"text": "Compare and print the longer string given two strings.", "prompt": "Compare and print the longer string given two strings.", "code": "def longer_string(A,B):\r\npass", "task_id": "27", "test_setup_code": "", "test_list": ["assert longer_string('abcde','ab') == 'abcde'", "assert longer_string('ab','abcde') == 'abcde'", "assert longer_string('a','aa') == 'aa'", "assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'", "assert longer_string('f','gg') == 'gg'"], "challenge_test_list": [], "entry_point": "longer_string", "test": "def check(candidate):\n\tassert longer_string('abcde','ab') == 'abcde'\n\tassert longer_string('ab','abcde') == 'abcde'\n\tassert longer_string('a','aa') == 'aa'\n\tassert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'\n\tassert longer_string('f','gg') == 'gg'", "signature": "def longer_string(A,B):"}
{"text": "Sum numbers before an after the decimal point of a float.", "prompt": "Sum numbers before an after the decimal point of a float.", "code": "def sum_float_digits(A):\r\npass", "task_id": "28", "test_setup_code": "", "test_list": ["assert sum_float_digits(17.82) == 99", "assert sum_float_digits(1.1) == 2", "assert sum_float_digits(1000000.0000001) == 1000001", "assert sum_float_digits(0.0101) == 101", "assert sum_float_digits(100.5) == 105"], "challenge_test_list": [], "entry_point": "sum_float_digits", "test": "def check(candidate):\n\tassert sum_float_digits(17.82) == 99\n\tassert sum_float_digits(1.1) == 2\n\tassert sum_float_digits(1000000.0000001) == 1000001\n\tassert sum_float_digits(0.0101) == 101\n\tassert sum_float_digits(100.5) == 105", "signature": "def sum_float_digits(A):"}
{"text": "Count the number of vowels in a string.", "prompt": "Count the number of vowels in a string.", "code": "def count_vowels(s):\r\npass", "task_id": "29", "test_setup_code": "", "test_list": ["assert count_vowels('CelebrAtion') == 5", "assert count_vowels('PaLm') == 1", "assert count_vowels('PrEdictiOn') == 4", "assert count_vowels('') == 0", "assert count_vowels('ABC') == 1"], "challenge_test_list": [], "entry_point": "count_vowels", "test": "def check(candidate):\n\tassert count_vowels('CelebrAtion') == 5\n\tassert count_vowels('PaLm') == 1\n\tassert count_vowels('PrEdictiOn') == 4\n\tassert count_vowels('') == 0\n\tassert count_vowels('ABC') == 1", "signature": "def count_vowels(s):"}
{"text": "Compute the factorial of n.", "prompt": "Compute the factorial of n.", "code": "def factorial(n):\r\npass", "task_id": "30", "test_setup_code": "", "test_list": ["assert factorial(2) == 2", "assert factorial(4) == 24", "assert factorial(10) == 3628800", "assert factorial(1) == 1", "assert factorial(5) == 120"], "challenge_test_list": [], "entry_point": "factorial", "test": "def check(candidate):\n\tassert factorial(2) == 2\n\tassert factorial(4) == 24\n\tassert factorial(10) == 3628800\n\tassert factorial(1) == 1\n\tassert factorial(5) == 120", "signature": "def factorial(n):"}
{"text": "Finds the maximum range of a triangle's third edge.", "prompt": "Finds the maximum range of a triangle's third edge.", "code": "def max_edge_triangle(a,b):\r\npass", "task_id": "31", "test_setup_code": "", "test_list": ["assert max_edge_triangle(8,9) == [17, 2]", "assert max_edge_triangle(5,7) == [11, 3]", "assert max_edge_triangle(9,2) == [10, 8]", "assert max_edge_triangle(1,1) == [1, 1]", "assert max_edge_triangle(1000,1000) == [1999, 1]"], "challenge_test_list": [], "entry_point": "max_edge_triangle", "test": "def check(candidate):\n\tassert max_edge_triangle(8,9) == [17, 2]\n\tassert max_edge_triangle(5,7) == [11, 3]\n\tassert max_edge_triangle(9,2) == [10, 8]\n\tassert max_edge_triangle(1,1) == [1, 1]\n\tassert max_edge_triangle(1000,1000) == [1999, 1]", "signature": "def max_edge_triangle(a,b):"}
{"text": "Compute the factorial and its remainder when divided.", "prompt": "Compute the factorial and its remainder when divided.", "code": "def factorial_and_remainder(n):\r\npass", "task_id": "32", "test_setup_code": "", "test_list": ["assert factorial_and_remainder(2) == 2", "assert factorial_and_remainder(4) == 4", "assert factorial_and_remainder(10) == 0", "assert factorial_and_remainder(1) == 1", "assert factorial_and_remainder(5) == 0"], "challenge_test_list": [], "entry_point": "factorial_and_remainder", "test": "def check(candidate):\n\tassert factorial_and_remainder(2) == 2\n\tassert factorial_and_remainder(4) == 4\n\tassert factorial_and_remainder(10) == 0\n\tassert factorial_and_remainder(1) == 1\n\tassert factorial_and_remainder(5) == 0", "signature": "def factorial_and_remainder(n):"}
{"text": "Sum the angles in a polygon.", "prompt": "Sum the angles in a polygon.", "code": "def sum_polygon_angles(n):\r\npass", "task_id": "33", "test_setup_code": "", "test_list": ["assert sum_polygon_angles(3) == 3.14", "assert sum_polygon_angles(4) == 6.28", "assert sum_polygon_angles(1000) == 3135.31", "assert sum_polygon_angles(10) == 25.13", "assert sum_polygon_angles(100) == 307.88"], "challenge_test_list": [], "entry_point": "sum_polygon_angles", "test": "def check(candidate):\n\tassert sum_polygon_angles(3) == 3.14\n\tassert sum_polygon_angles(4) == 6.28\n\tassert sum_polygon_angles(1000) == 3135.31\n\tassert sum_polygon_angles(10) == 25.13\n\tassert sum_polygon_angles(100) == 307.88", "signature": "def sum_polygon_angles(n):"}
{"text": "Add together two numbers represented in string.", "prompt": "Add together two numbers represented in string.", "code": "def sum_string_numbers(s1,s2):\r\npass", "task_id": "34", "test_setup_code": "", "test_list": ["assert sum_string_numbers(111,222) == 333", "assert sum_string_numbers(2,4) == 6", "assert sum_string_numbers(0,12) == 12", "assert sum_string_numbers(50,100) == 150", "assert sum_string_numbers(10000,1) == 10001"], "challenge_test_list": [], "entry_point": "sum_string_numbers", "test": "def check(candidate):\n\tassert sum_string_numbers(111,222) == 333\n\tassert sum_string_numbers(2,4) == 6\n\tassert sum_string_numbers(0,12) == 12\n\tassert sum_string_numbers(50,100) == 150\n\tassert sum_string_numbers(10000,1) == 10001", "signature": "def sum_string_numbers(s1,s2):"}
{"text": "Sum the range from the minimum to the maximum of a list.", "prompt": "Sum the range from the minimum to the maximum of a list.", "code": "def min-max_sum(l):\r\npass", "task_id": "35", "test_setup_code": "", "test_list": ["assert min-max_sum([4, 3, 8, 2]) == 35", "assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108", "assert min-max_sum([1, 2]) == 3", "assert min-max_sum([10]) == 10", "assert min-max_sum([1, 100]) == 5050"], "challenge_test_list": [], "entry_point": "min-max_sum", "test": "def check(candidate):\n\tassert min-max_sum([4, 3, 8, 2]) == 35\n\tassert min-max_sum([17, 16, 15, 10, 11, 12]) == 108\n\tassert min-max_sum([1, 2]) == 3\n\tassert min-max_sum([10]) == 10\n\tassert min-max_sum([1, 100]) == 5050", "signature": "def min-max_sum(l):"}
{"text": "Find the number of overlaped vowels of two words.", "prompt": "Find the number of overlaped vowels of two words.", "code": "def vowel_overlap(s1,s2):\r\npass", "task_id": "36", "test_setup_code": "", "test_list": ["assert vowel_overlap('meaty','apple') == 2", "assert vowel_overlap('fan','forsook') == 0", "assert vowel_overlap('spout','shout') == 2", "assert vowel_overlap('happiness','fitness') == 2", "assert vowel_overlap('code','fork') == 1"], "challenge_test_list": [], "entry_point": "vowel_overlap", "test": "def check(candidate):\n\tassert vowel_overlap('meaty','apple') == 2\n\tassert vowel_overlap('fan','forsook') == 0\n\tassert vowel_overlap('spout','shout') == 2\n\tassert vowel_overlap('happiness','fitness') == 2\n\tassert vowel_overlap('code','fork') == 1", "signature": "def vowel_overlap(s1,s2):"}
{"text": "Sum of negative numbers in a list.", "prompt": "Sum of negative numbers in a list.", "code": "def sum_neg(l):\r\npass", "task_id": "37", "test_setup_code": "", "test_list": ["assert sum_neg([-1, -2, 0, 1, 5]) == -3", "assert sum_neg([5, 2, 0, 5, 10]) == 0", "assert sum_neg([-100, -20, -3, 0, 0]) == -123", "assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150", "assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0"], "challenge_test_list": [], "entry_point": "sum_neg", "test": "def check(candidate):\n\tassert sum_neg([-1, -2, 0, 1, 5]) == -3\n\tassert sum_neg([5, 2, 0, 5, 10]) == 0\n\tassert sum_neg([-100, -20, -3, 0, 0]) == -123\n\tassert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150\n\tassert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0", "signature": "def sum_neg(l):"}
{"text": "Load from a file and print statistics.", "prompt": "Load from a file and print statistics.", "code": "def load_dataset(a1):\r\npass", "task_id": "38", "test_setup_code": "", "test_list": ["assert load_dataset('alco') == 44369", "assert load_dataset('age') == 25", "assert load_dataset('smoke') == 44717", "assert load_dataset('active') == 36516", "assert load_dataset('weight') == 2770"], "challenge_test_list": [], "entry_point": "load_dataset", "test": "def check(candidate):\n\tassert load_dataset('alco') == 44369\n\tassert load_dataset('age') == 25\n\tassert load_dataset('smoke') == 44717\n\tassert load_dataset('active') == 36516\n\tassert load_dataset('weight') == 2770", "signature": "def load_dataset(a1):"}
{"text": "Return a list of non-punctuation character lengths of a list of strings.", "prompt": "Return a list of non-punctuation character lengths of a list of strings.", "code": "def char_length_list(s):\r\npass", "task_id": "39", "test_setup_code": "", "test_list": ["assert char_length_list('Hello, World!') == [5, 6]", "assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]", "assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]", "assert char_length_list(',.') == []", "assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]"], "challenge_test_list": [], "entry_point": "char_length_list", "test": "def check(candidate):\n\tassert char_length_list('Hello, World!') == [5, 6]\n\tassert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]\n\tassert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]\n\tassert char_length_list(',.') == []\n\tassert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]", "signature": "def char_length_list(s):"}
{"text": "Convert a six hexadecimal digit string into list of RGB values.", "prompt": "Convert a six hexadecimal digit string into list of RGB values.", "code": "def hex_to_rgb(s):\r\npass", "task_id": "40", "test_setup_code": "", "test_list": ["assert hex_to_rgb('#FFF') == True", "assert hex_to_rgb('#egacea') == False", "assert hex_to_rgb('#12') == False", "assert hex_to_rgb(123456) == False", "assert hex_to_rgb('#ffb600') == True"], "challenge_test_list": [], "entry_point": "hex_to_rgb", "test": "def check(candidate):\n\tassert hex_to_rgb('#FFF') == True\n\tassert hex_to_rgb('#egacea') == False\n\tassert hex_to_rgb('#12') == False\n\tassert hex_to_rgb(123456) == False\n\tassert hex_to_rgb('#ffb600') == True", "signature": "def hex_to_rgb(s):"}
{"text": "Check if a certain element is the majority of a given list.", "prompt": "Check if a certain element is the majority of a given list.", "code": "def majority_vote(lst):\r\npass", "task_id": "41", "test_setup_code": "", "test_list": ["assert majority_vote([1, 1, 2, 2, 2, 2]) == 2", "assert majority_vote([]) == None", "assert majority_vote([100, 100, 0]) == 100", "assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0", "assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None"], "challenge_test_list": [], "entry_point": "majority_vote", "test": "def check(candidate):\n\tassert majority_vote([1, 1, 2, 2, 2, 2]) == 2\n\tassert majority_vote([]) == None\n\tassert majority_vote([100, 100, 0]) == 100\n\tassert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0\n\tassert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None", "signature": "def majority_vote(lst):"}
{"text": "Print the formatted date of a week later given a date.", "prompt": "Print the formatted date of a week later given a date.", "code": "def week_later(year,month,day):\r\npass", "task_id": "42", "test_setup_code": "", "test_list": ["assert week_later(1990,1,28) == '02/04/1990'", "assert week_later(2000,2,26) == '03/04/2000'", "assert week_later(2022,12,28) == '01/04/2023'", "assert week_later(1274,11,5) == 0.0007195185766614338", "assert week_later(1600,7,30) == '08/06/1600'"], "challenge_test_list": [], "entry_point": "week_later", "test": "def check(candidate):\n\tassert week_later(1990,1,28) == '02/04/1990'\n\tassert week_later(2000,2,26) == '03/04/2000'\n\tassert week_later(2022,12,28) == '01/04/2023'\n\tassert week_later(1274,11,5) == 0.0007195185766614338\n\tassert week_later(1600,7,30) == '08/06/1600'", "signature": "def week_later(year,month,day):"}
{"text": "Calculate the sum of ASCII values of each word and check if the list is sorted.", "prompt": "Calculate the sum of ASCII values of each word and check if the list is sorted.", "code": "def sorted_word_weights(words):\r\npass", "task_id": "43", "test_setup_code": "", "test_list": ["assert sorted_word_weights(['apple', 'banana', 'carrot']) == True", "assert sorted_word_weights([\"I'll\", 'see', 'trees.']) == True", "assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True", "assert sorted_word_weights(['', 'a', 'A']) == False", "assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False"], "challenge_test_list": [], "entry_point": "sorted_word_weights", "test": "def check(candidate):\n\tassert sorted_word_weights(['apple', 'banana', 'carrot']) == True\n\tassert sorted_word_weights([\"I'll\", 'see', 'trees.']) == True\n\tassert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True\n\tassert sorted_word_weights(['', 'a', 'A']) == False\n\tassert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False", "signature": "def sorted_word_weights(words):"}
{"text": "Sum pairs of adjacent digits until the number is palidrome.", "prompt": "Sum pairs of adjacent digits until the number is palidrome.", "code": "def create_palindrome(n):\r\npass", "task_id": "44", "test_setup_code": "", "test_list": ["assert create_palindrome(123456) == False", "assert create_palindrome(1234) == False", "assert create_palindrome(123212) == True", "assert create_palindrome(11211230) == True", "assert create_palindrome(1112212124000131) == True"], "challenge_test_list": [], "entry_point": "create_palindrome", "test": "def check(candidate):\n\tassert create_palindrome(123456) == False\n\tassert create_palindrome(1234) == False\n\tassert create_palindrome(123212) == True\n\tassert create_palindrome(11211230) == True\n\tassert create_palindrome(1112212124000131) == True", "signature": "def create_palindrome(n):"}
{"text": "Apply the backspace characters in a string and print the modified .", "prompt": "Apply the backspace characters in a string and print the modified .", "code": "def simulate_backspace(input):\r\npass", "task_id": "45", "test_setup_code": "", "test_list": ["assert simulate_backspace('he@@l@hel@llo') == 'hello'", "assert simulate_backspace('@@@@') == ''", "assert simulate_backspace('si@@@t boy') == 't boy'", "assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'", "assert simulate_backspace('hello   @@world') == 'hello world'"], "challenge_test_list": [], "entry_point": "simulate_backspace", "test": "def check(candidate):\n\tassert simulate_backspace('he@@l@hel@llo') == 'hello'\n\tassert simulate_backspace('@@@@') == ''\n\tassert simulate_backspace('si@@@t boy') == 't boy'\n\tassert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'\n\tassert simulate_backspace('hello   @@world') == 'hello world'", "signature": "def simulate_backspace(input):"}
{"text": "Manipulate a pandas dataframe and split into train and test set.", "prompt": "Manipulate a pandas dataframe and split into train and test set.", "code": "def pandas_df_manipulation(a1,a2):\r\npass", "task_id": "46", "test_setup_code": "", "test_list": ["assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'", "assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'", "assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'", "assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'", "assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'"], "challenge_test_list": [], "entry_point": "pandas_df_manipulation", "test": "def check(candidate):\n\tassert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'\n\tassert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'\n\tassert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'\n\tassert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'\n\tassert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'", "signature": "def pandas_df_manipulation(a1,a2):"}
{"text": "Sum the integers in a (min, max) range that don't appear in a list .", "prompt": "Sum the integers in a (min, max) range that don't appear in a list .", "code": "def sum_non-overlap_range(l):\r\npass", "task_id": "47", "test_setup_code": "", "test_list": ["assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29", "assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29", "assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575", "assert sum_non-overlap_range([-100, 100]) == 0", "assert sum_non-overlap_range([-5, -10, 0, 10]) == 5"], "challenge_test_list": [], "entry_point": "sum_non-overlap_range", "test": "def check(candidate):\n\tassert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29\n\tassert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29\n\tassert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575\n\tassert sum_non-overlap_range([-100, 100]) == 0\n\tassert sum_non-overlap_range([-5, -10, 0, 10]) == 5", "signature": "def sum_non-overlap_range(l):"}
{"text": "Find if a string contains digits.", "prompt": "Find if a string contains digits.", "code": "def detect_digits(l):\r\npass", "task_id": "48", "test_setup_code": "", "test_list": ["assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']", "assert detect_digits(['abc', 'abc10']) == ['abc10']", "assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']", "assert detect_digits(['this is a test', 'test1']) == ['test1']", "assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']"], "challenge_test_list": [], "entry_point": "detect_digits", "test": "def check(candidate):\n\tassert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']\n\tassert detect_digits(['abc', 'abc10']) == ['abc10']\n\tassert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']\n\tassert detect_digits(['this is a test', 'test1']) == ['test1']\n\tassert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']", "signature": "def detect_digits(l):"}
{"text": "Sequentially invoke function objects in a list.", "prompt": "Sequentially invoke function objects in a list.", "code": "def cascading_functions(a1,a2,a3,a4):\r\npass", "task_id": "49", "test_setup_code": "", "test_list": ["assert cascading_functions(2,2,2,1) == 8", "assert cascading_functions(1,1,2,1) == 2", "assert cascading_functions(2,2,2,2) == 16", "assert cascading_functions(-2,2,2,1) == -8", "assert cascading_functions(-2,-2,2,1) == 8"], "challenge_test_list": [], "entry_point": "cascading_functions", "test": "def check(candidate):\n\tassert cascading_functions(2,2,2,1) == 8\n\tassert cascading_functions(1,1,2,1) == 2\n\tassert cascading_functions(2,2,2,2) == 16\n\tassert cascading_functions(-2,2,2,1) == -8\n\tassert cascading_functions(-2,-2,2,1) == 8", "signature": "def cascading_functions(a1,a2,a3,a4):"}
{"text": "Pluralize duplicated words in a list.", "prompt": "Pluralize duplicated words in a list.", "code": "def pluralize_duplicates(a1):\r\npass", "task_id": "50", "test_setup_code": "", "test_list": ["assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True", "assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True", "assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True", "assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False", "assert pluralize_duplicates(['chair', 'pencil', 'table']) == False"], "challenge_test_list": [], "entry_point": "pluralize_duplicates", "test": "def check(candidate):\n\tassert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True\n\tassert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True\n\tassert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True\n\tassert pluralize_duplicates(['chair', 'pencil', 'arm']) == False\n\tassert pluralize_duplicates(['chair', 'pencil', 'table']) == False", "signature": "def pluralize_duplicates(a1):"}
{"text": "Given relative altitudes , find the highest altitude.", "prompt": "Given relative altitudes , find the highest altitude.", "code": "def highest_altitude(A):\r\npass", "task_id": "51", "test_setup_code": "", "test_list": ["assert highest_altitude([1, 2, 3, 4]) == 10", "assert highest_altitude([-1, 2, 3, 4]) == 8", "assert highest_altitude([-1, -2, -3, -4]) == 0", "assert highest_altitude([-1000000, 1, 2]) == 0", "assert highest_altitude([-5, 1, 5, 0, -10]) == 1"], "challenge_test_list": [], "entry_point": "highest_altitude", "test": "def check(candidate):\n\tassert highest_altitude([1, 2, 3, 4]) == 10\n\tassert highest_altitude([-1, 2, 3, 4]) == 8\n\tassert highest_altitude([-1, -2, -3, -4]) == 0\n\tassert highest_altitude([-1000000, 1, 2]) == 0\n\tassert highest_altitude([-5, 1, 5, 0, -10]) == 1", "signature": "def highest_altitude(A):"}
{"text": "Truncate a sentence so that it contains k words.", "prompt": "Truncate a sentence so that it contains k words.", "code": "def truncate_words(A,K):\r\npass", "task_id": "52", "test_setup_code": "", "test_list": ["assert truncate_words(['hello', 'world'],1) == ['hello']", "assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']", "assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']", "assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']", "assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']"], "challenge_test_list": [], "entry_point": "truncate_words", "test": "def check(candidate):\n\tassert truncate_words(['hello', 'world'],1) == ['hello']\n\tassert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']\n\tassert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']\n\tassert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']\n\tassert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']", "signature": "def truncate_words(A,K):"}
{"text": "Find the elements that appear one time in an array.", "prompt": "Find the elements that appear one time in an array.", "code": "def single_element(A):\r\npass", "task_id": "53", "test_setup_code": "", "test_list": ["assert single_element([1, 2, 2, 2]) == 1", "assert single_element([-1, 4, 4, 4, 4, 4]) == -1", "assert single_element([-1, -4, 8, -4, 8]) == -1", "assert single_element([-1000000, 1, 1]) == -1000000", "assert single_element([10000, 2, 2, 2, 2, 2]) == 10000"], "challenge_test_list": [], "entry_point": "single_element", "test": "def check(candidate):\n\tassert single_element([1, 2, 2, 2]) == 1\n\tassert single_element([-1, 4, 4, 4, 4, 4]) == -1\n\tassert single_element([-1, -4, 8, -4, 8]) == -1\n\tassert single_element([-1000000, 1, 1]) == -1000000\n\tassert single_element([10000, 2, 2, 2, 2, 2]) == 10000", "signature": "def single_element(A):"}
{"text": "Remove all the occurrences of an element in an array.", "prompt": "Remove all the occurrences of an element in an array.", "code": "def remove_elements(A,Val):\r\npass", "task_id": "54", "test_setup_code": "", "test_list": ["assert remove_elements([1, 2, 2, 2],2) == [1]", "assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]", "assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]", "assert remove_elements([-1000000, 1, 1],1) == [-1000000]", "assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]"], "challenge_test_list": [], "entry_point": "remove_elements", "test": "def check(candidate):\n\tassert remove_elements([1, 2, 2, 2],2) == [1]\n\tassert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]\n\tassert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]\n\tassert remove_elements([-1000000, 1, 1],1) == [-1000000]\n\tassert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]", "signature": "def remove_elements(A,Val):"}
{"text": "Check whether the sum of an array is equal to a given value.", "prompt": "Check whether the sum of an array is equal to a given value.", "code": "def check_array_sum(A,Val):\r\npass", "task_id": "55", "test_setup_code": "", "test_list": ["assert check_array_sum([1, 2, 2, 2],2) == False", "assert check_array_sum([-1, 5],4) == True", "assert check_array_sum([-1, -1, -1, -1, 1],-5) == True", "assert check_array_sum([-1000000, 1, 1],1) == False", "assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False"], "challenge_test_list": [], "entry_point": "check_array_sum", "test": "def check(candidate):\n\tassert check_array_sum([1, 2, 2, 2],2) == False\n\tassert check_array_sum([-1, 5],4) == True\n\tassert check_array_sum([-1, -1, -1, -1, 1],-5) == True\n\tassert check_array_sum([-1000000, 1, 1],1) == False\n\tassert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False", "signature": "def check_array_sum(A,Val):"}
{"text": "Merge two sorted lists into one.", "prompt": "Merge two sorted lists into one.", "code": "def merge_sorted_lists(A,B):\r\npass", "task_id": "56", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]", "assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]", "assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]", "assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]", "assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]"], "challenge_test_list": [], "entry_point": "merge_sorted_lists", "test": "def check(candidate):\n\tassert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]\n\tassert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]\n\tassert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]\n\tassert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]\n\tassert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]", "signature": "def merge_sorted_lists(A,B):"}
{"text": "Find the max contiguous subarray and return the sum.", "prompt": "Find the max contiguous subarray and return the sum.", "code": "def maximum_subarray(A):\r\npass", "task_id": "57", "test_setup_code": "", "test_list": ["assert maximum_subarray([1]) == 1", "assert maximum_subarray([-1, 5]) == 5", "assert maximum_subarray([-1, -1, -1, -1, 1]) == 1", "assert maximum_subarray([-1000000, 1, 1]) == 2", "assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010"], "challenge_test_list": [], "entry_point": "maximum_subarray", "test": "def check(candidate):\n\tassert maximum_subarray([1]) == 1\n\tassert maximum_subarray([-1, 5]) == 5\n\tassert maximum_subarray([-1, -1, -1, -1, 1]) == 1\n\tassert maximum_subarray([-1000000, 1, 1]) == 2\n\tassert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010", "signature": "def maximum_subarray(A):"}
{"text": "Compute the largest integer but not larger than square root of one positive number.", "prompt": "Compute the largest integer but not larger than square root of one positive number.", "code": "def max_square_root_integer(A):\r\npass", "task_id": "58", "test_setup_code": "", "test_list": ["assert max_square_root_integer(1) == 1", "assert max_square_root_integer(5) == 2", "assert max_square_root_integer(101) == 10", "assert max_square_root_integer(30) == 5", "assert max_square_root_integer(10000) == 100"], "challenge_test_list": [], "entry_point": "max_square_root_integer", "test": "def check(candidate):\n\tassert max_square_root_integer(1) == 1\n\tassert max_square_root_integer(5) == 2\n\tassert max_square_root_integer(101) == 10\n\tassert max_square_root_integer(30) == 5\n\tassert max_square_root_integer(10000) == 100", "signature": "def max_square_root_integer(A):"}
{"text": "Find the longest word in a word list.", "prompt": "Find the longest word in a word list.", "code": "def longest_word(A):\r\npass", "task_id": "59", "test_setup_code": "", "test_list": ["assert longest_word(['Hello', 'word']) == 'Hello'", "assert longest_word(['a', 'good', 'place']) == 'place'", "assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'", "assert longest_word(['good']) == 'good'", "assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'"], "challenge_test_list": [], "entry_point": "longest_word", "test": "def check(candidate):\n\tassert longest_word(['Hello', 'word']) == 'Hello'\n\tassert longest_word(['a', 'good', 'place']) == 'place'\n\tassert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'\n\tassert longest_word(['good']) == 'good'\n\tassert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'", "signature": "def longest_word(A):"}
{"text": "Sum all the unique numbers in a list.", "prompt": "Sum all the unique numbers in a list.", "code": "def sum_unique_elements(A):\r\npass", "task_id": "60", "test_setup_code": "", "test_list": ["assert sum_unique_elements([1, 2, 3]) == 6", "assert sum_unique_elements([1, 1, 1, 1]) == 0", "assert sum_unique_elements([-1, -2, -3, -3]) == -3", "assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000", "assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9"], "challenge_test_list": [], "entry_point": "sum_unique_elements", "test": "def check(candidate):\n\tassert sum_unique_elements([1, 2, 3]) == 6\n\tassert sum_unique_elements([1, 1, 1, 1]) == 0\n\tassert sum_unique_elements([-1, -2, -3, -3]) == -3\n\tassert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000\n\tassert sum_unique_elements([-5, 1, -5, 0, -10]) == -9", "signature": "def sum_unique_elements(A):"}
{"text": "Compute the digonal sum of a matrix.", "prompt": "Compute the digonal sum of a matrix.", "code": "def digonal_sum(A):\r\npass", "task_id": "61", "test_setup_code": "", "test_list": ["assert digonal_sum([[3, 2], [2, 3]]) == 6", "assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6", "assert digonal_sum([1]) == 1", "assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001", "assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5"], "challenge_test_list": [], "entry_point": "digonal_sum", "test": "def check(candidate):\n\tassert digonal_sum([[3, 2], [2, 3]]) == 6\n\tassert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6\n\tassert digonal_sum([1]) == 1\n\tassert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001\n\tassert digonal_sum([5, 5, 5, 5, 5, 0]) == 5", "signature": "def digonal_sum(A):"}
{"text": "Check conditon number of a matrix is less than a threshold.", "prompt": "Check conditon number of a matrix is less than a threshold.", "code": "def matrix_condition_number(A,T):\r\npass", "task_id": "62", "test_setup_code": "", "test_list": ["assert matrix_condition_number([[3, 2], [2, 3]],1) == False", "assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False", "assert matrix_condition_number([[1, 5]],2) == True", "assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False", "assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False"], "challenge_test_list": [], "entry_point": "matrix_condition_number", "test": "def check(candidate):\n\tassert matrix_condition_number([[3, 2], [2, 3]],1) == False\n\tassert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False\n\tassert matrix_condition_number([[1, 5]],2) == True\n\tassert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False\n\tassert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False", "signature": "def matrix_condition_number(A,T):"}
{"text": "Compute matrix multiplication sum of two matrices.", "prompt": "Compute matrix multiplication sum of two matrices.", "code": "def matrix_multiplication_sum(A,B):\r\npass", "task_id": "63", "test_setup_code": "", "test_list": ["assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50", "assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10", "assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0", "assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015", "assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25"], "challenge_test_list": [], "entry_point": "matrix_multiplication_sum", "test": "def check(candidate):\n\tassert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50\n\tassert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10\n\tassert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0\n\tassert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015\n\tassert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25", "signature": "def matrix_multiplication_sum(A,B):"}
{"text": "Compare two matrix determinants.", "prompt": "Compare two matrix determinants.", "code": "def matrix_determinant_(A,B):\r\npass", "task_id": "64", "test_setup_code": "", "test_list": ["assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True", "assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True", "assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False", "assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False", "assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False"], "challenge_test_list": [], "entry_point": "matrix_determinant_", "test": "def check(candidate):\n\tassert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True\n\tassert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True\n\tassert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False\n\tassert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False\n\tassert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False", "signature": "def matrix_determinant_(A,B):"}
{"text": "Compute the log of sum exponential input.", "prompt": "Compute the log of sum exponential input.", "code": "def log-sum-exp(A):\r\npass", "task_id": "65", "test_setup_code": "", "test_list": ["assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456", "assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682", "assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447", "assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285", "assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366"], "challenge_test_list": [], "entry_point": "log-sum-exp", "test": "def check(candidate):\n\tassert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456\n\tassert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682\n\tassert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447\n\tassert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285\n\tassert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366", "signature": "def log-sum-exp(A):"}
{"text": "Find the k nearest points to the origin.", "prompt": "Find the k nearest points to the origin.", "code": "def k_nearest_points(A,K):\r\npass", "task_id": "66", "test_setup_code": "", "test_list": ["assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]", "assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]", "assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]", "assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]", "assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]"], "challenge_test_list": [], "entry_point": "k_nearest_points", "test": "def check(candidate):\n\tassert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]\n\tassert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]\n\tassert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]\n\tassert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]\n\tassert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]", "signature": "def k_nearest_points(A,K):"}
{"text": "Find the longest common prefix of two strings.", "prompt": "Find the longest common prefix of two strings.", "code": "def longest_common_prefix(l1):\r\npass", "task_id": "67", "test_setup_code": "", "test_list": ["assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'", "assert longest_common_prefix(['crazy', 'car']) == 'c'", "assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'", "assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'", "assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'"], "challenge_test_list": [], "entry_point": "longest_common_prefix", "test": "def check(candidate):\n\tassert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'\n\tassert longest_common_prefix(['crazy', 'car']) == 'c'\n\tassert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'\n\tassert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'\n\tassert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'", "signature": "def longest_common_prefix(l1):"}
{"text": "Find duplicates in a list.", "prompt": "Find duplicates in a list.", "code": "def duplicate_elments(lst1):\r\npass", "task_id": "68", "test_setup_code": "", "test_list": ["assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]", "assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']", "assert duplicate_elments([3, 3, 1, 1]) == [3, 1]", "assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']", "assert duplicate_elments([1, 2, 3]) == []"], "challenge_test_list": [], "entry_point": "duplicate_elments", "test": "def check(candidate):\n\tassert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]\n\tassert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']\n\tassert duplicate_elments([3, 3, 1, 1]) == [3, 1]\n\tassert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']\n\tassert duplicate_elments([1, 2, 3]) == []", "signature": "def duplicate_elments(lst1):"}
{"text": "Find the first non-repeating character in a string.", "prompt": "Find the first non-repeating character in a string.", "code": "def first_unique_character(w):\r\npass", "task_id": "69", "test_setup_code": "", "test_list": ["assert first_unique_character('popular') == 1", "assert first_unique_character('crunchy') == 1", "assert first_unique_character('barbados') == 2", "assert first_unique_character('alphabet') == 1", "assert first_unique_character('science') == 0"], "challenge_test_list": [], "entry_point": "first_unique_character", "test": "def check(candidate):\n\tassert first_unique_character('popular') == 1\n\tassert first_unique_character('crunchy') == 1\n\tassert first_unique_character('barbados') == 2\n\tassert first_unique_character('alphabet') == 1\n\tassert first_unique_character('science') == 0", "signature": "def first_unique_character(w):"}
{"text": "Find uncommon words in two sentences.", "prompt": "Find uncommon words in two sentences.", "code": "def uncommon_words(s1,s2):\r\npass", "task_id": "70", "test_setup_code": "", "test_list": ["assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']", "assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']", "assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']", "assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []", "assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']"], "challenge_test_list": [], "entry_point": "uncommon_words", "test": "def check(candidate):\n\tassert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']\n\tassert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']\n\tassert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']\n\tassert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []\n\tassert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']", "signature": "def uncommon_words(s1,s2):"}
{"text": "Compute the average word length of a sentence.", "prompt": "Compute the average word length of a sentence.", "code": "def average_words_length(s1):\r\npass", "task_id": "71", "test_setup_code": "", "test_list": ["assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5", "assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077", "assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637", "assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706", "assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286"], "challenge_test_list": [], "entry_point": "average_words_length", "test": "def check(candidate):\n\tassert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5\n\tassert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077\n\tassert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637\n\tassert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706\n\tassert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286", "signature": "def average_words_length(s1):"}
{"text": "Compare the character frequencies in two strings.", "prompt": "Compare the character frequencies in two strings.", "code": "def compare_char_freq(w1,w2):\r\npass", "task_id": "72", "test_setup_code": "", "test_list": ["assert compare_char_freq('find','ding') == False", "assert compare_char_freq('rat','car') == False", "assert compare_char_freq(<built-in function open>,'book') == False", "assert compare_char_freq('fried','fired') == True", "assert compare_char_freq('listen','silent') == True"], "challenge_test_list": [], "entry_point": "compare_char_freq", "test": "def check(candidate):\n\tassert compare_char_freq('find','ding') == False\n\tassert compare_char_freq('rat','car') == False\n\tassert compare_char_freq(<built-in function open>,'book') == False\n\tassert compare_char_freq('fried','fired') == True\n\tassert compare_char_freq('listen','silent') == True", "signature": "def compare_char_freq(w1,w2):"}
{"text": "Reverse a string.", "prompt": "Reverse a string.", "code": "def reverse_string(w):\r\npass", "task_id": "73", "test_setup_code": "", "test_list": ["assert reverse_string('abc') == 'cba'", "assert reverse_string('ape') == 'epa'", "assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'", "assert reverse_string('apple') == 'elppa'", "assert reverse_string('april') == 'lirpa'"], "challenge_test_list": [], "entry_point": "reverse_string", "test": "def check(candidate):\n\tassert reverse_string('abc') == 'cba'\n\tassert reverse_string('ape') == 'epa'\n\tassert reverse_string('geeksforgeeks') == 'skeegrofskeeg'\n\tassert reverse_string('apple') == 'elppa'\n\tassert reverse_string('april') == 'lirpa'", "signature": "def reverse_string(w):"}
{"text": "Calculate the difference between the squared sum and the sum of squares.", "prompt": "Calculate the difference between the squared sum and the sum of squares.", "code": "def square_sum_diff(n):\r\npass", "task_id": "74", "test_setup_code": "", "test_list": ["assert square_sum_diff(12) == -5434", "assert square_sum_diff(2) == -4", "assert square_sum_diff(10) == -2640", "assert square_sum_diff(5) == -170", "assert square_sum_diff(100) == -25164150"], "challenge_test_list": [], "entry_point": "square_sum_diff", "test": "def check(candidate):\n\tassert square_sum_diff(12) == -5434\n\tassert square_sum_diff(2) == -4\n\tassert square_sum_diff(10) == -2640\n\tassert square_sum_diff(5) == -170\n\tassert square_sum_diff(100) == -25164150", "signature": "def square_sum_diff(n):"}
{"text": "Compute the cosine similarity between two vectors.", "prompt": "Compute the cosine similarity between two vectors.", "code": "def cosine_sim(lst1,lst2):\r\npass", "task_id": "75", "test_setup_code": "", "test_list": ["assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487", "assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999", "assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574", "assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999", "assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769"], "challenge_test_list": [], "entry_point": "cosine_sim", "test": "def check(candidate):\n\tassert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487\n\tassert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999\n\tassert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574\n\tassert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999\n\tassert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769", "signature": "def cosine_sim(lst1,lst2):"}
{"text": "Compare vector distances to the origin.", "prompt": "Compare vector distances to the origin.", "code": "def vector_distance(lst1,lst2,lst3):\r\npass", "task_id": "76", "test_setup_code": "", "test_list": ["assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True", "assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True", "assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False", "assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True", "assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True"], "challenge_test_list": [], "entry_point": "vector_distance", "test": "def check(candidate):\n\tassert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True\n\tassert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True\n\tassert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False\n\tassert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True\n\tassert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True", "signature": "def vector_distance(lst1,lst2,lst3):"}
{"text": "Find the smaller standard deviation given two lists.", "prompt": "Find the smaller standard deviation given two lists.", "code": "def compare_standard_deviations(l1,l2):\r\npass", "task_id": "77", "test_setup_code": "", "test_list": ["assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0", "assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0", "assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57", "assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0", "assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0"], "challenge_test_list": [], "entry_point": "compare_standard_deviations", "test": "def check(candidate):\n\tassert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0\n\tassert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0\n\tassert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57\n\tassert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0\n\tassert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0", "signature": "def compare_standard_deviations(l1,l2):"}
{"text": "Find the smaller mean given two lists.", "prompt": "Find the smaller mean given two lists.", "code": "def compare_means(l1,l2):\r\npass", "task_id": "78", "test_setup_code": "", "test_list": ["assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0", "assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0", "assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0", "assert compare_means([20, 1, 50, 6],[-100]) == -100.0", "assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0"], "challenge_test_list": [], "entry_point": "compare_means", "test": "def check(candidate):\n\tassert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0\n\tassert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0\n\tassert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0\n\tassert compare_means([20, 1, 50, 6],[-100]) == -100.0\n\tassert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0", "signature": "def compare_means(l1,l2):"}
{"text": "Compute coefficient of variation given a list.", "prompt": "Compute coefficient of variation given a list.", "code": "def coefficient_of_variation(l1):\r\npass", "task_id": "79", "test_setup_code": "", "test_list": ["assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0", "assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526", "assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582", "assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188", "assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804"], "challenge_test_list": [], "entry_point": "coefficient_of_variation", "test": "def check(candidate):\n\tassert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0\n\tassert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526\n\tassert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582\n\tassert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188\n\tassert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804", "signature": "def coefficient_of_variation(l1):"}
{"text": "Compute the L1 norm given a list.", "prompt": "Compute the L1 norm given a list.", "code": "def l1_norm(l1):\r\npass", "task_id": "80", "test_setup_code": "", "test_list": ["assert l1_norm([0, 0]) == 0", "assert l1_norm([1, 1]) == 2", "assert l1_norm([-1, 1, -100, 100]) == 202", "assert l1_norm([0, 0, 59, 1, 40]) == 100", "assert l1_norm([-50, -10, 40, 200, 1000]) == 1300"], "challenge_test_list": [], "entry_point": "l1_norm", "test": "def check(candidate):\n\tassert l1_norm([0, 0]) == 0\n\tassert l1_norm([1, 1]) == 2\n\tassert l1_norm([-1, 1, -100, 100]) == 202\n\tassert l1_norm([0, 0, 59, 1, 40]) == 100\n\tassert l1_norm([-50, -10, 40, 200, 1000]) == 1300", "signature": "def l1_norm(l1):"}
{"text": "Compute z-statistic given a list.", "prompt": "Compute z-statistic given a list.", "code": "def z-statistic(lst1):\r\npass", "task_id": "81", "test_setup_code": "", "test_list": ["assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904", "assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464", "assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305", "assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808", "assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328"], "challenge_test_list": [], "entry_point": "z-statistic", "test": "def check(candidate):\n\tassert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904\n\tassert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464\n\tassert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305\n\tassert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808\n\tassert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328", "signature": "def z-statistic(lst1):"}
{"text": "Move all negative elements in a list to the end.", "prompt": "Move all negative elements in a list to the end.", "code": "def move_all_negative_elements_to_end(lst):\r\npass", "task_id": "82", "test_setup_code": "", "test_list": ["assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]", "assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]", "assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]", "assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]", "assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]"], "challenge_test_list": [], "entry_point": "move_all_negative_elements_to_end", "test": "def check(candidate):\n\tassert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]\n\tassert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]\n\tassert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]\n\tassert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]\n\tassert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]", "signature": "def move_all_negative_elements_to_end(lst):"}
{"text": "Remove alphabetical characters in a string.", "prompt": "Remove alphabetical characters in a string.", "code": "def remove_alphabetical_characters(w):\r\npass", "task_id": "83", "test_setup_code": "", "test_list": ["assert remove_alphabetical_characters('2a4B') == 24", "assert remove_alphabetical_characters('br2ace') == 2", "assert remove_alphabetical_characters(100) == 100", "assert remove_alphabetical_characters('3g4lc') == 34", "assert remove_alphabetical_characters('12Apple0') == 120"], "challenge_test_list": [], "entry_point": "remove_alphabetical_characters", "test": "def check(candidate):\n\tassert remove_alphabetical_characters('2a4B') == 24\n\tassert remove_alphabetical_characters('br2ace') == 2\n\tassert remove_alphabetical_characters(100) == 100\n\tassert remove_alphabetical_characters('3g4lc') == 34\n\tassert remove_alphabetical_characters('12Apple0') == 120", "signature": "def remove_alphabetical_characters(w):"}
{"text": "Find the largest norm among n-dimensional points.", "prompt": "Find the largest norm among n-dimensional points.", "code": "def largest_norm(X):\r\npass", "task_id": "84", "test_setup_code": "", "test_list": ["assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999", "assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16", "assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29", "assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021", "assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74"], "challenge_test_list": [], "entry_point": "largest_norm", "test": "def check(candidate):\n\tassert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999\n\tassert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16\n\tassert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29\n\tassert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021\n\tassert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74", "signature": "def largest_norm(X):"}
{"text": "Given two arrays (pred, gold), calculate the F1 score.", "prompt": "Given two arrays (pred, gold), calculate the F1 score.", "code": "def f1_score(pred,y):\r\npass", "task_id": "85", "test_setup_code": "", "test_list": ["assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6", "assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999", "assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0", "assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182", "assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4"], "challenge_test_list": [], "entry_point": "f1_score", "test": "def check(candidate):\n\tassert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6\n\tassert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999\n\tassert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0\n\tassert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182\n\tassert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4", "signature": "def f1_score(pred,y):"}
{"text": "Add spaces before capital letters.", "prompt": "Add spaces before capital letters.", "code": "def add_space(x):\r\npass", "task_id": "86", "test_setup_code": "", "test_list": ["assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'", "assert add_space('camelCaseMethod') == 'camel Case Method'", "assert add_space('ABCDE') == ' A B C D E'", "assert add_space('splitDB') == 'split D B'", "assert add_space('donotsplitanything') == 'donotsplitanything'"], "challenge_test_list": [], "entry_point": "add_space", "test": "def check(candidate):\n\tassert add_space('ACapitalLetterWords') == ' A Capital Letter Words'\n\tassert add_space('camelCaseMethod') == 'camel Case Method'\n\tassert add_space('ABCDE') == ' A B C D E'\n\tassert add_space('splitDB') == 'split D B'\n\tassert add_space('donotsplitanything') == 'donotsplitanything'", "signature": "def add_space(x):"}
{"text": "Remove data points in the tail (2sigma) of normal distribution.", "prompt": "Remove data points in the tail (2sigma) of normal distribution.", "code": "def remove_outlier(x):\r\npass", "task_id": "87", "test_setup_code": "", "test_list": ["assert remove_outlier([0, 0, 0, 0, 100]) == [100]", "assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]", "assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]", "assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]", "assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]"], "challenge_test_list": [], "entry_point": "remove_outlier", "test": "def check(candidate):\n\tassert remove_outlier([0, 0, 0, 0, 100]) == [100]\n\tassert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]\n\tassert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]\n\tassert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]\n\tassert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]", "signature": "def remove_outlier(x):"}
{"text": "Convert values into categorical variables.", "prompt": "Convert values into categorical variables.", "code": "def convert_to_categorical(x):\r\npass", "task_id": "88", "test_setup_code": "", "test_list": ["assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]", "assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]", "assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]", "assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]"], "challenge_test_list": [], "entry_point": "convert_to_categorical", "test": "def check(candidate):\n\tassert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]\n\tassert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\tassert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]\n\tassert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]\n\tassert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]", "signature": "def convert_to_categorical(x):"}
{"text": "Group items in an array using a provided function.", "prompt": "Group items in an array using a provided function.", "code": "def group_by_key(fun,x):\r\npass", "task_id": "89", "test_setup_code": "", "test_list": ["assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}", "assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}", "assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}", "assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}", "assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}"], "challenge_test_list": [], "entry_point": "group_by_key", "test": "def check(candidate):\n\tassert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}\n\tassert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}\n\tassert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}\n\tassert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}\n\tassert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}", "signature": "def group_by_key(fun,x):"}
{"text": "Given an array of \"prices\", find the max profit.", "prompt": "Given an array of \"prices\", find the max profit.", "code": "def max_stock_profit(array):\r\npass", "task_id": "90", "test_setup_code": "", "test_list": ["assert max_stock_profit([1, 2, 3, 4, 5]) == 4", "assert max_stock_profit([5, 2, 3, 4, 0]) == 2", "assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9", "assert max_stock_profit([1, 10, 1, 10, 0]) == 9", "assert max_stock_profit([1, 2, 3, 2, 1]) == 2"], "challenge_test_list": [], "entry_point": "max_stock_profit", "test": "def check(candidate):\n\tassert max_stock_profit([1, 2, 3, 4, 5]) == 4\n\tassert max_stock_profit([5, 2, 3, 4, 0]) == 2\n\tassert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9\n\tassert max_stock_profit([1, 10, 1, 10, 0]) == 9\n\tassert max_stock_profit([1, 2, 3, 2, 1]) == 2", "signature": "def max_stock_profit(array):"}
{"text": "Sum of all position indices where a value appear.", "prompt": "Sum of all position indices where a value appear.", "code": "def sum_positions(target,nums):\r\npass", "task_id": "91", "test_setup_code": "", "test_list": ["assert sum_positions(1,[1, 2, 1, 2, 1]) == 6", "assert sum_positions(1,[0, 0, 0]) == 0", "assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4", "assert sum_positions(1,[1, 2, 3, 2, 1]) == 0", "assert sum_positions(1,[1, '1', 2, '1']) == 4"], "challenge_test_list": [], "entry_point": "sum_positions", "test": "def check(candidate):\n\tassert sum_positions(1,[1, 2, 1, 2, 1]) == 6\n\tassert sum_positions(1,[0, 0, 0]) == 0\n\tassert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4\n\tassert sum_positions(1,[1, 2, 3, 2, 1]) == 0\n\tassert sum_positions(1,[1, '1', 2, '1']) == 4", "signature": "def sum_positions(target,nums):"}
{"text": "Find a missing number given a list and a max number.", "prompt": "Find a missing number given a list and a max number.", "code": "def find_missing_num(nums,N):\r\npass", "task_id": "92", "test_setup_code": "", "test_list": ["assert find_missing_num([1, 3, 4],4) == 2", "assert find_missing_num([1, 2, 3, 4],5) == 5", "assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6", "assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18", "assert find_missing_num([],1) == 1"], "challenge_test_list": [], "entry_point": "find_missing_num", "test": "def check(candidate):\n\tassert find_missing_num([1, 3, 4],4) == 2\n\tassert find_missing_num([1, 2, 3, 4],5) == 5\n\tassert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6\n\tassert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18\n\tassert find_missing_num([],1) == 1", "signature": "def find_missing_num(nums,N):"}
{"text": "Common numbers among rows in a matrix.", "prompt": "Common numbers among rows in a matrix.", "code": "def common_num_in_matrix(x):\r\npass", "task_id": "93", "test_setup_code": "", "test_list": ["assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]", "assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]", "assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]", "assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]", "assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]"], "challenge_test_list": [], "entry_point": "common_num_in_matrix", "test": "def check(candidate):\n\tassert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]\n\tassert common_num_in_matrix([[1, 1], [1, 1]]) == [1]\n\tassert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n\tassert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]\n\tassert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]", "signature": "def common_num_in_matrix(x):"}
{"text": "Obtain the sum of Collatz sequence starting from given number.", "prompt": "Obtain the sum of Collatz sequence starting from given number.", "code": "def sum_collatz(start):\r\npass", "task_id": "94", "test_setup_code": "", "test_list": ["assert sum_collatz(1) == 1", "assert sum_collatz(9) == 55", "assert sum_collatz(27) == 101440", "assert sum_collatz(28) == 330", "assert sum_collatz(123456789) == 1266590663"], "challenge_test_list": [], "entry_point": "sum_collatz", "test": "def check(candidate):\n\tassert sum_collatz(1) == 1\n\tassert sum_collatz(9) == 55\n\tassert sum_collatz(27) == 101440\n\tassert sum_collatz(28) == 330\n\tassert sum_collatz(123456789) == 1266590663", "signature": "def sum_collatz(start):"}
{"text": "Name the location of a \"ball\" after cup swapping.", "prompt": "Name the location of a \"ball\" after cup swapping.", "code": "def cup_swap(start,swap):\r\npass", "task_id": "95", "test_setup_code": "", "test_list": ["assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'", "assert cup_swap('B',['AC', 'CA']) == 'B'", "assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'", "assert cup_swap('C',['AB', 'AC']) == 'A'", "assert cup_swap('A',[]) == 'A'"], "challenge_test_list": [], "entry_point": "cup_swap", "test": "def check(candidate):\n\tassert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'\n\tassert cup_swap('B',['AC', 'CA']) == 'B'\n\tassert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'\n\tassert cup_swap('C',['AB', 'AC']) == 'A'\n\tassert cup_swap('A',[]) == 'A'", "signature": "def cup_swap(start,swap):"}
{"text": "Reverse digits in a number with a stack.", "prompt": "Reverse digits in a number with a stack.", "code": "def reverse_digits(x):\r\npass", "task_id": "96", "test_setup_code": "", "test_list": ["assert reverse_digits(123) == 321", "assert reverse_digits(123456789) == 987654321", "assert reverse_digits(100) == 1", "assert reverse_digits(0) == 0", "assert reverse_digits(1230) == 321"], "challenge_test_list": [], "entry_point": "reverse_digits", "test": "def check(candidate):\n\tassert reverse_digits(123) == 321\n\tassert reverse_digits(123456789) == 987654321\n\tassert reverse_digits(100) == 1\n\tassert reverse_digits(0) == 0\n\tassert reverse_digits(1230) == 321", "signature": "def reverse_digits(x):"}
{"text": "Calculate arrowheads left and right.", "prompt": "Calculate arrowheads left and right.", "code": "def calculate_arrows(x):\r\npass", "task_id": "97", "test_setup_code": "", "test_list": ["assert calculate_arrows(['<<', '>>>']) == '>'", "assert calculate_arrows(['<<<', '>>']) == '<'", "assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'", "assert calculate_arrows(['<<', '>>']) == ''", "assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'"], "challenge_test_list": [], "entry_point": "calculate_arrows", "test": "def check(candidate):\n\tassert calculate_arrows(['<<', '>>>']) == '>'\n\tassert calculate_arrows(['<<<', '>>']) == '<'\n\tassert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'\n\tassert calculate_arrows(['<<', '>>']) == ''\n\tassert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'", "signature": "def calculate_arrows(x):"}
{"text": "Check if the interval (max-min) is included in a list.", "prompt": "Check if the interval (max-min) is included in a list.", "code": "def check_interval_num_(x):\r\npass", "task_id": "98", "test_setup_code": "", "test_list": ["assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False", "assert check_interval_num_([1, 7, 8]) == True", "assert check_interval_num_([10]) == False", "assert check_interval_num_([0, 1]) == True", "assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False"], "challenge_test_list": [], "entry_point": "check_interval_num_", "test": "def check(candidate):\n\tassert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False\n\tassert check_interval_num_([1, 7, 8]) == True\n\tassert check_interval_num_([10]) == False\n\tassert check_interval_num_([0, 1]) == True\n\tassert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False", "signature": "def check_interval_num_(x):"}
{"text": "Encode a string by converting repeated chars with counts.", "prompt": "Encode a string by converting repeated chars with counts.", "code": "def length_encoding(x):\r\npass", "task_id": "99", "test_setup_code": "", "test_list": ["assert length_encoding('aabbddcc') == 'a2b2d2c2'", "assert length_encoding('abc') == 'a1b1c1'", "assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'", "assert length_encoding('aaa') == 'a3'", "assert length_encoding('') == ''"], "challenge_test_list": [], "entry_point": "length_encoding", "test": "def check(candidate):\n\tassert length_encoding('aabbddcc') == 'a2b2d2c2'\n\tassert length_encoding('abc') == 'a1b1c1'\n\tassert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'\n\tassert length_encoding('aaa') == 'a3'\n\tassert length_encoding('') == ''", "signature": "def length_encoding(x):"}
{"text": "Use regex to match email addresses and remove special chars.", "prompt": "Use regex to match email addresses and remove special chars.", "code": "def convert_email(x):\r\npass", "task_id": "100", "test_setup_code": "", "test_list": ["assert convert_email('abc@example.com.') == 'abc'", "assert convert_email('a.b.c@example.com test.') == 'a b c'", "assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '", "assert convert_email('abc@example.com test. def@abc.def.') == 'abc'", "assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'"], "challenge_test_list": [], "entry_point": "convert_email", "test": "def check(candidate):\n\tassert convert_email('abc@example.com.') == 'abc'\n\tassert convert_email('a.b.c@example.com test.') == 'a b c'\n\tassert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '\n\tassert convert_email('abc@example.com test. def@abc.def.') == 'abc'\n\tassert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'", "signature": "def convert_email(x):"}
{"text": "Print out the second largest element in an array.", "prompt": "Print out the second largest element in an array.", "code": "def second_largest(A):\r\npass", "task_id": "101", "test_setup_code": "", "test_list": ["assert second_largest([1, 3, 2, 2]) == 2", "assert second_largest([1000, 1000, 1000]) == 1000", "assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2", "assert second_largest([3, 3, 3, 2, 2, 1]) == 2", "assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2"], "challenge_test_list": [], "entry_point": "second_largest", "test": "def check(candidate):\n\tassert second_largest([1, 3, 2, 2]) == 2\n\tassert second_largest([1000, 1000, 1000]) == 1000\n\tassert second_largest([0, 0.2, 0.4, -0.2]) == 0.2\n\tassert second_largest([3, 3, 3, 2, 2, 1]) == 2\n\tassert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2", "signature": "def second_largest(A):"}
{"text": "Return the largest prefix sum in an array.", "prompt": "Return the largest prefix sum in an array.", "code": "def largest_prefix_sum(A):\r\npass", "task_id": "102", "test_setup_code": "", "test_list": ["assert largest_prefix_sum([1, 3, 2, 2]) == 8", "assert largest_prefix_sum([3, -3, -3]) == 3", "assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6", "assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10", "assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8"], "challenge_test_list": [], "entry_point": "largest_prefix_sum", "test": "def check(candidate):\n\tassert largest_prefix_sum([1, 3, 2, 2]) == 8\n\tassert largest_prefix_sum([3, -3, -3]) == 3\n\tassert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6\n\tassert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10\n\tassert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8", "signature": "def largest_prefix_sum(A):"}
{"text": "Find the element which is the cloest to 0 and print the distance.", "prompt": "Find the element which is the cloest to 0 and print the distance.", "code": "def closest_element_to_zero(A):\r\npass", "task_id": "103", "test_setup_code": "", "test_list": ["assert closest_element_to_zero([1, 3, 2, 2]) == 1", "assert closest_element_to_zero([3, -3, -3]) == 3", "assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0", "assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1", "assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2"], "challenge_test_list": [], "entry_point": "closest_element_to_zero", "test": "def check(candidate):\n\tassert closest_element_to_zero([1, 3, 2, 2]) == 1\n\tassert closest_element_to_zero([3, -3, -3]) == 3\n\tassert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0\n\tassert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1\n\tassert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2", "signature": "def closest_element_to_zero(A):"}
{"text": "Find the max length contiguous subarray with unique characters.", "prompt": "Find the max length contiguous subarray with unique characters.", "code": "def consecutive_unique_char(A):\r\npass", "task_id": "104", "test_setup_code": "", "test_list": ["assert consecutive_unique_char('acc') == 2", "assert consecutive_unique_char('accccccccccccccccccccc') == 2", "assert consecutive_unique_char('abcdef') == 6", "assert consecutive_unique_char('acdeffce') == 5", "assert consecutive_unique_char('aaaaaaaaaaaaa') == 1"], "challenge_test_list": [], "entry_point": "consecutive_unique_char", "test": "def check(candidate):\n\tassert consecutive_unique_char('acc') == 2\n\tassert consecutive_unique_char('accccccccccccccccccccc') == 2\n\tassert consecutive_unique_char('abcdef') == 6\n\tassert consecutive_unique_char('acdeffce') == 5\n\tassert consecutive_unique_char('aaaaaaaaaaaaa') == 1", "signature": "def consecutive_unique_char(A):"}
{"text": "Obtain the frequency of the most frequent character.", "prompt": "Obtain the frequency of the most frequent character.", "code": "def highest_frequency_char(A):\r\npass", "task_id": "105", "test_setup_code": "", "test_list": ["assert highest_frequency_char('abadb') == 2", "assert highest_frequency_char('aaaaaaaa') == 8", "assert highest_frequency_char('caaaaaaaaaaaa') == 12", "assert highest_frequency_char('cccccaaaaa') == 5", "assert highest_frequency_char('abcde') == 0"], "challenge_test_list": [], "entry_point": "highest_frequency_char", "test": "def check(candidate):\n\tassert highest_frequency_char('abadb') == 2\n\tassert highest_frequency_char('aaaaaaaa') == 8\n\tassert highest_frequency_char('caaaaaaaaaaaa') == 12\n\tassert highest_frequency_char('cccccaaaaa') == 5\n\tassert highest_frequency_char('abcde') == 0", "signature": "def highest_frequency_char(A):"}
{"text": "Find the length of longest palindrome substring.", "prompt": "Find the length of longest palindrome substring.", "code": "def longest_palindrome(A):\r\npass", "task_id": "106", "test_setup_code": "", "test_list": ["assert longest_palindrome('a') == 1", "assert longest_palindrome('abcba') == 5", "assert longest_palindrome('caaa') == 3", "assert longest_palindrome('cccccaaaaa') == 5", "assert longest_palindrome('abcde') == 1"], "challenge_test_list": [], "entry_point": "longest_palindrome", "test": "def check(candidate):\n\tassert longest_palindrome('a') == 1\n\tassert longest_palindrome('abcba') == 5\n\tassert longest_palindrome('caaa') == 3\n\tassert longest_palindrome('cccccaaaaa') == 5\n\tassert longest_palindrome('abcde') == 1", "signature": "def longest_palindrome(A):"}
{"text": "Calcuate prime numbers in a range.", "prompt": "Calcuate prime numbers in a range.", "code": "def count_primes(A):\r\npass", "task_id": "107", "test_setup_code": "", "test_list": ["assert count_primes(10) == 4", "assert count_primes(0) == 0", "assert count_primes(1) == 0", "assert count_primes(100) == 25", "assert count_primes(17) == 6"], "challenge_test_list": [], "entry_point": "count_primes", "test": "def check(candidate):\n\tassert count_primes(10) == 4\n\tassert count_primes(0) == 0\n\tassert count_primes(1) == 0\n\tassert count_primes(100) == 25\n\tassert count_primes(17) == 6", "signature": "def count_primes(A):"}
{"text": "Rotate an array to the right k steps.", "prompt": "Rotate an array to the right k steps.", "code": "def rotate_array(A,K):\r\npass", "task_id": "108", "test_setup_code": "", "test_list": ["assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]", "assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]", "assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]", "assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]", "assert rotate_array([2, 3, 4],8) == [3, 4, 2]"], "challenge_test_list": [], "entry_point": "rotate_array", "test": "def check(candidate):\n\tassert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]\n\tassert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]\n\tassert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]\n\tassert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]\n\tassert rotate_array([2, 3, 4],8) == [3, 4, 2]", "signature": "def rotate_array(A,K):"}
{"text": "Check whether one array can be divided into two subsets which have equal sums.", "prompt": "Check whether one array can be divided into two subsets which have equal sums.", "code": "def partition_equal_sets(A):\r\npass", "task_id": "109", "test_setup_code": "", "test_list": ["assert partition_equal_sets([1, 2, 3, 4, 5]) == False", "assert partition_equal_sets([1, 5, 11, 5]) == True", "assert partition_equal_sets([1, 2, 3, 5]) == False", "assert partition_equal_sets([1, 2, 0, 4]) == False", "assert partition_equal_sets([2, 3, 4, 3]) == True"], "challenge_test_list": [], "entry_point": "partition_equal_sets", "test": "def check(candidate):\n\tassert partition_equal_sets([1, 2, 3, 4, 5]) == False\n\tassert partition_equal_sets([1, 5, 11, 5]) == True\n\tassert partition_equal_sets([1, 2, 3, 5]) == False\n\tassert partition_equal_sets([1, 2, 0, 4]) == False\n\tassert partition_equal_sets([2, 3, 4, 3]) == True", "signature": "def partition_equal_sets(A):"}
{"text": "Compute the integer part of square root.", "prompt": "Compute the integer part of square root.", "code": "def square_root_integer(A):\r\npass", "task_id": "110", "test_setup_code": "", "test_list": ["assert square_root_integer(2) == 1", "assert square_root_integer(5) == 2", "assert square_root_integer(101) == 10", "assert square_root_integer(8) == 2", "assert square_root_integer(226) == 15"], "challenge_test_list": [], "entry_point": "square_root_integer", "test": "def check(candidate):\n\tassert square_root_integer(2) == 1\n\tassert square_root_integer(5) == 2\n\tassert square_root_integer(101) == 10\n\tassert square_root_integer(8) == 2\n\tassert square_root_integer(226) == 15", "signature": "def square_root_integer(A):"}
{"text": "Return the digits after an interger is plused by 1.", "prompt": "Return the digits after an interger is plused by 1.", "code": "def plus_1(A):\r\npass", "task_id": "111", "test_setup_code": "", "test_list": ["assert plus_1(2) == [3]", "assert plus_1(5) == [6]", "assert plus_1(101) == [1, 0, 2]", "assert plus_1(2345) == [2, 3, 4, 6]", "assert plus_1(229) == [2, 3, 0]"], "challenge_test_list": [], "entry_point": "plus_1", "test": "def check(candidate):\n\tassert plus_1(2) == [3]\n\tassert plus_1(5) == [6]\n\tassert plus_1(101) == [1, 0, 2]\n\tassert plus_1(2345) == [2, 3, 4, 6]\n\tassert plus_1(229) == [2, 3, 0]", "signature": "def plus_1(A):"}
{"text": "Check whether one integer is a sum of  two square numbers.", "prompt": "Check whether one integer is a sum of  two square numbers.", "code": "def check_square_sum(A):\r\npass", "task_id": "112", "test_setup_code": "", "test_list": ["assert check_square_sum(2) == True", "assert check_square_sum(5) == True", "assert check_square_sum(101) == True", "assert check_square_sum(3) == False", "assert check_square_sum(7) == False"], "challenge_test_list": [], "entry_point": "check_square_sum", "test": "def check(candidate):\n\tassert check_square_sum(2) == True\n\tassert check_square_sum(5) == True\n\tassert check_square_sum(101) == True\n\tassert check_square_sum(3) == False\n\tassert check_square_sum(7) == False", "signature": "def check_square_sum(A):"}
{"text": "Determine whether standard deviation is less than 1.", "prompt": "Determine whether standard deviation is less than 1.", "code": "def comare_std._dev.(A):\r\npass", "task_id": "113", "test_setup_code": "", "test_list": ["assert comare_std._dev.([14, 8, 11, 10]) == False", "assert comare_std._dev.([3, 3, 3, 4]) == True", "assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False", "assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False", "assert comare_std._dev.([1, 0, 1, 0]) == True"], "challenge_test_list": [], "entry_point": "comare_std._dev.", "test": "def check(candidate):\n\tassert comare_std._dev.([14, 8, 11, 10]) == False\n\tassert comare_std._dev.([3, 3, 3, 4]) == True\n\tassert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False\n\tassert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False\n\tassert comare_std._dev.([1, 0, 1, 0]) == True", "signature": "def comare_std._dev.(A):"}
{"text": "Calculate the sum of row and column numbers.", "prompt": "Calculate the sum of row and column numbers.", "code": "def matrix_size(A):\r\npass", "task_id": "114", "test_setup_code": "", "test_list": ["assert matrix_size([[3, 2], [2, 3]]) == 4", "assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5", "assert matrix_size([[1]]) == 2", "assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6", "assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7"], "challenge_test_list": [], "entry_point": "matrix_size", "test": "def check(candidate):\n\tassert matrix_size([[3, 2], [2, 3]]) == 4\n\tassert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5\n\tassert matrix_size([[1]]) == 2\n\tassert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6\n\tassert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7", "signature": "def matrix_size(A):"}
{"text": "Calculate the difference between mean and median for an array.", "prompt": "Calculate the difference between mean and median for an array.", "code": "def diff_mean_and_median(A):\r\npass", "task_id": "115", "test_setup_code": "", "test_list": ["assert diff_mean_and_median([3, 2, 2, 3]) == 0", "assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335", "assert diff_mean_and_median([1]) == 0", "assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668", "assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333"], "challenge_test_list": [], "entry_point": "diff_mean_and_median", "test": "def check(candidate):\n\tassert diff_mean_and_median([3, 2, 2, 3]) == 0\n\tassert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335\n\tassert diff_mean_and_median([1]) == 0\n\tassert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668\n\tassert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333", "signature": "def diff_mean_and_median(A):"}
