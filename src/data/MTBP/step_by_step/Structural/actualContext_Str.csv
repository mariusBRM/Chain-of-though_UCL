,Unnamed: 0,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code,code_test
0,0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","def sandwich_string(A):
	my_string = ""{A}""
	print(my_string)
	return my_string

#Call the function sandwich_string with the value of 10.
sandwich_string(10)

#Assign the string ""sandwich"" to a variable named ""my_string"".
my_string = ""sandwich""
#Print the string ""sandwich"" to the screen.
print(my_string)
#
my_string = my_string.lower()
#Print the string ""sandwich"" to the screen.
print(my_string)
#
my_string = my_string.upper()
#Print the string ""SANDWICH"" to the screen.
print(my_string)
#
print(len(my_string))
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	.upper()
	)
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	.lower()
	)
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	)
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	)
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	)
#
print(my_
	.replace(""a"", ""A"")
	.sort()
	)
#
print(my_","def sandwich_string(A):
	my_string = ""{A}""
	print(my_string)
	return my_string

#Call the function sandwich_string with the value of 10.
"
1,1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","def normalize_integer_list(numbers):
	return [int(x) for x in numbers]

def normalize_float_list(numbers):
	return [float(x) for x in numbers]

def normalize_string_list(strings):
	return [str(x) for x in strings]

","def normalize_integer_list(numbers):
	return [int(x) for x in numbers]

def normalize_float_list(numbers):
	return [float(x) for x in numbers]

def normalize_string_list(strings):
"
2,2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","def convert_time(a1,a2):
	return a1*60+a2

def convert_time_2(a1,a2):
	return a1*60+a2

def convert_time_3(a1,a2):
	return a1*60+a2

def convert_time_4(a1,a2):
	return a1*60+a2

def convert_time_5(a1,a2):
	return a1*60+a2

def convert_time_6(a1,a2):
	return a1*60+a2

def convert_time_7(a1,a2,a3):
	return a1*60+a2+a3
","def convert_time(a1,a2):
	return a1*60+a2

def convert_time_2(a1,a2):
	return a1*60+a2

def convert_time_3(a1,a2):
	return a1*60+a2

def convert_time_4(a1,a2):
	return a1*60+a2

def convert_time_5(a1,a2):
	return a1*60+a2

def convert_time_6(a1,a2):
	return a1*60+a2

def convert_time_7(a1,a2,a3):
"
3,3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","def squared_fibonacci(a1):
	
	print(a1, end = "" "")
	for i in range(a1-1):
		print(i, end = "" "")
		print(i**2, end = "" "")
	print()

#Call the function.
squared_fibonacci(10)","def squared_fibonacci(a1):
	
	print(a1, end = "" "")
	for i in range(a1-1):
		print(i, end = "" "")
		print(i**2, end = "" "")
	print()

#Call the function.
"
4,4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","def count_negative_numbers(A):
	my_numbers = A
	negative_numbers = []
	for i in my_numbers:
		if i < 0:
			negative_numbers.append(i)
	return negative_numbers

#Call the function ""{count_negative_numbers}"" with the list ""{A}"".
negative_numbers =
	n_neg = count_negative_numbers(A)
	print(n_neg)

#Write a function named ""count_positive_numbers"" that takes a list of numbers as input and returns a list of the numbers that are positive.
#The function should return a list of the numbers that are positive.
#The function should not modify the list of numbers.
#The function should return a list of the numbers that are positive.
#The function should not modify the list of numbers.


#Call the function ""{count_positive_numbers}"" with the list ""{A}"".
positive_numbers =
	n_pos = count_positive_numbers(A)
	print(n_pos)

#Write a function named ""count_odd_numbers"" that","def count_negative_numbers(A):
	my_numbers = A
	negative_numbers = []
	for i in my_numbers:
		if i < 0:
			negative_numbers.append(i)
	return negative_numbers

#Call the function ""{count_negative_numbers}"" with the list ""{A}"".
"
5,5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","def pandas_mean(a1,a2,a3,a4):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	mean = df.mean()
	return mean

#Define the function to calculate the median.
def pandas_median(a1,a2,a3,a4):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	median = df.median()
	return median

#Define the function to calculate the mode.
def pandas_mode(a1,a2,a3,a4):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	means = df.mean()
	modes = df.mode()
	return modes

#Define the function to calculate the variance.
def pandas_variance(a1,a2,a3,a4):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	means = df.mean()
	variances = df.var()
	return variances

#Define the function to calculate the standard deviation.
def pandas_standard_deviation(a1,a2,a3,a4):
	import pandas as pd","def pandas_mean(a1,a2,a3,a4):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	mean = df.mean()
	return mean

#Define the function to calculate the median.
"
6,6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","def fizz_buzz(a1,a2,a3,a4):
	list_of_numbers = [a3,a4]
	list_of_strings = [""Fizz"",""Buzz""]
	list_of_tuples = [(a1,a2),(a1,a3),(a1,a4),(a2,a3),(a2,a4),(a3,a4)]
	list_of_lists = [[a1,a2],[a1,a3],[a1,a4],[
	a2,a3,a4]]
	print(list_of_numbers)
	print(list_of_strings)
	print(list_of_tuples)
	print(list_of_lists)
	print(list_of_numbers)
	print(list_of_strings)
	print(list_of_tuples)
	print(list_of_lists)
	print(list_of_numbers)","def fizz_buzz(a1,a2,a3,a4):
	list_of_numbers = [a3,a4]
	list_of_strings = [""Fizz"",""Buzz""]
	list_of_tuples = [(a1,a2),(a1,a3),(a1,a4),(a2,a3),(a2,a4),(a3,a4)]
	list_of_lists = [[a1,a2],[a1,a3],[a1,a4],[
	a2,a3,a4]]
	print(list_of_numbers)
	print(list_of_strings)
	print(list_of_tuples)
	print(list_of_lists)
	print(list_of_numbers)
	print(list_of_strings)
	print(list_of_tuples)
	print(list_of_lists)
"
7,7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","def bi-grams(a1):
	sentence = a1
	bigrams = []
	for i in range(len(sentence)-1):
		#Create a variable named bigram.
		bigram = sentence[i] + sentence[i+1]
		#Add the bigram to the list named bigrams.
		bigrams.append(bigram)
	return bigrams

#Create a function named bigrams_count.
def b
	bigrams = bi_grams(sentence)
	print(len(bigrams))
	print(bigrams)

#Create a function named bigrams_count_2.
def bigrams_count_2(a1):
	sentence = a1
	bigrams = []
	for i in range(len(sentence)-1):
		#Create a variable named bigram.
		bigram =","def bi-grams(a1):
	sentence = a1
	bigrams = []
	for i in range(len(sentence)-1):
		#Create a variable named bigram.
		bigram = sentence[i] + sentence[i+1]
		#Add the bigram to the list named bigrams.
		bigrams.append(bigram)
	return bigrams

#Create a function named bigrams_count.
"
8,8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","def top_note(a1,a2,a3,a4):
	my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
	print(my_notes)
	print(my_notes.get(""Mitch""))
	def top_note(a1,a2,a3,a4):
		my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
		print(my_notes)
		print(my_notes.get(""Mitch""))
		#Create a function that takes a dictionary of objects like {{ ""
	
	top_name = max(my_notes, key=my_notes.get)
	print(top_name)
	top_note = max(my_notes.values())
	print(top_note)
	top_note = max(my_notes.values())
	print(top_note)","def top_note(a1,a2,a3,a4):
	my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
	print(my_notes)
	print(my_notes.get(""Mitch""))
	def top_note(a1,a2,a3,a4):
		my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
		print(my_notes)
		print(my_notes.get(""Mitch""))
		#Create a function that takes a dictionary of objects like {{ ""
	
	top_name = max(my_notes, key=my_notes.get)
	print(top_name)
	top_note = max(my_notes.values())
	print(top_note)
	top_note = max(my_notes.values())
"
9,9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","def hex_to_binary(a1):
	return bin(int(a1, 16))[2:]

def binary_to_hex(a2):
	return hex(int(a2, 2))[2:]

def to_binary(a3):
	return hex_to_binary(a3)

def to_hex(a4):
	return binary_to_hex(a4)

def to_decimal(a5):

	my_hex = a5

	my_binary = to_binary(my_hex)

	my_decimal = int(my_binary, 2)

	return my_decimal

def to_octal(a6):

	my_hex = a6

	my_binary = to_binary(my_hex)

	my_decimal = int(my_binary, 2)

	my_octal = oct(my_decimal)

	return my_octal

def to_hexadecimal(a7):

	my_hex = a7

	my_binary
	result = hex(int(my_binary, 2))[2:]
	return result","def hex_to_binary(a1):
	return bin(int(a1, 16))[2:]

def binary_to_hex(a2):
	return hex(int(a2, 2))[2:]

def to_binary(a3):
	return hex_to_binary(a3)

def to_hex(a4):
	return binary_to_hex(a4)

def to_decimal(a5):

	my_hex = a5

	my_binary = to_binary(my_hex)

	my_decimal = int(my_binary, 2)

	return my_decimal

def to_octal(a6):

	my_hex = a6

	my_binary = to_binary(my_hex)

	my_decimal = int(my_binary, 2)

	my_octal = oct(my_decimal)

	return my_octal

def to_hexadecimal(a7):

	my_hex = a7

	my_binary
	result = hex(int(my_binary, 2))[2:]
"
10,10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","def invert_dict(a1,a2,a3):
	my_dict = {a1:a2}
	my_dict.update({a3:a1})
	return my_dict

#Create a dictionary named ""my_dict"" with the following keys and values:
#{1:2, 3:4, 5:6}
#{2:1, 4:3, 6:5}
#{3:2

def invert(my_dict):
	my_dict_inverted = {}
	for key, value in my_dict.items():
		my_dict_inverted[value] = key
	return my_dict_inverted

#Create a dictionary named ""my_dict"" with the following keys and values:
#{1:2, 3:4, 5:6}
#{2:1, 4:3, 6:5}
#{3:2

def is_inverted(a1,a2):
	if a1 == a2:
		return True
	else:
		return False

#Create a dictionary named ""my_dict"" with the following keys and values:
#{1:2, 3:4, 5:6}
#{2:1, 4:3, 6:5}
#{3:2


def is_inverted_dict(a1,a2):
	if a1 == a2:
		print(""The two dictionaries are the same."")
	else:
		print(""The two dictionaries are not the same."")

#Create a dictionary named ""my_dict"" with the following keys and values:
#{1:2, 3:4, 5:6}
#{","def invert_dict(a1,a2,a3):
	my_dict = {a1:a2}
	my_dict.update({a3:a1})
	return my_dict

#Create a dictionary named ""my_dict"" with the following keys and values:
"
11,11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","def class_definition(a1,a2,a3,a4,a5):
	print(a5.getter())

#Create a class named Player.
class Player:
	def getter(self):
		return self.a1
	def setter(self,a1):
		self.a1 = a1
	def __init__(self,a1):
		self.a1 = a1

#Create a class named Player2.
","def class_definition(a1,a2,a3,a4,a5):
	print(a5.getter())

#Create a class named Player.
"
12,12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","def longest_number(a1):
	def num_len(num):
		return len(str(num))
	def num_len_list(num_list):
		return sum(num_len(num) for num in num_list)
	my_list = [a1]
	for i in range(1, len(my_list)):
		#If the current value is greater than the previous value, add the current value to the list
		if my_list[i] > my_list[i-1]:
			my_list.append(my_list[i])
	return num_len_list(my_list)

#Test
print(longest_number(12345))
<|endoftext|>","def longest_number(a1):
	def num_len(num):
		return len(str(num))
	def num_len_list(num_list):
		return sum(num_len(num) for num in num_list)
	my_list = [a1]
	for i in range(1, len(my_list)):
		#If the current value is greater than the previous value, add the current value to the list
		if my_list[i] > my_list[i-1]:
			my_list.append(my_list[i])
	return num_len_list(my_list)

#Test
"
13,13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","def linear_regression(a1):
	from sklearn.linear_model import LinearRegression
	regressor = LinearRegression()
	regressor.fit(a1, a1)
	y_pred = regressor.predict(a1)
	return y_pred

#Import the class LinearRegression from sklearn.linear_model
from sklearn.linear_model import LinearRegression
#Create a LinearRegression object
regressor = LinearRegression()
#Fit the model
	from math import sqrt
	X = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]
	y = [1, 2, 3, 4, 5, 6, 7, 8, 9]
	regressor.
	def f(x):
		return x * 2
	X = [[f(x) for x in row] for row in X]
	y = [f(y) for y in y]
	X = [[f(x), f(y)] for x, y in zip(X,
	y)]
	X = [[f(x) for x in row] for row in X]
	y = [f(y) for y in y]
	X = [[f(x), f(y)] for x, y in zip(X,
	y)]
	regressor.fit(X, y)
	y_pred = regressor.predict(X)
	return y_pred

#Import the class LinearRegression from sklearn.linear_model
from sklearn.linear_model import LinearRegression
#Create a LinearRegression object
regressor = LinearRegression()
#Fit the model
	from math import sqrt
	X = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]
	y = [1, 2, 3, 4, 5, 6, 7, 8, 9]
	regressor.fit(X, y.reshape(-1, 1))
	y_pred = regressor.predict(X)
	return y_pred

#Import

#Create a LinearRegression object
regressor = LinearRegression()
#Fit the model
	from math import sqrt","def linear_regression(a1):
	from sklearn.linear_model import LinearRegression
	regressor = LinearRegression()
	regressor.fit(a1, a1)
	y_pred = regressor.predict(a1)
	return y_pred

#Import the class LinearRegression from sklearn.linear_model
"
14,14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","def encrypt_and_decrypt(a1):
	def decrypt(a2):
		#Create a variable to store the decrypted string.
		decrypted = """"
		#Create a for loop to iterate through the encrypted string.
		for i in range(len(a2)):
			#Create a variable to store the character at the current index.
			c = a2[i]
			#If the character is a letter, add it to the decrypted string.
			if c.isalpha():
				decrypted += c
			#If the character is a number, add it to the decrypted string.
			elif c.isdigit
	original_text = a1
	for i in range(len(original_text)):
		#Create a variable to store the character at the current index.
		c = original_text[i]
		#If the character is a letter, add it to the decrypted string.
		if c.isalpha():
			decrypted += c
		#If the character is a number, add it to the decrypted string.
		elif c.isdigit:
			decrypted += c

	encrypted_text = encrypt(original_text)
	decrypted_text = decrypt(encrypted_text)
	return decrypted_text

#Call the function encrypt_and_decrypt with the string 'Hello World!' and assign the result to a variable named 'encrypted_text'.
encrypted_text = encrypt_and_decrypt('Hello World!')
#Print the encrypted_text.
print(encrypted_text)

#
restored_text = decrypt(encrypted_text)
#Print the restored_text.
print(restored_text)

#
encrypted_text = encrypt('Hello World!')
#Print the encrypted_text.
print(encrypted_text)

#
restored_text = decrypt(encrypted_text)
#Print
print(my_result)

#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

	print(my_list)
	print(my_dict)
	print(my_tuple)
	print(my_set)
	print(my_string)
	print(my_integer)
	print(my_float)
	print(my_boolean)
	print(my_","def encrypt_and_decrypt(a1):
	def decrypt(a2):
		#Create a variable to store the decrypted string.
		decrypted = """"
		#Create a for loop to iterate through the encrypted string.
		for i in range(len(a2)):
			#Create a variable to store the character at the current index.
			c = a2[i]
			#If the character is a letter, add it to the decrypted string.
			if c.isalpha():
				decrypted += c
			#If the character is a number, add it to the decrypted string.
			elif c.isdigit
	original_text = a1
	for i in range(len(original_text)):
		#Create a variable to store the character at the current index.
		c = original_text[i]
		#If the character is a letter, add it to the decrypted string.
		if c.isalpha():
			decrypted += c
		#If the character is a number, add it to the decrypted string.
		elif c.isdigit:
			decrypted += c

	encrypted_text = encrypt(original_text)
	decrypted_text = decrypt(encrypted_text)
	return decrypted_text

#Call the function encrypt_and_decrypt with the string 'Hello World!' and assign the result to a variable named 'encrypted_text'.
"
15,15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","def compare_object_equivalence(a1,a2,a3):
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
			return self.name
	p1 = Person(a1,a2)
	p2 = Person(a3,a2)
	return p1 == p2

#Function to compare two lists of objects.
def compare_list_equivalence(a1,a2):
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
			return self.name
	p1 = Person(a1,a2)
	p2 = Person(a1,a2)
	return p1 == p2

#Function to compare two dictionaries of objects.
def compare_dict_equivalence(a1,a2):
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
			return self.name
	p1 = Person(a1,a2)
	p2 = Person(a1,a2)
	return p1 == p2

#Function to compare two sets of objects.
def compare_set_equivalence(a1,a2):
	persons = []
	for i in range(len(a1)):
		persons.append(Person(a1[i],a2[i]))
	persons_set = set(persons)
	persons_set_list
	unique_persons = set()
	for person in persons_set:
		unique_persons.add(person)
	return unique_persons

#Function to compare two tuples of objects.
def compare_tuple_equivalence(a1,a2):
	persons = []
	for i in range(len(a1)):
		persons.append(Person(a1[i],a2[i]))
	persons_tuple = tuple(persons)
	persons_tuple_list
	
	print(""Number of elements in the set: "",len(persons_tuple))
	print(""Elements in the set: "",persons_tuple)
	print(""Number of elements in the list: "",len(persons_tuple_list))
	print(""Elements in the list: "",persons_tuple_list)
	print(""Number of elements in the dictionary: "",len(persons_","def compare_object_equivalence(a1,a2,a3):
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
			return self.name
	p1 = Person(a1,a2)
	p2 = Person(a3,a2)
	return p1 == p2

#Function to compare two lists of objects.
"
16,16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","def drunken_python(a1):
# str(4) = 4
# str(""4"") = 4
# int(""4"") = ""4""
# int(4) = ""4"".
# So, we have to use the built-in functions to convert the string to an integer.
	return int(a1)

#The following function is a little more complicated than the previous one.
#It takes a string and returns a list of the characters in the string.
def drunken_python(a1):
# str(4) = 4
# str(""4"") = 4
# int(""4"") = ""4""

	def int_to_str(a2):
		return str(a2)

	def str_to_int(a3):
		return int(a3)

	def str_to_list(a4):
		return [a","def drunken_python(a1):
"
17,17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","def morse_code(a1):
	chars_to_dots = {'A':'.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W':
	'....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---',
	'...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....',
	'...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....',","def morse_code(a1):
	chars_to_dots = {'A':'.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W':
	'....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---',
	'...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....', '...-', '---', '....',
"
18,18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","def two-sum(a1,a2):
	target = a2
	a = []
	for i in range(len(a1)):
		#Iterate through the list of integers.
		for j in range(len(a1)):
			#If the current value of {a1} is equal to the current value of {a2} and the current value of {a1} is not equal to the current value of {a2}, add the current value of {a1} to the list of integers.
			if a1[i] + a1[j]
	return a

#Test the function.
print(two_sum([1,2,3,4,5],6))","def two-sum(a1,a2):
	target = a2
	a = []
	for i in range(len(a1)):
		#Iterate through the list of integers.
		for j in range(len(a1)):
			#If the current value of {a1} is equal to the current value of {a2} and the current value of {a1} is not equal to the current value of {a2}, add the current value of {a1} to the list of integers.
			if a1[i] + a1[j]
	return a

#Test the function.
"
19,19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","def k-means(a1):
	points1 = sample(a1, 100)
	points2 = sample(a1, 100)
	points3 = sample(a1, 100)
	points = np.concatenate((points1, points2, points3))
	kmeans = KMeans(n_clusters=3)
	kmeans.fit(points)
	labels = kmeans.labels_
	centers = kmeans.cluster_centers_
	centroids = np.array(centers)
	centroids = centroids.reshape(
		(3, 3))
	for i in range(100):
		my_centroids = kmeans.predict(points)
		print(""Iteration: "", i)
		print(""My Centroids: "", my_centroids)
		print(""My Centroids: "", centroids)
		print(""Distance between my centroids and centroids: "", np.linalg.norm(my_centroids - centroids))
		centroids = my_centroids
	c1 = centroids[0]","def k-means(a1):
	points1 = sample(a1, 100)
	points2 = sample(a1, 100)
	points3 = sample(a1, 100)
	points = np.concatenate((points1, points2, points3))
	kmeans = KMeans(n_clusters=3)
	kmeans.fit(points)
	labels = kmeans.labels_
	centers = kmeans.cluster_centers_
	centroids = np.array(centers)
	centroids = centroids.reshape(
		(3, 3))
	for i in range(100):
		my_centroids = kmeans.predict(points)
		print(""Iteration: "", i)
		print(""My Centroids: "", my_centroids)
		print(""My Centroids: "", centroids)
		print(""Distance between my centroids and centroids: "", np.linalg.norm(my_centroids - centroids))
		centroids = my_centroids
"
20,20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","def even_odd_sum(numbers):
	elements = [numbers]
	even_numbers = []
	odd_numbers = []
	even_sum = 0
	odd_sum = 0
	for i in range(len(numbers)):
		if numbers[i] % 2 == 0:
			even_numbers.append(numbers[i])
			even_sum += numbers[i]
	for i in range(len(numbers)):
		if numbers[i] % 2!= 0:
			odd_numbers.append(numbers[i])
			odd_sum += numbers[i]
	odd = []
	for i in range(len(odd_numbers)):
		odd.append(odd_numbers[i] + odd_sum)
	even = []
	for i in range(len(even_numbers)):
		even.append(even_numbers[i] + even_sum)
	return even + odd

#Test
#print(even_odd_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
#print(even_odd_sum([1, 2, 3, 4, 5, 6, 7, 8, ","def even_odd_sum(numbers):
	elements = [numbers]
	even_numbers = []
	odd_numbers = []
	even_sum = 0
	odd_sum = 0
	for i in range(len(numbers)):
		if numbers[i] % 2 == 0:
			even_numbers.append(numbers[i])
			even_sum += numbers[i]
	for i in range(len(numbers)):
		if numbers[i] % 2!= 0:
			odd_numbers.append(numbers[i])
			odd_sum += numbers[i]
	odd = []
	for i in range(len(odd_numbers)):
		odd.append(odd_numbers[i] + odd_sum)
	even = []
	for i in range(len(even_numbers)):
		even.append(even_numbers[i] + even_sum)
	return even + odd

#Test
"
21,21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","def shift_zeros(lst):
	elements = lst
	zeros = [0] * len(lst)
	new_list = zeros + elements
	return new_list

#Define a function named ""add_zeros"" that takes a list as an argument and returns a new list with the values {0} and {lst}.
def add_zeros(lst):
	zero_count = 0
	new_list = [0] * len(lst)
	for element in lst:
		#If the element is zero, add 1 to the zero_count.
		if element == 0:
			zero_count += 1
		#If the element is not zero, add the element to the new list.
		else:
			non_zero = []
			for i in range(len(lst)):
				if lst[i]!= 0:
					non_zero.append(lst[i])
			#Add the non_zero list to the new list.
			new_list = new_list + non_zero
	new_list = new_list + [zero_count]
	return new_list

#Define a function named ""add_zeros"" that takes a list as an argument and returns a new list with the
def add_zeros_merge(lst):
	zero_count = 0
	result = []
	for element in lst:
		#If the element is zero, add 1 to the zero_count.
		if element == 0:
			zero_count += 1
		#If the element is not zero, add the element to the new list.
		else:","def shift_zeros(lst):
	elements = lst
	zeros = [0] * len(lst)
	new_list = zeros + elements
	return new_list

#Define a function named ""add_zeros"" that takes a list as an argument and returns a new list with the values {0} and {lst}.
"
22,22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","def bootstrap_95%_ci(array,n):
	import numpy as np
	X = np.array(array)
	Y = np.array(n)
	Z = np.array(0)
	W = np.array(0)
	Q = np.array(0)
	
	for i in range(n):
		Z = np.vstack((Z,X))
		W = np.vstack((W,Y))
		Q = np.vstack((Q,0))
	
	Z = np.mean(Z,axis=0)
	mean = np.mean(Z)
	std = np.std(Z)
	ci = (mean - std) / np.sqrt(n)
	percentile = [mean - ci, mean + ci]
	print(""95% CI for the mean of the array is: "",percentile)","def bootstrap_95%_ci(array,n):
	import numpy as np
	X = np.array(array)
	Y = np.array(n)
	Z = np.array(0)
	W = np.array(0)
	Q = np.array(0)
	
	for i in range(n):
		Z = np.vstack((Z,X))
		W = np.vstack((W,Y))
		Q = np.vstack((Q,0))
	
	Z = np.mean(Z,axis=0)
	mean = np.mean(Z)
	std = np.std(Z)
	ci = (mean - std) / np.sqrt(n)
	percentile = [mean - ci, mean + ci]
"
23,23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","def sum_even_digits(a,b):
	result = 0
	for i in range(len(a)):
		#If the digit at index ""i"" is even, add it to the sum.
		if a[i] % 2 == 0:
			result += a[i]
	for i in range(len(b)):
		if b[i] % 2 == 0:
			result += b[i
	print(result)

#Call the function.
sum_even_digits(a,b)","def sum_even_digits(a,b):
	result = 0
	for i in range(len(a)):
		#If the digit at index ""i"" is even, add it to the sum.
		if a[i] % 2 == 0:
			result += a[i]
	for i in range(len(b)):
		if b[i] % 2 == 0:
			result += b[i
	print(result)

#Call the function.
"
24,24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","def min-max_diff(A):
	my_max = max(A)
	my_min = min(A)
	diff = my_max - my_min
	return diff

#Function to find the mean of the list {A}.
def mean(A):
	my_min = min(A)
	my_max = max(A)
	mean = (my_max + my_min)/2
	return mean

#Function to find the median of the list {A}.
def median(A):
	length = len(A)
	if length == 0:
		return None
	my_max = max(A)
	my_min = min(A)
	diff = my_max - my_min
	if length % 2 == 0:
		return (my_max + my_min)/2
	else:
		return my_max

#Function to find the mode of the list {A}.
def mode(A):
	diff = max_min_diff(A)
	if diff == 0:
		return None
	elif diff == 1:
		return A[0]
	else:
		#Create a dictionary to store the frequency of each element in the list.
		freq =","def min-max_diff(A):
	my_max = max(A)
	my_min = min(A)
	diff = my_max - my_min
	return diff

#Function to find the mean of the list {A}.
"
25,25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","def distinct_chars(A):
	my_string = A
	distinct_chars = []
	for char in my_string:
		#If the character is not already in the list ""{distinct_chars}""...
		if char not in distinct_chars:
			#Add the character to the list ""{distinct_chars}"".
			distinct_chars.append(char)
	return distinct_chars

#
def lowercase(A):
	my_string = A
	lowercase_string = []
	for char in my_string:
		#If the character is not already in the list ""{lowercase_string}""...
		if char.islower():
			#Add the character to the list ""{lowercase_string}"".
			lowercase_string.append(char)
	return lowercase_string

#
def uppercase(A):
	chars = distinct_chars(A)
	lowercase_chars = lowercase(chars)
	uppercase_chars = []
	for char in lowercase_chars:
		#If the character is lowercase...
		if char.isupper():
			#Add the character to the list ""{uppercase_chars}"".
			uppercase_chars.append(char)
	return uppercase_chars

#
def is_
	sorted_chars = sorted(distinct_chars(A))
	if char in sorted_chars:
		#Return True.
		return True
	return False

#
def is_lowercase(A):
	chars = lowercase(A)
	lowercase_chars = []
	for char in chars:
		#If the character is lowercase...
		if char.islower():
			#Add the character to the list ""{lowercase_chars}"".
			
	print(lowercase_chars)
	return True

#
def is_uppercase(A):
	chars = uppercase(A)
	uppercase_chars = []
	for char in chars:
		#If the character is uppercase...
		if char.isupper():
			#Add the character to the list ""{uppercase_chars}"".
			
	print(uppercase_chars)
	return True

#
def is_number(A):","def distinct_chars(A):
	my_string = A
	distinct_chars = []
	for char in my_string:
		#If the character is not already in the list ""{distinct_chars}""...
		if char not in distinct_chars:
			#Add the character to the list ""{distinct_chars}"".
			distinct_chars.append(char)
	return distinct_chars

#
"
26,26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","def longer_string(A,B):
	a = A
	b = B
	c = a + b
	print(c)

longer_string(""Hello"",""World"")

#Exercise 10
#Create a function called ""print_all_numbers"" that takes a list of numbers as an argument.
#Print the numbers in the list in reverse order.
def print_all_numbers(numbers):
	def len_str(str):
		return len(str)
	def reverse_list(list):
		return list[::-1]
	def print_list(list):
		for i in list:
			print(i)
	len_str(numbers)
	len_str_list = [len_str(i) for i in numbers]
	reverse_list_list = [reverse_list(i) for i in numbers]
	print_list(reverse_list_list)

print_all_numbers([1,2,3,4,5])

#Exercise 11
#Create a function called ""print_all_numbers"" that takes a list of numbers as an argument.
#Print the numbers in the list in reverse order.
def
	result = longer_string(""Hello"",""World"")
	print(result)

print_all_numbers([""Hello"",""World"",""Python""])

#Exercise 12
#Create a function called ""print_all_numbers"" that takes a list of numbers as an argument.
#Print the numbers in the list in reverse order.
def
	result = longer_string(""Hello"",""World"")
	print(result)

print_all_numbers([""Hello"",""World"",""Python""])

#Exercise 13
#Create a function called ""print_all_numbers"" that takes a list of numbers as an argument.
#Print the numbers in the list in reverse order.
def
	result = longer_string(""Hello"",""World"")
	print(result)

print_all_numbers([""Hello"",""World"",""Python""])

#Exercise 14
#Create a function called ""print_all_numbers"" that takes a list of numbers as an argument.","def longer_string(A,B):
	a = A
	b = B
	c = a + b
	print(c)

longer_string(""Hello"",""World"")

#Exercise 10
"
27,27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","def sum_float_digits(A):
	f = A
	f = -A
	f = int(f)
	f = float(f)
	return f + f

#Print the sum of the positive and negative floating point numbers
","def sum_float_digits(A):
	f = A
	f = -A
	f = int(f)
	f = float(f)
	return f + f
"
28,28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","def count_vowels(s):
	my_string = s
	vowels_count = 0
	consonants_count = 0
	other_count = 0
	for i in my_string:
		if
	return vowels_count, consonants_count, other_count

#count_vowels(""Hello"")
#count_vowels(""

#count_vowels(""Hello"")
#count_vowels(""Hello"")

#count_vowels(""Hello"")
#count_vowels(""Hello"")

#count_vowels(""Hello"")
#count_vowels(""Hello"")

#count_vowels(""Hello"")
#count_vowels(""Hello"")","def count_vowels(s):
	my_string = s
	vowels_count = 0
	consonants_count = 0
	other_count = 0
	for i in my_string:
		if
	return vowels_count, consonants_count, other_count

#count_vowels(""Hello"")
"
29,29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","def factorial(n):
	f = 1
	if n == 0 or n == 1:
		return 1
	else:
		for i in range(2, n + 1):
			f *= i
	return f

#Print the factorial of 5.
print(factorial(5))

#Print the factorial of 10.
print(factorial(10))

#Print the factorial of 10

	","def factorial(n):
	f = 1
	if n == 0 or n == 1:
		return 1
	else:
		for i in range(2, n + 1):
			f *= i
	return f

#Print the factorial of 5.
"
30,30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","def max_edge_triangle(a,b):
	two_edges = a + b
	return two_edges

def max_edge_triangle_2(a,b):
	two_edges = a + b
	return two_edges

def max_edge_triangle_3(a,b):
	maximum_edge = a - b - 1
	return maximum_edge

def max_edge_triangle_4(a,b):
	maximum_edge = a - b - 1
	return maximum_edge

def max_edge_triangle_5(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_6(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_7(a,b):
	minimum_edge = a - b - 1
	my_tuple = (maximum_edge,minimum_edge)
	return my_tuple

def max_edge_triangle_8(a,b):
	minimum_edge = a - b - 1
	my_tuple = (maximum_edge,minimum_edge)
	return my_tuple

def max_edge_triangle_9(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_10(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_11(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_12(a,b):
	minimum_edge = a - b - 1","def max_edge_triangle(a,b):
	two_edges = a + b
	return two_edges

def max_edge_triangle_2(a,b):
	two_edges = a + b
	return two_edges

def max_edge_triangle_3(a,b):
	maximum_edge = a - b - 1
	return maximum_edge

def max_edge_triangle_4(a,b):
	maximum_edge = a - b - 1
	return maximum_edge

def max_edge_triangle_5(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_6(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_7(a,b):
	minimum_edge = a - b - 1
	my_tuple = (maximum_edge,minimum_edge)
	return my_tuple

def max_edge_triangle_8(a,b):
	minimum_edge = a - b - 1
	my_tuple = (maximum_edge,minimum_edge)
	return my_tuple

def max_edge_triangle_9(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_10(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_11(a,b):
	minimum_edge = a - b - 1
	return minimum_edge

def max_edge_triangle_12(a,b):
"
31,31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","def factorial_and_remainder(n):
	fact = 1
	rem = 0
	while n > 0:
		fact *= n
		rem += n
		n -= 1
	return fact, rem

def main():
	n = int(input())
	fact, rem = factorial_and_remainder(n)
	print(fact, rem)
","def factorial_and_remainder(n):
	fact = 1
	rem = 0
	while n > 0:
		fact *= n
		rem += n
		n -= 1
	return fact, rem

def main():
	n = int(input())
	fact, rem = factorial_and_remainder(n)
"
32,32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","def sum_polygon_angles(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90

	return total_sum

def sum_polygon_area(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180

	return total_sum

def sum_polygon_perimeter(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180 * math.sqrt(2)
	return round(total_sum, 2)

def sum_polygon_perimeter_square(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180 * math.sqrt(2) * math.sqrt(2)
	return round(total_sum, 2)
","def sum_polygon_angles(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90

	return total_sum

def sum_polygon_area(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180

	return total_sum

def sum_polygon_perimeter(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180 * math.sqrt(2)
	return round(total_sum, 2)

def sum_polygon_perimeter_square(n):

	total_sum = 0
	for i in range(n):
		total_sum += (i+1) * 90 * math.pi / 180 * math.sqrt(2) * math.sqrt(2)
"
33,33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","def sum_string_numbers(s1,s2):
	s1 = s1.split()
	s2 = s2.split()
	sum = 0
	for i in range(len(s1)):
		sum += int(s1[i])
	for i in range(len(s2)):
		sum += int(s2[i])
	return sum

	print(s1)
	print(s2)
	print(sum_string_numbers(s1,s2))

#Call the function
sum_string_numbers(""123"",""456"")","def sum_string_numbers(s1,s2):
	s1 = s1.split()
	s2 = s2.split()
	sum = 0
	for i in range(len(s1)):
		sum += int(s1[i])
	for i in range(len(s2)):
		sum += int(s2[i])
	return sum

	print(s1)
	print(s2)
	print(sum_string_numbers(s1,s2))

#Call the function
"
34,34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","def min-max_sum(l):
	lst = [int(i) for i in l]
	min_sum = lst[0]
	max_sum = lst[0]
	sum = 0
	for i in lst:
		#If the current value of {i} is less than the current value of {min_sum}, then update {min_sum}.
	
	return sum



#Call the function.
print(min_max_sum([1, 2, 3, 4, 5]))","def min-max_sum(l):
	lst = [int(i) for i in l]
	min_sum = lst[0]
	max_sum = lst[0]
	sum = 0
	for i in lst:
		#If the current value of {i} is less than the current value of {min_sum}, then update {min_sum}.
	
	return sum



#Call the function.
"
35,35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","def vowel_overlap(s1,s2):
	vowels = ['a','e','i','o','u']
	s = ''.join(set(s1) & set(s2))
	if s == '':
		return False
	else:
		return True

#Test cases:
print(vowel_overlap('hello','ell'))
print(vowel_overlap('hello','ell'))
print(vowel_overlap('hello','ell'))
print(vowel_overlap('hello','ell'))
print(vowel_overlap('hello','ell'))
print(","def vowel_overlap(s1,s2):
	vowels = ['a','e','i','o','u']
	s = ''.join(set(s1) & set(s2))
	if s == '':
		return False
	else:
		return True

#Test cases:
"
36,36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","def sum_neg(l):
	lst1 = []
	for i in l:
		if i < 0:
			lst1.append(i)
	return lst1

#Sum of all the positive integers in the list.
def sum_pos(l):
	lst1 = []
	for i in l:
		if i > 0:
			lst1.append(i)
	return lst1

#Sum of all the positive integers in the list.

	lst2 = sum_neg(l)
	lst3 = sum_pos(l)
	sum = lst2 + lst3
	return sum

#Sum of all the positive integers in the list.
def sum_pos(l):
	lst1 = []
	for i in l:
		if i > 0:
			lst1.append(i)
	lst2 = sum_neg(l)
	lst3 = sum_pos(l)
	sum = lst2 + lst3
	return sum

#Sum of all the positive integers in the list.
def sum_pos(l):
	lst1 = []
	for i in l:
		if i > 0:
			lst1.append(i)
	lst2 = sum_neg(l)
	lst3 = sum_pos(l)
	sum = lst2 + lst3
	return sum

#Sum of all the positive integers in the list.
def sum_pos(l):
	lst1 = []
	for i in l:
		if i > 0:
			","def sum_neg(l):
	lst1 = []
	for i in l:
		if i < 0:
			lst1.append(i)
	return lst1

#Sum of all the positive integers in the list.
"
37,37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","def load_dataset(a1):
	import pandas as pd
	dataset = pd.read_csv(a1)
	return dataset

def load_dataset_from_csv(a1):
	import pandas as pd
	dataset = pd.read_csv(a1)
	return dataset

def load_dataset_from_json(a1):
	import pandas as pd
	dataset = pd.read_json(a1)
	return dataset

def load_dataset_from_json_file(a1):
	import pandas as pd
	dataset = pd.read_json(a1)
	return dataset

def load_dataset_from_json_file_with_header(a1):
	import pandas as pd
	dataset = pd.read_json(a1, lines=True)

	plain_list = dataset.values.tolist()

	columns_list = dataset.columns.tolist()

	index_list = dataset.index.tolist()

	columns_list = dataset.columns.tolist()

	print(max(plain_list))

	print(min(plain_list))

	print(sum(plain_list)/len(plain_list))

	print(statistics.median(plain_list))

	print(statistics.mode(plain_list))

	print(statistics.stdev(plain_list))
","def load_dataset(a1):
	import pandas as pd
	dataset = pd.read_csv(a1)
	return dataset

def load_dataset_from_csv(a1):
	import pandas as pd
	dataset = pd.read_csv(a1)
	return dataset

def load_dataset_from_json(a1):
	import pandas as pd
	dataset = pd.read_json(a1)
	return dataset

def load_dataset_from_json_file(a1):
	import pandas as pd
	dataset = pd.read_json(a1)
	return dataset

def load_dataset_from_json_file_with_header(a1):
	import pandas as pd
	dataset = pd.read_json(a1, lines=True)

	plain_list = dataset.values.tolist()

	columns_list = dataset.columns.tolist()

	index_list = dataset.index.tolist()

	columns_list = dataset.columns.tolist()

	print(max(plain_list))

	print(min(plain_list))

	print(sum(plain_list)/len(plain_list))

	print(statistics.median(plain_list))

	print(statistics.mode(plain_list))
"
38,38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","def char_length_list(s):
	pattern = re.compile(r'[,\.]')
	char_length = [len(x) for x in pattern.findall(s)]
	return char_length

#Function to find the longest word in a string
def longest_word(s):
	pattern = re.compile(r'[,\.]')
	s2 = pattern.sub('', s)
	longest_word = max(s2.split(), key=len)
	return longest_word

#Function to find the longest word in a string
def longest_word_list(s):
	pattern = re.compile(r'[,\.]')
	s2 = pattern.sub('', s)
	words = s2.split()
	longest_word = max(words, key=len)
	return longest_word

#Function to find the longest word in a string
def longest_word_list_2(s):
	pattern = re.compile(r'[,\.]')
	s","def char_length_list(s):
	pattern = re.compile(r'[,\.]')
	char_length = [len(x) for x in pattern.findall(s)]
	return char_length

#Function to find the longest word in a string
"
39,39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","def hex_to_rgb(s):
	s = s.lstrip('#')
	s = [int(s[i:i+2], 16) for i in range(0, len(s), 2)]
	return tuple(s)

def rgb_to_hex(r, g, b):
	r = hex(r)[2:]
	s2 = [int(r[i:i+2], 16) for i in range(0, len(r), 2)]
	s3 = ''.join([str(i) for i in s2])
	return s3
","def hex_to_rgb(s):
	s = s.lstrip('#')
	s = [int(s[i:i+2], 16) for i in range(0, len(s), 2)]
	return tuple(s)

def rgb_to_hex(r, g, b):
	r = hex(r)[2:]
	s2 = [int(r[i:i+2], 16) for i in range(0, len(r), 2)]
	s3 = ''.join([str(i) for i in s2])
"
40,40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","def majority_vote(lst):
	count_values = {}
	for i in lst:
		if i in count_values:
			count_values[i] += 1
		else:
			count_values[i] = 1
	most_common = max(count_values, key=count_values.get)
	return most_common

#Create a function called'majority_vote' that takes a

#Create a function called'majority_vote' that takes a

#Create a function called'majority

#Create a function called'majority' that takes a list of integers and returns the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise return 'None'.

#Create a function called'majority' that takes a list of integers and returns the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise return 'None'.

#Create a function called'majority' that takes a list of integers and returns the integer with maximum count in the hash map","def majority_vote(lst):
	count_values = {}
	for i in lst:
		if i in count_values:
			count_values[i] += 1
		else:
			count_values[i] = 1
	most_common = max(count_values, key=count_values.get)
	return most_common

#Create a function called'majority_vote' that takes a

#Create a function called'majority_vote' that takes a

#Create a function called'majority

#Create a function called'majority' that takes a list of integers and returns the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise return 'None'.

#Create a function called'majority' that takes a list of integers and returns the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise return 'None'.
"
41,41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","def week_later(year,month,day):
	today = datetime.datetime(year,month,day)
	return today + datetime.timedelta(days=7)

def week_earlier(year,month,day):
	today = datetime.datetime(year,month,day)
	return today - datetime.timedelta(days=7)

def month_later(year,month,day):
	today = datetime.datetime(year,month,day)
	return today + datetime.timedelta(days=30)

def month_earlier(year,month,day):
	today = datetime.datetime(year,month,day)
	return today - datetime.timedelta(days=30)
","def week_later(year,month,day):
	today = datetime.datetime(year,month,day)
	return today + datetime.timedelta(days=7)

def week_earlier(year,month,day):
	today = datetime.datetime(year,month,day)
	return today - datetime.timedelta(days=7)

def month_later(year,month,day):
	today = datetime.datetime(year,month,day)
	return today + datetime.timedelta(days=30)

def month_earlier(year,month,day):
	today = datetime.datetime(year,month,day)
"
42,42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","def sorted_word_weights(words):
	
	weights = []
	for word in words:
		weights.append(word_weight(word))
	
	return sorted(weights)

#Given a string named 'word' with the value {word}, apply the function 'word_weight' to the word and store the result to variable 'weight'.
def word_weight(word):
	return len(word)

#Given a list of strings named 'words' with the value {words}, apply the function 'word_count' to each word and store the result to variable '
def word_count(words):
	weights = sorted_word_weights(words)
	for i in range(len(weights)):
		if weights[i]!= word_weight(words[i]):
			return False
	return True

#Given a list of strings named 'words' with the value {words}, apply the function 'word_count' to each word and store the result to variable '
def word_count_2(words):","def sorted_word_weights(words):
	
	weights = []
	for word in words:
		weights.append(word_weight(word))
	
	return sorted(weights)

#Given a string named 'word' with the value {word}, apply the function 'word_weight' to the word and store the result to variable 'weight'.
"
43,43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","def create_palindrome(n):
	base = n
	temp = 0
	i = 0
	j = 0
	k = 0
	l = 0
	while base!= 0:
		if is_palindrome(base):
			break
		else:
			base = descent(base)
	while base!= 0:
		if is_palindrome(base):
			break
		else:
			base = descent(base)
	if base == 0:
		print('False')
	else:
		print('True')

#Create a function that takes a number as an argument and returns the number of digits in the number.
def digits(n):
	if n == 0:
		return 1
	else:
		return digits(n//10) + 1

#Create a function that takes a number as an argument and returns the number of digits in the number.
def digits(n):","def create_palindrome(n):
	base = n
	temp = 0
	i = 0
	j = 0
	k = 0
	l = 0
	while base!= 0:
		if is_palindrome(base):
			break
		else:
			base = descent(base)
	while base!= 0:
		if is_palindrome(base):
			break
		else:
			base = descent(base)
	if base == 0:
		print('False')
	else:
		print('True')

#Create a function that takes a number as an argument and returns the number of digits in the number.
"
44,44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","def simulate_backspace(input):
	input = '{' + input + '}'
	stack = []
	for char in input:
		if char == '{':
			stack.append(char)
		elif char == '}':
			if len(stack) > 0:
				stack.pop()
			else:
				return False
	if len(stack) == 0:
		return True
	else:
		return False

#Define

#Tests
","def simulate_backspace(input):
	input = '{' + input + '}'
	stack = []
	for char in input:
		if char == '{':
			stack.append(char)
		elif char == '}':
			if len(stack) > 0:
				stack.pop()
			else:
				return False
	if len(stack) == 0:
		return True
	else:
		return False

#Define
"
45,45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","def pandas_df_manipulation(a1,a2):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2})
	print(df)
	return df

#Create a list of lists.
a1 = [1,2,3,4,5]
a2 = [6,7,8,9,10]
#Call the pandas_df_manipulation function.
df = pandas_df_manipulation(a1,a2
	)
#Print the target variable.
print(df)

#Create a list of lists.
a1 = [1,2,3,4,5]
a2 = [6,7,8,9,10]
#Call the pandas_df_manipulation function.
df = pandas_df_manipulation(a1,a2
	,Price = [100,200,300,400,500]
	,melb_predictors = df.drop('Price',axis=1)
	,melb_predictors
	)
#Print the target variable.
print(df)

#Create a list of lists.
a1 = [1,2,3,4,5]
a2 = [6,7,8,9,10]
#Call the pandas_df_manipulation function.
df = pandas_df_manipulation(a1,a2
	,X = df.drop('Price',axis=1)
	,X
	)
#Print the target variable.
print(df)

#Create a list of lists.
a1 = [1,2,3,4,5]
a2 = [6,7,8,9,10]
#Call the pandas_df_manipulation function.
df = pandas_df_manipulation(a1,a2
	,X = df.drop('Price',axis=1)
	,X
	,y = df['Price'],df['Milk']
	,y
	,train_size = 0.7
	,test_size = 0.2
	,random_state = 0
	)
#Print the target variable.
print(df)

#Create a list of lists.
a1 = [1,2,3,4,5]
a2 = [6,7,8,9,10]
#Call the pandas","def pandas_df_manipulation(a1,a2):
	import pandas as pd
	df = pd.DataFrame({'a1':a1,'a2':a2})
	print(df)
	return df

#Create a list of lists.
"
46,46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","def sum_non-overlap_range(l):
	lst1 = l
	lst2 = lst1
	lst3 = lst2
	lst4 = lst3
	lst5 = lst4
	lst6 = lst5
	a = min(lst1)
	b = max(lst1)
	c = min(lst2)
	d = max(lst2)
	e = min(lst3)
	f = max(lst3)
	g = min(lst4)
	lst2 = range(a,b+1)
	lst3 = range(c,d+1)
	lst4 = range(e,f+1)
	lst5 = range(g,h+1)
	lst6 = [i for i in lst2 if i not in lst1]
	print(sum(lst6))

#Sum of all elements in a list
def sum_all(l):","def sum_non-overlap_range(l):
	lst1 = l
	lst2 = lst1
	lst3 = lst2
	lst4 = lst3
	lst5 = lst4
	lst6 = lst5
	a = min(lst1)
	b = max(lst1)
	c = min(lst2)
	d = max(lst2)
	e = min(lst3)
	f = max(lst3)
	g = min(lst4)
	lst2 = range(a,b+1)
	lst3 = range(c,d+1)
	lst4 = range(e,f+1)
	lst5 = range(g,h+1)
	lst6 = [i for i in lst2 if i not in lst1]
	print(sum(lst6))

#Sum of all elements in a list
"
47,47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","def detect_digits(l):
	lst1 = [l]
	lst2 = [lst1]
	lst3 = [lst2]
	lst4 = [lst3]
	lst5 = [lst4]
	lst6
	def num_in_str(s):
		for i in s:
			if i.isdigit():
				return True
		return False
	def is_palindrome(s):
		s = s.lower()
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s
		for i in lst1:
			if num_in_str(i):
				lst2.append(i)
		for i in lst2:
			if is_palindrome(i):
				lst3.append(i)
		for i in lst3:
			if num_in_str(i):","def detect_digits(l):
	lst1 = [l]
	lst2 = [lst1]
	lst3 = [lst2]
	lst4 = [lst3]
	lst5 = [lst4]
	lst6
	def num_in_str(s):
		for i in s:
			if i.isdigit():
				return True
		return False
	def is_palindrome(s):
		s = s.lower()
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s.replace("" "","""")
		s = s
		for i in lst1:
			if num_in_str(i):
				lst2.append(i)
		for i in lst2:
			if is_palindrome(i):
				lst3.append(i)
		for i in lst3:
"
48,48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","def cascading_functions(a1,a2,a3,a4):
	def a(x):
		return x*a1
	def b(x):
		return x*a2
	def c(x):
		return x*a3
	def d(x):
		return x
	def b(x):
		return x*a2
	def c(x):
		return x*a3
	def d(x):
		return x
	def a(x):
		return x*a4
	def c(x):
		return x*a3
	def d(x):
		return x*a4
	def b(x):
		return x*a2
	def c(x):
		return x
	abc = [a,b,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a
	my_init = a4
	my_init = a3
	my_init = a2
	my_init = a1
	my_init = a1
	my_result = my_init
	my_result = my_result + my_init
	my_result = my_result + my_init
	my_result = my_result + my_init
	for i in range(len(abc)):
		my_result = my_result + abc[i](my_result)
	return my_result

print(cascading_functions(1,2,3,4))

#The above code is equivalent to the following code:
","def cascading_functions(a1,a2,a3,a4):
	def a(x):
		return x*a1
	def b(x):
		return x*a2
	def c(x):
		return x*a3
	def d(x):
		return x
	def b(x):
		return x*a2
	def c(x):
		return x*a3
	def d(x):
		return x
	def a(x):
		return x*a4
	def c(x):
		return x*a3
	def d(x):
		return x*a4
	def b(x):
		return x*a2
	def c(x):
		return x
	abc = [a,b,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a,c,d,b,c,d,a
	my_init = a4
	my_init = a3
	my_init = a2
	my_init = a1
	my_init = a1
	my_result = my_init
	my_result = my_result + my_init
	my_result = my_result + my_init
	my_result = my_result + my_init
	for i in range(len(abc)):
		my_result = my_result + abc[i](my_result)
	return my_result

print(cascading_functions(1,2,3,4))
"
49,49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","def pluralize_duplicates(a1):
	def is_plural(word):
		if word[-1] =='s':
			return True
		else:
			return False
	def pluralize(word):
		if is_plural(word):
			return word + 'es'
		else:
			return word +'s'
	words = a1
	plural_words = []
	for word in words:
		#If the word is not a plural...
		if not is_plural(word):
			#Add the word to the plural_words list.
			plural_words.append(word)
		#Otherwise...
		else:
			#For each word in ""words"" that is a plural...
			for plural_word in words
	words_plural = [pluralize(word) for word in plural_words]
	return words_plural

#This function takes a list of words and returns a list of words with the first letter capitalized.
def capitalize_first_letter(a1):
	contains_plural = [is_plural(word) for word in a1]
	if any(contains_plural):
		#For each word in ""words_plural""...
		for word in a1:
			#If the word is not a plural...
			if not is_plural(word):
				#Add the word to the ""words_plural"" list.
				a1.append(word[0].upper() + word[1:])
			#Otherwise...
			else:
				if any(is_plural(word) for word in a1):
					print(""The word "" + word + "" is plural."")
				else:
					print(""The word "" + word + "" is singular."")
	else:
		#Print out whether or not ""words_plural"" contains a word in singular as boolean.
		if any(is_plural(word) for word in a1):","def pluralize_duplicates(a1):
	def is_plural(word):
		if word[-1] =='s':
			return True
		else:
			return False
	def pluralize(word):
		if is_plural(word):
			return word + 'es'
		else:
			return word +'s'
	words = a1
	plural_words = []
	for word in words:
		#If the word is not a plural...
		if not is_plural(word):
			#Add the word to the plural_words list.
			plural_words.append(word)
		#Otherwise...
		else:
			#For each word in ""words"" that is a plural...
			for plural_word in words
	words_plural = [pluralize(word) for word in plural_words]
	return words_plural

#This function takes a list of words and returns a list of words with the first letter capitalized.
"
50,50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","def highest_altitude(A):
	my_relative_altitude = []
	my_absolute_altitude = []
	for i in range(len(A)):
		my_relative_altitude.append(A[i] - A[0])
		my_absolute_altitude.append(A[i])
	my_net_altitude = [0]
	for i in range(1,len(my_relative_altitude)):
		my_net_altitude.append(my_net_altitude[i-1] + my_relative_altitude[i])
	highest_altitude = my_absolute_altitude[my_net_altitude.index(max(my_net_altitude))]
	for i in range(len(my_net_altitude)):
		if my_net_altitude[i] == highest_altitude:
			print(my_net_altitude[i])
highest_altitude([1,2,3,4,5,6,7,8,9,10])

#Write a function that takes a list of integers and returns the sum of the squares of the integers in the list.
def sum_of_squares(A):","def highest_altitude(A):
	my_relative_altitude = []
	my_absolute_altitude = []
	for i in range(len(A)):
		my_relative_altitude.append(A[i] - A[0])
		my_absolute_altitude.append(A[i])
	my_net_altitude = [0]
	for i in range(1,len(my_relative_altitude)):
		my_net_altitude.append(my_net_altitude[i-1] + my_relative_altitude[i])
	highest_altitude = my_absolute_altitude[my_net_altitude.index(max(my_net_altitude))]
	for i in range(len(my_net_altitude)):
		if my_net_altitude[i] == highest_altitude:
			print(my_net_altitude[i])
"
51,51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","def truncate_words(A,K):
	my_sentences = A
	len_my_sentences = len(my_sentences)
	my_words = my_sentences
	len_my_words = len(my_words)
	k = K
	i = 0
	j = 0
	k = 0
	l = 0
	m = 0
	truncated_list = []
	while i < len_my_sentences:
		while j < len_my_words:
			if my_words[j] not in truncated_list:
				truncated_list.append(my_words[j])
				j += 1
			else:
				j += 1
		i += 1
		j = 0
	print(truncated_list)
	return truncated_list

#Function to remove stopwords from a list of words.
def remove_stopwords(A,K):","def truncate_words(A,K):
	my_sentences = A
	len_my_sentences = len(my_sentences)
	my_words = my_sentences
	len_my_words = len(my_words)
	k = K
	i = 0
	j = 0
	k = 0
	l = 0
	m = 0
	truncated_list = []
	while i < len_my_sentences:
		while j < len_my_words:
			if my_words[j] not in truncated_list:
				truncated_list.append(my_words[j])
				j += 1
			else:
				j += 1
		i += 1
		j = 0
	print(truncated_list)
	return truncated_list

#Function to remove stopwords from a list of words.
"
52,52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","def single_element(A):
	my_numbers = A
	my_sum = 0
	for i in my_numbers:
		my_sum += i
	return my_sum

#Print the value of the variable ""{my_sum}"".
print(single_element([1, 2, 3
	, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3
	, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36","def single_element(A):
	my_numbers = A
	my_sum = 0
	for i in my_numbers:
		my_sum += i
	return my_sum

#Print the value of the variable ""{my_sum}"".
"
53,53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","def remove_elements(A,Val):
	my_numbers = A
	my_numbers = Val
	new_list = my_numbers
	new_list = my_numbers
	val = Val
	A = A
	new_list = new_list
	my_numbers = my_numbers
	new_list = new_list
	remove_numbers = []
	for i in range(len(my_numbers)):
		if my_numbers[i] == val:
			remove_numbers.append(my_numbers[i])
	remove_A = []
	for i in range(len(A)):
		if A[i] == val:
			remove_A.append(A[i])
	print(""The numbers that you want to remove are: "",remove_numbers)
	print(""The numbers that you want to remove are: "",remove_A)
	print(""The numbers that you want to remove are: "",new_list)
	print(""The numbers that you want to remove are: "",A)
	print(""The numbers that you want to remove are: "",remove_","def remove_elements(A,Val):
	my_numbers = A
	my_numbers = Val
	new_list = my_numbers
	new_list = my_numbers
	val = Val
	A = A
	new_list = new_list
	my_numbers = my_numbers
	new_list = new_list
	remove_numbers = []
	for i in range(len(my_numbers)):
		if my_numbers[i] == val:
			remove_numbers.append(my_numbers[i])
	remove_A = []
	for i in range(len(A)):
		if A[i] == val:
			remove_A.append(A[i])
	print(""The numbers that you want to remove are: "",remove_numbers)
	print(""The numbers that you want to remove are: "",remove_A)
	print(""The numbers that you want to remove are: "",new_list)
	print(""The numbers that you want to remove are: "",A)
"
54,54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","def check_array_sum(A,Val):
	my_numbers = A
	sum = 0
	for i in my_numbers:
		#Add the integer in ""i"" to the sum.
		sum += i
	if sum == Val:
		return True
	else
	return False

#Test the function.
print(check_array_sum([1,2,3,4,5],10))

#Test the function.
print(check_array_sum([1,2,3,4,5],11))

#Test the function.
print(check_array_sum([1,2,3,4,5],12))
<|endoftext|>","def check_array_sum(A,Val):
	my_numbers = A
	sum = 0
	for i in my_numbers:
		#Add the integer in ""i"" to the sum.
		sum += i
	if sum == Val:
		return True
	else
	return False

#Test the function.
"
55,55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","def merge_sorted_lists(A,B):
	my_numbers1 = sorted(A)
	my_numbers2 = sorted(B)
	merged_list = my_numbers1 + my_numbers2
	return merged_list

#Test the function.
print(merge_sorted_lists([1,2,3,4,5], [1
	,2,3,4,5]))

#Test the function.
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5]))

#Test the function.
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5,6]))

#Test the function.
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5,6,7]))
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5,6,7,8]))
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]))
print(merge_sorted_lists([1,2,3,4,5], [1,2,3,4,5,6,7,","def merge_sorted_lists(A,B):
	my_numbers1 = sorted(A)
	my_numbers2 = sorted(B)
	merged_list = my_numbers1 + my_numbers2
	return merged_list

#Test the function.
"
56,56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","def maximum_subarray(A):
	my_array = A
	max_sum = 0
	max_sum_index = 0
	current_sum = 0
	for i in range(len(my_array)):
		current_sum = current_sum + my_array[i]
		if current_sum > max_sum:
			max_sum = current_sum
			max_sum_index = i
	return max_sum, max_sum_index

#Test
A = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]
print(maximum_subarray(A))
<|endoftext|>","def maximum_subarray(A):
	my_array = A
	max_sum = 0
	max_sum_index = 0
	current_sum = 0
	for i in range(len(my_array)):
		current_sum = current_sum + my_array[i]
		if current_sum > max_sum:
			max_sum = current_sum
			max_sum_index = i
	return max_sum, max_sum_index

#Test
"
57,57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","def max_square_root_integer(A):
	my_number = A
	square_root = 0
	square_root_of_my_number = 0
	square_root_of_my_number = 0
	
	while my_number > 0:
		square_root = my_number // math.sqrt(my_number)
		square_root_of_my_number = square_root * square_root
		my_number = my_number - square_root * square_root
	return square_root_of_my_number

#This function returns the square root of the number A.
def square_root_integer(A):
	largest_square_root = 0
	largest_square_root = max_square_root_integer(A)
	square_root = 0
	square_root = largest_square_root // math.sqrt(largest_square_root)
	return square_root

#This function returns the square root of the number A.
def square_root_","def max_square_root_integer(A):
	my_number = A
	square_root = 0
	square_root_of_my_number = 0
	square_root_of_my_number = 0
	
	while my_number > 0:
		square_root = my_number // math.sqrt(my_number)
		square_root_of_my_number = square_root * square_root
		my_number = my_number - square_root * square_root
	return square_root_of_my_number

#This function returns the square root of the number A.
"
58,58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","def longest_word(A):
	my_words = A
	longest = 0
	word = """"
	i = 0
	j = 0
	k = 0
#The key is the word and the value is the number of times it appears in the list.
	word_count = {}
	while i < len(my_words):
		word = my_words[i]
		if word in word_count:
			word_count[word] += 1
		else:
			word_count[word] = 1
		i += 1
	for key in word_count:
		if word_count[key] > longest:
			longest =
	for key in word_count:
		if word_count[key] == longest:
			longest_word = key
	return longest_word

#The function takes a list of words and returns the longest word in the list.
def longest_word_list(A):
	my_words = A
	longest = 0
	word = """"
	i = 0
	j = 0
	k = 0
#The key is the word and the value is the number of times it appears in the list.
	word_count = {}","def longest_word(A):
	my_words = A
	longest = 0
	word = """"
	i = 0
	j = 0
	k = 0
"
59,59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","def sum_unique_elements(A):
	my_numbers = A

	sum = 0

	for i in my_numbers:
		sum += i

	return sum

#Create a variable named ""A"" and set it equal to the list of numbers ""{my_numbers}"".
A = [1, 2, 3, 4, 
	[1, 2, 3, 4],
	sum_unique_elements(A)
]

#Print the value of the variable ""A""
print(A)

#Print the value of the variable ""sum""
print(sum)

#Print the value of the variable ""my_uniques""
print(my_uniques)

#Print the value of the","def sum_unique_elements(A):
	my_numbers = A

	sum = 0

	for i in my_numbers:
		sum += i

	return sum

#Create a variable named ""A"" and set it equal to the list of numbers ""{my_numbers}"".
"
60,60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","def digonal_sum(A):
	my_matrix = A

	size = len(my_matrix)

	diagonal_sum = 0

	for i in range(size):
		#Iterate over the columns of the matrix.
		for j in range(size):
			#If the current element is not the diagonal element, add it to the sum.
			if i!= j:
				diag_elements = my_matrix[i][j]
				diagonal_sum += diag_elements

	return diagonal_sum

#Test the function.
print(digonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
<|endoftext|>","def digonal_sum(A):
	my_matrix = A

	size = len(my_matrix)

	diagonal_sum = 0

	for i in range(size):
		#Iterate over the columns of the matrix.
		for j in range(size):
			#If the current element is not the diagonal element, add it to the sum.
			if i!= j:
				diag_elements = my_matrix[i][j]
				diagonal_sum += diag_elements

	return diagonal_sum

#Test the function.
"
61,61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","def matrix_condition_number(A,T):
	my_matrix = A
	my_matrix = T
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	t = T
	a = A
	a2 = a**2
	a3 = a2**3
	a4 = a3**4
	result = (a4 - a3*a2 + a2*a + a)*t
	return result

def matrix_determinant(A):
	my_matrix = A
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	result = (my_matrix[0][0]*my_matrix[1][1]*my_matrix[2][2] + my_matrix
	[1][1]*my_matrix[2][2] + my_matrix[0][0]*my_matrix[2][1]*my_matrix[1][2] + my_matrix[0][0]*my_matrix[1][2]*my_matrix[2][1] + my_matrix[0][1]*my_matrix[1][2]*my_matrix[2][0] + my_matrix[0][2]*my_matrix[1][1]*my_matrix[2][0] + my_matrix[0][2]*my_matrix[","def matrix_condition_number(A,T):
	my_matrix = A
	my_matrix = T
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	t = T
	a = A
	a2 = a**2
	a3 = a2**3
	a4 = a3**4
	result = (a4 - a3*a2 + a2*a + a)*t
	return result

def matrix_determinant(A):
	my_matrix = A
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	my_matrix = my_matrix
	result = (my_matrix[0][0]*my_matrix[1][1]*my_matrix[2][2] + my_matrix
"
62,62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","def matrix_multiplication_sum(A,B):
	a = A
	b = B
	c = a * b
	print(c)

#Call the function ""matrix_multiplication_sum"" with the matrix ""{A}"" and ""{B}"".
matrix_multiplication_sum(A,B)

#Write a function named ""matrix_multiplication_product"" that takes two matrices ""{","def matrix_multiplication_sum(A,B):
	a = A
	b = B
	c = a * b
	print(c)

#Call the function ""matrix_multiplication_sum"" with the matrix ""{A}"" and ""{B}"".
"
63,63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","def matrix_determinant_(A,B):
	a = A
	b = B
	c = a.transpose()
	d = b.transpose()
	e = c.multiply(d)
	f = e.multiply(c)
	b = f
	a = e
	c = a.transpose()
	d = b.transpose()
	e = c.multiply(d)
	f = e.multiply(c)
	return f.sum()

def matrix_inverse_(A):
	
	if matrix_determinant_(A,A) > 0:
		print(""True"")
	else:
		print(""False"")

	if matrix_determinant_(A,A) < 0:
		print(""True"")
	else:
		print(""False"")

	if matrix_determin","def matrix_determinant_(A,B):
	a = A
	b = B
	c = a.transpose()
	d = b.transpose()
	e = c.multiply(d)
	f = e.multiply(c)
	b = f
	a = e
	c = a.transpose()
	d = b.transpose()
	e = c.multiply(d)
	f = e.multiply(c)
	return f.sum()

def matrix_inverse_(A):
	
	if matrix_determinant_(A,A) > 0:
		print(""True"")
	else:
		print(""False"")

	if matrix_determinant_(A,A) < 0:
		print(""True"")
	else:
		print(""False"")
"
64,64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","def log-sum-exp(A):
	my_numbers = A
	my_sum = 0
	my_exp = 0
	my_max = 0
	my_min = 0
	for i in range(len(my_numbers)):
		my_sum += my_numbers[i]
		if my_exp < my_numbers[i]:
			my_exp = my_numbers[i]
			my_max = my_numbers[i]
			my_min = my_numbers[i]
	return my_sum - my_exp

#Test
print(log_sum_exp([1, 2, 3, 4, 5]))
#The function should return the sum of the list.
#The list should contain only positive numbers.
#The list should be sorted in ascending order.
#The function should be case sensitive.
#The function should not use any extra space.
#The function should not use any extra memory.
#The function should be efficient.
#The function should be able to handle negative numbers.
#The function should be able to handle large numbers.
#The function should be able to handle very large numbers.
#The function should be able to handle very large numbers.
#The function should be
#The function should return the log of a number.
#The function should be case sensitive.
#The function should not use any extra space.
#The function should not use any extra memory.
#The function should be efficient.
#The function should be able to handle negative numbers.
#The function should be able to handle large numbers.
#The function should be able to handle very large numbers.
#The function should be able to handle very large numbers.
#The function should be able to handle very large numbers.
#The function should be able to handle very large numbers.
","def log-sum-exp(A):
	my_numbers = A
	my_sum = 0
	my_exp = 0
	my_max = 0
	my_min = 0
	for i in range(len(my_numbers)):
		my_sum += my_numbers[i]
		if my_exp < my_numbers[i]:
			my_exp = my_numbers[i]
			my_max = my_numbers[i]
			my_min = my_numbers[i]
	return my_sum - my_exp

#Test
"
65,65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","def k_nearest_points(A,K):
	my_points = A
	my_distances = []
	my_indices = []
	for i in range(len(my_points)):
		#Assign the distance of the point ""{A}"" to the list of distances.
		my_distances.append(euclidian_distance(my_
		k,my_points[i]))
		#Assign the index of the point ""{A}"" to a variable named ""index"".
		my_indices.append(i)
	my_distances.sort()
	return my_indices[0:K]

#Test the function.
print(k_nearest_points(my_points,3))

#Question 3
#Write a function named ""k_nearest_points_2"" that takes in


#Test the function.
print(k_nearest_points_2(my_points,3))

#Question 4
#Write a function named ""k_nearest_points_3"" that takes in


#Test the function.
print(k_nearest_points_3(my_points,3))

#Question 5
#Write a function named ""k_nearest_points_4"" that takes in


#Test the function.
print(k_nearest_points_4(my_points,3))

#Question 6
#Write a function named ""k_nearest_points_5"" that takes in


#Test the function.
print(k_nearest_points_5(my_points,3))

#Question 7
#Write a function named ""k_nearest_points_6"" that takes in
","def k_nearest_points(A,K):
	my_points = A
	my_distances = []
	my_indices = []
	for i in range(len(my_points)):
		#Assign the distance of the point ""{A}"" to the list of distances.
		my_distances.append(euclidian_distance(my_
		k,my_points[i]))
		#Assign the index of the point ""{A}"" to a variable named ""index"".
		my_indices.append(i)
	my_distances.sort()
	return my_indices[0:K]

#Test the function.
"
66,66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","def longest_common_prefix(l1):
	
	lst1 = l1

	lst2 = []

	i = 0

	j = 0

	k = 0

	l = 0




	while i < len(lst1) and j < len(lst2):

		if lst1[i] == lst2[j]:

			lst1[i] = lst1[i]

			i = i + 1

			j = j + 1

		else:

			if i == 0:

				lst2[j] = lst2[j]

				j = j + 1

			else:

				lst1[i] = lst1[i]

				i = i + 1
","def longest_common_prefix(l1):
	
	lst1 = l1

	lst2 = []

	i = 0

	j = 0

	k = 0

	l = 0




	while i < len(lst1) and j < len(lst2):

		if lst1[i] == lst2[j]:

			lst1[i] = lst1[i]

			i = i + 1

			j = j + 1

		else:

			if i == 0:

				lst2[j] = lst2[j]

				j = j + 1

			else:

				lst1[i] = lst1[i]
"
67,67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","def duplicate_elments(lst1):
	lst1_copy = lst1[:]
	for i in range(len(lst1_copy)):
		#Loops through the list {lst1_copy}
		for j in range(len(lst1_copy)):
			#If the value of the element at index {i} is equal to the value of the element at index {j}
			if lst1_copy[i] == lst1_copy[j]:
				#Adds the value of the element at index {j} to the list
	frequency_table = {}
	for i in lst1_copy:
		#Loops through the list {lst1_copy}
		if i in frequency_table:
			#Adds the value of the element at index {i} to the value of the element at index {frequency_table[i]}
			frequency_table[i] += 1
		else:
			#Adds the value of the element at index {i} to the value of the element at index {1}
			frequency_table[i] = 1
	lst2 = []
	for i in frequency_table:
		#Loops through the list {frequency_table}
		if frequency_table[i] > 1:
			#Adds the value of the element at index {i} to the list {lst2}
			lst2.append(i)
	return lst2

#Driver Code
lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(duplicate_elments(lst1))","def duplicate_elments(lst1):
	lst1_copy = lst1[:]
	for i in range(len(lst1_copy)):
		#Loops through the list {lst1_copy}
		for j in range(len(lst1_copy)):
			#If the value of the element at index {i} is equal to the value of the element at index {j}
			if lst1_copy[i] == lst1_copy[j]:
				#Adds the value of the element at index {j} to the list
	frequency_table = {}
	for i in lst1_copy:
		#Loops through the list {lst1_copy}
		if i in frequency_table:
			#Adds the value of the element at index {i} to the value of the element at index {frequency_table[i]}
			frequency_table[i] += 1
		else:
			#Adds the value of the element at index {i} to the value of the element at index {1}
			frequency_table[i] = 1
	lst2 = []
	for i in frequency_table:
		#Loops through the list {frequency_table}
		if frequency_table[i] > 1:
			#Adds the value of the element at index {i} to the list {lst2}
			lst2.append(i)
	return lst2

#Driver Code
"
68,68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","def first_unique_character(w):
	w1 = '{w}'
	for i in range(len(w1)):
		#If the character at index i of w1 is not a space, then
		#set w1 to be the substring of w1 with the character at index i
		#and break the loop
		if w1[i]!='':
			w1 = w1[i:]
			break
	return w1[0]

#Function to find the longest substring of a given string
def longest_substring(w):
	n1 = 0
	n2 = 0
	for i in range(len(w)):
		#If the character at index i of w is not a space, then
		#set n1 to be the index of the first character of w
		#and break the loop
		if w
	return n1, n2

#Function to find the longest substring of a given string
def longest_substring_v2(w):
	n1 = 0
	n2 = 0
	for i in range(len(w)):
		#If the character at index i of w is not a space, then
		#set n1 to be the index of the first character of w
		#and break the loop
		if w[i]!=' ':","def first_unique_character(w):
	w1 = '{w}'
	for i in range(len(w1)):
		#If the character at index i of w1 is not a space, then
		#set w1 to be the substring of w1 with the character at index i
		#and break the loop
		if w1[i]!='':
			w1 = w1[i:]
			break
	return w1[0]

#Function to find the longest substring of a given string
"
69,69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","def uncommon_words(s1,s2):
	sentence1 = s1
	sentence2 = s2
	uncommon_words = []
	for word in sentence1:
		#Create a for loop to iterate through each word in sentence2.
		for word2 in sentence2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
				sentence2 = sentence2.replace(word2, """")
				if sentence2 == """":
					uncommon_words.append(word)
	return uncommon_words

#Create a function called most_common_words that takes two strings as arguments and returns a list of the most common words in the two strings.
def most_common_words(s1,s2):
	words1 = s1.split()
	words2 = s2.split()
	most_common_words = {}
	for word in words1:
		#If the word is in the most_common_words dictionary, increment the value by 1.
		if word in most_common_words:
			words2 = words2.split()
			#If the word is in words2, increment the value by 1.
			if word in words2:
				most_common_words[word] += 1
			else:
				most_common_words[word] = 1
	for word in words2:
		#If the word is in the most_common_words dictionary, increment the value by 1.
		if word in most_common_words:
			words2 =
	uncommon_words = []
	for word in words1:
		if word in words2:
			uncommon_words.append(word)
	return uncommon_words

#Create a function called least_common_words that takes two strings as arguments and returns a list of the least common words in the two strings.
def least_common_words(s1,s2):
	words1 = s1.split()
	words2 = s2.split()
	least_common_words = {}
	for word in words1:
		#
	","def uncommon_words(s1,s2):
	sentence1 = s1
	sentence2 = s2
	uncommon_words = []
	for word in sentence1:
		#Create a for loop to iterate through each word in sentence2.
		for word2 in sentence2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
				sentence2 = sentence2.replace(word2, """")
				if sentence2 == """":
					uncommon_words.append(word)
	return uncommon_words

#Create a function called most_common_words that takes two strings as arguments and returns a list of the most common words in the two strings.
"
70,70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","def average_words_length(s1):
	sentence1 = s1
	words_length = len(sentence1.split())
	return words_length/2

#Create a function named average_words_length_2 that takes a sentence as an argument and returns the average of the words_length variable.
def average_words_length_2(s1):
	sentence1 = s
	words1 = sentence1.split()
	words_length = len(words1)
	return words_length/2

#Create a function named average_words_length_3 that takes a sentence as an argument and returns the average of the words_length variable.
def average_words_length_3(s1):
	sentence1 = s1
	words1 = sentence1.split()
	words1 = [word.lower() for word in words1 if word.isalpha()]
	words1 = [word for word in words1 if word not in stopwords.words('english')]
	words1 = [word for word in words1 if word.isnumeric()]
	words1 = [word for word in words1 if len(word) > 3]
	words1 = [
	sum(len(word) for word in words1) / len(words1)
	]
	return sum(words1)/len(words1)

#Create a function named average_words_length_4 that takes a sentence as an argument and returns the average of the words_length variable.
def average_words_length_4(s1):
	sentence1 = s1","def average_words_length(s1):
	sentence1 = s1
	words_length = len(sentence1.split())
	return words_length/2

#Create a function named average_words_length_2 that takes a sentence as an argument and returns the average of the words_length variable.
"
71,71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","def compare_char_freq(w1,w2):
	w1 = w1.lower()
	w2 = w2.lower()
	d1 = {}
	d2 = {}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d1[w1[i]] = d1.get(w1[i],0) + 1
			d2[w2[i]] = d2.get(w2[i],0) + 1
	for i in d1:
		if d1[i] == d2[i]:
			return d1[i]
	f1 = 0
	f2 = 0
	for i in range(len(w1)):
		if w1[i] == w2[i]:
			f1 += 1
			f2 += 1
	return f1,f2

#Function to find the most frequent character in a string
def most_frequent_char(w):
	if f1 == f2:
		print(w)
	elif f1 > f2:
		print(w)
	else:
		print(w)

#Function to find the most frequent character in a string
def most_frequent_char_freq(w):
	if f1 == f2:","def compare_char_freq(w1,w2):
	w1 = w1.lower()
	w2 = w2.lower()
	d1 = {}
	d2 = {}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d1[w1[i]] = d1.get(w1[i],0) + 1
			d2[w2[i]] = d2.get(w2[i],0) + 1
	for i in d1:
		if d1[i] == d2[i]:
			return d1[i]
	f1 = 0
	f2 = 0
	for i in range(len(w1)):
		if w1[i] == w2[i]:
			f1 += 1
			f2 += 1
	return f1,f2

#Function to find the most frequent character in a string
"
72,72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","def reverse_string(w):
	w1 = w
	w2 = w1[::-1]
	w3 = w2[::-1]
	w4 = w3[::-1]
	w5 = w4[::-1]
	
	w2 = w1 + w2
	w3 = w2 + w3
	w4 = w3 + w4
	w5 = w4 + w5
	
	w3 = w2 + w3
	w4 = w3 + w4
	w5 = w4 + w5
	
	w4 = w3 + w4
	print w2
	print w3
	print w4
	print w5","def reverse_string(w):
	w1 = w
	w2 = w1[::-1]
	w3 = w2[::-1]
	w4 = w3[::-1]
	w5 = w4[::-1]
	
	w2 = w1 + w2
	w3 = w2 + w3
	w4 = w3 + w4
	w5 = w4 + w5
	
	w3 = w2 + w3
	w4 = w3 + w4
	w5 = w4 + w5
	
	w4 = w3 + w4
	print w2
	print w3
	print w4
"
73,73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","def square_sum_diff(n):
	num = n
	sum = 0
	for i in range(1, num+1):
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	return sum

#Call the function square_sum_diff with the value of 
lst1 = [i for i in range(1, num+1)]

#Call the function square_sum_diff with the value of lst1
lst2 = [i for i in range(1, num+1)]

#Call the function square_sum_diff with the value of lst2
lst3 = [i for i in range(1, num+1)]

#Call the
","def square_sum_diff(n):
	num = n
	sum = 0
	for i in range(1, num+1):
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	return sum

#Call the function square_sum_diff with the value of 
"
74,74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","def cosine_sim(lst1,lst2):
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	return np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))

#Function to calculate the cosine similarity between two lists
def cosine_sim_list(lst1,lst2):

	vec2 = np.array(lst2)

	return np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))

#Function to calculate the cosine similarity between two lists
def cosine_sim_list_list(lst1,lst2):

	vec2 = np.array(lst2)

	return np



#Function to calculate the cosine similarity between two lists
def cosine_sim_list_list_list(lst1,lst
	):

	vec2 = np.array(lst2)

	return np

#Function to calculate the cosine similarity between two lists
def cosine_sim_list_list_list_list(lst1,lst2):

	vec2 = np.array(lst2)

	return np

#Function to calculate the cosine similarity between two lists
def cosine_sim_list_list_list_list_list(lst1,lst2):

	vec2 = np.array(lst2)

	return np

#Function to calculate the cosine similarity between two
def dot_product(vec1,vec2):
	return np.dot(vec1,vec2)

#Function to calculate the cosine similarity between two
def dot_product_list(vec1,vec2):
	return np.dot(vec1,vec2)

#Function to calculate the cosine similarity between two
def dot_product_list_list(vec1,vec2):
	return np.dot(vec1,vec2)

#Function to calculate the cosine similarity between two
def dot_product_list_list_list(vec1,vec2):
	return np.dot(vec1,vec2)

#Function to calculate the cosine similarity between two
def dot_product_list_list_list_list(vec1,vec2):
	return np.dot(vec1,vec2)","def cosine_sim(lst1,lst2):
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	return np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))

#Function to calculate the cosine similarity between two lists
"
75,75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","def vector_distance(lst1,lst2,lst3):
	vec1 = lst1
	vec2 = lst2
	vec3 = lst3
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_2(lst1,lst2,lst
	vec2):
	vec3 = lst2
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_3(lst1,lst2,lst3,lst4):
	vec3 = lst3
	vec4 = lst4
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_4(lst1,lst2,lst3,lst4,lst5):
	vec3 =
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	vec3 = np.array(lst3)
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_5(lst1,lst2,lst3,lst4,lst5,lst6):
	vec3 = lst3
	vec4 = lst4
	vec5 = lst5
	vec6 = lst6
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_6(lst1,lst2,lst3,lst4,lst5,lst6,lst7):
	vec3 = lst3
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	vec3 = np.array(lst3)
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_7(lst1,lst2,lst3,lst4,lst5,lst6,lst7,lst8):
	vec3 = lst3
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	vec3 = np.array(lst3)
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_8(lst1,lst2,lst3,lst4,lst5,lst6,lst7,lst8,lst9):
	vec3 = lst3
	vec1 = np.array(lst1)
	vec2 = np.array(lst2)
	vec3 = np.array(lst3)
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
def vector_distance_9(lst1,lst2,lst3,lst4,lst5,lst6,lst7,lst8,lst9,lst10):","def vector_distance(lst1,lst2,lst3):
	vec1 = lst1
	vec2 = lst2
	vec3 = lst3
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	return distance

#Calculates the distance between the vectors
"
76,76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","def compare_standard_deviations(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	mean1 = mean(lst1)
	mean2 = mean(lst2)
	standard_deviation1 = standard_deviation(lst1)
	lst2 = [l2]
	standard_deviation2 = standard_deviation(lst2)
	difference = mean1 - mean2
	square_root = sqrt(difference**2 + standard_deviation1**2)
	square_root2 = sqrt(difference**2 + standard_deviation2**2)
	ratio = square_
	return ratio

#Create a function called standard_deviation() that takes a list of numbers and returns the standard deviation of the list.
#The function should return the standard deviation of the list.
def standard_deviation(lst):
	lst = [float(x) for x in lst]
	mean = mean(lst)
	lst = [x - mean for x in lst]
	square_root = sqrt(sum(lst**2)/len(lst))
	return square_root

#Create

#Create a function called mean() that takes a list of numbers and returns the mean of the list.
#The function should return the mean of the list.
def mean(lst):
	lst = [float(x) for x in lst]
	return sum(lst)/len(lst)

#Create a function called median() that takes a list of numbers and returns the median of the list.
#The function should return the median of the list.
def median(
	lst,
	lst2,
	mean,
	median","def compare_standard_deviations(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	mean1 = mean(lst1)
	mean2 = mean(lst2)
	standard_deviation1 = standard_deviation(lst1)
	lst2 = [l2]
	standard_deviation2 = standard_deviation(lst2)
	difference = mean1 - mean2
	square_root = sqrt(difference**2 + standard_deviation1**2)
	square_root2 = sqrt(difference**2 + standard_deviation2**2)
	ratio = square_
	return ratio

#Create a function called standard_deviation() that takes a list of numbers and returns the standard deviation of the list.
"
77,77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","def compare_means(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	mean_lst = [lst1,lst2]
	for i in range(len(mean_lst)):
		mean_lst[i] = [mean(lst1[i]),mean(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(mean(lst1[i]))
	return lst2

def compare_stdevs(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	stdev_lst = [lst1,lst2]
	for i in range(len(stdev_lst)):
		stdev_lst[i] = [stdev(lst1[i]),stdev(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(stdev(lst1[i]))
	return lst2

def compare_medians(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	median_lst = [lst1,lst2]
	for i in range(len(median_lst)):
		median_lst[i] = [median(lst1[i]),median(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(median(lst1[i]))
	return lst2

def compare_maxes(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	max_lst = [lst1,lst2]
	for i in range(len(max_lst)):
		max_lst[i] = [max(lst1[i]),max(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(max(lst1[i]))","def compare_means(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	mean_lst = [lst1,lst2]
	for i in range(len(mean_lst)):
		mean_lst[i] = [mean(lst1[i]),mean(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(mean(lst1[i]))
	return lst2

def compare_stdevs(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	stdev_lst = [lst1,lst2]
	for i in range(len(stdev_lst)):
		stdev_lst[i] = [stdev(lst1[i]),stdev(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(stdev(lst1[i]))
	return lst2

def compare_medians(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	median_lst = [lst1,lst2]
	for i in range(len(median_lst)):
		median_lst[i] = [median(lst1[i]),median(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
		lst2[i].append(median(lst1[i]))
	return lst2

def compare_maxes(l1,l2):
	lst1 = [l1]
	lst2 = [l2]
	max_lst = [lst1,lst2]
	for i in range(len(max_lst)):
		max_lst[i] = [max(lst1[i]),max(lst2[i])]
	lst2 = [l2]
	for i in range(len(lst2)):
"
78,78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","def coefficient_of_variation(l1):
	lst1 = [l1]
	lst2 = [lst1]
	lst3 = [lst2]
	lst4 = [lst3]
	lst5 = [lst4]
	lst
	avg = sum(lst1)/len(lst1)
	sd = 0
	for i in lst2:
		sd += (i-avg)**2
	sd2 = sd/len(lst2)
	for i in lst3:
		sd += (i-avg)**2
	sd3 = sd/len(lst3)
	coeff = sd2/sd3
	print(""The coefficient of variation is: "", coeff)

#This function calculates the mean of the data
def mean(l1):
	lst1 = [l1]
	lst2 = [lst1]
	lst3 = [lst2]
	lst4 = [lst3]
	lst5 = [lst4]
	lst
	avg = sum(lst1)/len(lst1)
	print(""The mean is: "", avg)

#This function calculates the median of the data
def median(l1","def coefficient_of_variation(l1):
	lst1 = [l1]
	lst2 = [lst1]
	lst3 = [lst2]
	lst4 = [lst3]
	lst5 = [lst4]
	lst
	avg = sum(lst1)/len(lst1)
	sd = 0
	for i in lst2:
		sd += (i-avg)**2
	sd2 = sd/len(lst2)
	for i in lst3:
		sd += (i-avg)**2
	sd3 = sd/len(lst3)
	coeff = sd2/sd3
	print(""The coefficient of variation is: "", coeff)

#This function calculates the mean of the data
"
79,79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","def l1_norm(l1):
	lst1 = [l1]
	for i in range(len(lst1)):
		lst2 = []
		for j in range(len(lst1)):
			if i!= j:
				lst2.append(lst1[j])
		lst1 = lst2
	return sum(lst1)

#Function to find the
def absolute_value(lst1):
	lst2 = []
	for i in range(len(lst1)):
		lst2.append(abs(lst1[i]))
	return sum(lst2)

#Function to find the
def absolute_value_2(lst
	):
	l1 = 0
	for i in range(len(lst)):
		l1 += abs(lst[i])
	return l1

#Function to find the
def absolute_value_3(lst1):
	lst2 = []
	for i in range(len(lst1)):
		lst2.append(abs(lst1[i]))
	return sum(lst2)

#Function to find the
def absolute_value_4(lst1):
	print(l1)
	print(absolute_value_2(lst1))
	print(absolute_value_3(lst1))
	print(absolute_value_4(lst1))

#Function to find the
def absolute_value_5(lst1):
	lst2 = []
	for i in range(len(lst1)):
		lst2.append(abs(lst1[i]))
	return sum(lst2)

#","def l1_norm(l1):
	lst1 = [l1]
	for i in range(len(lst1)):
		lst2 = []
		for j in range(len(lst1)):
			if i!= j:
				lst2.append(lst1[j])
		lst1 = lst2
	return sum(lst1)

#Function to find the
"
80,80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","def z-statistic(lst1):
	lst1 = sorted(lst1)
	lst2 = lst1[:10]
	lst3 = lst1[-10:]
	lst4 = lst3[:10]
	mean1 = sum(lst1)/len(lst1)
	mean2 = sum(lst2)/len(lst2)
	mean3 = sum(lst3)/len(lst3)
	mean4 = sum(lst4)/len(lst4)
	var1 = sum([(x-mean1)**2 for x in lst1])/(len(lst1)-1)
	var2 = sum([(x-mean2)**2 for x in lst2])/(len(lst2)-1)
	var3 = sum([(x-mean3)**2 for x in lst3])/(len(lst3)-1)
	var4 = sum([(x-mean4)**2 for x in lst4])/(len(lst4)-1)
	var12 = sum([(x-mean
	if mean1 == 0:
		z = 0
	else:
		z = (var12-((var1+var2+var3+var4)/4))/(mean1-mean)
	return z

#Function to compute the p-value
def p_value(lst1):
	print(""z-statistic: "", z_statistic(lst1))
	p = 1 - stats.norm.cdf(z_statistic(lst1))
	return p

#Function to compute the p-value
def p_value_2(lst1):
	print(""z-statistic: "", z_statistic(lst1))
	p = 1 - stats.norm.cdf(z_statistic(lst1))","def z-statistic(lst1):
	lst1 = sorted(lst1)
	lst2 = lst1[:10]
	lst3 = lst1[-10:]
	lst4 = lst3[:10]
	mean1 = sum(lst1)/len(lst1)
	mean2 = sum(lst2)/len(lst2)
	mean3 = sum(lst3)/len(lst3)
	mean4 = sum(lst4)/len(lst4)
	var1 = sum([(x-mean1)**2 for x in lst1])/(len(lst1)-1)
	var2 = sum([(x-mean2)**2 for x in lst2])/(len(lst2)-1)
	var3 = sum([(x-mean3)**2 for x in lst3])/(len(lst3)-1)
	var4 = sum([(x-mean4)**2 for x in lst4])/(len(lst4)-1)
	var12 = sum([(x-mean
	if mean1 == 0:
		z = 0
	else:
		z = (var12-((var1+var2+var3+var4)/4))/(mean1-mean)
	return z

#Function to compute the p-value
"
81,81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","def move_all_negative_elements_to_end(lst):
	lst1 = lst[:]
	lst2 = lst1[:]
	lst3 = lst2[:]
	lst4 = lst3[:]
	lst5 = lst4[:]
	lst6 = lst5[:]
	for i in range(len(lst1)):
		if lst1[i] < 0:
			lst_pos.append(lst1[i])
	for i in range(len(lst2)):
		if lst2[i] < 0:
			lst_neg.append(lst2[i])
	lst_pos.sort()
	lst_neg.sort()
	lst_pos.extend(lst_neg)
	lst2.extend(lst_pos)
	print(lst2)","def move_all_negative_elements_to_end(lst):
	lst1 = lst[:]
	lst2 = lst1[:]
	lst3 = lst2[:]
	lst4 = lst3[:]
	lst5 = lst4[:]
	lst6 = lst5[:]
	for i in range(len(lst1)):
		if lst1[i] < 0:
			lst_pos.append(lst1[i])
	for i in range(len(lst2)):
		if lst2[i] < 0:
			lst_neg.append(lst2[i])
	lst_pos.sort()
	lst_neg.sort()
	lst_pos.extend(lst_neg)
	lst2.extend(lst_pos)
"
82,82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","def remove_alphabetical_characters(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i]!= w[i].lower():
			#Add the character at i to
	return new_w

def remove_punctuation(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i] not in string.punctuation:
			#Add the character at i to
	return new_w

def remove_numbers(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i] not in string.digits:
			#Add the character at i to
	return new_w","def remove_alphabetical_characters(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i]!= w[i].lower():
			#Add the character at i to
	return new_w

def remove_punctuation(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i] not in string.punctuation:
			#Add the character at i to
	return new_w

def remove_numbers(w):
	w = str(w)
	new_w = """"
	i = 0
	j = len(w)
	while i < j:
		#If the character at i is not a letter
		if w[i] not in string.digits:
			#Add the character at i to
"
83,83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","def largest_norm(X):
	X = np.array(X)
	return np.max(np.linalg.norm(X, axis=1))

def largest_norm_index(X):
	X = np.array(X)
	return np.argmax(np.linalg.norm(X, axis=1))

","def largest_norm(X):
	X = np.array(X)
	return np.max(np.linalg.norm(X, axis=1))

def largest_norm_index(X):
	X = np.array(X)
"
84,84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","def f1_score(pred,y):
	pred = np.array(pred)
	y = np.array(y)
	return f1_score(y,pred)

def precision_score(pred,y):
	pred = np.array(pred)
	y = np.array(y)
	return precision_score(y,pred)

","def f1_score(pred,y):
	pred = np.array(pred)
	y = np.array(y)
	return f1_score(y,pred)

def precision_score(pred,y):
	pred = np.array(pred)
	y = np.array(y)
"
85,85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","def add_space(x):
	concat = ""{x}""
	for i in range(len(concat)):
		if concat[i] == "" "":
			concat = concat[:i] + "" "" + concat[i+1:]
	return concat

#Function to add spaces to the end of each word.
def add_space_to_words(x):
	concat = ""{x}""
	pat = re.compile(r'[A-Z][a-z]+')
	for word in concat.split():
		#Iterate over the matches of the pattern.
		for match in pat.finditer(word):
			#Replace the match with the space.
			concat = concat.replace(match.group(), match.group() + "" "")
	return concat

#Function to remove punctuation from the end of each word.
def remove_punctuation(x):
	concat = ""{x}""
	pat = re.compile(r'[A-Z][a-z]+')
	result = """"
	for match in pat.finditer(concat):
		result += match.group() + "" ""
	return result

#Function to remove punctuation from the end of each word.
def remove_punctuation_to_words(x):
	concat = ""{x}""
	pat = re.compile(r'[A-Z][a-z]+')
	for word in concat.split():
		#Iterate over the matches of the
	for match in pat.finditer(word):
		#Replace the match with the space.
		concat = concat.replace(match.group(), match.group() + "" "")
	return concat

#Function to remove punctuation from the end of each word.
def remove_punctuation_to_sentences(x):
	concat = ""{x}""
	pat = re.compile(r'[A-Z][a-z]+')
	for sentence in concat.split("".""):
		#Iterate over the matches of the pattern.
		for match in pat.finditer(","def add_space(x):
	concat = ""{x}""
	for i in range(len(concat)):
		if concat[i] == "" "":
			concat = concat[:i] + "" "" + concat[i+1:]
	return concat

#Function to add spaces to the end of each word.
"
86,86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","def remove_outlier(x):
	x = [x]
	for i in range(len(x)):
		if x[i] > 30000000000000000000000000000000000000000000000000000000000000000000000000000000000
	mean = np.mean(x)
	std = np.std(x)
	upper = mean + 3 * std
	lower = mean - 3 * std
	median = np.median(x)
	num_outliers = len
	results = []
	for i in range(len(x)):
		if x[i] > upper or x[i] < lower or x[i] == median:
			results.append(x[i])","def remove_outlier(x):
	x = [x]
	for i in range(len(x)):
		if x[i] > 30000000000000000000000000000000000000000000000000000000000000000000000000000000000
	mean = np.mean(x)
	std = np.std(x)
	upper = mean + 3 * std
	lower = mean - 3 * std
	median = np.median(x)
	num_outliers = len
	results = []
	for i in range(len(x)):
		if x[i] > upper or x[i] < lower or x[i] == median:
"
87,87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","def convert_to_categorical(x):
	x = np.array(x)
	x = to_categorical(x)
	return x

def get_data(path):
	data = pd.read_csv(path)
	x = data.iloc[:,:-1].values
	y = data.iloc[:,-1].values
	y = convert_to_categorical(y
	)
	features = np.zeros((len(x), len(x[0])), dtype=int)
	for i in range(len(x)):
		for j in range(len(x[0])):
			#If the value of x[i][j] is not equal to 0, then set the value of features[i][j] to 1.
			if x[i][j]!= 0:
				features[i][v2i[j]] = 1
	print(features)","def convert_to_categorical(x):
	x = np.array(x)
	x = to_categorical(x)
	return x

def get_data(path):
	data = pd.read_csv(path)
	x = data.iloc[:,:-1].values
	y = data.iloc[:,-1].values
	y = convert_to_categorical(y
	)
	features = np.zeros((len(x), len(x[0])), dtype=int)
	for i in range(len(x)):
		for j in range(len(x[0])):
			#If the value of x[i][j] is not equal to 0, then set the value of features[i][j] to 1.
			if x[i][j]!= 0:
				features[i][v2i[j]] = 1
"
88,88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","def group_by_key(fun,x):
	x = {x}
	y = []
	for i in x:
		#If the value of i is not in the y variable, add it to the y variable.
		if i not in y:
			#Add i to the y variable.
			y.append(i)
		#If the value of i is in the y variable, add the value of fun(i) to the y variable.
		else:
			mapped = fun(i)
			y.append(mapped)
	return y

#Create a function that takes a list of numbers and returns a list of the numbers that are even.
def even_numbers(x):
	y = []
	for i in x:
		if i % 2 == 0:
			y.append(i)
	return y

#Create a function that takes a list of numbers and returns a list of the numbers that are odd.
def odd_numbers(x):
	mapped = [str(i) for i in x]
	y = []
	for i in mapped:
		#If the value of i is not in the y variable, add it to the y variable.
		if i not in y:
			#Add i to the y variable.
			y.append(i)
	return y

#Create a function that takes a list of numbers and returns a list of the numbers that are greater than 10.
def greater_than_ten(x):
	results = {}
	for i in x:
		if i > 10:
			if i not in results:
				results[i] = []
			results[i].append(i)
	return results

#Create a function that takes a list of numbers and returns a list of the numbers that are less than 10.


#Create a function that takes a list of numbers and returns a list of the numbers that are divisible by 3.
def divisible_by_three(x):
	y = []
	for i in x:
		if i % 3 == 0:
			y.append(i)
	return y

#Create a function that takes a list of numbers and returns a list of the numbers that are divisible by 5.
def divisible_by","def group_by_key(fun,x):
	x = {x}
	y = []
	for i in x:
		#If the value of i is not in the y variable, add it to the y variable.
		if i not in y:
			#Add i to the y variable.
			y.append(i)
		#If the value of i is in the y variable, add the value of fun(i) to the y variable.
		else:
			mapped = fun(i)
			y.append(mapped)
	return y

#Create a function that takes a list of numbers and returns a list of the numbers that are even.
"
89,89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","def max_stock_profit(array):
	best = -1
	array = sorted(array)
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
	return best

#Test
print(max_stock_profit([1, 2, 3, 4, 5]))

#Solution
def max_stock_profit(array):
	best = -1
	minimum = array[0]
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
		#If the current element is smaller than the minimum, update the minimum
		if array[i] < minimum:
			minimum = array[i]
	return best

#Test
print(max_stock_profit([1, 2
	]))

#Solution
def max_stock_profit(array):
	best = -1
	minimum = array[0]
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
		#If the current element is smaller than the minimum, update the minimum
		if array[i] < minimum:
			minimum = array[i]
	return best

#Test
print(max_stock_profit([1","def max_stock_profit(array):
	best = -1
	array = sorted(array)
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
	return best

#Test
"
90,90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","def sum_positions(target,nums):
	target = target
	nums = nums
	result = []
	for i in nums:
		result.append(i+target)
	return result

#Test the function.
print(sum_positions(10, [1,2,3,4,5]))

#The function should return a list of all the indices of the elements in ""nums"" that are equivalent to ""target"".

#The function should return an empty list if ""nums"" is empty.

#The function should return an empty list if ""target"" is not in ""nums"".

#The function should return an empty list if ""nums"" and ""target"" are the same.

#The function should return a list of all the indices of the elements in ""nums"" that are equivalent to ""target"".

#The function should return an empty list if ""nums"" is

#The function should return an empty list if ""target"" is not in ""nums"".

#The function should return an empty list if ""nums"" and ""target"" are the same.

#The function should return a list of all the indices of the elements in ""nums"" that are equivalent to ""target"".

#The function should return an empty list if ""nums"" is

#The function should return an empty list if ""target"" is not in ""nums"".

#The function should return an empty list if","def sum_positions(target,nums):
	target = target
	nums = nums
	result = []
	for i in nums:
		result.append(i+target)
	return result

#Test the function.
"
91,91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","def find_missing_num(nums,N):
	all_nums = set(range(1,N+1))
	for num in nums:
		#If the number is not in the set of all numbers, add it to the set.
		if num not in all_nums:
			all_nums.add(num)
	return all_nums - set(nums)

#Test
print(find_missing_num([1,2,3,4,5,6
	],7))
print(find_missing_num([1,2,3,4,5,6
	],7))
print(find_missing_num([1,2,3,4,5,6
	],7))
print(find_missing_num([1,2,3,4,5,6
	],7))
print(find_missing_num([1,2,3,4,5,6","def find_missing_num(nums,N):
	all_nums = set(range(1,N+1))
	for num in nums:
		#If the number is not in the set of all numbers, add it to the set.
		if num not in all_nums:
			all_nums.add(num)
	return all_nums - set(nums)

#Test
"
92,92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","def common_num_in_matrix(x):
	X = x
	X = X
	X = X
	X = X
	X = X
	X = X
	X = X
	common = set(X[0])
	for i in range(1, len(X)):
		common.update(X[i])
	return len(common)

#Function to find the number of common elements in two matrices.
def common_num_in_matrices(x, y):
	X = x
	Y = y
	for i in range(len(X)):
		common = set(X[i])
		for j in range(len(Y)):
			common.intersection_update(Y[j])
		X[i] = list(common)
	for i in range(len(Y)):
		common = set(Y[i])
		for j in range(len(X)):
			common.intersection_update
	common = list(common)
	print(common)

#Function to find the number of common elements in two lists.
def common_num_in_lists(x, y):","def common_num_in_matrix(x):
	X = x
	X = X
	X = X
	X = X
	X = X
	X = X
	X = X
	common = set(X[0])
	for i in range(1, len(X)):
		common.update(X[i])
	return len(common)

#Function to find the number of common elements in two matrices.
"
93,93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","def sum_collatz(start):
	seq = [start]
	while len(seq) > 0:
		#Get the first element of the sequence.
		current = seq.pop(0)
		#If the current element is even, add 2 to the sequence.
		if current % 2 == 0:
			seq.append(current + 2)
		#If the current element is odd, add 3 to the sequence.
		else:
			seq.append(current + 3)

	while start!= 1:
		if start % 2 == 0:
			start = start / 2
		else:
			start = start * 3 + 1
		seq.append(start)

	return seq

#This function takes in a list of numbers and returns a list of the numbers in the sequence of the sum of the numbers in the list.
def sum_collatz_list(list):
	results = []
	current = list[0]
	sum = current
	index = 1
	for i in range(1, len(list)):
		#If the current number is even, add 2 to the sequence.
		if list[i] % 2 == 0:
			print(results)","def sum_collatz(start):
	seq = [start]
	while len(seq) > 0:
		#Get the first element of the sequence.
		current = seq.pop(0)
		#If the current element is even, add 2 to the sequence.
		if current % 2 == 0:
			seq.append(current + 2)
		#If the current element is odd, add 3 to the sequence.
		else:
			seq.append(current + 3)

	while start!= 1:
		if start % 2 == 0:
			start = start / 2
		else:
			start = start * 3 + 1
		seq.append(start)

	return seq

#This function takes in a list of numbers and returns a list of the numbers in the sequence of the sum of the numbers in the list.
"
94,94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","def cup_swap(start,swap):
	pos = start
	temp = pos
	temp2 = temp
	temp3 = temp2
	temp4 = temp3
	temp5 = temp4
	temp6
	for i in swap:
		if i == pos:
			move(pos,temp)
			pos = temp
		else:
			temp = i
	if temp!= swap[-1]:
		move(temp,swap[-1])

	print(""pos = "",pos)
	print(""temp = "",temp)
	print(""temp2 = "",temp2)
	print(""temp3 = "",temp3)
	print(""temp4 = "",temp4)
	print(""temp5 = "",temp5)
	print(""temp6 = "",temp6)","def cup_swap(start,swap):
	pos = start
	temp = pos
	temp2 = temp
	temp3 = temp2
	temp4 = temp3
	temp5 = temp4
	temp6
	for i in swap:
		if i == pos:
			move(pos,temp)
			pos = temp
		else:
			temp = i
	if temp!= swap[-1]:
		move(temp,swap[-1])

	print(""pos = "",pos)
	print(""temp = "",temp)
	print(""temp2 = "",temp2)
	print(""temp3 = "",temp3)
	print(""temp4 = "",temp4)
	print(""temp5 = "",temp5)
"
95,95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","def reverse_digits(x):
	stack = []
	num = str(x)
	for i in num:
		stack.append(i)
	for i in range(len(stack)):
		stack[i] = int(stack[i])
		stack[i] = stack[i] * 10
	return ''.join(stack)

#Test
print(reverse_digits(1
	))
<|endoftext|>
	print(int(result))","def reverse_digits(x):
	stack = []
	num = str(x)
	for i in num:
		stack.append(i)
	for i in range(len(stack)):
		stack[i] = int(stack[i])
		stack[i] = stack[i] * 10
	return ''.join(stack)

#Test
"
96,96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","def calculate_arrows(x):
	arrows = x.split("" "")
	joined_arrow = """"
	for i in arrows:
		joined_arrow += i + "" -> ""
	return joined_arrow

#Function to calculate the distance between two points.
def calculate_distance(x, y):
	x = float(x)
	left = 0
	right = 0
	for i in x:
		if i == ""L"":
			left += 1
		elif i == ""R"":
			right += 1
	distance = math.sqrt((x[0] - y[0])**2 + (x[1] - y[1])**2)
	return distance

#Function to calculate the distance between two points.
def calculate_distance_2(x, y):
	if x[0] > y[0]:
		return x[0] - y[0]
	else:
		return y[0] - x[0]

#Function to calculate the distance between two points.
def calculate_distance_3(x, y):
	if x[0] > y[0]:
		return x[0] - y[0]
	else:
		return x[0] - y[0]

#Function to calculate the distance between two points.
def calculate_distance_4(x, y):
	if x[0] > y[0]:
		return x[0] - y[0]
	else:
		return x[0] - y[0]

#Function to calculate the distance between two points.
def calculate_distance_5(x, y):","def calculate_arrows(x):
	arrows = x.split("" "")
	joined_arrow = """"
	for i in arrows:
		joined_arrow += i + "" -> ""
	return joined_arrow

#Function to calculate the distance between two points.
"
97,97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","def check_interval_num_(x):
	array = [x]
	for i in range(len(array)):
		#If the current element is not the last element.
		if i!= len(array) - 1:
			#Add the current element to the array.
			array.append(array[i] + array[i + 1])
	return array

#Check if the given number is a prime number.
def is_prime(x):

	diff = max(x) - min(x)

	if diff == 1:
		return True

	else:
		return False

#Check if the given number is a prime number.
def is_prime_num_(x):

	diff = max(x) - min(x)
	for i in range(len(array)):
		if diff == array[i]:
			result = True
			break
	return result

#Check if the given number is a prime number.
def is_prime_num(x):

	diff = max(x) - min(x)
	for i in range(len(array)):
		if diff == array[i]:
			result = True
			break
	return result

#Check if

#Check if the given number is a prime number.
def is_prime_num_(x):

	diff = max(x) - min(x)
	for i in range(len(array)):
		if diff == array[i]:
			result = True
			break
	return result

#Check if the given number is a prime number.
def is_prime_num(x):","def check_interval_num_(x):
	array = [x]
	for i in range(len(array)):
		#If the current element is not the last element.
		if i!= len(array) - 1:
			#Add the current element to the array.
			array.append(array[i] + array[i + 1])
	return array

#Check if the given number is a prime number.
"
98,98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","def length_encoding(x):
	original = x
	encoded = """"
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a capital letter
			if original[i].isupper():
				#Append the character to the encoded string
				encoded += chr(ord(original[i]) + 65)
			#If the character is a lower case letter
			else:
				dic = collections.OrderedDict()
				#Iterate through the original string
				for j in range(len(original)):
					#If the character is a letter
					if original[j].isalpha():
						#If the character is a capital letter
						if original[j].isupper():
							#Append the character to the encoded string
							dic[original[j]] = dic.get(original[j], 0) + 1
						#If the character is a lower case letter
						else:
							#Append the character to the encoded string
							dic[
	for key, value in dic.items():
		#If the value is greater than 1
		if value > 1:
			#Append the character to the encoded string
			encoded += chr(ord(key) + 65)
	return encoded

#Function to decode the encoded string
def decode_string(x):
	original = x
	decoded = """"
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the
	result = """"
	for key, value in dic.items():
		#If the value is greater than 1
		if value > 1:
			#Append the character to the encoded string
			result += chr(ord(key) - 65)
	return result

#Function to encode the string
def encode_string(x):
	original = x
	encoded = """"
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a
	return result

#Function to decode the encoded string
def decode_string(x):
	original = x
	decoded = """"
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a
	return result

#Function to encode the string
def encode_string(x):
	original = x
	encoded = """"
	for i in range(len(original)):
		#If the character is a letter
	","def length_encoding(x):
	original = x
	encoded = """"
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a capital letter
			if original[i].isupper():
				#Append the character to the encoded string
				encoded += chr(ord(original[i]) + 65)
			#If the character is a lower case letter
			else:
				dic = collections.OrderedDict()
				#Iterate through the original string
				for j in range(len(original)):
					#If the character is a letter
					if original[j].isalpha():
						#If the character is a capital letter
						if original[j].isupper():
							#Append the character to the encoded string
							dic[original[j]] = dic.get(original[j], 0) + 1
						#If the character is a lower case letter
						else:
							#Append the character to the encoded string
							dic[
	for key, value in dic.items():
		#If the value is greater than 1
		if value > 1:
			#Append the character to the encoded string
			encoded += chr(ord(key) + 65)
	return encoded

#Function to decode the encoded string
"
99,99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","def convert_email(x):
	import re
	regex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"")
	if regex.match(x):
		return x
	else:
		return False

#Function to convert the date to a string.
def convert_date(x):
	import datetime
	address = re.search(r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"", x)
	if address:
		return datetime.datetime.strptime(address.group(1), ""%Y-%m-%d"").strftime(""%d/%m/%Y"")
	else:
		return False

#Function to convert the date to a string.
def convert_time(x):
	address = re.search(r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"", x)
	if address:
		return datetime.datetime.strptime(address.group(1), ""%Y-%m-%d %H:%M:%S"").strftime(""%H:%M:%S"")
	else:
		return False

#Function to convert the date to a string.
def convert_datetime(x):
	address = re.sub(r""[^a-zA-Z0-9_.+-]+"", "" "", x)
	address = address.split()
	for i in range(len(address)):
		address[i] = convert_date(address[i])
	for i in range(len(address)):
		address[i] = convert_time(address[i])

	print(address)
	return "" "".join(address)

#Function to convert the date to a string.
def convert_datetime_2(x):","def convert_email(x):
	import re
	regex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"")
	if regex.match(x):
		return x
	else:
		return False

#Function to convert the date to a string.
"
100,100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","def second_largest(A):
	my_numbers = A
	largest = my_numbers[0]
	second_largest = my_numbers[0]
	third_largest = my_numbers[0]
	fourth_largest = my_numbers[0]
	for i in range(len(my_numbers)):
		if my_numbers[i] > largest:
			second_largest = largest
			largest = my_numbers[i]
		elif my_numbers[i] > second_largest:
			second_largest = my_numbers[i]
		elif my_numbers[i] > third_largest:
			third_largest = my_numbers[i]
		elif my_numbers[i] > fourth_largest:
			fourth_largest = my_numbers[i]
	unique_list = []
	for i in range(len(my_numbers)):
		if my_numbers[i] not in unique_list:
			unique_list.append(my_numbers[i])
	print(unique_list)
	print(largest)
	print(second_largest)
	print(third_largest
	if second_largest not in unique_list:
		print(second_largest)
	else:
		print(max(unique_list))
	if third_largest not in unique_list:
		print(third_largest)
	else:
		print(max(unique_list))
	if fourth_largest","def second_largest(A):
	my_numbers = A
	largest = my_numbers[0]
	second_largest = my_numbers[0]
	third_largest = my_numbers[0]
	fourth_largest = my_numbers[0]
	for i in range(len(my_numbers)):
		if my_numbers[i] > largest:
			second_largest = largest
			largest = my_numbers[i]
		elif my_numbers[i] > second_largest:
			second_largest = my_numbers[i]
		elif my_numbers[i] > third_largest:
			third_largest = my_numbers[i]
		elif my_numbers[i] > fourth_largest:
			fourth_largest = my_numbers[i]
	unique_list = []
	for i in range(len(my_numbers)):
		if my_numbers[i] not in unique_list:
			unique_list.append(my_numbers[i])
	print(unique_list)
	print(largest)
	print(second_largest)
	print(third_largest
	if second_largest not in unique_list:
		print(second_largest)
	else:
		print(max(unique_list))
	if third_largest not in unique_list:
		print(third_largest)
	else:
		print(max(unique_list))
"
101,101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","def largest_prefix_sum(A):
	my_numbers = A
	max_sum = 0
	max_prefix = 0
	max_prefix_sum = 0
	max
	prefix_sum_list = []
	for i in range(len(my_numbers)):
		prefix_sum_list.append(my_numbers[i] + prefix_sum_list[-1])
	for i in range(len(prefix_sum_list)):
		if prefix_sum_list[i] > max_prefix_sum:
			max_prefix_sum = prefix_sum_list[i]
			max_prefix = i
	return max_prefix_
#	print(max_prefix)
#	print(max_prefix_sum)

#	print(prefix_sum_list)

#	print(largest_prefix_sum(A))

#	print(prefix_sum_list)

#	print(largest_prefix_sum(A))

#	print(prefix_sum_list)

#	print(largest_prefix_sum(A))

#	print(prefix_sum_list)
","def largest_prefix_sum(A):
	my_numbers = A
	max_sum = 0
	max_prefix = 0
	max_prefix_sum = 0
	max
	prefix_sum_list = []
	for i in range(len(my_numbers)):
		prefix_sum_list.append(my_numbers[i] + prefix_sum_list[-1])
	for i in range(len(prefix_sum_list)):
		if prefix_sum_list[i] > max_prefix_sum:
			max_prefix_sum = prefix_sum_list[i]
			max_prefix = i
	return max_prefix_
"
102,102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","def closest_element_to_zero(A):
	my_numbers = A
	min_diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff < min_diff:
				min_diff = diff
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff == min_diff:
				return i
	closest_number = 0
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff < closest_number:
				closest_number = diff","def closest_element_to_zero(A):
	my_numbers = A
	min_diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff < min_diff:
				min_diff = diff
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff == min_diff:
				return i
	closest_number = 0
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			diff = abs(i)
			if diff < closest_number:
"
103,103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","def consecutive_unique_char(A):
	my_string = A
	length = len(my_string)
	count = 0
	unique_char = """"
	unique_char_count = 0
	for i in range(length):
		if my_string[i] not in unique_char:
			unique_char += my_string[i]
			unique_char_count += 1
		else:
			if unique_char_count > 1:
				count += 1
			unique_char = """"
			unique_char_count = 0
	if unique_char_count > 1:
		count += 1
	return count

# Driver code
A = ""abcde""
result_substring = consecutive_unique_char(A)
print(""The longest substring of my_string that contains only unique characters is: "", result_substring)

# Time Complexity: O(n)
# Space Complexity: O(n)
<|endoftext|>","def consecutive_unique_char(A):
	my_string = A
	length = len(my_string)
	count = 0
	unique_char = """"
	unique_char_count = 0
	for i in range(length):
		if my_string[i] not in unique_char:
			unique_char += my_string[i]
			unique_char_count += 1
		else:
			if unique_char_count > 1:
				count += 1
			unique_char = """"
			unique_char_count = 0
	if unique_char_count > 1:
		count += 1
	return count

# Driver code
"
104,104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","def highest_frequency_char(A):
	my_string = A
	my_string_length = len(my_string)
	my_string_char = """"
	my_string_char_count = 0
	for i in range(my_string_length):
		for j in range(i+1, my_string_length):
			if my_string[i] == my_string[j]:
				my_string_char = my_string[i]
				my_string_char_count = my_string_char_count + 1
	my_string_char_count = my_string_char_count + 1
	return my_string_char_count

#Function
def repeated_char(A):
	my_string = A","def highest_frequency_char(A):
	my_string = A
	my_string_length = len(my_string)
	my_string_char = """"
	my_string_char_count = 0
	for i in range(my_string_length):
		for j in range(i+1, my_string_length):
			if my_string[i] == my_string[j]:
				my_string_char = my_string[i]
				my_string_char_count = my_string_char_count + 1
	my_string_char_count = my_string_char_count + 1
	return my_string_char_count

#Function
"
105,105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","def longest_palindrome(A):
	my_string = A
	longest_palindrome_length = 0
	longest_palindrome_start = 0
	longest_palindrome_end = 0
	longest_palindrome_

	for i in range(len(my_string)):
		for j in range(i, len(my_string)):
			if my_string[i:j+1] == my_string[i:j+1][::-1]:
				palindrome_list.append(my_string[i:j+1])

	for i in range(len(palindrome_list)):
		if len(palindrome_list[i]) > longest_palindrome_length:
			longest_palindrome_length
	print(longest_palindrome_length)
	print(longest_palindrome_start, longest_palindrome_end)
	print(palindrome_list[longest_palindrome_start:longest_palindrome_end+1])","def longest_palindrome(A):
	my_string = A
	longest_palindrome_length = 0
	longest_palindrome_start = 0
	longest_palindrome_end = 0
	longest_palindrome_

	for i in range(len(my_string)):
		for j in range(i, len(my_string)):
			if my_string[i:j+1] == my_string[i:j+1][::-1]:
				palindrome_list.append(my_string[i:j+1])

	for i in range(len(palindrome_list)):
		if len(palindrome_list[i]) > longest_palindrome_length:
			longest_palindrome_length
	print(longest_palindrome_length)
	print(longest_palindrome_start, longest_palindrome_end)
"
106,106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","def count_primes(A):
	my_integer = A
	my_prime = 0
	my_prime_count = 0
	my_prime_list = []
	my_prime_list_count = 0
	for i in range(2, my_integer):
		if is_prime(i):
			my_prime += 1
			my_prime_list.append(i)
			my_prime_list_count += 1
	for i in range(my_integer, 0, -1):
		if is_prime(i):
			my_prime_count += 1
	print(""The number of primes less than"", my_integer, ""is
	print(""The prime numbers less than"", my_integer, ""are"", my_prime_list)","def count_primes(A):
	my_integer = A
	my_prime = 0
	my_prime_count = 0
	my_prime_list = []
	my_prime_list_count = 0
	for i in range(2, my_integer):
		if is_prime(i):
			my_prime += 1
			my_prime_list.append(i)
			my_prime_list_count += 1
	for i in range(my_integer, 0, -1):
		if is_prime(i):
			my_prime_count += 1
	print(""The number of primes less than"", my_integer, ""is
"
107,107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","def rotate_array(A,K):
	my_array = A
	n = K
	i = 0
	j = 0
	m = len(my_array)
	n = len(my_array)
	k = n
	i = 0
	j = 0
	m = len(my_array)
	n = len(my_array)
	k = n
	rotated_result = []
	while k > 0:
		rotated_result.append(my_array[i])
		k = k - 1
		i = i + 1
	rotated_result = rotated_result[::-1]
	rotated_result = rotated_result[::-1]
	rotated_result = rotated_result[::-1
	print(rotated_result)
	return rotated_result

#Test case 1
A = [1,2,3,4,5,6,7,8,9,10]
K = 3
print(rotate_array(A,K))

#Test case 2
A = [1,2,3,4,5,6,7,8,9,10]
K = 4
print(rotate_array(A,K))

#Test case 3
A = [1,2,3,4","def rotate_array(A,K):
	my_array = A
	n = K
	i = 0
	j = 0
	m = len(my_array)
	n = len(my_array)
	k = n
	i = 0
	j = 0
	m = len(my_array)
	n = len(my_array)
	k = n
	rotated_result = []
	while k > 0:
		rotated_result.append(my_array[i])
		k = k - 1
		i = i + 1
	rotated_result = rotated_result[::-1]
	rotated_result = rotated_result[::-1]
	rotated_result = rotated_result[::-1
	print(rotated_result)
	return rotated_result

#Test case 1
"
108,108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","def partition_equal_sets(A):
	my_array = []
	my_array = []
	my_array = []
	my_array = []
	my_array = []
	my
	my_sum = sum(A)
	my_array = [0] * my_sum
	my_array = [0] * my_sum
	my_array = [0] * my_sum
	my_array = [0] * my_sum

	print(my_array)

	for i in range(len(A)):
		if A[i]!= my_array[i]:
			my_array[i] = A[i]

	print(my_array)

	for i in range(len(","def partition_equal_sets(A):
	my_array = []
	my_array = []
	my_array = []
	my_array = []
	my_array = []
	my
	my_sum = sum(A)
	my_array = [0] * my_sum
	my_array = [0] * my_sum
	my_array = [0] * my_sum
	my_array = [0] * my_sum

	print(my_array)

	for i in range(len(A)):
		if A[i]!= my_array[i]:
			my_array[i] = A[i]

	print(my_array)
"
109,109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","def square_root_integer(A):
	my_number = A
	square_root = math.sqrt(my_number)
	return square_root

#Call the function ""square_root_integer"" with the value of ""10"".
print(square_root_integer(10))

#Call the function ""square_root_integer"" with the value of ""100"".
print(square_root_
	(my_number)
	)

#Call the function ""square_root_integer"" with the value of ""1000"".
print(square_root_integer(1000))

#Call the function ""square_root_integer"" with the value of ""10000"".
print(square_root_integer(10000))

#Call the function ""square_root_integer"" with the value of ""100000"".
print(square_
	(my_number)
	)

#Call the function ""square_root_integer"" with the value of ""1000000"".
print(square_root_integer(1000000))

#Call the function ""square_root_integer"" with the value of ""10000000"".
print(square_root_integer(10000000))

#Call the function ""square_root_integer"" with the value of ""100000000"".
print
	print(root_number)
	print(root_number_decimal)
	print(root_number_square_root)
	print(root_number_square_root_integer)
	print(root_number_square_root_decimal)","def square_root_integer(A):
	my_number = A
	square_root = math.sqrt(my_number)
	return square_root

#Call the function ""square_root_integer"" with the value of ""10"".
"
110,110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","def plus_1(A):
	my_number = A
	my_number_plus_1 = my_number + 1
	return my_number_plus_1

#Call the function plus_1 with the value of the variable named ""A"".
my_number_plus_1 = plus_1(A)

#Print the value of the variable named ""my_number_
print(my_number_plus_1)
print(plus_number)

#Print the value of the variable named ""my_number_plus_1"".
print(my_number_plus_1)

#Print the value of the variable named ""plus_number"".
print(plus_number)

#Print the value of the variable named ""my_number_plus_1"".
print(my_number_plus_1)

#Print the value of the variable named ""plus_
def digits(A):
	my_number = A
	my_number_digits = []
	for i in range(len(my_number)):
		my_number_digits.append(my_number[i])
	return my_number_digits

#Call the function digits with the value of the variable named ""A"".
my_number_digits = digits(A)

#Print the value of the variable named ""my_number_digits"".
print(my_number_digits)

#Print the value of the variable named ""my_number_
print(my_number_digits)

#Print the value of the variable named ""my_number_digits"".
print(my_number_digits)

#Print the value of the variable named ""my_number_digits"".
print(my_number_digits)

#Print the value of the variable named ""my_number_digits"".
print(my_number_digits)

#Print the value of the variable named ""my_number_digits"".
print(my_number_digits)

#Print the value of the variable named ""my_number_","def plus_1(A):
	my_number = A
	my_number_plus_1 = my_number + 1
	return my_number_plus_1

#Call the function plus_1 with the value of the variable named ""A"".
"
111,111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","def check_square_sum(A):
	my_number = A
	if my_number**0.5 == int(my_number**0.5):
		#If it is, print the number.
		print(my_number)
	else:
		#If it is not, print ""Not a square.""
		print(""Not a square."")

#Call the function.
check_square_sum(10)
def square_sum(a,b):
	return a**2 + b**2

#Call the function.
square_sum(10,20)
def square_root(a):
	return int(a**(1/2))

#Call the function.
square_root(10)
def sum_of_squares(A):
	my_number = A
	if my_number**2 == int(my_number**2):
		print(my_number)
	else:
		print(""Not a square."")

#Call the function.
sum_of_squares(10)
def sum_of_squares_2(A):

	if A**2 == int(A**2):
		print(True)
	else:
		print(False)

#Call the function.
sum_of_squares_2(10)
def sum_of_squares_3(A):

	if A**2 == int(A**2):
		print(True)
	else:
		print(False)

#Call the function.
sum_of_squares","def check_square_sum(A):
	my_number = A
	if my_number**0.5 == int(my_number**0.5):
		#If it is, print the number.
		print(my_number)
	else:
		#If it is not, print ""Not a square.""
		print(""Not a square."")

#Call the function.
"
112,112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","def comare_std._dev.(A):
	my_array = [1,2,3,4,5,6,7,8,9,10]
	my_array = [1,2,3,4,5,6,7,8,9,10]
	my_array = [1,2,3,4,5,6,7,8,9,10]
	
	result = comare_std.std(my_array)
	
	print(result)

#Call the function.
comare_std._dev.(A)

#Output:
#1.0

#Exercise 10:
#Write a function named comare_std._mean(A) that takes in an array of numbers and returns the mean of the array.

def comare_std._mean(A):
	result = 0
	
	if result < 1:
		print(""True"")
	else:
		print(""False"")
	
	result = comare_std.mean(A)
	
	print(result)

#Call the function.
comare_std._mean(A)

#Output:
#3.0

#Exercise 11:
#Write a function named comare_std._median(A) that takes in an array of numbers and returns the median of the array.
","def comare_std._dev.(A):
	my_array = [1,2,3,4,5,6,7,8,9,10]
	my_array = [1,2,3,4,5,6,7,8,9,10]
	my_array = [1,2,3,4,5,6,7,8,9,10]
	
	result = comare_std.std(my_array)
	
	print(result)

#Call the function.
"
113,113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","def matrix_size(A):
	my_matrix = A

	size = len(my_matrix)

	return size

#Function to find the determinant of a matrix ""{A}"".
def determinant(A):
	my_matrix = A

	size =
	row_number = matrix_size(my_matrix)

	column_number = matrix_size(my_matrix)

	determinant = 0

	for i in range(row_number):
		determinant += my_matrix[i][i] * (i + 1)

	return determinant

#Function to


#Function to find the inverse of a matrix ""{A}"".
def inverse(A):","def matrix_size(A):
	my_matrix = A

	size = len(my_matrix)

	return size

#Function to find the determinant of a matrix ""{A}"".
"
114,114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","def diff_mean_and_median(A):
	my_array = A

	my_array_mean = np.mean(my_array)

	my_array_median = np.median(my_array)

	print(my_array_mean)


	mean_number = np.mean(my_array)

	median_number = np.median(my_array)

	standard_deviation_number = np.std(my_array)

	variance_number = np.var(my_array)


	difference_number = my_array_mean - median_number

	print(difference_number)

	difference_number = my_array_mean - standard_deviation_number

	print(difference_number)

	difference_number = my_array_mean - variance_number

	print(difference_number)
","def diff_mean_and_median(A):
	my_array = A

	my_array_mean = np.mean(my_array)

	my_array_median = np.median(my_array)

	print(my_array_mean)


	mean_number = np.mean(my_array)

	median_number = np.median(my_array)

	standard_deviation_number = np.std(my_array)

	variance_number = np.var(my_array)


	difference_number = my_array_mean - median_number

	print(difference_number)

	difference_number = my_array_mean - standard_deviation_number

	print(difference_number)

	difference_number = my_array_mean - variance_number
"
