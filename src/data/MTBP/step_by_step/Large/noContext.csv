,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code
0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{B}"" to a variable named ""my_string"".\nmy_string = ""B""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{C}"" to a variable named ""my_string"".\nmy_string = ""C""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{D}"" to a variable named ""', '#Lowercase the given string ""my_string"".\ndef lowercase(my_string):\n    return my_string.lower()\n\n#Uppercase the given string ""my_string"".\ndef uppercase(my_string):\n    return my_string.upper()\n\n#Return the length of the given string ""my_string"".\ndef length(my_string):\n    return len(my_string)\n\n#Return the first character of the given string ""my_string"".\ndef first_char(my_string):\n    return my_string[0]\n\n#Return the last character of the given string ""my_string"".\ndef', '#Assign the distinct characters of the string to a variable named ""chars"".\nchars = string.ascii_lowercase\n\n#Create a variable named ""count"" that will be used to count the number of times each character appears in the string.\ncount = {}\n\n#Loop through the characters in the string.\nfor char in chars:\n    #If the character is not in the dictionary, add it to the dictionary.\n    if char not in count:\n        count[char] = 1\n    #If the character is in the dictionary, add 1 to the value of the character in the dictionary.\n    else:\n        count[char] += 1\n\n#Print the dictionary', ""#Sort these characters in alphabetical order.\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] > s[j]:\n\t\t\t\ts[i], s[j] = s[j], s[i]\n\treturn ''.join(s)\n\ndef main():\n\ts = input()\n\tprint(sort_string(s))\n\nif __name__ == '__main__':\n\tmain()"", '#Print the resulting list of characters.\nprint(characters)\n\n#Print the length of the list.\nprint(len(characters))\n\n#Print the first character.\nprint(characters[0])\n\n#Print the last character.\nprint(characters[-1])\n\n#Print the middle character.\nprint(characters[len(characters)//2])\n\n#Print the character at the specified index.\nprint(characters[1])\n\n#Print the character at the specified index.\nprint(characters[len(characters)//2])\n\n#Print the character at the specified index.\nprint(characters[len']"
1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","['#Define a list of integers named ""numbers"" with the values {numbers}.\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list ""numbers"" with the values {numbers}.\nprint(numbers)\n\n#Print the length of the list ""numbers"" with the value {len(numbers)}.\nprint(len(numbers))\n\n#Print the first element of the list ""numbers"" with the value {numbers[0]}.\nprint(numbers[0])\n\n#Print the last element of the list ""numbers"" with the value {numbers', '#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".\ntotal = sum(numbers)\n\n#Print the result.\nprint(""The sum of the elements in variable \\""numbers\\"" is: "" + str(total))\n', '#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".\nnormalized = [x/sum(list) * 100 for x in list]\n\n#Print the list.\nprint(normalized)\n\n#Create a new list with the same elements as the original list, but with the values multiplied by 100.\nnew_list = [x * 100 for x in list]\n\n#Print the new list.\nprint(new_list)\n\n#Create a new list with the same elements as the original list, but with the values divided by 100.\nnew_list = [x / 1', '#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".\n#Print the formatted string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.\n\n#Hint: Use the format() function to format the string.', '#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint(formatted)\n\n#Print the variable ""formatted"".\nprint']"
2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","['#Write a function that takes an integer minutes and converts it to seconds.\n\ndef minutes_to_seconds(minutes):\n    return minutes * 60\n\nprint(minutes_to_seconds(10))\n\n#Write a function that takes a string and returns the string reversed.\n\ndef reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(""Hello""))\n\n#Write a function that takes a string and returns the string with the first letter in uppercase.\n\ndef capitalize_first_letter(string):\n    return string[0].upper() + string[1:]\n\nprint(capitalize_first_letter(""hello', '#Write a function that takes an integer hours and converts it to seconds.\n\ndef convert_hours_to_seconds(hours):\n    return hours * 3600\n\nprint(convert_hours_to_seconds(1))\nprint(convert_hours_to_seconds(2))\nprint(convert_hours_to_seconds(3))\nprint(convert_hours_to_seconds(4))\nprint(convert_hours_to_seconds(5))\nprint(convert_hours_to_seconds(6))\nprint(convert_hours_to_seconds(7))\nprint(convert_hours_to_seconds(8))', '#Print the total seconds of {a1} hours and {a2} minutes.\nprint(f""{a1} hours and {a2} minutes"")\n\n#Print the total seconds of {a1} hours and {a2} minutes.\nprint(f""{a1} hours and {a2} minutes"")\n\n#Print the total seconds of {a1} hours and {a2} minutes.\nprint(f""{a1} hours and {a2} minutes"")\n\n#Print the total seconds of {a1} hours and {a2} minutes.\nprint(f""{a1} hours and {a2} minutes"")\n\n#Print']"
3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","['#Implement a function which returns the n-th Fibonacci number.\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5))\n', '#Implement a function that computes the square of an integer argument.\n\ndef square(x):\n    return x * x\n\nprint(square(5))\n\n#Implement a function that computes the cube of an integer argument.\n\ndef cube(x):\n    return x * x * x\n\nprint(cube(5))\n\n#Implement a function that computes the factorial of an integer argument.\n\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\nprint(factorial(5))\n\n#Implement a function that computes the sum of the squares of the first', '#Print out the square of {a1}-th Fibonacci number.\nprint(fibonacci(a1))\n\n#Print out the square of {a2}-th Fibonacci number.\nprint(fibonacci(a2))\n\n#Print out the square of {a3}-th Fibonacci number.\nprint(fibonacci(a3))\n\n#Print out the square of {a4}-th Fibonacci number.\nprint(fibonacci(a4))\n\n#Print out the square of {a5}-th Fibonacci number.\nprint(fibonacci(a5))\n\n#Print out the square of {a6}-th Fibonacci']"
4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers ""{A}"".\nprint(my_numbers)\n\n#Print the length of the list ""{A}"".\nprint(len(my_numbers))\n\n#Print the first element of the list ""{A}"".\nprint(my_numbers[0])\n\n#Print the last element of the list ""{A}"".\nprint(my_numbers[-1])\n\n#Print the middle element of the', '#Count the number of negative numbers in the list as ""n_neg"".\nn_neg = 0\nfor i in range(len(list_of_numbers)):\n    if list_of_numbers[i] < 0:\n        n_neg += 1\n\n#Print the number of negative numbers in the list.\nprint(""The number of negative numbers in the list is: "", n_neg)\n\n#Count the number of positive numbers in the list as ""n_pos"".\nn_pos = 0\nfor i in range(len(list_of_numbers)):\n    if list_of_numbers[i] > 0:\n        n', '#Count the number of positive numbers in the list as ""n_pos"".\nn_pos = len([x for x in list_of_numbers if x > 0])\nprint(n_pos)\n\n#Count the number of negative numbers in the list as ""n_neg"".\nn_neg = len([x for x in list_of_numbers if x < 0])\nprint(n_neg)\n\n#Count the number of zeroes in the list as ""n_zeroes"".\nn_zeroes = len([x for x in list_of_numbers if x == 0])\nprint(n_zeroes)', '#Print out the larger number of those two.\nprint(max(a,b))\n']"
5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","['#Import the pandas library.\nimport pandas as pd\n\n#Import the numpy library.\nimport numpy as np\n\n#Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n#Import the seaborn library.\nimport seaborn as sns\n\n#Import the statsmodels library.\nimport statsmodels.api as sm\n\n#Import the statsmodels.formula.api as smf\n\n#Import the statsmodels.tsa.api as smt\n\n#Import the statsmodels.tsa.stattools as smts\n\n#Import the statsmodels.tsa.stattools.stattools as smtst', '#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].\ndf = pd.DataFrame({\'Yes\': [a1, a2], \'No\': [a3, a4]})\n\n#Print the dataframe.\nprint(df)\n\n#Print the first 5 rows of the dataframe.\nprint(df.head())\n\n#Print the last 5 rows of the dataframe.\nprint(df.tail())\n\n#Print the first 5 rows of the dataframe.\nprint(df.head(5))\n\n#Print the last 5 rows of the dataframe.\nprint(df.tail(5))\n\n#Print the first', '#Compute the mean per column and store the value in a variable named means.\nmeans = df.mean(axis=0)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the mean per column.\nprint(means)\n\n#Print the', '#Print the variable means.\nprint(means)\n\n#Print the variable stds.\nprint(stds)\n\n#Print the variable variances.\nprint(variances)\n\n#Print the variable skews.\nprint(skews)\n\n#Print the variable kurtosis.\nprint(kurtosis)\n\n#Print the variable entropy.\nprint(entropy)\n\n#Print the variable entropy.\nprint(entropy)\n\n#Print the variable entropy.\nprint(entropy)\n\n#Print the variable entropy.\nprint(entropy)\n\n#Print the variable entropy.']"
6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","['#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".\n\ndef fizzbuzz(a1, a2):\n    for i in range(a1, a2+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(""fizzbuzz"")\n        elif i % 3 == 0:\n            print(""fizz"")\n        elif i % 5 == 0:\n            print(""buzz"")\n        else:\n            print(i)\n\nfizzbuzz(1, 100)\n', '#Create a list of integers ranging from {a3} to {a4}.\na3 = 1\na4 = 10\na5 = 100\na6 = 1000\na7 = 10000\na8 = 100000\na9 = 1000000\na10 = 10000000\na11 = 100000000\na12 = 1000000000\na13 = 10000000000\na1', '#Call the written function for each element in the list and store the result as ""new_list"".\nnew_list = [written(x) for x in list]\n\n#Print the new list.\nprint(new_list)\n', '#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list ""new_list"".\nprint(new_list)\n\n#Print out the list']"
7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","['#Write a function that can take a string and return a list of word bigrams as pairs.\n#For example, given the string ""the quick brown fox jumps over the lazy dog"",\n#you should return [""the"", ""quick"", ""brown"", ""fox"", ""jumps"", ""over"", ""lazy"", ""dog""].\n\ndef bigrams(s):\n    return [s[i:i+2] for i in range(len(s)-1)]\n\nprint(bigrams(""the quick brown fox jumps over the lazy dog""))\n', '#Assign the string ""{a1}"" to a variable named sentence.\nsentence = ""Hello World!""\n\n#Print the sentence.\nprint(sentence)\n\n#Assign the string ""{a1}"" to a variable named sentence.\nsentence = ""Hello World!""\n\n#Print the sentence.\nprint(sentence)\n\n#Assign the string ""{a1}"" to a variable named sentence.\nsentence = ""Hello World!""\n\n#Print the sentence.\nprint(sentence)\n\n#Assign the string ""{a1}"" to a variable named sentence.\nsentence = ""Hello World!""\n\n#Print the sentence.\nprint(sentence)\n\n#Assign', '#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\n#']"
8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","['#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".\nmy_notes = {\n    ""Kevin"": [a1, a2, a3, a4],\n    ""John"": [a1, a2, a3, a4],\n    ""Mike"": [a1, a2, a3, a4],\n    ""Mitch"": [a1, a2, a3, a4]\n}\n\n#Print the dictionary ""my_notes""\nprint(my_notes)\n\n#Print the value of the key ""John""\nprint(my_notes[""John""])\n\n#Print the value of the key ""', '#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\ndef top_note(dictionary):\n    return {k: v[0] for k, v in dictionary.items()}\n\n#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""bottom_note"": 4 }}.\n\ndef bottom_note(dictionary):\n    return {k: v[-1] for k, v in dictionary.items()}\n\n#Create a function that takes a dictionary of objects like {{ ""name"": ""', '#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".\n#Then sort the list by the second element of the pair.\n#Then print the top 10 names and their top notes.\n\nmy_dict = {\n    ""A"": 10,\n    ""B"": 20,\n    ""C"": 30,\n    ""D"": 40,\n    ""E"": 50,\n    ""F"": 60,\n    ""G"": 70,\n    ""H"": 80,\n    ""I"": 90,\n    ""J"": 100,\n    ""K"": 110,\n    ""', '#Find the name with the highest top_note and assign it to ""top_name"".\n#If there are multiple names with the same top_note, pick the one with the highest top_note.\n#If there are no names with the same top_note, assign ""None"" to ""top_name"".\n#Return the top_name.\n#\n#Note: The names in the list top_names are sorted in ascending order.\n#\n#Example 1:\n#\n#Input: top_notes = [""C"", ""C#"", ""D"", ""D#"", ""E"", ""F"", ""F#"", ""G"", ""G#"", ""A"", ""A#"", ""', '#Print the variable top_name.\nprint(top_name)\n\n#Print the variable top_age.\nprint(top_age)\n\n#Print the variable top_height.\nprint(top_height)\n\n#Print the variable top_weight.\nprint(top_weight)\n\n#Print the variable top_eyes.\nprint(top_eyes)\n\n#Print the variable top_teeth.\nprint(top_teeth)\n\n#Print the variable top_hair.\nprint(top_hair)\n\n#Print the variable top_skin.\nprint(']"
9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","['#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".\ndef to_binary(hex_number):\n    binary_number = """"\n    while hex_number > 0:\n        binary_number = str(hex_number % 2) + binary_number\n        hex_number = hex_number // 2\n    return binary_number\n\n#Create a function that will take a binary number and returns the HEX equivalent (as an integer). E.g., to_hex(11111111) = 0xFF.\ndef to_hex(binary_number):\n    hex_number = 0\n    for i in range(len', '#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.\ndef to_hex(s):\n    return int(s, 2)\n\n#Create a function that will take the output of the above function and return the binary number. E.g., to_bin(""11111111"") = 11111111.\ndef to_bin(s):\n    return int(s, 2)\n\n#Create a function that will take the output of the above function and return the decimal number. E.g., to_dec(""11111111"") = 11111', '#Assign the value {a1} to a variable named ""my_hex"".\nmy_hex = a1\n\n#Print the value of my_hex.\nprint(my_hex)\n\n#Assign the value {a2} to a variable named ""my_oct"".\nmy_oct = a2\n\n#Print the value of my_oct.\nprint(my_oct)\n\n#Assign the value {a3} to a variable named ""my_bin"".\nmy_bin = a3\n\n#Print the value of my_bin.\nprint(my_bin)\n\n#Assign the value {a4} to a variable named ""', '#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".\nmy_binary = my_hex.to_binary()\n\n#Print the binary equivalent of the variable ""my_hex""\nprint(my_binary)\n\n#Convert the variable ""my_binary"" into the hexadecimal equivalent as string named ""my_hexadecimal"".\nmy_hexadecimal = my_binary.to_hexadecimal()\n\n#Print the hexadecimal equivalent of the variable ""my_binary""\nprint(my_hexadecimal)\n\n#Convert the variable ""my_hexadecimal"" into the octal equivalent as string named ""my_octal"".\nmy_octal', '#Convert ""my_binary"" back to a HEX number named ""result"".\nresult = int(my_binary, 2)\n\n#Print the result.\nprint(result)\n', '#Print the result.\nprint(result)\n']"
10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","['#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\nmy_dict = {a1: a2}\n\n#Print the dictionary.\nprint(my_dict)\n\n#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\nmy_dict = {a1: a2}\n\n#Print the dictionary.\nprint(my_dict)\n\n#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\nmy_dict = {a1: a2}\n\n#Print the dictionary.\nprint(my_dict)', '#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.\n\ndef invert(d):\n    return {v: k for k, v in d.items()}\n\n#Write a function ""is_palindrome"" that takes a string as input and returns True if the string is a palindrome, and False otherwise.\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n#Write a function ""is_palindrome_iterative"" that takes a string as input and returns True if the string is a palindrome, and False otherwise.\n\ndef is_palindrome_iterative(s):\n    return s == s[::-', '#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.\n#\n#For example, given the following two dictionaries:\n#\n#{\n#  ""a"": 1,\n#  ""b"": 2,\n#  ""c"": 3\n#}\n#\n#and the following dictionary:\n#\n#{\n#  ""a"": 1,\n#  ""b"": 2,\n#  ""c"": 3\n#}\n#\n#the function should return True because the second dictionary is an inversion of the first dictionary.\n#\n#Given the following two dictionaries:\n#\n#{', '#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".\nmy_dict2 = {a3:my_dict}\n\n#Print the value of my_dict2.\nprint(my_dict2)\n\n#Print the value of my_dict2[a3].\nprint(my_dict2[a3])\n\n#Print the value of my_dict2[a3][a4].\nprint(my_dict2[a3][a4])\n\n#Print the value of my_dict2[a3][a4][a5].\nprint(my_dict2[a3][a4][a', '#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\nprint(my_dict2 == my_dict)\n\n#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\nprint(my_dict2 == my_dict)\n\n#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\nprint(my_dict2 == my_dict)\n\n#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\nprint(my_dict2 == my_dict)\n\n#Print a']"
11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","['#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.\n#The class should have a method named ""play"" that takes a single argument of type ""FootballPlayer"" and returns a string that describes the player\'s play.\n#The class should have a method named ""get_name"" that returns the name of the player.\n#The class should have a method named ""get_age"" that returns the age of the player.\n#The class should have a method named ""get_height"" that returns the height of the player.\n#The class should have a method named ""get_weight"" that returns the weight of the player.\n#The class should', '#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".\n\n# In[10]:\n\n\nclass Person:\n    def __init__(self, name, age, height, weight):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.weight = weight\n        \n    def get_age(self):\n        return f""{self.name} is age {self.age}""\n    \n    def get_height(self):\n        return f""{self.name} is {self.height} cm""\n    \n    def get_weight(self):\n        return f""{self.name} weighs {self.weight} kg""\n\n\n#', '#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n#Create an object named ""player2"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n#Create an object named ""player3"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n#Create an object named ""player4"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n#Create an object named ""player5"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n#Create an', '#Call the getter for the {a5} of the player and print the result.\nprint(player.a5)\n\n#Call the getter for the {a6} of the player and print the result.\nprint(player.a6)\n\n#Call the getter for the {a7} of the player and print the result.\nprint(player.a7)\n\n#Call the getter for the {a8} of the player and print the result.\nprint(player.a8)\n\n#Call the getter for the {a9} of the player and print the result.\nprint(player.a9)\n\n#Call the getter for the']"
12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","['#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.\n\ndef num_len(num):\n    return len(str(num))\n\n#Create a function ""num_to_str"" that takes a number num and returns its string representation. E.g., number_to_str(5000) = ""5000"".\n\ndef num_to_str(num):\n    return str(num)\n\n#Create a function ""num_to_str_with_zeros"" that takes a number num and returns its string representation with leading zeros. E.g., number_to_str_with_zeros(500', '#Initialize a last ""my_list"" with the values {a1} and {a2}\nmy_list = [a1, a2]\n\n#Print the value of my_list\nprint(my_list)\n\n#Print the value of my_list[0]\nprint(my_list[0])\n\n#Print the value of my_list[1]\nprint(my_list[1])\n\n#Print the value of my_list[2]\nprint(my_list[2])\n\n#Print the value of my_list[3]\nprint(my_list[3])\n\n#Print the value', '#Print the longest number in this list.\nprint(max(numbers))\n\n#Print the smallest number in this list.\nprint(min(numbers))\n\n#Print the average of the numbers in this list.\nprint(sum(numbers)/len(numbers))\n\n#Print the sum of the squares of the numbers in this list.\nprint(sum(map(lambda x: x**2, numbers)))\n\n#Print the product of the numbers in this list.\nprint(reduce(lambda x, y: x*y, numbers))\n\n#Print the sum of the squares of the first 100 numbers in']"
13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","['#Import the class LinearRegression from sklearn.linear_model\nfrom sklearn.linear_model import LinearRegression\n\n#Import the class LogisticRegression from sklearn.linear_model\nfrom sklearn.linear_model import LogisticRegression\n\n#Import the class RandomForestClassifier from sklearn.ensemble\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Import the class GradientBoostingClassifier from sklearn.ensemble\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n#Import the class AdaBoostClassifier from sklearn.ensemble\nfrom sklearn.ensemble import AdaBoostClassifier\n\n#Import the class BaggingClassifier from sklearn.ensemble\nfrom sklearn.ensemble import BaggingClassifier', '#Import math.sqrt()\nimport math\n\n#Import random.randint()\nimport random\n\n#Import time.sleep()\nimport time\n\n#Import os.system()\nimport os\n\n#Import sys.exit()\nimport sys\n\n#Import sys.stdout.write()\nimport sys\n\n#Import sys.stdout.flush()\nimport sys\n\n#Import sys.stdin.readline()\nimport sys\n\n#Import sys.stdin.buffer.readline()\nimport sys\n\n#Import sys.stdin.buffer.read()\nimport sys\n\n#Import sys.stdin.buffer.', '#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\n#Print the sum of all integers in the range.\n\nx = 0\nfor i in range(10):\n    x += i\nprint(x)\n\n#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\n#Print the product of all integers in the range.\n\nx = 1\nfor i in range(10):\n    x *= i\nprint(x)\n\n#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\n#Print the quotient of all integers in the range.', '#Define a function ""f"" that multiplies a input argument by 2.\ndef f(x):\n    return x * 2\n\n#Define a function ""g"" that multiplies a input argument by 3.\ndef g(x):\n    return x * 3\n\n#Define a function ""h"" that multiplies a input argument by 4.\ndef h(x):\n    return x * 4\n\n#Define a function ""i"" that multiplies a input argument by 5.\ndef i(x):\n    return x * 5\n\n#Define a function ""j"" that multiplies a input argument by 6.\ndef j(', '#Create a numpy array of numbers ""y"" by applying f to each element of x.\ny = f(x)\n\n#Print the result.\nprint(y)\n\n#Create a numpy array of numbers ""z"" by applying f to each element of x.\nz = f(x)\n\n#Print the result.\nprint(z)\n\n#Create a numpy array of numbers ""w"" by applying f to each element of x.\nw = f(x)\n\n#Print the result.\nprint(w)\n\n#Create a numpy array of numbers ""x"" by applying f to each element of x.\nx = f(x)', '#Initialize a linear regression model.\nmodel = LinearRegression()\n\n#Fit the model to the training data.\nmodel.fit(X_train, y_train)\n\n#Predict the test data.\ny_pred = model.predict(X_test)\n\n#Calculate the mean squared error.\nmse = mean_squared_error(y_test, y_pred)\n\n#Calculate the coefficient of determination.\nr2 = r2_score(y_test, y_pred)\n\n#Print the results.\nprint(""Mean squared error: %.2f"" % mse)\nprint(""', '#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).\nmodel.fit(x_train, y_train, epochs=100, batch_size=100, verbose=1)\n\n#Predict the output of the model on the test set.\ny_pred = model.predict(x_test)\n\n#Print the accuracy of the model.\nprint(""Accuracy: "", accuracy_score(y_test, y_pred))\n\n#Print the confusion matrix of the model.\nprint(confusion_matrix(y_test, y_pred))\n\n#Print the classification report of the model.\nprint(classification_', '#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.\nx_hat = model.predict(x)\n\n#Plot the predicted variable ""x_hat"" at x=[[{a1}]] using the fitted model.\nplt.scatter(x, y, color=\'red\')\nplt.plot(x, x_hat, color=\'blue\')\nplt.show()\n\n#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.\nx_hat = model.predict(x)\n\n#Plot the predicted variable ""x_hat"" at x=[[{a1}]] using the fitted model', '#Apply ceil() to the predicted value and print it as an integer.\nprint(np.ceil(predicted_value))\n\n#Apply the sigmoid function to the predicted value and print it as a float.\nprint(sigmoid(predicted_value))\n\n#Apply the softmax function to the predicted value and print it as a float.\nprint(softmax(predicted_value))\n\n#Apply the tanh function to the predicted value and print it as a float.\nprint(tanh(predicted_value))\n\n#Apply the relu function to the predicted value and print it as a float.\nprint(relu(predicted_value))\n\n#Apply the leaky_']"
14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","[""#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.\n\ndef encrypt(string):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in string:\n        new_string += alphabet[(alphabet.index(letter) + 26) % 26]\n    return new_string\n\n#Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: decrypt('jk') returns 'hi', decrypt('cufhijlmn') returns 'asdfghjkl', decrypt('ih') returns '"", '#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.\ndef decrypt(encrypted_text):\n    #Create a variable to store the decrypted text\n    decrypted_text = """"\n    #Create a for loop to iterate through the encrypted text\n    for i in range(len(encrypted_text)):\n        #Create a variable to store the character at the current index\n        character = encrypted_text[i]\n        #If the character is a letter, add it to the decrypted text\n        if character.isalpha():\n            decrypted_text += character\n        #If the character is a number, add it to the decrypted text\n        elif character.isdigit():\n            decrypted_text += character\n        #If', '#Assign ""{a1}"" to a variable named ""original_text"".\noriginal_text = a1\n\n#Assign ""{a2}"" to a variable named ""new_text"".\nnew_text = a2\n\n#Assign ""{a3}"" to a variable named ""new_text"".\nnew_text = a3\n\n#Assign ""{a4}"" to a variable named ""new_text"".\nnew_text = a4\n\n#Assign ""{a5}"" to a variable named ""new_text"".\nnew_text = a5\n\n#Assign ""{a6}"" to a variable named ""new_text"".\nnew_text = a6', ""#Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.\nencrypted_text = encrypt(original_text)\n\n#Print the encrypted text.\nprint(encrypted_text)\n\n#Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'decrypted_text'.\ndecrypted_text = decrypt(encrypted_text)\n\n#Print the decrypted text.\nprint(decrypted_text)\n"", ""#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.\nrestored_text = decrypt(encrypted_text)\n\n#Print the decrypted text.\nprint(restored_text)\n"", '#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\nmy_result = []\n\n#Create a for loop to iterate through the list of words.\nfor word in words:\n    #Create a for loop to iterate through the list of encrypted_text.\n    for encrypted_text in encrypted_text_list:\n        #Create a for loop to iterate through the list of restored_text.\n        for restored_text in restored_text_list:\n            #Create a for loop to iterate through the list of words.\n            for word_2 in words:\n                #Create a for loop to iterate through the list of encrypted_text.\n                for encrypted_text_2', '#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#']"
15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","['#Defines a class ""Person"" which takes name and id as constructor arguments.\nclass Person:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\n    def __str__(self):\n        return self.name\n\n#Defines a class ""Student"" which takes name, id, and marks as constructor arguments.\nclass Student(Person):\n    def __init__(self, name, id, marks):\n        super().__init__(name, id)\n        self.marks = marks\n\n    def __str__(self):\n        return f""{self.name} {self.id} {self.marks}""\n\n#Defines a class ""Teacher""', '#Extend the class with a function __hash__ which uses the {a1} property as hash value.\nclass Hashable:\n    def __hash__(self):\n        return hash(self.a1)\n\n#Create a class with a __hash__ method that returns the hash value of the {a1} property.\nclass Hashable2(Hashable):\n    def __hash__(self):\n        return hash(self.a1)\n\n#Create a class with a __hash__ method that returns the hash value of the {a1} property.\nclass Hashable3(Hashable):\n    def __hash__(self):\n        return hash(self.a1)\n\n#Create a class with', '#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.\nclass Hashable(object):\n    def __eq__(self, other):\n        return self.hash == other.hash\n\n#Extend the class with a function __hash__ which returns the hash value of the object.\nclass Hashable(object):\n    def __hash__(self):\n        return self.hash\n\n#Extend the class with a function __str__ which returns the string representation of the object.\nclass Hashable(object):\n    def __str__(self):\n        return self.hash\n\n#Extend the class with a function __repr__ which returns the string representation of the object.\nclass', '#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.\npersons = [Person(""Person A"", 1), Person(""Person B"", 2), Person(""Person {a3}"", 3), Person(""Person {a2}"", 4)]\n\n#Create a list ""people"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.\npeople = [Person(""Person A"", 1), Person(""Person B"", 2), Person(""Person {a3}"", 3), Person(""Person {a2}"", 4)]\n\n#Create a list ""people"" with instances of Person', '#Create a set ""unique_persons"" of this list.\nunique_persons = set(persons)\n\n#Print the unique persons.\nprint(unique_persons)\n\n#Create a list ""unique_persons_list"" of this list.\nunique_persons_list = list(unique_persons)\n\n#Print the unique persons list.\nprint(unique_persons_list)\n\n#Create a list ""unique_persons_list_2"" of this list.\nunique_persons_list_2 = list(unique_persons)\n\n#Print the unique persons list.\nprint(unique_persons_list_2)', '#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of elements in the set.\nprint(len(set))\n\n#Print the number of']"
16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","['#Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".\n# \n# So, we can\'t use str() and int() to convert a string to an integer. \n# Instead, we can use the built-in function int() to convert a string to an integer. \n# \n# The built-in function int() is a built-in function that converts a string to an integer. \n# \n# The built-in function int() is a built-in function that converts a string to an integer. \n# \n# The built-in function int() is a built-in function that converts a string to an integer.', '#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".\n\ndef int_to_str(n):\n    if n < 10:\n        return str(n)\n    else:\n        return int_to_str(n//10) + str(n%10)\n\n#Create a function called str_to_int() that converts strings into integers. E.g., str_to_int(""4"") = 4.\n\ndef str_to_int(s):\n    return int(s)\n\n#Create a function called is_palindrome() that takes a string as input and returns True if the string is a pal', '#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.\n\ndef str_to_int(s):\n    return int(s)\n\n#Create a function called str_to_float() that converts floats into strings. E.g., str_to_float(""4.5"") = 4.5.\n\ndef str_to_float(s):\n    return float(s)\n\n#Create a function called str_to_bool() that converts booleans into strings. E.g., str_to_bool(""True"") = True.\n\ndef str_to_bool(s):\n    return bool(s)\n\n#Create', '#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").\nmy_result = [int_to_str(a1), str_to_int(a1)]\n\n#Print the list.\nprint(my_result)\n\n#Create a list named ""my_result"" with elements int_to_str({a2}) and str_to_int(""{a2}"").\nmy_result = [int_to_str(a2), str_to_int(a2)]\n\n#Print the list.\nprint(my_result)\n\n#Create a list named ""my_result"" with elements int_to_str', '#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#']"
17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","['#Initialize dictionary of Morse codes named \'chars_to_dots\' with valuesnchars_to_dots = {\'A\':\'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.', '#Create a function named \'encode_morse\' that takes a string as an argument and returns the Morse code equivalent.\n#The Morse code is a sequence of dots and dashes, where each dot represents a single letter.\n#The dashes represent the next letter in the sequence.\n#For example, the Morse code for the string ""A-B"" is "".- - -.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -', ""#Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.\n#The Morse code is a string of 10 characters, each character being a single letter.\n#The decodes string is a string of 10 characters, each character being a single letter.\n#For example, the Morse code '....-....' would be decoded to '...-...'.\n#The Morse code '....-....' would be decoded to '...-...'.\n#The Morse code '....-....' would be decoded to '...-...'.\n#The Morse code '....-....' would be decoded to '...-...'."", ""#Encode '{a1}' to morse code and assign the result to'morse_code'.\nmorse_code = ''\nfor letter in a1:\n    morse_code += morse_dict[letter]\n\n#Print the result.\nprint(morse_code)\n"", ""#Decode the variable named'morse_code' to a string named 'decoded_text'.\ndecoded_text = morse_code.decode()\n\n#Print the decoded text to the screen.\nprint(decoded_text)\n"", ""#Print the variable named 'decoded_text'.\nprint(decoded_text)\n\n#Print the variable named 'decoded_text_length'.\nprint(decoded_text_length)\n\n#Print the variable named 'decoded_text_length_list'.\nprint(decoded_text_length_list)\n\n#Print the variable named 'decoded_text_length_list_2'.\nprint(decoded_text_length_list_2)\n\n#Print the variable named 'decoded_text_length_list_3'.\nprint(decoded_text_length_list_3)\n\n#Print the variable named 'decoded""]"
18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","['#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.\na1 = 1\na2 = 2\ntarget = 3\n\n#Print the sum of the elements in the list.\nprint(sum(a1, a2, target))\n', '#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.\n#\n#Example:\n#\n#two_sum([2,7,11,15],9) # returns [0,1]\n#two_sum([3,2,4],6) # returns [1,2]\n#two_sum([3,3],6) # returns [0,1]\n#two_sum([3,3],7) # returns [0,1]\n#two_sum([3,3],8) # returns [0,1]\n#two_sum([3,3],9) # returns [0,', '#Run the function and print out the result.\nprint(f(10))\n\n#Run the function and print out the result.\nprint(f(100))\n\n#Run the function and print out the result.\nprint(f(1000))\n\n#Run the function and print out the result.\nprint(f(10000))\n\n#Run the function and print out the result.\nprint(f(100000))\n\n#Run the function and print out the result.\nprint(f(1000000))\n\n#Run the']"
19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","['#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).\n#\n#Hint: Use numpy.random.normal() to generate samples from the distribution.\n#\n#Hint: Use numpy.random.randint() to generate random integers from a given range.\n#\n#Hint: Use numpy.random.choice() to generate a random element from a list.\n#\n#Hint: Use numpy.random.shuffle() to shuffle the elements of a list.\n#\n#Hint: Use numpy.random.randint(low, high, size) to generate random integers from a given range.\n#\n#Hint: Use numpy.random.choice(a,', '#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).\npoints1 = sample_points(a1, a1, 1, 1)\n\n#Call the function to sample 100 points named points2 centered at ({a2}, {a2}) with standard deviation (1, 1).\npoints2 = sample_points(a2, a2, 1, 1)\n\n#Call the function to sample 100 points named points3 centered at ({a3}, {a3}) with standard deviation (1, 1).\npoints3 = sample_points(a3, a3, 1,', '#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).\npoints2 = sample_points(a1, a1, 1, 1)\n\n#Call the function to sample 100 points named points3 centered at (-{a2}, -{a2}) with standard deviation (1, 1).\npoints3 = sample_points(a2, a2, 1, 1)\n\n#Call the function to sample 100 points named points4 centered at (-{a3}, -{a3}) with standard deviation (1, 1).\npoints4 = sample_points(a3, a3,', '#Concatenate these data points.\n#The data points are in the form of a list of lists.\n#The first list contains the x-coordinates of the data points.\n#The second list contains the y-coordinates of the data points.\n#The third list contains the z-coordinates of the data points.\n#The fourth list contains the intensity values of the data points.\n#The fifth list contains the intensity values of the data points.\n#The sixth list contains the intensity values of the data points.\n#The seventh list contains the intensity values of the data points.\n#The eighth list contains the', '#Implement the k-means clustering algorithm with n iterations and the centroids as return value.\n#The algorithm will stop when the distance between two centroids is less than the threshold.\n#The algorithm will stop when the number of iterations is reached.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will stop when the centroids are not changing.\n#The algorithm will', '#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".\n#The algorithm will stop when the number of iterations is reached.\n#The algorithm will stop when the distance between the centroids is below a threshold.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop when the centroids are the same.\n#The algorithm will stop', '#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".\n\n# In[10]:\n\n\ndef centroid(points):\n    x = []\n    y = []\n    for i in range(len(points)):\n        x.append(points[i][0])\n        y.append(points[i][1])\n    x = np.array(x)\n    y = np.array(y)\n    x_mean = np.mean(x)\n    y_mean = np.mean(y)\n    x_std = np.std(x)\n    y_std = np.std(y)\n    x_centroid = (x_mean - x']"
20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","['#Define a list of integers named ""elements"" with values {numbers}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Define a list named ""numbers_list"" with values {numbers}.\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Define a list named ""numbers_list_2"" with values {numbers}.\nnumbers_list_2 = [1, 2, 3, 4, 5,', '#Calculate the sum of the even numbers of the list and store the result to variable ""even"".\neven = sum(x for x in numbers if x % 2 == 0)\n\n#Print the sum of the even numbers of the list.\nprint(even)\n\n#Create a list of the odd numbers of the list.\nodd = [x for x in numbers if x % 2!= 0]\n\n#Print the odd numbers of the list.\nprint(odd)\n\n#Create a list of the even numbers of the list.\neven = [x for x in numbers if x % 2 == 0]\n\n#Print the even numbers of the list', '#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".\nodd = sum(odd_numbers)\n\n#Print the sum of the odd numbers in the same list.\nprint(odd)\n\n#Create a list of the even numbers in the same list.\neven_numbers = [i for i in range(1, 100) if i % 2 == 0]\n\n#Calculate the sum of the even numbers in the same list and store the result to ""even"".\neven = sum(even_numbers)\n\n#Print the sum of the even numbers in the same list.\nprint(even)\n\n#Create a', '#Create a list named ""my_result"" containing the variables even and odd.\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)\n\n#Create a list named ""my_result"" containing the variables even and odd.\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)\n\n#Create a list named ""my_result"" containing the variables even and odd.\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my', '#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#Print the list.\nprint(list)\n\n#']"
21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","['#Define a list named ""elements"" with the values {lst}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Define a list named ""elements"" with the values {lst}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Define a list named ""elements"" with the values {lst}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8,', '#Count the number of zeros in variable elements and store the value into variable ""zero_count"".\nzero_count = 0\nfor i in range(len(variable)):\n    if variable[i] == 0:\n        zero_count += 1\n\n#Print the number of zeros in variable elements.\nprint(""Number of zeros in variable elements: "", zero_count)\n\n#Print the sum of all elements in variable elements.\nprint(""Sum of all elements in variable elements: "", sum(variable))\n\n#Print the product of all elements in variable elements.\nprint(""Product of all elements in variable elements: "", product(variable))\n\n#Print the minimum element in variable', '#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".\nnon_zero = []\nfor i in range(len(list_of_numbers)):\n    if list_of_numbers[i]!= 0:\n        non_zero.append(list_of_numbers[i])\n\n#Print the result.\nprint(non_zero)\n', '#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".\n\n# In[10]:\n\n\nnon_zero = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,']"
22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","['#Import numpy and initialize a numpy array named X with values {array}.\nX = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n#Print the shape of X.\nprint(X.shape)\n\n#Print the first row of X.\nprint(X[0])\n\n#Print the first column of X.\nprint(X[:,0])\n\n#Print the first 3 rows of X.\nprint(X[0:3,:])\n\n#Print the first 3 columns of X.\nprint(X[:,0:3])\n\n#Print the first 3 rows and', '#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.\n#For example, if the input is [1,2,3,4,5,6,7,8,9,10], the output should be [1,2,3,4,5,6,7,8,9,10]\n#If the input is [1,2,3,4,5,6,7,8,9,10,11], the output should be [1,2,3,4,5,6,7,8,9,10,11]\n#If the input is [1,2,', '#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".\n#The function should return the mean of the samples.\n#The function should return the standard deviation of the samples.\n#The function should return the minimum and maximum values of the samples.\n#The function should return the median of the samples.\n#The function should return the mode of the samples.\n#The function should return the variance of the samples.\n#The function should return the correlation coefficient of the samples.\n#The function should return the p-value of the hypothesis test.\n#The function should return the chi-square value of the hypothesis test.\n#The function should return the k', '#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".\nmean = sample.mean()\nprint(mean)\n\n#Calculate the standard deviation of each element in variable ""sample"" and store the result to ""std"".\nstd = sample.std()\nprint(std)\n\n#Calculate the median of each element in variable ""sample"" and store the result to ""median"".\nmedian = sample.median()\nprint(median)\n\n#Calculate the mode of each element in variable ""sample"" and store the result to ""mode"".\nmode = sample.mode()\nprint(mode)\n\n#Calculate the variance of each element in variable ""sample', '#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".\npercentile = [np.percentile(data, 2.5), np.percentile(data, 97.5)]\n\n#Print the values of the 2.5 and 97.5 percentile.\nprint(""The 2.5 percentile is: "", percentile[0])\nprint(""The 97.5 percentile is: "", percentile[1])\n\n#Plot the 2.5 and 97.5 percentile.\nplt.plot(data, color = ""red"")\nplt.plot(percentile, color = ""blue"")\nplt.title(""The', '#Print the variable ""percentile"".\nprint(percentile)\n\n#Print the variable ""percentile_25"".\nprint(percentile_25)\n\n#Print the variable ""percentile_75"".\nprint(percentile_75)\n\n#Print the variable ""percentile_95"".\nprint(percentile_95)\n\n#Print the variable ""percentile_99"".\nprint(percentile_99)\n\n#Print the variable ""percentile_999"".\nprint(percentile_999)\n\n#Print the variable ""percentile_9999"".\nprint(percentile_99']"
23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","['#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".\n#\n#Return the answer as a list of strings.\n#\n#Example 1:\n#\n#Input: a = 2, b = 5\n#Output: [""2"",""4"",""6""]\n#Explanation: The even single digits are ""2"" and ""4"".\n#Example 2:\n#\n#Input: a = 12, b = 13\n#Output: [""12"",""14"",""16""]\n#Explanation: The even single digits are ""12"" and ""14"".\n#Example 3:\n#\n#', '#Assign the sum of the even digits to the variable ""result"".\nresult = 0\nfor i in range(1, 1000):\n    if i % 2 == 0:\n        result += i\n\n#Print the result.\nprint(result)\n', '#Print the resulting number as integer.\nprint(int(result))\n']"
24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","['#Find the maximum element in the list {A} and assign it to variable ""my_max"".\nmy_max = max(A)\n\n#Print the maximum element in the list {A}\nprint(my_max)\n\n#Find the minimum element in the list {A} and assign it to variable ""my_min"".\nmy_min = min(A)\n\n#Print the minimum element in the list {A}\nprint(my_min)\n\n#Find the average element in the list {A} and assign it to variable ""my_avg"".\nmy_avg = sum(A) / len(A)\n\n#Print the average element in the list', '#Find the minimum element in the same list.\n#\n#Example:\n#\n#Input: [1,2,3,4,5]\n#Output: 1\n#\n#Input: [1,2,3,4,5,6,7,8,9,10]\n#Output: 10\n#\n#Note:\n#\n#The array size is in the range [1, 10000].\n#Each element in the array will be an integer in the range [1, 10000].\n\nclass Solution(object):\n    def findMin(self', '#Compute the different between ""my_max"" and the minimum element.\nmy_min = min(my_list)\n\n#Print the minimum element.\nprint(my_min)\n\n#Compute the different between ""my_max"" and the maximum element.\nmy_max = max(my_list)\n\n#Print the maximum element.\nprint(my_max)\n\n#Compute the different between ""my_max"" and the average element.\nmy_avg = sum(my_list) / len(my_list)\n\n#Print the average element.\nprint(my_avg)\n\n#Compute the different between ""my', '#Print the difference between the two numbers\nprint(num1 - num2)\n\n#Print the product of the two numbers\nprint(num1 * num2)\n\n#Print the quotient of the two numbers\nprint(num1 / num2)\n\n#Print the remainder of the division of the two numbers\nprint(num1 % num2)\n\n#Print the absolute value of the two numbers\nprint(abs(num1))\n\n#Print the sign of the two numbers\nprint(num1 > 0)\nprint(num1 < 0)\nprint(num1 ==']"
25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{B}"" to a variable named ""my_string"".\nmy_string = ""B""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{C}"" to a variable named ""my_string"".\nmy_string = ""C""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{D}"" to a variable named ""', '#Lowercase the given string ""my_string"".\ndef lowercase(my_string):\n    return my_string.lower()\n\n#Uppercase the given string ""my_string"".\ndef uppercase(my_string):\n    return my_string.upper()\n\n#Return the length of the given string ""my_string"".\ndef length(my_string):\n    return len(my_string)\n\n#Return the first character of the given string ""my_string"".\ndef first_char(my_string):\n    return my_string[0]\n\n#Return the last character of the given string ""my_string"".\ndef', '#Assign the distinct characters of the string to a variable named ""chars"".\nchars = string.ascii_lowercase\n\n#Create a variable named ""count"" that will be used to count the number of times each character appears in the string.\ncount = {}\n\n#Loop through the characters in the string.\nfor char in chars:\n    #If the character is not in the dictionary, add it to the dictionary.\n    if char not in count:\n        count[char] = 1\n    #If the character is in the dictionary, add 1 to the value of the character in the dictionary.\n    else:\n        count[char] += 1\n\n#Print the dictionary', ""#Sort these characters in alphabetical order.\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] > s[j]:\n\t\t\t\ts[i], s[j] = s[j], s[i]\n\treturn ''.join(s)\n\ndef main():\n\ts = input()\n\tprint(sort_string(s))\n\nif __name__ == '__main__':\n\tmain()"", '#Print the resulting list of characters.\nprint(characters)\n\n#Print the length of the list.\nprint(len(characters))\n\n#Print the first character.\nprint(characters[0])\n\n#Print the last character.\nprint(characters[-1])\n\n#Print the middle character.\nprint(characters[len(characters)//2])\n\n#Print the character at the specified index.\nprint(characters[1])\n\n#Print the character at the specified index.\nprint(characters[len(characters)//2])\n\n#Print the character at the specified index.\nprint(characters[len']"
26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","['#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.\na = ""{A}""\nb = ""{B}""\n\n#Create a variable ""c"" for the string ""{A} {B}"".\nc = a + "" "" + b\n\n#Print the string ""{A} {B}"".\nprint(c)\n\n#Create a variable ""d"" for the string ""{A} {B} {C}"".\nd = a + "" "" + b + "" "" + c\n\n#Print the string ""{A} {B} {C}"".\nprint(d)\n\n#Create a variable ""e"" for the string ""{A} {B', '#Define a function ""len_str"" that returns the length of a string.\ndef len_str(s):\n    return len(s)\n\n#Define a function ""len_str_list"" that returns the length of a list of strings.\ndef len_str_list(l):\n    return len(l)\n\n#Define a function ""len_str_tuple"" that returns the length of a tuple of strings.\ndef len_str_tuple(t):\n    return len(t)\n\n#Define a function ""len_str_dict"" that returns the length of a dictionary of strings.\ndef len_str_dict(d):\n    return len', '#Assign the length of each string to a seperate variable.\n#Then, iterate through the list of strings and print the first 5 characters of each string.\n#Print the length of each string.\n#Print the first 5 characters of each string.\n#Print the length of each string.\n#Print the first 5 characters of each string.\n#Print the length of each string.\n#Print the first 5 characters of each string.\n#Print the length of each string.\n#Print the first 5 characters of each string.\n#Print the length of each string.\n#Print the first 5 characters of each string.\n#', '#Assign the longer string to the variable ""result"".\nresult = long_string\n\n#Print the result.\nprint(result)\n', '#Print the resulting string.\nprint(result)\n']"
27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","['#Assign the positive floating point number {A} to a variable ""f"".\nf = 1.0\n\n#Assign the negative floating point number {B} to a variable ""f"".\nf = -1.0\n\n#Assign the integer number {C} to a variable ""f"".\nf = 1\n\n#Assign the floating point number {D} to a variable ""f"".\nf = 1.0\n\n#Assign the floating point number {E} to a variable ""f"".\nf = 1.0\n\n#Assign the floating point number {F} to a variable ""f"".\nf = 1.0\n\n#', '#Compute the integer part of the number as variable ""a"".\na = int(input(""Enter a number: ""))\n\n#Compute the fractional part of the number as variable ""b"".\nb = a % 1\n\n#Display the integer part of the number.\nprint(""The integer part of the number is: "", a)\n\n#Display the fractional part of the number.\nprint(""The fractional part of the number is: "", b)\n', '#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".\nb = int(f.split(""."")[1])\n\n#If the fractional part of the floating point number is less than 10, then print the fractional part of the floating point number.\nif b < 10:\n    print(f""The fractional part of the floating point number is {b}"")\n\n#If the fractional part of the floating point number is greater than 10, then print the fractional part of the floating point number with a decimal point.\nelse:\n    print(f""The fractional part of the floating point number is {b:.1f}"")\n\n#If the', '#Add them together and print the result.\nprint(a+b)\n\n#Add them together and print the result.\nprint(a-b)\n\n#Add them together and print the result.\nprint(a*b)\n\n#Add them together and print the result.\nprint(a/b)\n\n#Add them together and print the result.\nprint(a%b)\n\n#Add them together and print the result.\nprint(a**b)\n\n#Add them together and print the result.\nprint(a//b)\n\n#Add them together and print the result.\nprint']"
28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","['#Assign the string value {s} to a variable ""my_string"".\nmy_string = ""Hello World!""\n\n#Print the string value {my_string}.\nprint(my_string)\n\n#Assign the string value {s} to a variable ""my_string"".\nmy_string = ""Hello World!""\n\n#Print the string value {my_string}.\nprint(my_string)\n\n#Assign the string value {s} to a variable ""my_string"".\nmy_string = ""Hello World!""\n\n#Print the string value {my_string}.\nprint(my_string)\n\n#Assign the string value {', '#Lowercase the defined string.\n\tdef lower(self):\n\t\tself.string = self.string.lower()\n\n\t#Uppercase the defined string.\n\tdef upper(self):\n\t\tself.string = self.string.upper()\n\n\t#Return the string.\n\tdef getString(self):\n\t\treturn self.string\n\n\t#Return the length of the string.\n\tdef getLength(self):\n\t\treturn len(self.string)\n\n\t#Return the string in a list.\n\tdef getList(self):\n\t\treturn self.string.split()\n\n\t#Return the string in a list', ""#Count the number of vowels in a string\ndef count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\n#Count the number of vowels in a string\ndef count_vowels_2(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\n#"", '#Print out the number of times each word appears in the text\nprint(word_count)\n\n#Print out the number of times each word appears in the text\nprint(word_count.value_counts())\n\n#Print out the number of times each word appears in the text\nprint(word_count.value_counts(normalize=True))\n\n#Print out the number of times each word appears in the text\nprint(word_count.value_counts(normalize=True, sort=False))\n\n#Print out the number of times each word appears in the text\nprint(word_count.value']"
29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","['#Assign the positive integer {n} to a variable ""f"".\nf = 10\n\n#Print the value of f.\nprint(f)\n\n#Assign the negative integer {n} to a variable ""f"".\nf = -10\n\n#Print the value of f.\nprint(f)\n\n#Assign the floating point number {n} to a variable ""f"".\nf = 10.5\n\n#Print the value of f.\nprint(f)\n\n#Assign the floating point number {n} to a variable ""f"".\nf = -10.5\n\n#Print the value of f', '#Create a list from 1 to ""f"" (inclusive).\n#Print the list.\n#Print the list in reverse order.\n#Print the list in reverse order, but with a space between each element.\n#Print the list in reverse order, but with a comma between each element.\n#Print the list in reverse order, but with a period between each element.\n#Print the list in reverse order, but with a colon between each element.\n#Print the list in reverse order, but with a semicolon between each element.\n#Print the list in reverse order, but with a space between each element and a comma.\n#Print the list', '#Create and initialize a variable named ""factorial"".\nfactorial = 1\n\n#Loop through the range of numbers from 1 to 100.\nfor i in range(1, 101):\n    #Calculate the factorial of the number.\n    factorial = factorial * i\n\n#Print the factorial of 100.\nprint(factorial)\n', '#Compute the product of all the values in the list and assign the product to ""factorial"".\n\n#Create a list of numbers.\n\n#Create a variable to store the product of all the numbers in the list.\n\n#Print the product of all the numbers in the list.\n\n#Print the factorial of the product of all the numbers in the list.\n\n#Print the product of all the numbers in the list and the factorial of the product of all the numbers in the list.\n\n#Create a list of numbers.\n\n#Create a variable to store the product of all the numbers in the list.\n\n#Create a variable to store the factorial of the product of all the', '#Print out the variable ""factorial"".\nprint(factorial)\n\n#Print out the variable ""sum"".\nprint(sum)\n\n#Print out the variable ""product"".\nprint(product)\n\n#Print out the variable ""average"".\nprint(average)\n\n#Print out the variable ""median"".\nprint(median)\n\n#Print out the variable ""mode"".\nprint(mode)\n\n#Print out the variable ""variance"".\nprint(variance)\n\n#Print out the variable ""standard_deviation"".\nprint(standard_deviation)\n\n#Print out the variable ""skewness"".\nprint(']"
30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","['#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".\n\n#Input Format\n\n#The first line contains two space-separated integers, {a} {b}.\n\n#Output Format\n\n#Print the sum of the two edges.\n\n#Sample Input\n\n3 4\n\n#Sample Output\n\n7\n\n#Explanation\n\n#The triangle is shown as follows:\n\n#1\n#2\n#3\n#4\n#5\n#6\n#7\n#The sum of the two edges is 7.\n\n#Input/Output\n\n#[execution time limit] 4 seconds (py3)\n\n#', '#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".\nmaximum-edge = 0\nfor i in range(len(two-edges)):\n    maximum-edge = maximum-edge + 1\n\n#Print the maximum length of the third edge.\nprint(""The maximum length of the third edge is: "" + str(maximum-1))\n', '#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".\nminimum-edge = 0\nfor i in range(0,len(edges)-2):\n    minimum-edge = minimum-edge + edges[i+2][0]\n\n#Compute the maximum length of the third edge and store the value in a variable ""maximum-edge"".\nmaximum-edge = 0\nfor i in range(0,len(edges)-2):\n    maximum-edge = maximum-edge + edges[i+2][0]\n\n#Compute the average length of the third edge and store the value in a variable ""average-edge"".\naverage-edge =', '#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\nmy_tuple = (maximum_edge, minimum_edge)\n\n#Print the tuple.\nprint(my_tuple)\n\n#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\nmy_tuple = (maximum_edge, minimum_edge)\n\n#Print the tuple.\nprint(my_tuple)\n\n#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\nmy_tuple = (maximum_edge, minimum_edge)\n\n#Print the tuple.\nprint(my_tuple)', '#Print the variable ""my_tuple"".\nprint(my_tuple)\n\n#Print the variable ""my_tuple[0]"".\nprint(my_tuple[0])\n\n#Print the variable ""my_tuple[1]"".\nprint(my_tuple[1])\n\n#Print the variable ""my_tuple[2]"".\nprint(my_tuple[2])\n\n#Print the variable ""my_tuple[3]"".\nprint(my_tuple[3])\n\n#Print the variable ""my_tuple[4]"".\nprint(my_tuple[4])\n\n#Print the variable']"
31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","['#Compute factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#Compute the sum of a list\ndef sum(lst):\n    return sum(lst)\n\n#Compute the product of a list\ndef product(lst):\n    return product(lst)\n\n#Compute the product of a list\ndef product(lst):\n    return product(lst)\n\n#Compute the product of a list\ndef product(lst):\n    return product(lst)\n\n#Compute the product of a list\ndef', '#Implement a function to compute the remainder when dividing a number by 10.\n\ndef remainder(num):\n    return num % 10\n\n#Implement a function to compute the sum of all the multiples of 3 or 5 below a given number.\n\ndef sum_multiples(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n\n#Implement a function to compute the sum of all the multiples of 3 or 5 below a given number.\n\ndef sum_multiples_', '#Print out the remainder when dividing the factorial of {n} by 10\nprint(n % 10)\n\n#Print out the remainder when dividing the factorial of {n} by 100\nprint(n % 100)\n\n#Print out the remainder when dividing the factorial of {n} by 1000\nprint(n % 1000)\n\n#Print out the remainder when dividing the factorial of {n} by 10000\nprint(n % 10000)\n\n#Print out the remainder when dividing the factorial of {n} by 10']"
32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","['#Given a positive integer {n} and create a variable named ""n"" with this value.\n#Print the value of ""n"" on a new line.\n#Use the ""print"" function to print the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".\n#Use the ""input"" function to get the value of ""n"".', '#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be a regular polygon with ""n"" sides.\n#The polygon is assumed to be', '#Convert the angle from degrees to radians\n\ttheta = theta * (math.pi/180)\n\t#Calculate the distance from the center of the circle\n\tdistance = math.sqrt(radius**2 - (math.sin(theta)**2))\n\t#Return the distance\n\treturn distance\n\n#Function to calculate the angle between two points\ndef angle_between(p1, p2):\n\t#Calculate the angle between the two points\n\tangle = math.acos((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)', '#Round the angle to have two decimal digits.\n\tangle = round(angle, 2)\n\t#Return the angle.\n\treturn angle\n\n#Function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n\t#Calculate the distance between the two points.\n\tdistance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\t#Return the distance.\n\treturn distance\n\n#Function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):', '#Print out the angle of the line\n\tprint(angle)\n\t#Calculate the distance between the two points\n\tdistance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\t#Print out the distance between the two points\n\tprint(distance)\n\t#Calculate the angle between the two points\n\tangle = math.degrees(math.atan2(y2-y1,x2-x1))\n\t#Print out the angle between the two points\n\tprint(angle)\n\t#Calculate the distance between the two points\n\tdistance = math']"
33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","['#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.\ns1 = ""Hello""\ns2 = ""World""\n\n#Print the sum of the two strings.\nprint(s1 + s2)\n\n#Print the sum of the two strings.\nprint(s1 + s2)\n\n#Print the sum of the two strings.\nprint(s1 + s2)\n\n#Print the sum of the two strings.\nprint(s1 + s2)\n\n#Print the sum of the two strings.\nprint(s1 + s2)\n\n#Print the sum of the two strings.\nprint', '#Convert s1 and s2 to integers\ns1 = int(s1)\ns2 = int(s2)\n\n#Check if s1 is greater than s2\nif s1 > s2:\n    print(""s1 is greater than s2"")\nelse:\n    print(""s1 is less than s2"")\n', '#Compute the sum of the two integers and store it as the variable s.\ns = a + b\n\n#Print the sum of the two integers.\nprint(""The sum of the two integers is: "" + str(s))\n', '#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the variable s\nprint(s)\n\n#Print out the']"
34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","['#Initialize the variable named lst with an integer list {l}.\nlst = [1, 2, 3, 4, 5]\n\n#Print the length of lst.\nprint(len(lst))\n\n#Print the first element of lst.\nprint(lst[0])\n\n#Print the last element of lst.\nprint(lst[-1])\n\n#Print the middle element of lst.\nprint(lst[2])\n\n#Print the element at index 3.\nprint(lst[3])\n\n#Print the element at index 4.\nprint(lst[4])\n\n#Print the element at', '#Find the maximum of the variable lst and assign it to a variable named ma.\nma = max(lst)\n\n#Print the maximum of the variable ma.\nprint(ma)\n\n#Find the minimum of the variable lst and assign it to a variable named mi.\nmi = min(lst)\n\n#Print the minimum of the variable mi.\nprint(mi)\n\n#Find the average of the variable lst and assign it to a variable named avg.\navg = sum(lst) / len(lst)\n\n#Print the average of the variable avg.\nprint(avg)\n\n#Find the standard deviation of the variable lst and assign it to a', '#Find the minimum of the variable lst and assign to a variable named mi.\nmi = min(lst)\n\n#Print the minimum of the variable mi.\nprint(mi)\n\n#Find the maximum of the variable lst and assign to a variable named ma.\nma = max(lst)\n\n#Print the maximum of the variable ma.\nprint(ma)\n\n#Find the average of the variable lst and assign to a variable named avg.\navg = sum(lst) / len(lst)\n\n#Print the average of the variable avg.\nprint(avg)\n\n#Find the standard deviation of the variable lst and assign to a variable named std', '#Create a list from mi and ma (inclusive).\nmi = [1,2,3,4,5,6,7,8,9,10]\nma = [11,12,13,14,15,16,17,18,19,20]\n\n#Create a list from mi and ma (exclusive).\nmi_ex = [1,2,3,4,5,6,7,8,9,10]\nma_ex = [11,12,13,14,15,16,17,18', '#Print the sum of this list.\nprint(sum(list1))\n\n#Print the sum of this list.\nprint(sum(list2))\n\n#Print the sum of this list.\nprint(sum(list3))\n\n#Print the sum of this list.\nprint(sum(list4))\n\n#Print the sum of this list.\nprint(sum(list5))\n\n#Print the sum of this list.\nprint(sum(list6))\n\n#Print the sum of this list.\nprint(sum(list7))\n\n#Print the sum of this list.\nprint']"
35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","['#Implement a function to return the characters shared between two words.\n#\n#Example:\n#\n#Input: ""catsanddog"", ""anddog""\n#Output: ""catsdog""\n#Note:\n#You may assume the string contains only lowercase letters.\n#\n#Follow up:\n#What if the inputs contain unicode characters? How would you adapt your solution to such case?\n\nclass Solution(object):\n    def commonChars(self, A, B):\n        """"""\n        :type A: str\n        :type B: str\n        :rtype: str\n        """"""\n        if not A or not B:\n            return """"\n        if len(A', ""#Implement a function to find the number of vowels in a string.\n\ndef count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello'))\nprint(count_vowels('hello world'))\nprint(count_vowels('hello world hello'))\nprint(count_vowels('hello world hello world'))\nprint(count_vowels('hello world hello world hello world'))\nprint(count_vowels('hello world hello"", '#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.\ns = s1 + s2\n\n#Print the string s.\nprint(s)\n\n#Print the length of s.\nprint(len(s))\n\n#Print the first character of s.\nprint(s[0])\n\n#Print the last character of s.\nprint(s[-1])\n\n#Print the character at index 1 of s.\nprint(s[1])\n\n#Print the character at index 10 of s.\nprint(s[10])\n\n#Print the character at index 100 of s.', ""#Print the number of vowels in the variable s\nprint(s.count('a'))\n\n#Print the number of vowels in the variable s\nprint(s.count('e'))\n\n#Print the number of vowels in the variable s\nprint(s.count('i'))\n\n#Print the number of vowels in the variable s\nprint(s.count('o'))\n\n#Print the number of vowels in the variable s\nprint(s.count('u'))\n\n#Print the number of vowels in the variable s\nprint(s.count('A'))\n\n#Print the number of vowels""]"
36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","['#Given a list of integers {l}, assign the list to a varialbe named lst1.\n#Write a function named print_lst1 that prints the list lst1.\n#Print the following sample output:\n#lst1 = [1, 2, 3, 4, 5]\n#print_lst1(lst1)\n#Output:\n#1\n#2\n#3\n#4\n#5\n\nlst1 = [1, 2, 3, 4, 5]\nprint_lst1(lst1)\n', '#Find the negative numbers of the list and assign it to a new variable named lst2.\nlst2 = [i for i in range(10) if i < 0]\n\n#Print the list.\nprint(lst2)\n\n#Find the positive numbers of the list and assign it to a new variable named lst3.\nlst3 = [i for i in range(10) if i > 0]\n\n#Print the list.\nprint(lst3)\n\n#Find the numbers of the list and assign it to a new variable named lst4.\nlst4 = [i for i in range(10) if i % 2 ==', '#Compute the sum of numbers in lst2\ndef sum_lst2(lst2):\n    return sum(lst2)\n\n#Compute the product of numbers in lst2\ndef product_lst2(lst2):\n    return reduce(lambda x,y: x*y, lst2)\n\n#Compute the average of numbers in lst2\ndef avg_lst2(lst2):\n    return sum_lst2(lst2)/len(lst2)\n\n#Compute the median of numbers in lst2\ndef median_lst2(lst2):\n    lst2.sort()\n    if len(lst2)%2 == 0', '#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\n#Print out the sum of the numbers in the list\nprint']"
37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","['#Import the pandas library.\nimport pandas as pd\n\n#Import the numpy library.\nimport numpy as np\n\n#Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n#Import the seaborn library.\nimport seaborn as sns\n\n#Import the statsmodels library.\nimport statsmodels.api as sm\n\n#Import the statsmodels.formula.api as smf\n\n#Import the statsmodels.tsa.api as smt\n\n#Import the statsmodels.tsa.stattools as smts\n\n#Import the statsmodels.tsa.stattools.stattools as smtst', '#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".\ndf = pd.read_csv(""./datasets/mlbootcamp5_train.csv"")\n\n#Print the first 5 rows of the dataframe.\nprint(df.head())\n\n#Print the last 5 rows of the dataframe.\nprint(df.tail())\n\n#Print the shape of the dataframe.\nprint(df.shape)\n\n#Print the number of rows in the dataframe.\nprint(df.shape[0])\n\n#Print the number of columns in the dataframe.\nprint(df.shape[1])\n\n#Print the number of unique values', '#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\nmy_counts = df.groupby(""gender"").count()\n\n#Print the result.\nprint(my_counts)\n\n#Create a new column ""my_counts"" with the value counts for each column in the dataframe.\nmy_counts = df.groupby(""gender"").count()\n\n#Print the result.\nprint(my_counts)\n\n#Create a new column ""my_counts"" with the value counts for each column in the dataframe.\nmy_counts = df.groupby(""gender"").count()\n\n#Print the result.\nprint(my_counts)', '#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".\nplain_list = [1,2,3,4,5,6,7,8,9,10]\n\n#Assign the attribute ""values"" of this variable and to a new variable named ""list_of_lists"".\nlist_of_lists = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]\n\n#Assign the attribute ""values"" of this variable and to a new variable named ""list_of_lists_of_lists"".\nlist_of_lists_of_lists = [[', '#Print the maximum element of this list.\nprint(max(my_list))\n\n#Print the minimum element of this list.\nprint(min(my_list))\n\n#Print the sum of all elements of this list.\nprint(sum(my_list))\n\n#Print the average of all elements of this list.\nprint(sum(my_list)/len(my_list))\n\n#Print the product of all elements of this list.\nprint(prod(my_list))\n\n#Print the product of all elements of this list.\nprint(prod(my_list))\n\n#Print the']"
38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","[""#Define a string named's' with the value '{s}'.\ns = '{s}'\n\n#Print the string s.\nprint(s)\n\n#Define a string named's' with the value '{s}'.\ns = '{s}'\n\n#Print the string s.\nprint(s)\n\n#Define a string named's' with the value '{s}'.\ns = '{s}'\n\n#Print the string s.\nprint(s)\n\n#Define a string named's' with the value '{s}'.\ns = '{s}'\n\n#Print the string s.\nprint(s)\n\n#Define"", ""#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'\npattern = re.compile(r'[,\\.]')\n\n#Create a list of all the words in the text file\nwords = []\n\n#Open the text file and read it line by line\nwith open('text.txt') as f:\n    for line in f:\n        #Split the line into words\n        words.append(line.split())\n\n#Create a list of all the words that are not in the dictionary\nwords_not_in_dict = []\n\n#Iterate through the words in the text file\nfor word in words:\n    #If the word is not in the"", ""#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'\ns2 = s.replace(',', '.')\n\n#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's3'\ns3 = s.replace(',', '.')\n\n#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's4'\ns4 = s.replace(',', '.')\n\n#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's5'\ns5 = s"", ""#Split the string's2' into a list of words with a space and store the result to variable 'words'\nwords = s2.split()\n\n#Print the words in the list 'words'\nprint(words)\n\n#Print the length of the list 'words'\nprint(len(words))\n\n#Print the first word in the list 'words'\nprint(words[0])\n\n#Print the last word in the list 'words'\nprint(words[-1])\n\n#Print the middle word in the list 'words'\nprint(words[len(words)//2])\n\n#Print the last word in the list 'words'\nprint(words[-len("", ""#Print a list of integers consisting of the length of each word in 'words'\nprint(len(words))\n\n#Print the first 10 words in 'words'\nprint(words[:10])\n\n#Print the last 10 words in 'words'\nprint(words[-10:])\n\n#Print the first 10 words in 'words' and the last 10 words in 'words'\nprint(words[:10] + words[-10:])\n\n#Print the first 10 words in 'words' and the last 10 words in 'words'\nprint(words[:10] + words[-10""]"
39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","[""#Create a variable named's' with the value '{s}'.\ns = '{s}'\n\n#Print the value of's'\nprint(s)\n\n#Create a variable named's' with the value '{s}'.\ns = '{s}'\n\n#Print the value of's'\nprint(s)\n\n#Create a variable named's' with the value '{s}'.\ns = '{s}'\n\n#Print the value of's'\nprint(s)\n\n#Create a variable named's' with the value '{s}'.\ns = '{s}'\n\n#Print the value of's'"", ""#Lowercase the variable's' and store the result to variable's2'.\ns2 = s.lower()\n\n#Print the result of variable's2'.\nprint(s2)\n\n#Print the type of variable's2'.\nprint(type(s2))\n\n#Print the length of variable's2'.\nprint(len(s2))\n\n#Print the characters of variable's2'.\nprint(s2)\n\n#Print the characters of variable's2' in reverse order.\nprint(s2[::-1])\n\n#Print the characters of variable's2' in reverse order.\nprint(s"", ""#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.\npattern3 = re.compile(r'#\\w{3}')\n\n#Import re and compile a regular expression that matches a sharp symbol followed by four hexadecimal digits (0-9, a-f), store the result to variable 'pattern4'.\npattern4 = re.compile(r'#\\w{4}')\n\n#Import re and compile a regular expression that matches a sharp symbol followed by five hexadecimal digits (0-9, a-f), store the result to variable 'pattern5'.\npattern5 = re.compile(r'#\\w{5}')\n\n#Import re and compile"", ""#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.\npattern6 = re.compile(r'#\\{([0-9a-f]{6})\\}')\n\n#Compile a regular expression that matches a sharp symbol followed by seven hexadecimal digits (0-9, a-f), store the result to variable 'pattern7'.\npattern7 = re.compile(r'#\\{([0-9a-f]{7})\\}')\n\n#Compile a regular expression that matches a sharp symbol followed by eight hexadecimal digits (0-9, a-f), store the result to variable 'pattern8'.\npattern8 = re.compile(r'#\\{"", ""#Print True if the variable's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.\ndef pattern3(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\n#Print True if the variable's2' if it matches with either of variables 'pattern4' or 'pattern7', False otherwise.\ndef pattern4(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\n#Print True if the variable's2' if it matches with either of variables 'pattern5' or 'pattern8', False otherwise.\ndef pattern5(s1, s2""]"
40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","[""#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.\n\ndef count_values(lst):\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\nprint(count_values([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n#Create a function called 'count_values_2' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.\n\ndef count_values"", ""#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.\ncounts = [count_values(lst) for lst in lsts]\n\n#Print the result of the function 'count_values' to the console.\nprint(counts)\n\n#Print the result of the function 'count_values' to the console.\nprint(counts[0])\n\n#Print the result of the function 'count_values' to the console.\nprint(counts[1])\n\n#Print the result of the function 'count_values' to the console.\nprint(counts[2])\n\n#Print the result of the function 'count_values'"", ""#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.\n\ndef print_max_count(counts):\n    if len(counts) > len(numbers)/2:\n        print(max(counts, key=counts.get))\n    else:\n        print(None)\n\nprint_max_count(counts)\n\n#Print the integer with minimum count in the hash map 'counts', if the count is smaller than half of the length of the list, otherwise print 'None'.\n\ndef print_min_count(counts):\n    if len(counts) > len(numbers)/2:\n        print(min(counts, key=counts.get))""]"
41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","[""#Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).\ntoday = datetime.date.today()\n\n#Import the csv file named 'budget_data.csv' and store it in a variable called 'csv_file'.\ncsv_file = csv.reader(open('budget_data.csv'))\n\n#Create a list called'month_total' and initialize it with 0.\nmonth_total = 0\n\n#Create a list called 'total_change' and initialize it with 0.\ntotal_change = 0\n\n#Create a list called 'total_months' and initialize it with 0.\ntotal_months"", ""#Add 7 days to the variable 'today' and store the result to variable 'week'.\nweek = today + timedelta(days=7)\n\n#Print the result to the screen.\nprint(week)\n\n#Create a variable 'week_ago' and store the result to variable 'week_ago'.\nweek_ago = today - timedelta(days=7)\n\n#Print the result to the screen.\nprint(week_ago)\n\n#Create a variable 'week_ago_2' and store the result to variable 'week_ago_2'.\nweek_ago_2 = today - timedelta(days=14)\n\n#Print the result to the"", ""#Print 'week' in the format '%m/%d/%Y'.\nprint(week)\n\n#Print'month' in the format '%m/%d/%Y'.\nprint(month)\n\n#Print 'year' in the format '%m/%d/%Y'.\nprint(year)\n\n#Print 'day' in the format '%m/%d/%Y'.\nprint(day)\n\n#Print 'hour' in the format '%m/%d/%Y'.\nprint(hour)\n\n#Print'minute' in the format '%m/%d/%Y'.\nprint(minute)\n\n#Print'second' in the format '%m/%""]"
42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","[""#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.\n#For example, word_weight('hello') should return 5.\n#word_weight('hi') should return 10.\n#word_weight('hi there') should return 15.\n#word_weight('hi there there') should return 20.\n#word_weight('hi there there there') should return 25.\n#word_weight('hi there there there there') should return 30.\n#word_weight('hi there there there there there') should return 35.\n#word_weight('hi there there there there there there"", ""#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.\n#Return the sum of the weights of all words.\n\n#Example\n#For words = ['cat', 'dog', 'bird', 'fish'], the output should be\n#word_weight(words) = 10.0\n#The words are cat, dog, bird, and fish.\n#The weights are 1.0, 2.0, 3.0, and 4.0.\n#The sum of the weights is 10.0.\n\n#Challenge\n#Write a function named 'word_weight' that takes a list of strings named '"", ""#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.\nprint(sorted(weights) == weights)\n\n#Print the sum of the weights.\nprint(sum(weights))\n\n#Print the sum of the weights squared.\nprint(sum(weights**2))\n\n#Print the sum of the weights squared and the sum of the weights.\nprint(sum(weights**2) + sum(weights))\n\n#Print the sum of the weights squared and the sum of the weights squared.\nprint(sum(weights**2) + sum(weights**2))\n\n#Print the sum of the weights squared and the sum of the weights""]"
43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","[""#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.\n\ndef is_palindrome(num):\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    if num_str == rev_num_str:\n        return True\n    else:\n        return False\n\n#Create a function named 'is_palindrome_recursive' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.\n\ndef is_palindrome_recursive(num):\n    if num == 0:\n        return True\n    elif num == 1:\n        return False\n    else"", ""#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.\n#\n#For example, if the input is 12345, the output should be 54321.\n#\n#If the input is 1234, the output should be 4321.\n#\n#If the input is 123, the output should be 321.\n#\n#If the input is 12, the output should be 21.\n#\n#If the input is 1, the output should be 1.\n#\n#If the input is 0, the output should be"", ""#Define an integer variable named 'base' with the value {n}.\n#Define an integer variable named 'num' with the value {m}.\n#Define an integer variable named'sum' with the value {s}.\n#Define an integer variable named 'product' with the value {p}.\n#Define an integer variable named 'quotient' with the value {q}.\n#Define an integer variable named'remainder' with the value {r}.\n#Define an integer variable named 'quotient_remainder' with the value {qr}.\n#Define an integer variable named'remainder_quotient' with the value {qrr}.\n#Define an integer variable named '"", '#While the variable \'base\' is not a single digit, apply the function \'is_palindrome\' on \'base\' and break if \'base\' is palindrome. Otherwise, apply the function \'descent\' to the variable \'base\' and store the result to variable \'base\'.\n\ndef is_palindrome(base):\n    if base == base[::-1]:\n        return True\n    else:\n        return False\n\ndef descent(base):\n    base = base - 1\n    return base\n\nbase = int(input(""Enter a number: ""))\n\nwhile is_palindrome(base) == False:\n    base = descent(base)\n\nprint(base)\n', '#Print \'False\' if the variable \'base\' is a single digit, otherwise print \'True\'.\n\nbase = 10\nif base == 10:\n    print(""True"")\nelse:\n    print(""False"")\n\n#Print \'True\' if the variable \'base\' is a multiple of 10, otherwise print \'False\'.\n\nbase = 10\nif base % 10 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\n#Print \'True\' if the variable \'base\' is a multiple of 100, otherwise print \'False\'.\n\nbase = 100\nif base % 100']"
44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","[""#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.\ninput = '{input}'\nstack = []\n\n#Define a while loop that runs until the input string is empty.\nwhile input!= '':\n    #If the input string is not empty, then:\n    if input!= '':\n        #Add the first character of the input string to the stack.\n        stack.append(input[0])\n        #Remove the first character of the input string from the input string.\n        input = input[1:]\n    #If the input string is empty, then:\n    else:\n        #Print the stack.\n        print(stack)\n        #Remove the last character of the stack from"", '#Iterating over variable \'input\', if the current character is \'@\' and\'stack\' is not empty, pop the last element from\'stack\', otherwise append the character to\'stack\'.\n#If the current character is \'@\' and\'stack\' is empty, append the character to\'stack\'.\n#If the current character is \'@\' and\'stack\' is not empty, pop the last element from\'stack\', otherwise append the character to\'stack\'.\n#Repeat the above steps until the stack is empty.\n#Return the final stack.\n#\n#Example 1:\n#\n#Input: [""@"",""@"",""@"",""@"",""@""]\n#Output: [""@"",""@"",""@"",""@"",""@""]\n#Explanation:\n#The first iteration is empty, the second iteration', ""#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint(stack.pop())\n\n#Print the joined string from'stack'.\nprint""]"
45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","['#Import the pandas library.\nimport pandas as pd\n\n#Import the numpy library.\nimport numpy as np\n\n#Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n#Import the seaborn library.\nimport seaborn as sns\n\n#Import the statsmodels library.\nimport statsmodels.api as sm\n\n#Import the statsmodels.formula.api as smf\n\n#Import the statsmodels.tsa.api as smt\n\n#Import the statsmodels.tsa.stattools as smts\n\n#Import the statsmodels.tsa.stattools.stattools as smtst', '#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\nfrom sklearn.model_selection import train_test_split\n\n#Import the function random_state from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\nfrom sklearn.model_selection import random_state\n\n#Import the function shuffle from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\nfrom sklearn.model_selection import shuffle\n\n#Import the function cross_val_score from sklearn.model_selection.Read the dataframe ""df"" from', '#Assign the attribute ""Price"" to the target variable ""y"".\ny = df[\'Price\']\n\n#Assign the attribute ""Age"" to the target variable ""y"".\ny = df[\'Age\']\n\n#Assign the attribute ""Gender"" to the target variable ""y"".\ny = df[\'Gender\']\n\n#Assign the attribute ""Education"" to the target variable ""y"".\ny = df[\'Education\']\n\n#Assign the attribute ""Marital Status"" to the target variable ""y"".\ny = df[\'Marital Status\']\n\n#Assign the attribute ""Occupation"" to the target variable ""y"".\ny = df[\'Occupation\']', '#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".\nmelb_predictors = df.drop(""Price"", axis=1)\n\n#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""wine_predictors"".\nwine_predictors = df.drop(""Price"", axis=1)\n\n#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""pet_predictors"".\npet_predictors = df.drop(""Price"", axis=1)\n\n#Drop the column ""Price"" from the dataframe on axis 1 and assign the', '#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".\nX = df.drop(columns=[""target""])\n\n#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""y"".\ny = df[""target""]\n\n#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X_test"".\nX_test = df.drop(columns=[""target""])\n\n#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""y_test"".\ny_test = df[""target""]\n\n#', '#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.\nx_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size=0.2, random_state=0)\n\n#Create a classifier\nclassifier = svm.SVC(kernel=\'linear\')\n\n#Train the classifier\nclassifier.fit(x_train, y_train)\n\n#Predict the labels of the test set\ny_pred = classifier.predict(x_valid)\n\n#Calculate the accuracy of the classifier\naccuracy = accuracy_score(y_valid, y_pred)\nprint(""Accuracy', '#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\nprint(f""Sum of first column of x_train: {sum(x_train[:, 0])}"")\nprint(f""Sum of first column of y_train: {sum(y_train[:, 0])}"")\n\n#Print the sum of the first column of x_test and the sum of y_test. Use the format ""{{:.1f}} {{:.1f}}"".\nprint(f""Sum of first column of x_test: {sum(x_test[:, 0])}"")\nprint(f""Sum of first column of y_test: {sum(']"
46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","['#Create a variable named lst1 with value {l}\nlst1 = [1,2,3,4,5]\n\n#Create a variable named lst2 with value {l}\nlst2 = [1,2,3,4,5]\n\n#Create a variable named lst3 with value {l}\nlst3 = [1,2,3,4,5]\n\n#Create a variable named lst4 with value {l}\nlst4 = [1,2,3,4,5]\n\n#Create a variable named lst5 with value {l}\nlst5 = [1,2,3,4', '#Find the minimum and maximum of lst1 and assign them to variables a and b respectively.\na = min(lst1)\nb = max(lst1)\n\n#Print the minimum and maximum of lst1.\nprint(""Minimum of lst1 is: "", a)\nprint(""Maximum of lst1 is: "", b)\n\n#Find the minimum and maximum of lst2 and assign them to variables c and d respectively.\nc = min(lst2)\nd = max(lst2)\n\n#Print the minimum and maximum of lst2.\nprint(""Minimum of lst2 is: "", c)\nprint(""Maximum of lst2 is: "", d)', '#Create a list from a to b (inclusive) and assign it to variable named lst2\nlst2 = [a for a in range(a,b+1)]\n\n#Print the list\nprint(lst2)\n\n#Create a list from a to b (inclusive) and assign it to variable named lst3\nlst3 = [a for a in range(a,b+1)]\n\n#Print the list\nprint(lst3)\n\n#Create a list from a to b (inclusive) and assign it to variable named lst4\nlst4 = [a for a in range(a,b+1)]\n\n#Print the list\nprint(lst4', '#Find the elements that are in lst2 but not in lst1\nprint(lst1 - lst2)\n\n#Find the elements that are in lst1 but not in lst2\nprint(lst2 - lst1)\n\n#Find the intersection of lst1 and lst2\nprint(lst1 & lst2)\n\n#Find the union of lst1 and lst2\nprint(lst1 | lst2)\n\n#Find the difference of lst1 and lst2\nprint(lst1 - lst2)\n\n#Find the symmetric difference of lst1 and lst2\nprint(lst1 ^ lst2)\n\n#Find the set difference of lst', '#Print the sum of these elements\nprint(sum(numbers))\n\n#Print the sum of the squares of these elements\nprint(sum(map(lambda x: x**2, numbers)))\n\n#Print the product of these elements\nprint(prod(numbers))\n\n#Print the product of the squares of these elements\nprint(prod(map(lambda x: x**2, numbers)))\n\n#Print the difference between the sum of the squares of the first two elements and the square of the sum\nprint(sum(map(lambda x: x**2, numbers[:2])))\nprint(sum(map(lambda']"
47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","['#Initialize the variable named lst1 with a list {l}.\nlst1 = [1,2,3,4,5]\n\n#Initialize the variable named lst2 with a list {l}.\nlst2 = [1,2,3,4,5]\n\n#Initialize the variable named lst3 with a list {l}.\nlst3 = [1,2,3,4,5]\n\n#Initialize the variable named lst4 with a list {l}.\nlst4 = [1,2,3,4,5]\n\n#Initialize the variable named lst5 with a list {l}.\nlst5 = [1,2', '#Create a function called num_in_str() to check whether a string contains a number.\ndef num_in_str(str):\n    if str.isdigit():\n        return True\n    else:\n        return False\n\n#Create a function called num_in_str() to check whether a string contains a number.\ndef num_in_str(str):\n    if str.isdigit():\n        return True\n    else:\n        return False\n\n#Create a function called num_in_str() to check whether a string contains a number.\ndef num_in_str(str):\n    if str.isdigit():\n        return True\n    else:\n        return False\n\n#Create a function called num_', '#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2.\nlst2 = num_in_str(lst1)\n\n#Print the list of strings in lst2.\nprint(lst2)\n\n#Create a list named lst3 that contains the strings in lst2 that have numbers.\nlst3 = [x for x in lst2 if x.isdigit()]\n\n#Print the list of strings in lst3.\nprint(lst3)\n\n#Create a list named lst4 that contains the strings in lst2 that have letters.\nlst4 = [x for x in lst2 if x.isalpha()]\n\n#Print the', '#Print out lst2\nprint(lst2)\n\n#Print out lst3\nprint(lst3)\n\n#Print out lst4\nprint(lst4)\n\n#Print out lst5\nprint(lst5)\n\n#Print out lst6\nprint(lst6)\n\n#Print out lst7\nprint(lst7)\n\n#Print out lst8\nprint(lst8)\n\n#Print out lst9\nprint(lst9)\n\n#Print out lst10\nprint(lst10)\n\n#Print out lst11\nprint(lst11)']"
48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","['#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.\ndef a(a1):\n    return a1 * a1\n\n#Define a function ""b"" that multiplies an integer argument by {b1} and returns the result.\ndef b(b1):\n    return b1 * b1\n\n#Define a function ""c"" that multiplies an integer argument by {c1} and returns the result.\ndef c(c1):\n    return c1 * c1\n\n#Define a function ""d"" that multiplies an integer argument by {d1} and returns the result.\ndef d(d1):\n    return d1', '#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.\ndef b(a, a2):\n    return a * a2\n\n#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\ndef c(a, a3):\n    return a * a3\n\n#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.\ndef d(a, a4):\n    return a * a4\n\n#Define a function ""e"" that multiplies an integer argument by {a5} and returns the result.\ndef e(a, a5', '#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\ndef c(a):\n    return a * a3\n\n#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.\ndef d(a):\n    return a * a4\n\n#Define a function ""e"" that multiplies an integer argument by {a5} and returns the result.\ndef e(a):\n    return a * a5\n\n#Define a function ""f"" that multiplies an integer argument by {a6} and returns the result.\ndef f(a):\n    return a * a6\n\n#Define a', '#Create a list named ""abc"" which contains the three functions in order of definition.\n#The functions are defined as follows:\n#\n#def add(x,y):\n#    return x+y\n#\n#def subtract(x,y):\n#    return x-y\n#\n#def multiply(x,y):\n#    return x*y\n#\n#def divide(x,y):\n#    return x/y\n#\n#The functions are then added to the list named ""def_list"".\n#\n#The functions are then called and the results are printed.\n#\n#The program should run without errors.\n#', '#Assign the integer {a4} to a variable ""my_init"".\nmy_init = a4\n\n#Assign the integer {a5} to a variable ""my_init"".\nmy_init = a5\n\n#Assign the integer {a6} to a variable ""my_init"".\nmy_init = a6\n\n#Assign the integer {a7} to a variable ""my_init"".\nmy_init = a7\n\n#Assign the integer {a8} to a variable ""my_init"".\nmy_init = a8\n\n#Assign the integer {a9} to a variable ""my_init"".\nmy_', '#Apply the first function of the list to ""my_init"" and name the result ""my_result"".\nmy_result = my_init(10)\n\n#Print the result.\nprint(my_result)\n\n#Apply the second function of the list to ""my_init"" and name the result ""my_result"".\nmy_result = my_init(10)\n\n#Print the result.\nprint(my_result)\n\n#Apply the third function of the list to ""my_init"" and name the result ""my_result"".\nmy_result = my_init(10)\n\n#Print the result.\nprint(my_result)', '#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".\n#Then, print the result of my_result.\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\ndef power(x, y):\n    return x ** y\n\ndef my_function(x, y):\n    my_result = 0\n    for i in range(len(x)):\n        my_result += x[i] * y[i]\n    return my_', '#Print the variable named ""my_result"".\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint(my_result)\n\n#Print the variable named ""my_result"" again.\nprint']"
49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","['#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.\ndef pluralize(words):\n    plural_words = set()\n    for word in words:\n        if word in plural_words:\n            plural_words.add(word + ""s"")\n        else:\n            plural_words.add(word)\n    return plural_words\n\n#This function ""to_singular"" takes a list of words in the plural form and returns a set of those words in the singular form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., singularize([""cows"", ""pig"", ""cows"", ""cow', '#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.\n#Create a function ""is_singular"" which returns True if the word passed as argument is in singular form.\n#Create a function ""is_proper_noun"" which returns True if the word passed as argument is in proper noun form.\n#Create a function ""is_proper_noun_plural"" which returns True if the word passed as argument is in proper noun plural form.\n#Create a function ""is_proper_noun_singular"" which returns True if the word passed as argument is in proper noun singular form.\n#Create a function ""is_proper_noun_plural_singular"" which', '#Assign {a1} to a variable named ""words"".\nwords = a1\n\n#Print the words variable.\nprint(words)\n\n#Assign {a2} to a variable named ""numbers"".\nnumbers = a2\n\n#Print the numbers variable.\nprint(numbers)\n\n#Assign {a3} to a variable named ""letters"".\nletters = a3\n\n#Print the letters variable.\nprint(letters)\n\n#Assign {a4} to a variable named ""punctuation"".\npunctuation = a4\n\n#Print the punctuation variable.\nprint(punctuation)\n\n#Assign {a5} to a variable', '#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".\nwords_plural = words + ""s""\n\n#Print the result.\nprint(words_plural)\n\n#Apply the function that returns singular forms to the variable ""words"" and name the result ""words_singular"".\nwords_singular = words + ""s""\n\n#Print the result.\nprint(words_singular)\n\n#Apply the function that returns the first letter of the variable ""words"" and name the result ""first_letter"".\nfirst_letter = words[0]\n\n#Print the result.\nprint(first_letter)\n\n#Apply the function', '#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.\ncontains_plural = [word.is_plural() for word in words_plural]\n\n#Print the boolean ""contains_plural"" to see if at least one word is in plural form.\nprint(contains_plural)\n\n#Define a boolean ""contains_singular"" and apply ""is_singular"" to each element of ""words_singular"" to detect if at least one word is in singular form.\ncontains_singular = [word.is_singular() for word in words_singular]\n\n#Print the boolean ""contains_singular"" to see if at least one word is in singular', '#Print out whether or not ""words_plural"" contains a word in plural as boolean.\ndef plural_check(words_plural):\n    if words_plural in plural_words:\n        return True\n    else:\n        return False\n\n#Print out whether or not ""words_singular"" contains a word in singular as boolean.\ndef singular_check(words_singular):\n    if words_singular in singular_words:\n        return True\n    else:\n        return False\n\n#Print out whether or not ""words_plural"" contains a word in singular as boolean.\ndef plural_check_2(words_plural):\n    if words_plural in plural_words_2:\n        return True']"
50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","['#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".\nmy_relative_altitude = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude_squared"".\nmy_relative_altitude_squared = [x**2 for x in my_relative_altitude]\n\n#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude_cubed', '#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.\nmy_net_altitude = [0]\nfor i in range(1,len(my_net_list)):\n    my_net_altitude.append(my_net_altitude[i-1] + my_net_list[i])\n\n#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.\nmy_net_altitude = [0]\nfor i in range(1,len(my_net_list)):\n    my_net_altitude.append(my_net_altitude[i-1] +', '#Find the larget number in the list my_net_altitude and print it out.\nprint(max(my_net_altitude))\n\n#Find the smallest number in the list my_net_altitude and print it out.\nprint(min(my_net_altitude))\n\n#Find the average number in the list my_net_altitude and print it out.\nprint(sum(my_net_altitude)/len(my_net_altitude))\n\n#Find the median number in the list my_net_altitude and print it out.\nprint(statistics.median(my_net_altitude))\n\n#Find the mode number in the list my_net_']"
51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","['#Assign the list of words ""{A}"" to a variable named ""my_sentences"".\nmy_sentences = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""]\n\n#Assign the list of words ""{A}"" to a variable named ""my_sentences"".\nmy_sentences = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G', '#Assign an integer ""{K}"" to a variable named ""k"".\nk = 10\n\n#Print the value of ""k"" to the screen.\nprint(k)\n\n#Assign a string ""{L}"" to a variable named ""l"".\nl = ""Hello World!""\n\n#Print the value of ""l"" to the screen.\nprint(l)\n\n#Assign a float ""{M}"" to a variable named ""m"".\nm = 10.5\n\n#Print the value of ""m"" to the screen.\nprint(m)\n\n#Assign a boolean ""{N}"" to a variable named ""n"".\nn', '#Truncate the list such that it contains k words and store as truncated_list\ntruncated_list = truncated_list[:k]\n\n#Print the truncated list\nprint(truncated_list)\n\n#Print the length of the truncated list\nprint(len(truncated_list))\n\n#Print the first 5 words of the truncated list\nprint(truncated_list[0:5])\n\n#Print the last 5 words of the truncated list\nprint(truncated_list[-5:])\n\n#Print the first 5 words of the truncated list\nprint(truncated_list[0:5])\n\n#Print the last 5 words of the truncated list', '#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint(truncated_list)\n\n#Print out the variable truncated_list.\nprint']"
52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of integers ""{A}"" to the screen.\nprint(my_numbers)\n\n#Print the length of the list of integers ""{A}"" to the screen.\nprint(len(my_numbers))\n\n#Print the first element of the list of integers ""{A}"" to the screen.\nprint(my_numbers[0])\n\n#Print the last element of the list of integers ""{A}""', '#Count the frequencies of the integers in my_numbers.\n#Print the frequency of each integer in my_numbers.\n#Print the frequency of each integer in my_numbers, sorted by the integer.\n#Print the frequency of each integer in my_numbers, sorted by the integer, and then alphabetically.\n#Print the frequency of each integer in my_numbers, sorted by the integer, and then alphabetically, and then reversed.\n#Print the frequency of each integer in my_numbers, sorted by the integer, and then alphabetically, and then reversed, and then sorted by the integer.\n#Print the frequency of each integer in my', '#Find the integer that the frequency is 1 and store as one_time.\n#If the frequency is 2, store as two_time.\n#If the frequency is 3, store as three_time.\n#If the frequency is 4, store as four_time.\n#If the frequency is 5, store as five_time.\n#If the frequency is 6, store as six_time.\n#If the frequency is 7, store as seven_time.\n#If the frequency is 8, store as eight_time.\n#If the frequency is 9, store as nine_time.\n#If the frequency is', '#Print out the variable one_time.\nprint(one_time)\n\n#Print out the variable two_time.\nprint(two_time)\n\n#Print out the variable three_time.\nprint(three_time)\n\n#Print out the variable four_time.\nprint(four_time)\n\n#Print out the variable five_time.\nprint(five_time)\n\n#Print out the variable six_time.\nprint(six_time)\n\n#Print out the variable seven_time.\nprint(seven_time)\n\n#Print out the variable eight_time.\nprint']"
53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of integers ""{A}"" to the screen.\nprint(my_numbers)\n\n#Print the length of the list of integers ""{A}"" to the screen.\nprint(len(my_numbers))\n\n#Print the first element of the list of integers ""{A}"" to the screen.\nprint(my_numbers[0])\n\n#Print the last element of the list of integers ""{A}""', '#Assign an integer ""{Val}"" to a variable named ""val"".\nval = 10\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a string ""{Val}"" to a variable named ""val"".\nval = ""Hello World""\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a float ""{Val}"" to a variable named ""val"".\nval = 10.5\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a boolean ""{Val}"" to a variable named ""val"".\nval = True\n\n#Print the value of ""val"".', '#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.\n#Return the new list of numbers.\n#\n#Example:\n#\n#Input: my_numbers = [3,2,2,3], val = 3\n#Output: [2,2]\n#Explanation: 2 and 3 are the only two numbers that are present in the list, so they are removed.\n#\n#Note:\n#\n#The value will only exist in the list.\n#The number of elements in the given list will not exceed 10,000.\n#\n#Follow up:\n#Could you do it in one', '#Print out the variable remove_numbers.\nprint(remove_numbers)\n\n#Print out the variable remove_numbers_2.\nprint(remove_numbers_2)\n\n#Print out the variable remove_numbers_3.\nprint(remove_numbers_3)\n\n#Print out the variable remove_numbers_4.\nprint(remove_numbers_4)\n\n#Print out the variable remove_numbers_5.\nprint(remove_numbers_5)\n\n#Print out the variable remove_numbers_6.\nprint(remove_numbers_6)\n\n#Print out the variable remove_numbers_']"
54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of integers ""{A}"" to the screen.\nprint(my_numbers)\n\n#Print the length of the list of integers ""{A}"" to the screen.\nprint(len(my_numbers))\n\n#Print the first element of the list of integers ""{A}"" to the screen.\nprint(my_numbers[0])\n\n#Print the last element of the list of integers ""{A}""', '#Assign an integer ""{Val}"" to a variable named ""val"".\nval = 10\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a string ""{Val}"" to a variable named ""val"".\nval = ""Hello World""\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a float ""{Val}"" to a variable named ""val"".\nval = 10.5\n\n#Print the value of ""val"".\nprint(val)\n\n#Assign a boolean ""{Val}"" to a variable named ""val"".\nval = True\n\n#Print the value of ""val"".', '#Sum all the number in my_numbers and store as sum_numbers.\nsum_numbers = sum(my_numbers)\nprint(sum_numbers)\n\n#Sum all the number in my_numbers and store as sum_numbers.\nsum_numbers = sum(my_numbers)\nprint(sum_numbers)\n\n#Sum all the number in my_numbers and store as sum_numbers.\nsum_numbers = sum(my_numbers)\nprint(sum_numbers)\n\n#Sum all the number in my_numbers and store as sum_numbers.\nsum_numbers = sum(my_numbers)\nprint(sum_numbers)', '#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\ndef check_sum(val, sum_numbers):\n    if sum_numbers == val:\n        return ""True""\n    else:\n        return ""False""\n\n#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\ndef check_sum_2(val, sum_numbers):\n    if sum_numbers == val:\n        return True\n    else:\n        return False\n\n#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\ndef check_sum_3(val, sum_']"
55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","['#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".\nmy_numbers1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\nmy_numbers2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Assign a sorted list ""{C}"" to a variable named ""my_numbers3"".\nmy_numbers3 = [1, 2, 3', '#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\nmy_numbers2 = sorted(B)\n\n#Print the variable ""my_numbers2"".\nprint(my_numbers2)\n\n#Assign a sorted list ""{C}"" to a variable named ""my_numbers3"".\nmy_numbers3 = sorted(C)\n\n#Print the variable ""my_numbers3"".\nprint(my_numbers3)\n\n#Assign a sorted list ""{D}"" to a variable named ""my_numbers4"".\nmy_numbers4 = sorted(D)\n\n#Print the variable ""my_numbers4"".\nprint(my_numbers', '#Merge the two sorted lists in a new sorted list and store as new_list.\n#\n#Note:\n#\n#The number of nodes in both lists will be in the range [0, 5000].\n#-100 <= Node.val <= 100\n#All Node.val are unique.\n#\n#Example:\n#\n#Input:\n#[\n# 1->4->5,\n# 1->3->4,\n# 2->6\n#]\n#Output: 1->1->2->3->4->4->5->6\n#\n#\n#\n\n# @lc', '#Print the sorted new_list.\nprint(new_list)\n\n#Print the original list.\nprint(original_list)\n\n#Print the new list.\nprint(new_list)\n\n#Print the original list.\nprint(original_list)\n\n#Print the new list.\nprint(new_list)\n\n#Print the original list.\nprint(original_list)\n\n#Print the new list.\nprint(new_list)\n\n#Print the original list.\nprint(original_list)\n\n#Print the new list.\nprint(new_list)']"
56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","['#Assign an integer array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\n#Print the length of the array.\nprint(len(my_array))\n\n#Print the first element of the array.\nprint(my_array[0])\n\n#Print the last element of the array.\nprint(my_array[-1])\n\n#Print the element at index 2.\nprint(my_array[2])\n\n#Print the element at index 3.\nprint(my_array[3])\n\n#Print the element at index', '#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.\n#If there is no contiguous subarray, return 0.\n#\n#Example:\n#Input: [-2,1,-3,4,-1,2,1,-5,4],\n#Output: 6\n#Explanation: [4,-1,2,1] has the largest sum = 6.\n#\n#Note:\n#The length of the given array will not exceed 10,000.\n#The sum of the elements in the given array will not exceed 10,000.\n#\n#Follow up:\n#If you', '#Compute the sum of max_subarray and store as sum_subarry.\nsum_subarry = max_subarray(arr)\n\n#Print the sum of max_subarray.\nprint(sum_subarry)\n', '#Print out the variable sum_subarray.\nprint(sum_subarray)\n\n#Print out the variable sum_subarray_2.\nprint(sum_subarray_2)\n\n#Print out the variable sum_subarray_3.\nprint(sum_subarray_3)\n\n#Print out the variable sum_subarray_4.\nprint(sum_subarray_4)\n\n#Print out the variable sum_subarray_5.\nprint(sum_subarray_5)\n\n#Print out the variable sum_subarray_6.\nprint(sum_subarray_6)\n\n#Print out the variable sum_subarray_']"
57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","['#Assign the positive number ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of ""my_number"" to the screen.\nprint(my_number)\n\n#Assign the negative number ""-{A}"" to a variable named ""my_number"".\nmy_number = -10\n\n#Print the value of ""my_number"" to the screen.\nprint(my_number)\n\n#Assign the zero number ""0{A}"" to a variable named ""my_number"".\nmy_number = 0\n\n#Print the value of ""my_number"" to the screen.\nprint', '#Compute the squre root of the number and store as square_root. \n#Print the square root.\n\nnumber = float(input(""Enter a number: ""))\nsquare_root = math.sqrt(number)\nprint(""The square root of"", number, ""is"", square_root)\n', '#Compute the largest integer but not larger than square_root and store as largest_square_root.\nlargest_square_root = 0\nfor i in range(1,square_root+1):\n    for j in range(1,square_root+1):\n        if i*j > largest_square_root:\n            largest_square_root = i*j\n\n#Print the largest integer but not larger than square_root.\nprint(largest_square_root)\n', '#Print the integer largest_square_root.\nprint(largest_square_root(100))\n']"
58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","['#Assign the list of words ""{A}"" to a variable named ""my_words"".\nmy_words = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""]\n\n#Assign the list of words ""{B}"" to a variable named ""my_words"".\nmy_words = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G', '#Count the length of the words in the list and store as a dictionary word_count. \n#Print the dictionary word_count.\n\n#Create a dictionary word_count.\nword_count = {}\n\n#Create a for loop to iterate through the list of words.\nfor word in words:\n    #If the word is in the dictionary, add 1 to the value of the word_count.\n    if word in word_count:\n        word_count[word] += 1\n    #Otherwise, add the word to the dictionary and set the value to 1.\n    else:\n        word_count[word] = 1\n\n#Print the dictionary word_count.', '#Find the element with the largest count in dictionary word_count and store as longest_word.\nlongest_word = max(word_count, key=word_count.get)\n\n#Print the longest word.\nprint(longest_word)\n', '#print the variable longest_word.\nprint(longest_word)\n\n#print the variable longest_word_length.\nprint(longest_word_length)\n\n#print the variable longest_word_list.\nprint(longest_word_list)\n\n#print the variable longest_word_list_length.\nprint(longest_word_list_length)\n\n#print the variable longest_word_list_length_2.\nprint(longest_word_list_length_2)\n\n#print the variable longest_word_list_length_3.\nprint(longest_word_list_']"
59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers ""{A}"".\nprint(my_numbers)\n\n#Print the length of the list ""{A}"".\nprint(len(my_numbers))\n\n#Print the first element of the list ""{A}"".\nprint(my_numbers[0])\n\n#Print the last element of the list ""{A}"".\nprint(my_numbers[-1])\n\n#Print the middle element of the', '#Return the elements that appears exactly once in the above list and store as my_uniques.\n\nmy_uniques = []\nfor i in range(len(my_list)):\n    if my_list[i] not in my_uniques:\n        my_uniques.append(my_list[i])\nprint(my_uniques)\n\n#Return the elements that appears more than once in the above list and store as my_duplicates.\n\nmy_duplicates = []\nfor i in range(len(my_list)):\n    if my_list[i] in my_duplicates:\n        my_duplicates.append(my_list[i])\nprint(my', '#Compute the sum of the list my_uniques and print it out.\nprint(sum(my_uniques))\n\n#Create a list of the unique values in the list my_uniques.\nmy_uniques_list = list(set(my_uniques))\n\n#Print the list my_uniques_list.\nprint(my_uniques_list)\n\n#Create a list of the unique values in the list my_uniques.\nmy_uniques_list = list(set(my_uniques))\n\n#Print the list my_uniques_list.\nprint(my_uniques_list)']"
60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\n#Print the matrix ""{my_matrix}"".\nprint(my_matrix)\n\n#Print the shape of the matrix ""{my_matrix}"".\nprint(my_matrix.shape)\n\n#Print the size of the matrix ""{my_matrix}"".\nprint(my_matrix.size)\n\n#Print the type of the matrix ""{my_matrix}"".\nprint(my_matrix.dtype)\n\n#Print the number of rows of the matrix ""{my_matrix}"".\nprint(my_matrix.shape[0])\n\n#Print the number of columns', '#Find the diagonal elements of my matrix and store as diag_elements.\ndiag_elements = []\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        if i == j:\n            diag_elements.append(matrix[i][j])\n\n#Find the sum of the elements in the diagonal elements and store as sum_of_diag_elements.\nsum_of_diag_elements = 0\nfor i in range(len(diag_elements)):\n    sum_of_diag_elements += diag_elements[i]\n\n#Print the sum of the elements in the diagonal elements.\nprint(sum_', '#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\n#print out the sum of the variable diag_elements.\nprint']"
61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\n#Print the matrix ""{my_matrix}"".\nprint(my_matrix)\n\n#Print the shape of the matrix ""{my_matrix}"".\nprint(my_matrix.shape)\n\n#Print the size of the matrix ""{my_matrix}"".\nprint(my_matrix.size)\n\n#Print the type of the matrix ""{my_matrix}"".\nprint(my_matrix.dtype)\n\n#Print the number of rows of the matrix ""{my_matrix}"".\nprint(my_matrix.shape[0])\n\n#Print the number of columns', '#Assign the number ""{T}"" to a variable named ""t"".\nt = 10\n\n#Print the value of ""t"" to the screen.\nprint(t)\n\n#Assign the number ""{T}"" to a variable named ""t"".\nt = 10\n\n#Print the value of ""t"" to the screen.\nprint(t)\n\n#Assign the number ""{T}"" to a variable named ""t"".\nt = 10\n\n#Print the value of ""t"" to the screen.\nprint(t)\n\n#Assign the number ""{T}"" to a variable named ""t"".\nt = 1', '#Compute the condition number of my_matrix and store as result.\nresult = np.linalg.cond(my_matrix)\nprint(result)\n\n#Compute the eigenvalues and eigenvectors of my_matrix and store as result.\nresult = np.linalg.eig(my_matrix)\nprint(result)\n\n#Compute the eigenvalues and eigenvectors of my_matrix and store as result.\nresult = np.linalg.eigvals(my_matrix)\nprint(result)\n\n#Compute the eigenvalues and eigenvectors of my_matrix and store as result.\nresult = np.linalg.eigvals(my_matrix', '#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".\ndef check_if_smaller_than(t, result):\n    if result < t:\n        return True\n    else:\n        return False\n\n#Check whether the result is larger than t. If yes, return ""True"", otherwise return ""False"".\ndef check_if_larger_than(t, result):\n    if result > t:\n        return True\n    else:\n        return False\n\n#Check whether the result is equal to t. If yes, return ""True"", otherwise return ""False"".\ndef check_if_equal_to(t, result):\n    if result == t:']"
62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","['#Assign the matrix ""{A}"" to a variable named ""a"".\na = A\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(', '#Assign the matrix ""{B}"" to a variable named ""b"".\nb = B\n\n#Assign the matrix ""{C}"" to a variable named ""c"".\nc = C\n\n#Assign the matrix ""{D}"" to a variable named ""d"".\nd = D\n\n#Assign the matrix ""{E}"" to a variable named ""e"".\ne = E\n\n#Assign the matrix ""{F}"" to a variable named ""f"".\nf = F\n\n#Assign the matrix ""{G}"" to a variable named ""g"".\ng = G\n\n#Assign the matrix ""{H}"" to a variable named ""h"".\nh = H\n\n#Assign', '#Compute the multiplication of two matrices and store as result.\n#The result is stored in the matrix C.\n#The matrix A is stored in the matrix A.\n#The matrix B is stored in the matrix B.\n#The matrix C is stored in the matrix C.\n#The matrix D is stored in the matrix D.\n#The matrix E is stored in the matrix E.\n#The matrix F is stored in the matrix F.\n#The matrix G is stored in the matrix G.\n#The matrix H is stored in the matrix H.\n#The matrix I is stored in the matrix I.\n#The matrix J is stored in the', '#Compute the sum of the result and print it out.\nprint(sum(result))\n']"
63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","['#Assign the matrix ""{A}"" to a variable named ""a"".\na = A\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(a)\n\n#Print the matrix ""{a}"" to the screen.\nprint(', '#Assign the matrix ""{B}"" to a variable named ""b"".\nb = B\n\n#Assign the matrix ""{C}"" to a variable named ""c"".\nc = C\n\n#Assign the matrix ""{D}"" to a variable named ""d"".\nd = D\n\n#Assign the matrix ""{E}"" to a variable named ""e"".\ne = E\n\n#Assign the matrix ""{F}"" to a variable named ""f"".\nf = F\n\n#Assign the matrix ""{G}"" to a variable named ""g"".\ng = G\n\n#Assign the matrix ""{H}"" to a variable named ""h"".\nh = H\n\n#Assign', '#Implement a function that computes the determinant of a matrix.\n\ndef determinant(matrix):\n    determinant = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            determinant += matrix[i][j] * (i + j + 1)\n    return determinant\n\n#Implement a function that computes the inverse of a matrix.\n\ndef inverse(matrix):\n    determinant = determinant(matrix)\n    inverse = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j', '#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".\ndef check_determinant(a, b):\n    if abs(np.linalg.det(a) - np.linalg.det(b)) > 1e-10:\n        print(""True"")\n    else:\n        print(""False"")\n\n#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".\ndef check_determinant_2(a, b):\n    if abs(np.linalg.det(a) - np.linalg.det(b)) > 1e-10:\n        print(""True']"
64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","['#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers.\nprint(my_numbers)\n\n#Print the length of the list.\nprint(len(my_numbers))\n\n#Print the first number in the list.\nprint(my_numbers[0])\n\n#Print the last number in the list.\nprint(my_numbers[-1])\n\n#Print the middle number in the list.\nprint(my_numbers', '#Implement a function that computes the exponential output of a list.\n#\n#For example, if the list is [1, 2, 3], the output should be [1, 2, 4, 8, 16, 32].\n#\n#You can assume that the list is non-empty and the input is valid.\n#\n#You can assume that the input list is a list of integers.\n#\n#You can assume that the input list is a list of integers.\n#\n#You can assume that the input list is a list of integers.\n#\n#You can assume that the input list is a', '#Implement a function that computes summation of a list.\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n#Implement a function that computes the product of a list.\n\ndef product_list(list):\n    product = 1\n    for i in list:\n        product *= i\n    return product\n\nprint(product_list([1, 2, 3, 4, 5]))\n\n#Implement a function that computes the sum of the squares of a list', '#Implement a function that computes log of a number.\n\ndef log(x):\n    if x == 0:\n        return 0\n    else:\n        return x * log(x)\n\n#Implement a function that computes the factorial of a number.\n\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n#Implement a function that computes the sum of a list of numbers.\n\ndef sum(x):\n    return sum(x)\n\n#Implement a function that computes the product of a list of numbers.\n\ndef product(x):', '#Print out the log of sum exponential my_numbers.txt\n\ndef sum_exp(x):\n    if x == 0:\n        return 1\n    else:\n        return x + sum_exp(x-1)\n\ndef main():\n    f = open(""my_numbers.txt"", ""r"")\n    for line in f:\n        print(sum_exp(int(line)))\n\nif __name__ == ""__main__"":\n    main()\n']"
65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","['#Assign the list of points ""{A}"" to a variable named ""my_points"".\nmy_points = [A]\n\n#Assign the list of points ""{B}"" to a variable named ""my_points"".\nmy_points = [B]\n\n#Assign the list of points ""{C}"" to a variable named ""my_points"".\nmy_points = [C]\n\n#Assign the list of points ""{D}"" to a variable named ""my_points"".\nmy_points = [D]\n\n#Assign the list of points ""{E}"" to a variable named ""my_points"".\nmy_points = [E]\n\n#Assign the list of points', '#Assign the integer ""{K}"" to a variable named ""k"".\nk = 10\n\n#Print the value of ""k"" to the screen.\nprint(k)\n\n#Assign the integer ""{L}"" to a variable named ""l"".\nl = 10\n\n#Print the value of ""l"" to the screen.\nprint(l)\n\n#Assign the integer ""{M}"" to a variable named ""m"".\nm = 10\n\n#Print the value of ""m"" to the screen.\nprint(m)\n\n#Assign the integer ""{N}"" to a variable named ""n"".\nn = 1', '#Implement a function that computes the distance between a point and the origin (0,0).\n#The function should return the distance.\n\ndef distance(point):\n    return math.sqrt(point[0]**2 + point[1]**2)\n\n#Implement a function that computes the distance between two points.\n#The function should return the distance.\n\ndef distance(point1, point2):\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)\n\n#Implement a function that computes the distance between three points.\n#The function should return the distance.\n\ndef distance', '#Implement a function that computes the k closest points in an array to the origin and store as result.\n#The function should return an array of the k closest points.\n#The input array is an array of points where each point is an array of two numbers.\n#The output array should be sorted by the distance from the origin.\n#The input array is sorted by the distance from the origin.\n#The input array is not necessarily sorted.\n#The input array may contain duplicates.\n#The input array may not contain the origin.\n#The input array may not be empty.\n#The input array may not contain any null values.\n#The input array may not contain any negative numbers.', '#Compute the k closest points in my_points and print them out.\ndef k_closest_points(my_points, k):\n    #Sort the points by their distance from the origin\n    my_points.sort(key=lambda x: x[2])\n    #Return the k closest points\n    return my_points[:k]\n\n#Compute the k closest points in my_points and print them out.\ndef k_closest_points_2(my_points, k):\n    #Sort the points by their distance from the origin\n    my_points.sort(key=lambda x: x[2])\n    #Return the k closest points\n    return my_points']"
66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","['#Implement a function called LCP() to find the longest common prefix of two strings.\n#\n#Example 1:\n#\n#Input: ""ABAB"", ""ABAB""\n#Output: ""AB""\n#Example 2:\n#\n#Input: ""AABABBA"", ""AABABBB""\n#Output: ""A""\n#Note:\n#\n#All given inputs are in lowercase letters a-z.\n#\n#Follow up:\n#\n#If there is no common prefix, return an empty string """".\n#If there are multiple answers, return any of them.\n#\n#\n#\n#\n#\n#', '#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\n#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Initialize a variable named lst3 with a list {l3}.\nlst3 = [1,2,3,4,5]\n\n#Initialize a variable named lst4 with a list {l4}.\nlst4 = [1,2,3,4,5]\n\n#Initialize a variable named lst5 with a list {l5}.\nlst5 =', '#Apply the function LCP() recusively to lst1 and lst2.\n#The function should return the length of the longest common prefix of lst1 and lst2.\n#If there is no common prefix, return 0.\n#If there are multiple common prefixes, return the length of the longest common prefix.\n#If there are no common prefixes, return 0.\n#Example 1:\n#Input: lst1 = [""flower"",""flow"",""flight""], lst2 = [""flow"",""flight"",""flight""]\n#Output: 4\n#Explanation: The longest common prefix is ""fl"", with length 4.\n#Example 2:', '#Print the the longest common prefix of the strings in lst1 and lst2\ndef longestCommonPrefix(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return """"\n    if lst1[0] == lst2[0]:\n        return lst1[0]\n    else:\n        return longestCommonPrefix(lst1[1:], lst2)\n\n#Print the the longest common suffix of the strings in lst1 and lst2\ndef longestCommonSuffix(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return """"']"
67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","['#Assigns a list {lst1} to a variable named lst1.\nlst1 = [1,2,3,4,5]\n\n#Assigns a list {lst2} to a variable named lst2.\nlst2 = [1,2,3,4,5]\n\n#Assigns a list {lst3} to a variable named lst3.\nlst3 = [1,2,3,4,5]\n\n#Assigns a list {lst4} to a variable named lst4.\nlst4 = [1,2,3,4,5]\n\n#Assigns a list {lst5} to a', '#Create a frequency table of elements in lst1\nfreq_table = {}\nfor i in lst1:\n    if i in freq_table:\n        freq_table[i] += 1\n    else:\n        freq_table[i] = 1\n\n#Create a frequency table of elements in lst2\nfreq_table2 = {}\nfor i in lst2:\n    if i in freq_table2:\n        freq_table2[i] += 1\n    else:\n        freq_table2[i] = 1\n\n#Create a frequency table of elements in lst3\nfreq_table3 = {}\nfor i in lst', '#Find the elements with frequency larger than 1 and assign them to a list lst2\nlst2 = [i for i in lst if i > 1]\n\n#Print the list\nprint(lst2)\n\n#Find the elements with frequency larger than 1 and assign them to a list lst3\nlst3 = [i for i in lst if i > 1]\n\n#Print the list\nprint(lst3)\n\n#Find the elements with frequency larger than 1 and assign them to a list lst4\nlst4 = [i for i in lst if i > 1]\n\n#Print the list\nprint(lst4)\n\n#Find', '#Print out lst2\nprint(lst2)\n\n#Print out lst3\nprint(lst3)\n\n#Print out lst4\nprint(lst4)\n\n#Print out lst5\nprint(lst5)\n\n#Print out lst6\nprint(lst6)\n\n#Print out lst7\nprint(lst7)\n\n#Print out lst8\nprint(lst8)\n\n#Print out lst9\nprint(lst9)\n\n#Print out lst10\nprint(lst10)\n\n#Print out lst11\nprint(lst11)']"
68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","[""#Initialize a variable named w1 with a string '{w}'\nw1 = '{w}'\n\n#Initialize a variable named w2 with a string '{w}'\nw2 = '{w}'\n\n#Initialize a variable named w3 with a string '{w}'\nw3 = '{w}'\n\n#Initialize a variable named w4 with a string '{w}'\nw4 = '{w}'\n\n#Initialize a variable named w5 with a string '{w}'\nw5 = '{w}'\n\n#Initialize a variable named w6 with a string '{w}'\nw6 = '{w}'\n\n#Initialize a variable named w7 with a"", '#Get the first non-repeating character in w1\n\tfor i in range(len(w1)):\n\t\tif w1[i]!= w2[i]:\n\t\t\treturn w1[i]\n\treturn None\n\ndef get_longest_common_substring(w1, w2):\n\t#Get the longest common substring\n\tlongest_common_substring = """"\n\tfor i in range(len(w1)):\n\t\tif w1[i] in w2:\n\t\t\tlongest_common_substring += w1[i]\n\t\telse:\n\t\t\tbreak\n\treturn longest_common_substring\n\ndef get', '#Find its corresponding index and assign it to n1\n\tn1 = 0\n\tfor i in range(len(n)):\n\t\tif n[i] == n1:\n\t\t\tn1 = i\n\t#Find its corresponding index and assign it to n2\n\tn2 = 0\n\tfor i in range(len(n)):\n\t\tif n[i] == n2:\n\t\t\tn2 = i\n\t#Find its corresponding index and assign it to n3\n\tn3 = 0\n\tfor i in range(len(n)):\n\t\tif n[i] == n3:\n\t\t\tn', '#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)\n\n#Print out n1 and n2\nprint(n1, n2)']"
69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","['#Assign a sentence \'{s1}\' to a variable named sentence1.\nsentence1 = ""I am a student""\n\n#Assign a sentence \'{s2}\' to a variable named sentence2.\nsentence2 = ""I am a teacher""\n\n#Assign a sentence \'{s3}\' to a variable named sentence3.\nsentence3 = ""I am a student""\n\n#Assign a sentence \'{s4}\' to a variable named sentence4.\nsentence4 = ""I am a teacher""\n\n#Assign a sentence \'{s5}\' to a variable named sentence5.\nsentence5 = ""I am a student""\n\n#Assign a sentence \'{s6}\'', ""#Assign a sentence '{s2}' to a variable named sentence2.\nsentence2 = s2\n\n#Print the sentence2 variable.\nprint(sentence2)\n\n#Assign a sentence '{s3}' to a variable named sentence3.\nsentence3 = s3\n\n#Print the sentence3 variable.\nprint(sentence3)\n\n#Assign a sentence '{s4}' to a variable named sentence4.\nsentence4 = s4\n\n#Print the sentence4 variable.\nprint(sentence4)\n\n#Assign a sentence '{s5}' to a variable named sentence5.\nsentence5 = s5\n\n#Print the sentence5 variable"", '#Split sentence1 into words and assign them to words1.\nwords1 = sentence1.split()\n\n#Split sentence2 into words and assign them to words2.\nwords2 = sentence2.split()\n\n#Create a list of the words in words1 that are not in words2.\ndifference = [word for word in words1 if word not in words2]\n\n#Print the difference.\nprint(difference)\n', '#Split sentence2 into words and assign them to words2.\nwords2 = sentence2.split()\n\n#Print the words2.\nprint(words2)\n\n#Print the length of words2.\nprint(len(words2))\n\n#Print the first word2.\nprint(words2[0])\n\n#Print the last word2.\nprint(words2[-1])\n\n#Print the middle word2.\nprint(words2[len(words2)//2])\n\n#Print the last word2.\nprint(words2[-len(words2)//2])\n\n#Print the first word2.', '#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.\n#\n#Return the uncommon_words in an array.\n#\n#Example 1:\n#\n#Input: words1 = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""], words2 = [""tan"",""ate"",""nat"",""bat""]\n#Output: [""bat""]\n#Example 2:\n#\n#Input: words1 = [""a"",""b"",""c"",""a"",""b"",""c""], words2 = [""a"",""c"",""b""]\n#Output: [""a"",""c""]\n#Note:\n#\n#The length of both words1 and words2 will', '#Print uncommon_words.txt\n\n#Open uncommon_words.txt\n\n#Read each line\n\n#Split the line\n\n#Remove the first word\n\n#Remove the last word\n\n#Remove the first and last words\n\n#Print uncommon_words.txt\n\n#Open uncommon_words.txt\n\n#Read each line\n\n#Split the line\n\n#Remove the first word\n\n#Remove the last word\n\n#Remove the first and last words\n\n#Print uncommon_words.txt\n\n#Open uncommon_words.txt\n\n#Read each line']"
70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","['#Assign a sentence \'{s1}\' to a variable named sentence1.\nsentence1 = ""I am a student""\n\n#Assign a sentence \'{s2}\' to a variable named sentence2.\nsentence2 = ""I am a teacher""\n\n#Assign a sentence \'{s3}\' to a variable named sentence3.\nsentence3 = ""I am a student""\n\n#Assign a sentence \'{s4}\' to a variable named sentence4.\nsentence4 = ""I am a teacher""\n\n#Assign a sentence \'{s5}\' to a variable named sentence5.\nsentence5 = ""I am a student""\n\n#Assign a sentence \'{s6}\'', '#Split sentence1 into words and assign them to words1.\nwords1 = sentence1.split()\n\n#Split sentence2 into words and assign them to words2.\nwords2 = sentence2.split()\n\n#Create a list of the words in words1 that are not in words2.\ndifference = [word for word in words1 if word not in words2]\n\n#Print the difference.\nprint(difference)\n', ""#Remove punctuation in words1.\nwords1 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words1]\n\n#Remove punctuation in words2.\nwords2 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words2]\n\n#Remove punctuation in words3.\nwords3 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words3]\n\n#Remove punctuation in words4.\nwords4 = [word.translate(str.maketrans('', '', string.punctuation)) for word in"", '#Compute the average word length in words1 and assign it avg. word length in words2\navg_word_length = (len(words1) + len(words2)) / 2\n\n#Compute the average word length in words1 and assign it avg. word length in words2\navg_word_length = (len(words1) + len(words2)) / 2\n\n#Compute the average word length in words1 and assign it avg. word length in words2\navg_word_length = (len(words1) + len(words2)) / 2\n\n#Compute the average word length in words1 and assign it avg', '#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter))\n\n#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter))\n\n#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter))\n\n#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter))\n\n#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter']"
71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","['#Assigns strings {w1} and {w2} to variables w1 and w2 respectively.\n#Prints the sum of the two variables.\n\nw1 = input(""Enter a word: "")\nw2 = input(""Enter another word: "")\n\nprint(w1 + w2)\n', '#Lower-case w1 and w2 are the same word, and w1 and w2 are not the same word.\n#\n#Return the number of different words in the list.\n#\n#Example 1:\n#\n#Input:\n#[""w"",""wo"",""wor"",""worl"",""world""]\n#\n#Output:\n#2\n#\n#Explanation:\n#The two words w and wor are different, but worl and world are the same.\n#\n#Example 2:\n#\n#Input:\n#[""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]', '#Count the frequency of letters in w1 and w2 and assign them to f1 and f2 respectively.\nf1 = 0\nf2 = 0\nfor i in range(len(w1)):\n    if w1[i] == w2[i]:\n        f1 += 1\n    else:\n        f2 += 1\n\n#Print the frequency of each letter in w1 and w2.\nprint(""Frequency of each letter in w1 and w2:"")\nprint(""w1: "", f1)\nprint(""w2: "", f2)\n\n#Print the frequency of each letter in w1 and w2.\nprint(""Frequency of each letter in w', '#Print if f1 is equal to f2\nprint(f1 == f2)\n\n#Print if f1 is not equal to f2\nprint(f1!= f2)\n\n#Print if f1 is greater than f2\nprint(f1 > f2)\n\n#Print if f1 is less than f2\nprint(f1 < f2)\n\n#Print if f1 is greater than or equal to f2\nprint(f1 >= f2)\n\n#Print if f1 is less than or equal to f2\nprint(f1 <= f2)\n\n#Print if f1']"
72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","['#Assign a string {w} to a variable named w1.\nw1 = ""Hello""\n\n#Assign a string {x} to a variable named x1.\nx1 = ""World""\n\n#Assign a string {y} to a variable named y1.\ny1 = ""Python""\n\n#Assign a string {z} to a variable named z1.\nz1 = ""is""\n\n#Assign a string {a} to a variable named a1.\na1 = ""a""\n\n#Assign a string {b} to a variable named b1.\nb1 = ""b""\n\n#Assign a', '#Concatenate the elements in w1 from end to beginning and assign it to w2\nw2 = w1[0:len(w1)-1]\n\n#Print the elements of w2\nprint(w2)\n\n#Concatenate the elements in w2 from end to beginning and assign it to w3\nw3 = w2[0:len(w2)-1]\n\n#Print the elements of w3\nprint(w3)\n\n#Concatenate the elements in w3 from end to beginning and assign it to w4\nw4 = w3[0:len(w3)-1]\n\n#Print the elements of w4', ""#Print w2v model\nprint(model.wv.vocab)\n\n#Print word vectors\nprint(model.wv['the'])\n\n#Print word vectors\nprint(model.wv['the'].shape)\n\n#Print word vectors\nprint(model.wv['the'].shape)\n\n#Print word vectors\nprint(model.wv['the'].shape)\n\n#Print word vectors\nprint(model.wv['the'].shape)\n\n#Print word vectors\nprint(model.wv['the'].shape)\n\n#Print word vectors\nprint(model.wv['the'].shape)""]"
73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","['#Assign a natural number {n} to named num.\nnum = 10\n\n#Assign a string {s} to named s.\ns = ""Hello World!""\n\n#Assign a boolean {b} to named b.\nb = True\n\n#Assign a list {l} to named l.\nl = [1, 2, 3]\n\n#Assign a tuple {t} to named t.\nt = (1, 2, 3)\n\n#Assign a dictionary {d} to named d.\nd = {""a"": 1, ""b"": 2, ""c"": 3}', '#Create a list from 1 to num and assign it to a variable lst1\nlst1 = [1,2,3,4,5,6,7,8,9,10]\n\n#Create a list from 1 to num and assign it to a variable lst2\nlst2 = [1,2,3,4,5,6,7,8,9,10]\n\n#Create a list from 1 to num and assign it to a variable lst3\nlst3 = [1,2,3,4,5,6,7,8,9,10]\n\n#Create a list from 1 to num and', '#Compute the sum of squared of the numbers in lst1 and assign n1 to the variable n1\nn1 = sum(lst1)**2\n\n#Compute the sum of squared of the numbers in lst2 and assign n2 to the variable n2\nn2 = sum(lst2)**2\n\n#Compute the sum of squared of the numbers in lst3 and assign n3 to the variable n3\nn3 = sum(lst3)**2\n\n#Compute the sum of squared of the numbers in lst4 and assign n4 to the variable n4\nn4 = sum(lst4)**2\n\n#Compute the sum of squared of the numbers in lst5', '#Compute the sum of the numbers in lst1 and assign its square to n2\nn2 = sum(lst1)\n\n#Compute the square of the sum of the numbers in lst2 and assign its square to n3\nn3 = sum(lst2)\n\n#Compute the square of the sum of the numbers in lst3 and assign its square to n4\nn4 = sum(lst3)\n\n#Compute the square of the sum of the numbers in lst4 and assign its square to n5\nn5 = sum(lst4)\n\n#Compute the square of the sum of the numbers in lst5 and assign its square to n6\nn6 =', '#Print out the difference between n1 and n2\nprint(n1 - n2)\n\n#Print out the difference between n1 and n3\nprint(n1 - n3)\n\n#Print out the difference between n1 and n4\nprint(n1 - n4)\n\n#Print out the difference between n1 and n5\nprint(n1 - n5)\n\n#Print out the difference between n1 and n6\nprint(n1 - n6)\n\n#Print out the difference between n1 and n7\nprint(n1 - n7)\n\n#Print out the difference between n']"
74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","['#Assigns a list {lst1} to a variable named vec1.\nvec1 = lst1\n\n#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\n#Assigns a list {lst3} to a variable named vec3.\nvec3 = lst3\n\n#Assigns a list {lst4} to a variable named vec4.\nvec4 = lst4\n\n#Assigns a list {lst5} to a variable named vec5.\nvec5 = lst5\n\n#Assigns a list {lst6} to a variable named vec6.\nvec6 = lst6', '#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\n#Prints the value of vec2.\nprint(vec2)\n\n#Assigns a list {lst3} to a variable named vec3.\nvec3 = lst3\n\n#Prints the value of vec3.\nprint(vec3)\n\n#Assigns a list {lst4} to a variable named vec4.\nvec4 = lst4\n\n#Prints the value of vec4.\nprint(vec4)\n\n#Assigns a list {lst5} to a variable named vec5.\nvec5 =', '#Normalize vec1\nvec1 = vec1/np.linalg.norm(vec1)\n\n#Normalize vec2\nvec2 = vec2/np.linalg.norm(vec2)\n\n#Calculate dot product\ndot = np.dot(vec1,vec2)\n\n#Calculate cosine similarity\ncos = dot/(np.linalg.norm(vec1)*np.linalg.norm(vec2))\n\n#Print cosine similarity\nprint(cos)\n', '#Normalize vec2\n\tvec2 = vec2/np.linalg.norm(vec2)\n\t#Calculate dot product\n\tdot = np.dot(vec1,vec2)\n\t#Calculate cosine similarity\n\tcos = dot/(np.linalg.norm(vec1)*np.linalg.norm(vec2))\n\treturn cos\n\ndef get_cosine_similarity(vec1,vec2):\n\t#Normalize vec1\n\tvec1 = vec1/np.linalg.norm(vec1)\n\t#Normalize vec2\n\tvec2 = vec2/np.linalg.norm', '#Compute the dot product of vec1 and vec2\n\tdot = np.dot(vec1, vec2)\n\t#Compute the cosine similarity between vec1 and vec2\n\tcos_sim = dot / (np.linalg.norm(vec1) * np.linalg.norm(vec2))\n\treturn cos_sim\n\ndef get_cosine_similarity(vec1, vec2):\n\t#Compute the dot product of vec1 and vec2\n\tdot = np.dot(vec1, vec2)\n\t#Compute the cosine similarity between vec1 and vec2\n\tcos_sim = dot / (np.linalg', '#Print out the dot product of the two vectors\nprint(np.dot(v1,v2))\n\n#Print out the dot product of the two vectors\nprint(np.dot(v1,v3))\n\n#Print out the dot product of the two vectors\nprint(np.dot(v1,v4))\n\n#Print out the dot product of the two vectors\nprint(np.dot(v1,v5))\n\n#Print out the dot product of the two vectors\nprint(np.dot(v1,v6))\n\n#Print out the dot product of the two']"
75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","['#Assigns a list {lst1} to a variable named vec1.\nvec1 = lst1\n\n#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\n#Assigns a list {lst3} to a variable named vec3.\nvec3 = lst3\n\n#Assigns a list {lst4} to a variable named vec4.\nvec4 = lst4\n\n#Assigns a list {lst5} to a variable named vec5.\nvec5 = lst5\n\n#Assigns a list {lst6} to a variable named vec6.\nvec6 = lst6', '#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\n#Prints the value of vec2.\nprint(vec2)\n\n#Assigns a list {lst3} to a variable named vec3.\nvec3 = lst3\n\n#Prints the value of vec3.\nprint(vec3)\n\n#Assigns a list {lst4} to a variable named vec4.\nvec4 = lst4\n\n#Prints the value of vec4.\nprint(vec4)\n\n#Assigns a list {lst5} to a variable named vec5.\nvec5 =', '#Assigns a list {lst3} to a variable named vec3.\nvec3 = [1,2,3]\n\n#Assigns a list {lst4} to a variable named vec4.\nvec4 = [1,2,3,4]\n\n#Assigns a list {lst5} to a variable named vec5.\nvec5 = [1,2,3,4,5]\n\n#Assigns a list {lst6} to a variable named vec6.\nvec6 = [1,2,3,4,5,6]\n\n#Assigns a list {lst7} to a variable named vec7', '#Convert vec1, vec2, and vec3 to numpy array\nvec1 = np.array(vec1)\nvec2 = np.array(vec2)\nvec3 = np.array(vec3)\n\n#Calculate the dot product of vec1 and vec2\ndot_product = np.dot(vec1, vec2)\n\n#Calculate the dot product of vec1 and vec3\ndot_product_3 = np.dot(vec1, vec3)\n\n#Calculate the dot product of vec2 and vec3\ndot_product_2 = np.dot(vec2, vec3)\n\n#Calculate the dot product', '#Implement a function called dist() to compute the distance between two vectors.\n#The function should take two vectors as arguments and return the distance between them.\n#The distance should be a floating point number.\n#The distance should be the Euclidean distance between the two vectors.\n#The distance should be the Manhattan distance between the two vectors.\n#The distance should be the Chebyshev distance between the two vectors.\n#The distance should be the Minkowski distance between the two vectors.\n#The distance should be the Russelrao distance between the two vectors.\n#The distance should be the Hamming distance between the two vectors.', '#Compute the distance between vec1 and vec2 and assign it to d1\n\td1 = np.linalg.norm(vec1 - vec2)\n\t#Compute the distance between vec1 and vec3 and assign it to d2\n\td2 = np.linalg.norm(vec1 - vec3)\n\t#Compute the distance between vec1 and vec4 and assign it to d3\n\td3 = np.linalg.norm(vec1 - vec4)\n\t#Compute the distance between vec1 and vec5 and assign it to d4\n\td4 = np.linalg.norm(vec1 - vec5)\n\t#Compute the distance', '#Compute the distance between vec1 and vec3 and assign it to d2\nd2 = np.linalg.norm(vec1 - vec3)\n\n#Compute the distance between vec1 and vec2 and assign it to d3\nd3 = np.linalg.norm(vec1 - vec2)\n\n#Compute the distance between vec2 and vec3 and assign it to d4\nd4 = np.linalg.norm(vec2 - vec3)\n\n#Compute the distance between vec2 and vec1 and assign it to d5\nd5 = np.linalg.norm(vec2 - vec1)\n\n#Compute the distance between vec3 and', '#Print out whether d1 is larger than d2\nprint(d1 > d2)\n\n#Print out whether d1 is smaller than d2\nprint(d1 < d2)\n\n#Print out whether d1 is equal to d2\nprint(d1 == d2)\n\n#Print out whether d1 is not equal to d2\nprint(d1!= d2)\n\n#Print out whether d1 is greater than or equal to d2\nprint(d1 >= d2)\n\n#Print out whether d1 is less than or equal to d2\nprint(d1 <= d2)']"
76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\n#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Initialize a variable named lst3 with a list {l3}.\nlst3 = [1,2,3,4,5]\n\n#Initialize a variable named lst4 with a list {l4}.\nlst4 = [1,2,3,4,5]\n\n#Initialize a variable named lst5 with a list {l5}.\nlst5 =', '#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Print the length of lst2.\nprint(len(lst2))\n\n#Print the first element of lst2.\nprint(lst2[0])\n\n#Print the last element of lst2.\nprint(lst2[-1])\n\n#Print the middle element of lst2.\nprint(lst2[2])\n\n#Print the element at index 3 of lst2.\nprint(lst2[3])\n\n#Print the element at index 4 of lst2.\nprint', '#Create a function called std() to compute the standard deviation given a list of numbers.\ndef std(lst):\n    return math.sqrt(sum([(x-mean(lst))**2 for x in lst])/len(lst))\n\n#Create a function called median() to compute the median of a list of numbers.\ndef median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        return (lst[len(lst)//2-1] + lst[len(lst)//2])/2\n    else:\n        return lst[len(lst)//2]\n\n#Create a function called mode() to compute the mode of a list of numbers.', '#Call the function std() to calculate standard deviations for lst1 and lst2.\nlst1_std = std(lst1)\nlst2_std = std(lst2)\n\n#Print the standard deviations of lst1 and lst2.\nprint(""The standard deviation of lst1 is: "", lst1_std)\nprint(""The standard deviation of lst2 is: "", lst2_std)\n\n#Create a new list of the mean of lst1 and lst2.\nlst1_mean = mean(lst1)\nlst2_mean = mean(lst2)\n\n#Print the mean of lst1 and lst2.\nprint(""The mean', '#Print out the smaller standard deviation.\nprint(std_dev)\n\n#Print out the mean.\nprint(mean)\n\n#Print out the median.\nprint(median)\n\n#Print out the mode.\nprint(mode)\n\n#Print out the skewness.\nprint(skewness)\n\n#Print out the kurtosis.\nprint(kurtosis)\n\n#Print out the variance.\nprint(variance)\n\n#Print out the standard deviation.\nprint(std_dev)\n\n#Print out the mean.\nprint(mean)\n\n#Print out the median']"
77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\n#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Initialize a variable named lst3 with a list {l3}.\nlst3 = [1,2,3,4,5]\n\n#Initialize a variable named lst4 with a list {l4}.\nlst4 = [1,2,3,4,5]\n\n#Initialize a variable named lst5 with a list {l5}.\nlst5 =', '#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Print the length of lst2.\nprint(len(lst2))\n\n#Print the first element of lst2.\nprint(lst2[0])\n\n#Print the last element of lst2.\nprint(lst2[-1])\n\n#Print the middle element of lst2.\nprint(lst2[2])\n\n#Print the element at index 3 of lst2.\nprint(lst2[3])\n\n#Print the element at index 4 of lst2.\nprint', '#Create a function called mean() to compute the mean given a list of numbers.\ndef mean(numbers):\n    return sum(numbers)/len(numbers)\n\n#Create a function called median() to compute the median given a list of numbers.\ndef median(numbers):\n    numbers.sort()\n    if len(numbers)%2 == 0:\n        return (numbers[len(numbers)//2-1] + numbers[len(numbers)//2])/2\n    else:\n        return numbers[len(numbers)//2]\n\n#Create a function called mode() to compute the mode given a list of numbers.\ndef mode(numbers):\n    counts = {}\n    for number in numbers:', '#Call the function mean() to calculate means for lst1 and lst2.\nlst1_mean = mean(lst1)\nlst2_mean = mean(lst2)\n\n#Print the mean of lst1 and lst2.\nprint(""The mean of lst1 is: "", lst1_mean)\nprint(""The mean of lst2 is: "", lst2_mean)\n\n#Create a list of the differences between lst1 and lst2.\nlst1_diff = lst1 - lst2\n\n#Print the difference between lst1 and lst2.\nprint(""The difference between lst1 and lst2 is: "", lst1_diff)', '#Print out the smaller mean.\nprint(np.mean(np.array(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(']"
78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\n#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Initialize a variable named lst3 with a list {l3}.\nlst3 = [1,2,3,4,5]\n\n#Initialize a variable named lst4 with a list {l4}.\nlst4 = [1,2,3,4,5]\n\n#Initialize a variable named lst5 with a list {l5}.\nlst5 =', '#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively.\navg = np.mean(lst1)\nsd = np.std(lst1)\n\n#Compute the mean and the standard deviation for lst2 and assign it variable avg and sd, respectively.\navg = np.mean(lst2)\nsd = np.std(lst2)\n\n#Compute the mean and the standard deviation for lst3 and assign it variable avg and sd, respectively.\navg = np.mean(lst3)\nsd = np.std(lst3)\n\n#Compute the mean and the standard deviation for lst4 and assign it variable avg and sd,', '#Compute the coeffeicient of variation of the function\ndef coeff_var(x,y):\n    return np.var(y-x)\n\n#Compute the coeffeicient of variation of the function\ndef coeff_var_2(x,y):\n    return np.var(y-x)\n\n#Compute the coeffeicient of variation of the function\ndef coeff_var_3(x,y):\n    return np.var(y-x)\n\n#Compute the coeffeicient of variation of the function\ndef coeff_var_4(x,y):\n    return np.var(y-x)', ""#Print out the coefficient of variation of the data\nprint(np.var(data))\n\n#Plot the data\nplt.plot(data)\nplt.show()\n\n#Plot the data with the fitted curve\nplt.plot(data, 'r')\nplt.plot(fit, 'b')\nplt.show()\n\n#Plot the data with the fitted curve and the original data\nplt.plot(data, 'r')\nplt.plot(data, 'b')\nplt.plot(fit, 'r')\nplt.plot(fit, 'b')\nplt.show()\n\n#Plot""]"
79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\n#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\n#Initialize a variable named lst3 with a list {l3}.\nlst3 = [1,2,3,4,5]\n\n#Initialize a variable named lst4 with a list {l4}.\nlst4 = [1,2,3,4,5]\n\n#Initialize a variable named lst5 with a list {l5}.\nlst5 =', '#Get the absolute value of every element in lst1 and assign to a lst2\nlst2 = [abs(x) for x in lst1]\n\n#Print the absolute value of every element in lst2\nprint(lst2)\n\n#Get the absolute value of every element in lst1 and assign to a lst2\nlst2 = [abs(x) for x in lst1]\n\n#Print the absolute value of every element in lst2\nprint(lst2)\n\n#Get the absolute value of every element in lst1 and assign to a lst2\nlst2 = [abs(x) for x in lst1]\n\n#Print the absolute value', '#Compute the sum of lst2 and assign to l1\nl1 = lst1 + lst2\n\n#Print the sum of lst1 and lst2\nprint(l1)\n\n#Print the sum of lst1 and lst2\nprint(sum(lst1))\n\n#Print the sum of lst1 and lst2\nprint(sum(lst2))\n\n#Print the sum of lst1 and lst2\nprint(sum(l1))\n\n#Print the sum of lst1 and lst2\nprint(sum(l1))\n\n#Print the sum of lst1 and lst2\nprint(sum(l1))', '#Print out l1 and l2\nprint(l1)\nprint(l2)\n\n#Print out the sum of l1 and l2\nprint(sum(l1))\nprint(sum(l2))\n\n#Print out the product of l1 and l2\nprint(prod(l1))\nprint(prod(l2))\n\n#Print out the difference of l1 and l2\nprint(diff(l1))\nprint(diff(l2))\n\n#Print out the quotient of l1 and l2\nprint(quotient(l1))\nprint(']"
80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","['#Assigns a list {lst1} to a variable named lst1.\nlst1 = [1,2,3,4,5]\n\n#Assigns a list {lst2} to a variable named lst2.\nlst2 = [1,2,3,4,5]\n\n#Assigns a list {lst3} to a variable named lst3.\nlst3 = [1,2,3,4,5]\n\n#Assigns a list {lst4} to a variable named lst4.\nlst4 = [1,2,3,4,5]\n\n#Assigns a list {lst5} to a', '#Compute the sample mean of lst1 and lst2\nlst1_mean = np.mean(lst1)\nlst2_mean = np.mean(lst2)\n\n#Compute the sample variance of lst1 and lst2\nlst1_var = np.var(lst1)\nlst2_var = np.var(lst2)\n\n#Compute the sample standard deviation of lst1 and lst2\nlst1_std = np.std(lst1)\nlst2_std = np.std(lst2)\n\n#Compute the sample skewness of lst1 and lst2\nlst1_skew =', '#Compute the sample standard deviation of lst1 and lst2\nlst1_std = np.std(lst1)\nlst2_std = np.std(lst2)\n\n#Compute the mean of lst1 and lst2\nlst1_mean = np.mean(lst1)\nlst2_mean = np.mean(lst2)\n\n#Compute the correlation coefficient of lst1 and lst2\nlst1_corr = np.corrcoef(lst1,lst2)[0,1]\nlst2_corr = np.corrcoef(lst2,lst1)[0,1]\n\n#Compute the p', ""#Compute the z-statistic to test whether its mean is 0.\nz_stat = np.mean(np.abs(np.array(z_stat) - 0))\n\n#Print the z-statistic\nprint(z_stat)\n\n#Plot the z-statistic\nplt.plot(z_stat)\nplt.xlabel('Number of iterations')\nplt.ylabel('z-statistic')\nplt.show()\n"", ""#Print out the z-statistic for each sample\nprint(z_stat)\n\n#Plot the z-statistic for each sample\nplt.plot(z_stat)\nplt.xlabel('Sample')\nplt.ylabel('Z-statistic')\nplt.show()\n\n#Plot the p-value for each sample\nplt.plot(p_value)\nplt.xlabel('Sample')\nplt.ylabel('p-value')\nplt.show()\n\n#Plot the p-value for each sample\nplt.plot(p_value)\nplt.xlabel('Sample')\nplt.ylabel('p-value')""]"
81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","['#Assign a list {lst} to named lst1.\nlst1 = [1, 2, 3, 4, 5]\n\n#Assign a list {lst} to named lst2.\nlst2 = [1, 2, 3, 4, 5]\n\n#Assign a list {lst} to named lst3.\nlst3 = [1, 2, 3, 4, 5]\n\n#Assign a list {lst} to named lst4.\nlst4 = [1, 2, 3, 4, 5]\n\n#Assign a list {lst}', '#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively.\nlst1 = [1,2,3,4,5,6,7,8,9,10]\nlst_pos = []\nlst_neg = []\nfor i in lst1:\n    if i > 0:\n        lst_pos.append(i)\n    else:\n        lst_neg.append(i)\nprint(lst_pos)\nprint(lst_neg)\n\n#Separate lst2 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively.\nlst2 = [1,', '#Concatenate lst_pos and lst_neg and assign it lst2\nlst2 = lst_pos + lst_neg\n\n#Print the list\nprint(lst2)\n\n#Print the length of lst2\nprint(len(lst2))\n\n#Print the first element of lst2\nprint(lst2[0])\n\n#Print the last element of lst2\nprint(lst2[-1])\n\n#Print the middle element of lst2\nprint(lst2[len(lst2)//2])\n\n#Print the element at index 1 of lst2\nprint(lst2[1])\n\n#Print the element at index', '#Print out lst2\nprint(lst2)\n\n#Print out lst3\nprint(lst3)\n\n#Print out lst4\nprint(lst4)\n\n#Print out lst5\nprint(lst5)\n\n#Print out lst6\nprint(lst6)\n\n#Print out lst7\nprint(lst7)\n\n#Print out lst8\nprint(lst8)\n\n#Print out lst9\nprint(lst9)\n\n#Print out lst10\nprint(lst10)\n\n#Print out lst11\nprint(lst11)']"
82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","['#Initialize a variable named w with a string {w}\nw = ""w""\n\n#Print the value of w\nprint(w)\n\n#Initialize a variable named x with a string {x}\nx = ""x""\n\n#Print the value of x\nprint(x)\n\n#Initialize a variable named y with a string {y}\ny = ""y""\n\n#Print the value of y\nprint(y)\n\n#Initialize a variable named z with a string {z}\nz = ""z""\n\n#Print the value of z\nprint(z)\n\n#Initialize a variable named a with a', '#Lower every character in w to lower case.\n#Upper every character in w to upper case.\n#Replace every character in w with a new character.\n#Return the new string.\n\ndef lower_case(w):\n    return w.lower()\n\ndef upper_case(w):\n    return w.upper()\n\ndef replace_char(w, old_char, new_char):\n    return w.replace(old_char, new_char)\n\ndef test_lower_case():\n    assert lower_case(""hello"") == ""hello""\n\ndef test_upper_case():\n    assert upper', ""#Replace every alphabetical characters in w with ''\nw = w.replace('a', '')\nw = w.replace('b', '')\nw = w.replace('c', '')\nw = w.replace('d', '')\nw = w.replace('e', '')\nw = w.replace('f', '')\nw = w.replace('g', '')\nw = w.replace('h', '')\nw = w.replace('i', '')\nw = w.replace('j', '')\nw = w.replace('k', '')\nw = w.replace('l', '')\nw = w.replace('m"", '#Print out the new word after substitution\nprint(new_word)\n']"
83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","['#Import and initialize a numpy array ""X"" with the values {X}.\nX = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n#Import and initialize a numpy array ""y"" with the values {y}.\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n#Import and initialize a numpy array ""X_train"" with the values {X_train}.\nX_train = np.array([1, 2,', '#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".\n#\n#For example, if X is a 2-D array of size 3x4, then the dot product of the first row and the second row is 12.\n#\n#If X is a 3-D array of size 4x3x2, then the dot product of the first row and the second row is 12.\n#\n#If X is a 4-D array of size 5x4x3x2, then the dot product of the first row and the second row is 12.\n#\n#If X is a', '#Set the diagonal elements of ""Xn"" to 0.\n\tfor i in range(n):\n\t\tXn[i][i] = 0.0\n\n\t#Set the off-diagonal elements of ""Xn"" to 1.\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tXn[i][j] = 1.0\n\n\t#Return the matrix Xn.\n\treturn Xn\n\n#Return the matrix Xn.\ndef Xn(n):\n\tXn = np.zeros((n,n))\n\n\t#Set the diagonal elements of', '#Print out the maximum value (cast as a float) in ""Xn"".\nprint(max(Xn))\n\n#Print out the minimum value (cast as a float) in ""Xn"".\nprint(min(Xn))\n\n#Print out the mean value (cast as a float) in ""Xn"".\nprint(mean(Xn))\n\n#Print out the median value (cast as a float) in ""Xn"".\nprint(median(Xn))\n\n#Print out the standard deviation value (cast as a float) in ""Xn"".\nprint(std(Xn))\n\n#Print out the variance value (cast as']"
84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","['#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.\npred = np.zeros(len(y))\nfor i in range(len(y)):\n    pred[i] = np.argmax(model.predict(X[i]))\n\n#Print the accuracy of the model.\nprint(""Accuracy: "", accuracy_score(y, pred))\n\n#Print the confusion matrix.\nprint(confusion_matrix(y, pred))\n\n#Print the classification report.\nprint(classification_report(y, pred))\n\n#Print the precision, recall and f1-score.\nprint(precision_score(y, pred))\nprint', '#Compare the equivalence of two arrays and store the results as ""match"".\n#If the arrays are not equal, store the results as ""mismatch"".\n#If the arrays are equal, store the results as ""equal"".\n#\n#For example, if the arrays are [1, 2, 3, 4, 5] and [1, 2, 3, 4, 5, 6],\n#the function should return ""equal"".\n#\n#If the arrays are [1, 2, 3, 4, 5] and [1, 2, 3, 4, 5, 6,', '#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".\nnon_zero = y > 0\n\n#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""positive"".\npositive = y > 0\n\n#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""negative"".\nnegative = y < 0\n\n#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""zero"".\nzero = y == 0\n\n#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""one"".\none = y ==', '#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".\ncorrect = match & non_zero\n\n#Print the result\nprint(correct)\n\n#Print the number of correct answers\nprint(correct.sum())\n\n#Print the number of incorrect answers\nprint(match.sum() - correct.sum())\n\n#Print the percentage of correct answers\nprint(correct.sum() / match.sum() * 100)\n\n#Print the percentage of incorrect answers\nprint(match.sum() / correct.sum() * 100)\n\n#Print the percentage of correct answers\nprint(correct.sum() / match', '#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".\n#If the number of True values in ""correct"" is 0, then the precision is 1.\n#If the number of True values in ""pred"" is 0, then the precision is 0.\n#If the number of True values in ""correct"" and ""pred"" are the same, then the precision is 1.\n#If the number of True values in ""correct"" is greater than the number of True values in ""pred"", then the precision is 0.\n#If the number of True values in ""correct"" is less than the number of True values in ""pred"",', '#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".\n\trec = correct / (np.sum(y))\n\treturn rec\n\ndef precision(y, y_hat):\n\t#Compute the precision by dividing the number of True values in ""correct"" by the number of predicted non-zero values in ""y_hat"", and store the result as ""prec"".\n\tprec = correct / (np.sum(y_hat))\n\treturn prec\n\ndef f1(y, y_hat):\n\t#Compute the F1 score by computing the precision and recall, and then taking the average of the two.\n\tprec =', '#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\ndef harmonic_mean(prec, rec):\n    return 2.0 * prec * rec / (prec + rec)\n\n#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\ndef harmonic_mean_2(prec, rec):\n    return 2.0 * prec * rec / (prec + rec)\n\n#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\ndef harmonic_mean_3(prec, rec):\n    return 2.0 * prec * rec / (prec + rec']"
85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","['#Initialize a string named ""concat"" with {x}.\nconcat = ""Hello, World!""\n\n#Print the string ""concat""\nprint(concat)\n\n#Print the string ""concat"" with a space between each character\nprint(concat + "" "")\n\n#Print the string ""concat"" with a space between each character and a new line\nprint(concat + ""\\n"")\n\n#Print the string ""concat"" with a space between each character and a new line and a space between each character\nprint(concat + ""\\n"" + "" "")\n\n#Print the string ""concat"" with a space between each character and a new line and a', '#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.\nimport re\npat = re.compile(r\'[A-Z]\')\n\n#Create a list of all the words in the text file.\nwords = []\nwith open(\'words.txt\') as f:\n    for line in f:\n        words.append(line.strip())\n\n#Create a list of all the words that match the pattern ""pat"".\nmatches = pat.findall(text)\n\n#Print the number of matches.\nprint(len(matches))\n\n#Print the first 10 matches.\nprint(matches[:10])\n\n#Print the last', '#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".\n#\n#For example, if ""concat"" is ""abcde"" and ""pat"" is ""ab*c*e"", then the result is ""abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abcde abc', '#Print out ""result"".\nprint(result)\n']"
86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","['#Initialize a list ""x"" with the values {x}.\nx = [x]\n\n#Initialize a list ""y"" with the values {y}.\ny = [y]\n\n#Initialize a list ""z"" with the values {z}.\nz = [z]\n\n#Initialize a list ""w"" with the values {w}.\nw = [w]\n\n#Initialize a list ""v"" with the values {v}.\nv = [v]\n\n#Initialize a list ""u"" with the values {u}.\nu = [u]\n\n#Initialize a list ""t"" with the values {t}.\nt', '#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".\nmean = np.mean(x)\nstd = np.std(x)\n\n#Assuming the normal distribution, calculate the probability of ""x"" using numpy, store the results to ""prob"".\nprob = np.exp(-0.5 * (x - mean) ** 2 / std ** 2)\n\n#Assuming the normal distribution, calculate the cumulative probability of ""x"" using numpy, store the results to ""cumprob"".\ncumprob = np.cumsum(prob)\n\n#Assuming the normal distribution, calculate the probability density function of ""x"" using numpy,', '#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate the 95% confidence interval.\n#Use the mean and std to calculate', '#Sort ""results"" in ascending order and print it out.\nresults.sort()\nprint(results)\n\n#Print the first 10 results.\nprint(results[:10])\n\n#Print the last 10 results.\nprint(results[-10:])\n\n#Print the first 10 results.\nprint(results[:10])\n\n#Print the last 10 results.\nprint(results[-10:])\n\n#Print the first 10 results.\nprint(results[:10])\n\n#Print the last 10 results.\nprint(results[-10:])\n\n#Print']"
87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","['#Initialize a list ""x"" with the values {x}\nx = [x]\n\n#Initialize a list ""y"" with the values {y}\ny = [y]\n\n#Initialize a list ""z"" with the values {z}\nz = [z]\n\n#Initialize a list ""w"" with the values {w}\nw = [w]\n\n#Initialize a list ""v"" with the values {v}\nv = [v]\n\n#Initialize a list ""u"" with the values {u}\nu = [u]\n\n#Initialize a list ""t"" with the values {t}\nt', '#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".\nvocab = sorted(list(set(x)))\n\n#Create a dictionary that maps each element of ""vocab"" to its index in ""vocab"".\nvocab_dict = {v: k for k, v in enumerate(vocab)}\n\n#Create a list that contains the indices of the elements of ""vocab"" that occur in the ""x"" list.\nx_indices = [vocab_dict[v] for v in x]\n\n#Create a list that contains the indices of the elements of ""vocab"" that occur in the ""y"" list.\ny_indices = [vocab_dict', '#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".\nv2i = {}\nfor i, v in enumerate(vocab):\n    v2i[v] = i\n\n#Create a hash map from the values of ""vocab"" to their indices and store the result to ""i2v"".\ni2v = {}\nfor i, v in enumerate(vocab):\n    i2v[i] = v\n\n#Create a hash map from the values of ""vocab"" to their indices and store the result to ""i2v"".\ni2v = {}\nfor i, v in enumerate(vocab):\n    i2v[i] =', '#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.\nfeatures = np.zeros((len(x), len(index)), dtype=int)\n\n#Iterate through the x and y lists and fill the features array with the corresponding values.\nfor i in range(len(x)):\n    for j in range(len(index)):\n        features[i][j] = x[i][index[j]]\n\n#Print the features array.\nprint(features)\n\n#Print the shape of the features array.\nprint(features.shape)\n\n#Print the number of rows in the features array.\nprint(features.shape[0])', '#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n#For each element in y, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n#For each element in z, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n#For each element in w, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current', '#Print out ""features"".\nprint(features)\n\n#Print out ""labels"".\nprint(labels)\n\n#Print out ""test_features"".\nprint(test_features)\n\n#Print out ""test_labels"".\nprint(test_labels)\n\n#Print out ""test_predictions"".\nprint(test_predictions)\n\n#Print out ""test_accuracy"".\nprint(test_accuracy)\n\n#Print out ""test_precision"".\nprint(test_precision)\n\n#Print out ""test_recall"".\nprint(test_recall)\n\n#Print out ""test_']"
88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","['#Initialize a variable ""x"" with {x}.\nx = 10\n\n#Print the value of x.\nprint(x)\n\n#Initialize a variable ""y"" with {y}.\ny = 20\n\n#Print the value of y.\nprint(y)\n\n#Initialize a variable ""z"" with {z}.\nz = 30\n\n#Print the value of z.\nprint(z)\n\n#Initialize a variable ""w"" with {w}.\nw = 40\n\n#Print the value of w.\nprint(w)\n\n#Initialize a variable ""x""', '#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".\nmapped = list(map(fun, lst))\n\n#Print the results.\nprint(mapped)\n\n#Print the length of the list.\nprint(len(lst))\n\n#Print the first element of the list.\nprint(lst[0])\n\n#Print the last element of the list.\nprint(lst[-1])\n\n#Print the middle element of the list.\nprint(lst[len(lst)//2])\n\n#Print the element at the index 3.\nprint(lst[3])\n\n#Print the element at the index 3', '#Convert each element in ""mapped"" into string.\n#Then, join all elements into a string.\n#Finally, return the string.\ndef map_to_string(mapped):\n    return "","".join(mapped)\n\n#Convert each element in ""mapped"" into string.\n#Then, join all elements into a string.\n#Finally, return the string.\ndef map_to_string_with_comma(mapped):\n    return "","".join(mapped)\n\n#Convert each element in ""mapped"" into string.\n#Then, join all elements into a string.\n#Finally, return the string.\ndef map_to_string', '#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.\nresults = {}\n\n#Iterate through each row in the mapped file.\nfor row in mapped:\n    #If the row is not in the results dictionary, add it to the results dictionary.\n    if row[0] not in results:\n        results[row[0]] = []\n\n    #Add the row to the results dictionary.\n    results[row[0]].append(row[1:])\n\n#Iterate through each key in the results dictionary.\nfor key in results:\n    #Print the key and its values.\n    print(key, results[key])\n', '#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.\nfor i in zip(mapped, x):\n    results[i[0]] = i[1]\n\n#Printing the results\nprint(results)\n', '#Print out the ""results"".\nprint(results)\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string())\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(index=False))\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(float_format=""%.2f""))\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(float_format=""%.2f"", header=False))\n\n#Print out the ""']"
89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","['#Initialize a variable ""best"" with -1, ""array"" with {array} and ""best_score"" with 0.0\nbest = -1\narray = []\nbest_score = 0.0\n\n#Loop through the array of numbers\nfor i in range(len(numbers)):\n    #If the current number is greater than the best, set the best to the current number and the best_score to the current score\n    if numbers[i] > best:\n        best = numbers[i]\n        best_score = scores[i]\n        array = [numbers[i]]\n    #If the current number is less than the best, set the best to the current number', '#Assign the first element of ""array"" to a variable named ""minimum"".\nminimum = array[0]\n\n#Loop through the array.\nfor i in range(1, len(array)):\n    #If the current element is less than the minimum, then set the minimum to the current element.\n    if array[i] < minimum:\n        minimum = array[i]\n\n#Print the minimum.\nprint(minimum)\n', '#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".\n\n#In the end, return ""best""\n\ndef find_minimum(array):\n    best = array[0]\n    minimum = array[0]\n    for i in range(1, len(array)):\n        if array[i] < best:\n            best = array[i]\n        if array[i] < minimum:\n            minimum = array[i]\n    return best\n\nprint(find_minimum([1, 2, 3, 4, 5]))\nprint(find_minimum([1, 2, 3, 4, 5, 6]))', '#Print out ""best"".\nprint(""Best: %f using %s"" % (best_score, best_params))\n\n#Save the model.\njoblib.dump(best_estimator,\'model.pkl\')\n']"
90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","['#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.\ntarget = 10\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = []\n\n#Iterate through the nums list, and if the target is in the list, add it to the result list.\nfor num in nums:\n    if num == target:\n        result.append(num)\n\n#Print the result list.\nprint(result)\n', '#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.\n\ndef find_index(nums, target):\n    result = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            result.append(i)\n    return result\n\nprint(find_index([1,2,3,4,5], 2))\nprint(find_index([1,2,3,4,5], 5))\nprint(find_index([1,2,3,4,5], 6))\nprint(find_index([1,2,3,4,5], 7))\nprint(', '#Print out the sum of elements in ""result"".\nprint(sum(result))\n']"
91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","['#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 10\n\n#Print the sum of the first {N} numbers in the list ""nums"".\nprint(sum(nums[:N]))\n\n#Print the sum of the first {N} numbers in the list ""nums"" using a for loop.\nfor i in range(N):\n    print(sum(nums[:N]))\n\n#Print the sum of the first {N} numbers in the list ""nums""', '#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.\nall_nums = set(range(1, N+1))\n\n#Initialize a variable ""num_to_check"" which is the number to check.\nnum_to_check = 1\n\n#Initialize a variable ""num_to_check_set"" which is a set of numbers between 1 and N.\nnum_to_check_set = set(range(1, N+1))\n\n#Initialize a variable ""num_to_check_list"" which is a list of numbers between 1 and N.\nnum_to_check_list = list(', '#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""\ndiff = all_nums - set(nums)\n\n#Print the result\nprint(diff)\n', '#Pop the only element in ""diff"" print it out.\nprint(diff.pop())\n\n#Print the entire ""diff"" list.\nprint(diff)\n\n#Print the length of the ""diff"" list.\nprint(len(diff))\n\n#Print the first element of the ""diff"" list.\nprint(diff[0])\n\n#Print the last element of the ""diff"" list.\nprint(diff[-1])\n\n#Print the index of the first element of the ""diff"" list.\nprint(diff.index(1))\n\n#Print the index of the last element of the ""diff"" list.']"
92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","['#Assign {x} to a variable named ""X"".\nX = 10\n\n#Print the value of X.\nprint(X)\n\n#Assign {y} to a variable named ""Y"".\nY = 20\n\n#Print the value of Y.\nprint(Y)\n\n#Assign {z} to a variable named ""Z"".\nZ = 30\n\n#Print the value of Z.\nprint(Z)\n\n#Assign {w} to a variable named ""W"".\nW = 40\n\n#Print the value of W.\nprint(W)\n\n#Assign {x', '#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".\ncommon = set(X[0])\n\n#Iterate through each element in the second index of ""X"".\nfor i in range(1, len(X)):\n    #If the element in the second index of ""X"" is not in the first index of ""X"", then add it to the ""common"" set.\n    if X[i][0] not in common:\n        common.add(X[i][0])\n\n#Print the common elements of ""X"" to the screen.\nprint(common)\n\n#Print the number of common elements of ""X"" to the screen', '#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""\n\tfor i in range(len(X)):\n\t\tif X[i] in common:\n\t\t\tcommon.remove(X[i])\n\t\telse:\n\t\t\tcommon.add(X[i])\n\treturn common\n\n#Function to find the intersection of two sets\ndef intersection(X,Y):\n\tcommon = set()\n\tfor i in range(len(X)):\n\t\tif X[i] in Y:\n\t\t\tcommon.add(X[i])\n\treturn common\n\n#Function to find the union of two sets\ndef union(X,Y):', '#Cast ""common"" as a list and print it out.\nprint(common)\n\n#Cast ""common"" as a set and print it out.\nprint(set(common))\n\n#Cast ""common"" as a dict and print it out.\nprint(dict(common))\n\n#Cast ""common"" as a tuple and print it out.\nprint(tuple(common))\n\n#Cast ""common"" as a list and print it out.\nprint(list(common))\n\n#Cast ""common"" as a set and print it out.\nprint(set(common))\n\n#Cast ""common"" as a dict and print it']"
93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","['#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.\nstart = {start}\nseq = [start]\n\n#While the length of the list ""seq"" is greater than or equal to 2:\nwhile len(seq) >= 2:\n    #Initialize a variable ""middle"" with the middle element of the list ""seq"".\n    middle = seq[len(seq)//2]\n    #Initialize a variable ""left"" with the first element of the list ""seq"" that is not equal to the middle element.\n    left = [x for x in seq if x!= middle]\n    #Initialize a variable ""right"" with the last element of the list', '#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".\n#Repeat this process until the value is 1.\n#Return the sequence of numbers.\n\ndef even_odd(start):\n    seq = []\n    while start!= 1:\n        if start % 2 == 0:\n            start = start / 2\n        else:\n            start = start * 3 + 1\n        seq.append(start)\n    return seq\n\nprint(even_odd(10))\n', '#Store the sum of all numbers in ""seq"" to ""results"".\nresults = 0\nfor i in seq:\n    results += i\n\n#Print the sum of all numbers in ""seq"" to ""results"".\nprint(results)\n', '#Print out the ""results"".\nprint(results)\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string())\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(index=False))\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(float_format=""%.2f""))\n\n#Print out the ""results"" in a nice format.\nprint(results.to_string(float_format=""%.2f"", header=False))\n\n#Print out the ""']"
94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","['#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\npos = ""{start}""\n\n#Define a variable ""swap"" with ""{start}"", ""pos"" with {pos}.\nswap = ""{swap}""\n\n#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\npos = ""{start}""\n\n#Define a variable ""swap"" with ""{start}"", ""pos"" with {pos}.\nswap = ""{swap}""\n\n#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\npos = ""{start}""\n\n#Define a variable ""swap"" with ""{start}"", ""pos"" with {', '#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.\n#\n#For example, if x = ""abcdef"" and y = ""bcdef"", then your function should return ""ab"".\n#\n#If x = ""abcdef"" and y = ""bcdefg"", then your function should return ""abfg"".\n#\n#If x = ""abcdef"" and y = ""bcdefgh"", then your function should return ""abfgh"".\n#\n#If x = ""abcdef"" and y = ""bcdefghi"", then your function should return ""abfghi"".\n#\n#If x = ""abcdef"" and y = ""bcdef', '#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".\n#If it doesn\'t contain ""pos"", call ""move"" on the current element and store the result to ""pos"".\n#Return the array.\n#\n#Example:\n#\n#Input: [""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move"",""move', '#Print out ""pos"".\nprint(pos)\n\n#Print out ""neg"".\nprint(neg)\n\n#Print out ""pos_neg"".\nprint(pos_neg)\n\n#Print out ""pos_neg_neg"".\nprint(pos_neg_neg)\n\n#Print out ""pos_neg_neg_neg"".\nprint(pos_neg_neg_neg)\n\n#Print out ""pos_neg_neg_neg_neg"".\nprint(pos_neg_neg_neg_neg)\n\n#Print out ""pos_neg_neg_neg_neg_neg"".']"
95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","['#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.\nstack = []\nnum = """"\n\n#Loop through the string ""s"" and add each character to the stack.\nfor x in s:\n    stack.append(x)\n\n#Loop through the stack and print the top element of the stack.\nfor x in stack:\n    print(x)\n\n#Loop through the stack and print the top element of the stack.\nfor x in stack:\n    print(x)\n\n#Loop through the stack and print the top element of the stack.\nfor x in stack:\n    print(x)\n\n#Loop through the stack and', '#For each chracter in ""num"", append the character to ""stack"".\n#If the stack is empty, append the character to ""stack"" and set ""stack"" to an empty list.\n#If the stack is not empty, append the character to the top of the stack and set the stack to the new list.\n#Return the stack.\n#\n#Example 1:\n#\n#Input: num = ""123456789""\n#Output: [""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9""]\n#Explanation:\n#The characters in the string are ""1234567', '#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.\n#Repeat this process until ""stack"" is empty.\n#Return the result.\n\ndef reverse_string(stack):\n    result = """"\n    while stack:\n        result += stack.pop()\n    return result\n\n#Given a string, return a new string where the first and last characters have been exchanged.\n#For example, if the input string is ""Hello"", return ""olleH"".\n\ndef swap_string(string):\n    return string[1:-1] + string[0] + string[-1]\n\n#Given a string, return a new string where the first and', '#Cast ""result"" as integer and print it out.\nprint(result)\n']"
96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","['#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".\njoined_arrow = "" "".join(arrows)\n\n#Print the result of ""joined_arrow"" to the screen.\nprint(joined_arrow)\n\n#Create a variable ""joined_arrow"" and assign it the result of ""joined_arrow"" to a variable ""joined_arrow_2"".\njoined_arrow_2 = joined_arrow\n\n#Print the result of ""joined_arrow_2"" to the screen.\nprint(joined_arrow_2)\n\n#Create a variable ""joined_arrow"" and assign it the result of ""joined_arrow"" to a variable', '#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.\n\n#Note:\n#You may assume that you have an infinite number of rows of arrow-like shape and that you are given the number of rows of arrow-like shape.\n\n#Example 1:\n\n#Input: [[1,2,1],[3,2,1],[1,3,1],[2,4,1]]\n#Output: [""left"",""right"",""left"",""right""]\n#Explanation:\n#The first row is [1,2,1], the second row is [3,2,1], and the third row is [1,3,1],', '#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.\n#If ""left"" is larger than ""right"", print out the string that consists of (left - right) left-facing arrows.\n#If ""left"" and ""right"" are the same, print out the string that consists of 1 left-facing and 1 right-facing arrow.\n#Input Format\n#The first line contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains two lines. The first line contains an integer N denoting the number of nodes in the graph. The second line contains N space-separated integers denoting the values of', '#Otherwise, print out the string that consists of (left - right) left-facing arrows.\n\ndef print_left_facing_arrows(n):\n    if n == 1:\n        print(""1"")\n    else:\n        print(str(n) + "" "" + str(n - 1) + "" "" + str(n - 2) + "" "" + str(n - 3) + "" "" + str(n - 4))\n\nprint_left_facing_arrows(1)\nprint_left_facing_arrows(2)\nprint_left_facing_arrows(3)\nprint_left_facing_arrows(4)\nprint_left']"
97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","['#Initialize an array ""array"" with {x}.\narray = [x]\n\n#Loop through the array.\nfor i in range(len(array)):\n    #If the array element is even, add 2 to the array element.\n    if array[i] % 2 == 0:\n        array[i] += 2\n\n#Print the array.\nprint(array)\n', '#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".\n#If the difference is greater than 1, then the array is not sorted.\n#If the difference is less than 1, then the array is sorted.\n#If the difference is 0, then the array is sorted.\n#If the difference is -1, then the array is not sorted.\n#If the difference is -2, then the array is not sorted.\n#If the difference is -3, then the array is not sorted.\n#If the difference is -4, then the array is not sorted.\n#If the difference is -5, then the array is not', '#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\n\tresult = False\n\tfor i in range(len(array)):\n\t\tif array[i] == ""diff"":\n\t\t\tresult = True\n\t\t\tbreak\n\treturn result\n\n#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\ndef check_diff_in_array(array):\n\t#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\n\tresult = False\n\tfor i in range(len(array)):\n\t\tif array[i] == ""diff"":\n\t\t\tresult =', '#Print out ""result""\nprint(result)\n']"
98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","['#Initialize a variable ""original"" with ""{x}""\noriginal = ""{x}""\n\n#Initialize a variable ""new"" with ""{x}""\nnew = ""{x}""\n\n#Initialize a variable ""new2"" with ""{x}""\nnew2 = ""{x}""\n\n#Initialize a variable ""new3"" with ""{x}""\nnew3 = ""{x}""\n\n#Initialize a variable ""new4"" with ""{x}""\nnew4 = ""{x}""\n\n#Initialize a variable ""new5"" with ""{x}""\nnew5 = ""{x}""\n\n#Initialize a variable ""new6"" with ""{x}""\nnew6 = ""{', '#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.\ndic = OrderedDict()\n\n#Loop through the original string and add each letter to the dictionary.\nfor letter in original:\n    dic[letter] = dic.get(letter, 0) + 1\n\n#Print the dictionary.\nprint(dic)\n\n#Print the most common letter.\nprint(max(dic, key=dic.get))\n\n#Print the least common letter.\nprint(min(dic, key=dic.get))\n\n#Print the number of times each letter appears in the original string.\nprint(dic)\n\n#Print the number', '#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.\n#If the value is 0, then the character is not in the dictionary.\n#If the value is 1, then the character is in the dictionary.\n#Return the dictionary.\n\ndef count_char(original, dic):\n    for i in range(len(original)):\n        if original[i] in dic:\n            dic[original[i]] += 1\n        else:\n            dic[original[i]] = 1\n    return dic\n\n#Given a string, return a new string where all the vowels are removed.\n#For example, ""Hello"" yields ""ello', '#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".\nresult = """"\nfor key, value in dic.items():\n    result += key + "" "" + value + ""\\n""\n\n#Print the result to the screen.\nprint(result)\n', '#Print out ""result"".\nprint(result)\n']"
99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","['#Import re and define a regular expression that matches an email address.\nimport re\n\n#Import the email module.\nimport email\n\n#Import the smtplib module to send email.\nimport smtplib\n\n#Import the getpass module to get input from the user.\nimport getpass\n\n#Import the datetime module to get the current date and time.\nimport datetime\n\n#Import the os module to get the current working directory.\nimport os\n\n#Import the sys module to get the command line arguments.\nimport sys\n\n#Import the json module to convert the JSON data to a Python dictionary.\nimport json\n\n#Import the time module to get the current', '#Search for an email address in ""{x}"" and store the first match to a variable ""address"".\n#If no match is found, print ""No match found.""\n#If multiple matches are found, print the first match to the console.\n\n#Example:\n#Input:\n#  ""nnheo@example.com""\n#Output:\n#  ""nnheo@example.com""\n#Explanation:\n#  ""nnheo@example.com"" is the first email address in the list.\n\n#Input:\n#  ""efpyi@example.com""\n#Output:\n#  ""efpyi@example.com""\n#Explanation:\n#  ""efpyi@example.com', '#Remove the substring starting from the @ symbol from ""address"".\n#Return the new string.\ndef remove_substring(address):\n    return address[address.find(\'@\')+1:]\n\n#Remove the substring starting from the @ symbol from ""address"".\n#Return the new string.\ndef remove_substring_from_address(address):\n    return address[address.find(\'@\')+1:]\n\n#Remove the substring starting from the @ symbol from ""address"".\n#Return the new string.\ndef remove_substring_from_address_and_return_address(address):\n    return address[address.find(\'@\')+1:]\n\n#', '#Replace non-alphabetical symbols with a whitespace in ""address"".\naddress = address.replace("" "", """")\n\n#Split the address into a list of words.\naddress_words = address.split()\n\n#Print the first word of the address.\nprint(address_words[0])\n\n#Print the last word of the address.\nprint(address_words[-1])\n\n#Print the middle word of the address.\nprint(address_words[len(address_words)//2])\n\n#Print the first and last words of the address.\nprint(address_words[0:len(address_words)//2])', '#Print out ""address"".\nprint(address)\n\n#Print out ""city"".\nprint(city)\n\n#Print out ""state"".\nprint(state)\n\n#Print out ""zip"".\nprint(zip)\n\n#Print out ""country"".\nprint(country)\n\n#Print out ""phone"".\nprint(phone)\n\n#Print out ""email"".\nprint(email)\n\n#Print out ""website"".\nprint(website)\n\n#Print out ""facebook"".\nprint(facebook)\n\n#Print out ""twitter"".\nprint(twitter)\n\n#Print out ""']"
100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers ""{A}"".\nprint(my_numbers)\n\n#Print the length of the list ""{A}"".\nprint(len(my_numbers))\n\n#Print the first element of the list ""{A}"".\nprint(my_numbers[0])\n\n#Print the last element of the list ""{A}"".\nprint(my_numbers[-1])\n\n#Print the middle element of the', '#Implement a function that returns the distinct elements of a list.\n#\n#Example:\n#\n#Input: [1,2,3,4,5,6,7,8,9,10]\n#Output: [1,2,3,4,5,6,7,8,9,10]\n#\n#Note:\n#\n#The number of elements of the given list will be between 1 and 100,000.\n#Each element of the given list will be an integer between 1 and 100,000.\n\nclass Solution(object):\n    def distinct', '#Compute the distinct elements of my_numbers and store as unique_list.\nunique_list = list(set(my_numbers))\n\n#Print the unique elements of my_numbers.\nprint(unique_list)\n\n#Print the length of unique_list.\nprint(len(unique_list))\n\n#Print the first element of unique_list.\nprint(unique_list[0])\n\n#Print the last element of unique_list.\nprint(unique_list[-1])\n\n#Print the middle element of unique_list.\nprint(unique_list[len(unique_list)//2])\n\n#Print the average of', '#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.\n\ndef second_largest(unique_list):\n    if len(unique_list) == 0:\n        return 0\n    else:\n        second_largest = unique_list[0]\n        for i in range(1, len(unique_list)):\n            if unique_list[i] > second_largest:\n                second_largest = unique_list[i]\n        return second_largest\n\nprint(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(second_largest']"
101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers ""{A}"".\nprint(my_numbers)\n\n#Print the length of the list ""{A}"".\nprint(len(my_numbers))\n\n#Print the first element of the list ""{A}"".\nprint(my_numbers[0])\n\n#Print the last element of the list ""{A}"".\nprint(my_numbers[-1])\n\n#Print the middle element of the', '#Implement a function that returns the prefix sum of a list as an array.\n#\n#For example, given the list [1, 2, 3, 4, 5], the function should return [1, 3, 6, 10, 15].\n#\n#Hint: You can use the built-in sum() function.\n#\n#Hint: You can use the built-in map() function.\n#\n#Hint: You can use the built-in reduce() function.\n#\n#Hint: You can use the built-in filter() function.\n#\n#Hint: You can use the built-in reduce', '#Compute the prefix sum of my_numbers and store as prefix_sum_list.\nprefix_sum_list = []\nfor i in my_numbers:\n    prefix_sum_list.append(prefix_sum(i))\n\n#Print the prefix sum of my_numbers.\nprint(prefix_sum_list)\n\n#Print the prefix sum of my_numbers.\nprint(prefix_sum(my_numbers))\n\n#Print the prefix sum of my_numbers.\nprint(prefix_sum(my_numbers))\n\n#Print the prefix sum of my_numbers.\nprint(prefix_sum(my_numbers))\n\n#Print the prefix sum', '#Print out the largest element in prefix_sum_list. \n#If there are multiple largest elements, print the largest element first.\n\ndef largest_element(prefix_sum_list):\n    largest_element = 0\n    for i in range(len(prefix_sum_list)):\n        if prefix_sum_list[i] > largest_element:\n            largest_element = prefix_sum_list[i]\n    return largest_element\n\nprint(largest_element(prefix_sum_list))\n\n#Print out the smallest element in prefix_sum_list. \n#If there are multiple smallest elements, print the smallest element first.']"
102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Print the list of numbers ""{A}"".\nprint(my_numbers)\n\n#Print the length of the list ""{A}"".\nprint(len(my_numbers))\n\n#Print the first element of the list ""{A}"".\nprint(my_numbers[0])\n\n#Print the last element of the list ""{A}"".\nprint(my_numbers[-1])\n\n#Print the middle element of the', '#Count the distances from each element in my_number to 0...\n#If the distance is greater than 0, then the element is a prime number.\n#If the distance is less than 0, then the element is not a prime number.\n#If the distance is 0, then the element is neither prime nor a prime number.\n#For example, if my_number is 123456789, then the prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 3', '#Find the closest number to 0 in my_number and store as closest_number.\nclosest_number = 0\nfor i in range(1, 1000000):\n    if abs(my_number - i) < abs(my_number - closest_number):\n        closest_number = i\n\n#Print the closest number.\nprint(closest_number)\n', '#Print out the distance from closest_number to 0. \n#If the distance is less than 10, print ""Too Close""\n#If the distance is less than 100, print ""Too Close""\n#If the distance is less than 1000, print ""Too Close""\n#If the distance is less than 10000, print ""Too Close""\n#If the distance is less than 100000, print ""Too Close""\n#If the distance is less than 1000000, print ""Too Close""\n#If the distance is less than 10']"
103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{B}"" to a variable named ""my_string"".\nmy_string = ""B""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{C}"" to a variable named ""my_string"".\nmy_string = ""C""\n\n#Print the value of my_string.\nprint(my_string)\n\n#Assign the string ""{D}"" to a variable named ""', '#Implement a function that checks whether a string only contains unique characters.\n#\n#Example:\n#\n#Input: ""abracadabra""\n#Output: True\n#Explanation:\n#The only unique characters are \'r\', \'a\', and \'d\'.\n#Note that \'r\' and \'a\' are considered unique.\n#\n#Input: ""careracat""\n#Output: False\n#Explanation:\n#\'c\' and \'r\' are considered different characters.\n#Note that \'c\' and \'r\' are considered unique.\n#\n#Input: ""a""\n#Output: True\n#Explanation:', '#Find the longest substring of my_string that contains only unique characters and store as result_substring.\n#If there are multiple substrings that contain only unique characters, return the longest one.\n#If there are no substrings that contain only unique characters, return an empty string.\n#Input: my_string = ""abcabcbb""\n#Output: ""abc""\n#Explanation: The answer is ""abc"", because it is the longest substring with unique characters.\n#Input: my_string = ""bbbbb""\n#Output: ""b""\n#Explanation: The answer is ""b"", because it is the longest substring with unique characters.\n#Input: my_string = ""pww', '#Print out the length of result_substring.\nprint(len(result_substring))\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)\n\n#Print out the result_substring.\nprint(result_substring)']"
104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","['#Assign a string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\n#Assign a string ""{B}"" to a variable named ""my_string"".\nmy_string = ""B""\n\n#Assign a string ""{C}"" to a variable named ""my_string"".\nmy_string = ""C""\n\n#Assign a string ""{D}"" to a variable named ""my_string"".\nmy_string = ""D""\n\n#Assign a string ""{E}"" to a variable named ""my_string"".\nmy_string = ""E""\n\n#Assign a string ""{F}"" to a variable named ""my_', '#Find the repeated characters in the my_string.\n\nmy_string = ""This is a test string""\n\nrepeated_chars = []\n\nfor char in my_string:\n    if char in repeated_chars:\n        repeated_chars.append(char)\n    else:\n        repeated_chars.append(char)\n\nprint(repeated_chars)\n\n#Find the repeated characters in the my_string.\n\nmy_string = ""This is a test string""\n\nrepeated_chars = []\n\nfor char in my_string:\n    if char in repeated_chars:\n        repeated_chars.append(char)\n    else:', '#Count the frequency of these repeated characters.\n\ndef count_repeated_chars(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\nprint(count_repeated_chars(""abcabcabc""))\n\n#Write a function that takes a string and returns a list of all the words in the string.\n\ndef get_words(string):\n    words = []\n    for word in string.split():\n        if word not in words:\n            words.append(word)\n    return words\n\nprint(get', '#Print out the length of most frequent character.\nprint(max(char_freq.items(), key=operator.itemgetter(1))[0])\n']"
105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","['#Assign a string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\n#Assign a string ""{B}"" to a variable named ""my_string"".\nmy_string = ""B""\n\n#Assign a string ""{C}"" to a variable named ""my_string"".\nmy_string = ""C""\n\n#Assign a string ""{D}"" to a variable named ""my_string"".\nmy_string = ""D""\n\n#Assign a string ""{E}"" to a variable named ""my_string"".\nmy_string = ""E""\n\n#Assign a string ""{F}"" to a variable named ""my_', '#Implement a function that checks whether a string is a palindrome.\n#\n#Example:\n#\n#Input: ""A man, a plan, a canal: Panama""\n#Output: true\n#\n#Input: ""race a car""\n#Output: false\n#\n#Note:\n#You may assume the string contains only lowercase letters.\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        """"""\n        :type s: str\n        :rtype: bool\n        """"""\n        if not s:\n            return True\n        s = s.lower()\n        left, right = 0, len(s) - 1\n        while', '#Find all substrings of my_string which is a palindrome and store as a list.\n#If the list is empty, print ""No palindromes found""\n#If the list is not empty, print the first element of the list\n\nmy_string = ""This is a palindrome""\n\npalindromes = []\n\nfor i in range(len(my_string)):\n    for j in range(len(my_string)):\n        if my_string[i:j+1] == my_string[j:i+1]:\n            palindromes.append(my_string[i:j+1])\n\nif len(palindrom', '#Print out the length of longest palindrome in the above list.\n\ndef longestPalindrome(s):\n    longest = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                if len(s[i:j+1]) > longest:\n                    longest = len(s[i:j+1])\n    return longest\n\nprint(longestPalindrome(""babad""))\nprint(longestPalindrome(""cbbd""))\nprint(longestPalindrome(""a""))\nprint(longestPalindrome(""ab""))\nprint(longestPalindrome']"
106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","['#Assign an integer ""{A}"" to a variable named ""my_integer"".\nmy_integer = 10\n\n#Assign a string ""{B}"" to a variable named ""my_string"".\nmy_string = ""Hello World!""\n\n#Assign a float ""{C}"" to a variable named ""my_float"".\nmy_float = 10.5\n\n#Assign a boolean ""{D}"" to a variable named ""my_boolean"".\nmy_boolean = True\n\n#Assign a list ""{E}"" to a variable named ""my_list"".\nmy_list = [1, 2, 3]\n\n#Assign a dictionary ""{F}""', '#Implement a function that checks whether an integer is a prime number.\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(10))\nprint(is_prime(11))\nprint(is_prime(12))\nprint(is_prime(13))\nprint(is_prime(14', '#Find all prime numbers that are less than my_integer and store as prime_result.\n#Print the prime numbers in a list.\n\nmy_integer = 100\nprime_result = []\n\nfor i in range(2, my_integer):\n    if my_integer % i == 0:\n        prime_result.append(i)\n\nprint(prime_result)\n', '#Print out the length of prime_result.\nprint(len(prime_result))\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)\n\n#Print out the prime_result.\nprint(prime_result)']"
107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\n#Print the length of the array.\nprint(len(my_array))\n\n#Print the first element of the array.\nprint(my_array[0])\n\n#Print the last element of the array.\nprint(my_array[-1])\n\n#Print the middle element of the array.\nprint(my_array[2])\n\n#Print the element at index 3.\nprint(my_array[3])\n\n#Print the element at index', '#Assign a positive integer ""{K}"" to a variable named ""k"".\nk = 10\n\n#Print the value of ""k"".\nprint(k)\n\n#Print the value of ""k"" using a string.\nprint(f""The value of k is {k}."")\n\n#Print the value of ""k"" using a string.\nprint(f""The value of k is {k}!"")\n\n#Print the value of ""k"" using a string.\nprint(f""The value of k is {k}!"")\n\n#Print the value of ""k"" using a string.\nprint(f""The value of k is', '#Implement a function that rotates one array to the right by 1 step.\n#\n#Example:\n#\n#Input: [1,2,3,4,5,6,7]\n#Output: [5,6,7,1,2,3,4]\n#Explanation:\n#rotate 1 steps to the right: [7,1,2,3,4,5,6]\n#rotate 2 steps to the right: [6,7,1,2,3,4,5]\n#rotate 3 steps to the right: [5,6,7,1,2,3,4]\n#rotate', '#Rotate my_array k steps and store as rotated_result.\nrotated_result = my_array.rotate(k)\n\n#Print the rotated_result.\nprint(rotated_result)\n\n#Print the original_array.\nprint(original_array)\n\n#Print the rotated_array.\nprint(rotated_array)\n\n#Print the rotated_result.\nprint(rotated_result)\n\n#Print the original_array.\nprint(original_array)\n\n#Print the rotated_array.\nprint(rotated_array)\n\n#Print the rotated_result.\nprint(rotated_result)\n\n#', ""#Print out rotated_result.txt\nwith open('rotated_result.txt', 'w') as f:\n    for line in rotated_result:\n        f.write(line)\n""]"
108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\n#Print the length of the array.\nprint(len(my_array))\n\n#Print the first element of the array.\nprint(my_array[0])\n\n#Print the last element of the array.\nprint(my_array[-1])\n\n#Print the middle element of the array.\nprint(my_array[2])\n\n#Print the element at index 3.\nprint(my_array[3])\n\n#Print the element at index', '#Compute the sum of my_array and store as my_sum.\nmy_sum = sum(my_array)\n\n#Print the sum of my_array.\nprint(""The sum of my_array is: "" + str(my_sum))\n\n#Print the type of my_array.\nprint(""The type of my_array is: "" + str(type(my_array)))\n\n#Print the type of my_array[0].\nprint(""The type of my_array[0] is: "" + str(type(my_array[0])))\n\n#Print the type of my_array[1].\nprint(""', '#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.\n#\n#For example, given the array {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32', '#Print out the function output when the above array is my_array.\nprint(my_array)\n\n#Print out the function output when the above array is my_array.\nprint(my_array)\n\n#Print out the function output when the above array is my_array.\nprint(my_array)\n\n#Print out the function output when the above array is my_array.\nprint(my_array)\n\n#Print out the function output when the above array is my_array.\nprint(my_array)\n\n#Print out the function output when the above array is my_array.\nprint(my_array)']"
109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{B}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{C}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number', '#Compute the square root of my_number and store as root_number.\nroot_number = math.sqrt(my_number)\n\n#Print the square root of my_number.\nprint(""The square root of"", my_number, ""is"", root_number)\n\n#Print the square root of 100.\nprint(""The square root of 100 is"", math.sqrt(100))\n\n#Print the square root of 1000.\nprint(""The square root of 1000 is"", math.sqrt(1000))\n\n#Print the square root of 1000', '#Implement a function that only returns the integer part of a float number.\n\ndef int_part(number):\n    return int(number)\n\nprint(int_part(1.5))\nprint(int_part(1.50))\nprint(int_part(1.500))\nprint(int_part(1.5000))\nprint(int_part(1.50000))\nprint(int_part(1.500000))\nprint(int_part(1.5000000))\nprint(int_part(1.50000', '#Print out the integer part of root_number.\nprint(root_number)\n\n#Print out the fractional part of root_number.\nprint(root_number - int(root_number))\n']"
110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{B}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{C}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number', '#Plus my_number by 1 and store as plus_number.\nplus_number = my_number + 1\n\n#Print the value of plus_number.\nprint(plus_number)\n\n#Create a variable called my_number and assign it a value of 10.\nmy_number = 10\n\n#Print the value of my_number.\nprint(my_number)\n\n#Create a variable called my_number and assign it a value of 10.\nmy_number = 10\n\n#Print the value of my_number.\nprint(my_number)\n\n#Create a variable called', '#Implement a function that only returns the digits of an integer as a list.\n\ndef digits(n):\n    return [int(i) for i in str(n)]\n\nprint(digits(123456789))\nprint(digits(1234567890))\nprint(digits(12345678901))\nprint(digits(123456789012))\nprint(digits(1234567890123))\nprint(digits(12345678901234))', '#Print out the digits of plus_number.\nprint(plus_number)\n\n#Print out the digits of minus_number.\nprint(minus_number)\n\n#Print out the digits of product_number.\nprint(product_number)\n\n#Print out the digits of quotient_number.\nprint(quotient_number)\n\n#Print out the digits of remainder_number.\nprint(remainder_number)\n\n#Print out the digits of power_number.\nprint(power_number)\n\n#Print out the digits of factorial_number.\nprint(factorial_number)\n\n#Print out']"
111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{B}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number)\n\n#Assign a non-negative integer ""{C}"" to a variable named ""my_number"".\nmy_number = 10\n\n#Print the value of the variable ""my_number"".\nprint(my_number', '#Implement a function that computes the square sum of two integers.\n\ndef square_sum(a, b):\n    return a**2 + b**2\n\nprint(square_sum(1, 2))\nprint(square_sum(2, 3))\nprint(square_sum(3, 4))\nprint(square_sum(4, 5))\nprint(square_sum(5, 6))\nprint(square_sum(6, 7))\nprint(square_sum(7, 8))\nprint(square_sum(8, 9))\nprint(square_sum(9, 1', '#Implement a function that checks one number is the sum of two square numbers.\n\ndef square_sum(num):\n    return num**2\n\ndef square_sum_2(num):\n    return num**2 + num\n\ndef square_sum_3(num):\n    return num**2 + num + num\n\ndef square_sum_4(num):\n    return num**2 + num + num + num\n\ndef square_sum_5(num):\n    return num**2 + num + num + num + num\n\ndef square_sum_6(num):\n    return num**2 + num + num + num + num + num\n\ndef square', '#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".\n\nmy_number = 10\n\nif my_number % 2 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\n#Print out ""True"" if my_number is the sum of three square numbers. Otherwise, print ""False"".\n\nmy_number = 10\n\nif my_number % 3 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\n#Print out ""True"" if my_number is the sum of four square numbers. Otherwise, print ""False"".\n\nmy_number =']"
112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\n#Print the length of the array.\nprint(len(my_array))\n\n#Print the first element of the array.\nprint(my_array[0])\n\n#Print the last element of the array.\nprint(my_array[-1])\n\n#Print the middle element of the array.\nprint(my_array[2])\n\n#Print the element at index 3.\nprint(my_array[3])\n\n#Print the element at index', '#Implement a function that computes standard deviation of an array.\n\ndef standard_deviation(array):\n    return np.std(array)\n\n#Implement a function that computes the mean of an array.\n\ndef mean(array):\n    return np.mean(array)\n\n#Implement a function that computes the median of an array.\n\ndef median(array):\n    return np.median(array)\n\n#Implement a function that computes the mode of an array.\n\ndef mode(array):\n    return np.mode(array)\n\n#Implement a function that computes the skewness of an array.\n\ndef skewness(array):', '#Calculate the standard deviation of my_array and store as result.\nresult = np.std(my_array)\nprint(result)\n\n#Calculate the mean of my_array and store as result.\nresult = np.mean(my_array)\nprint(result)\n\n#Calculate the median of my_array and store as result.\nresult = np.median(my_array)\nprint(result)\n\n#Calculate the mode of my_array and store as result.\nresult = np.mode(my_array)\nprint(result)\n\n#Calculate the sum of my_array and store as result.\nresult = np', '#Print out ""True"" if result is less than 1. Otherwise, print ""False"".\nprint(result < 1)\n\n#Print out ""True"" if result is greater than 1. Otherwise, print ""False"".\nprint(result > 1)\n\n#Print out ""True"" if result is equal to 1. Otherwise, print ""False"".\nprint(result == 1)\n\n#Print out ""True"" if result is not equal to 1. Otherwise, print ""False"".\nprint(result!= 1)\n\n#Print out ""True"" if result is less than or equal to 1. Otherwise, print ""False"".\nprint(result']"
113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\n#Print the matrix ""{my_matrix}"".\nprint(my_matrix)\n\n#Print the shape of the matrix ""{my_matrix}"".\nprint(my_matrix.shape)\n\n#Print the size of the matrix ""{my_matrix}"".\nprint(my_matrix.size)\n\n#Print the type of the matrix ""{my_matrix}"".\nprint(my_matrix.dtype)\n\n#Print the number of rows of the matrix ""{my_matrix}"".\nprint(my_matrix.shape[0])\n\n#Print the number of columns', '#Calculate the number of rows of my_matrix and store as row_number.\nrow_number = len(my_matrix)\n\n#Calculate the number of columns of my_matrix and store as column_number.\ncolumn_number = len(my_matrix[0])\n\n#Create a list to store the sum of each row.\nrow_sum = []\n\n#Create a list to store the sum of each column.\ncolumn_sum = []\n\n#Create a list to store the sum of each diagonal.\ndiagonal_sum = []\n\n#Create a list to store the sum of each anti-diagonal.\nanti_diagonal_sum = []', '#Calculate the number of columns of my_matrix and store as column_number.\ncolumn_number = len(my_matrix[0])\n\n#Print the number of columns of my_matrix.\nprint(column_number)\n\n#Print the first row of my_matrix.\nprint(my_matrix[0])\n\n#Print the last row of my_matrix.\nprint(my_matrix[-1])\n\n#Print the first column of my_matrix.\nprint(my_matrix[0][0])\n\n#Print the last column of my_matrix.\nprint(my_matrix[-1][-1])\n\n#Print the first and', '#Calculate the sum of row_number and column_number and print the result.\nprint(sum(row_number) + sum(column_number))\n']"
114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","['#Assign the array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\n#Print the array.\nprint(my_array)\n\n#Print the length of the array.\nprint(len(my_array))\n\n#Print the first element of the array.\nprint(my_array[0])\n\n#Print the last element of the array.\nprint(my_array[-1])\n\n#Print the element at index 2.\nprint(my_array[2])\n\n#Print the element at index 3.\nprint(my', '#Calculate the mean of my_array and store as mean_number.\nmean_number = np.mean(my_array)\n\n#Print the mean_number.\nprint(mean_number)\n\n#Calculate the standard deviation of my_array and store as standard_deviation_number.\nstandard_deviation_number = np.std(my_array)\n\n#Print the standard_deviation_number.\nprint(standard_deviation_number)\n\n#Calculate the median of my_array and store as median_number.\nmedian_number = np.median(my_array)\n\n#Print the median_number.\nprint(median_', '#Calculate the median of my_array and store as median_number.\nmedian_number = np.median(my_array)\n\n#Print the median number.\nprint(median_number)\n\n#Create a new array with the same shape as my_array, but with the median number removed.\nmy_array_no_median = np.delete(my_array, np.where(my_array == median_number))\n\n#Print the new array.\nprint(my_array_no_median)\n\n#Create a new array with the same shape as my_array, but with the median number removed.\nmy_array_no', '#Calculate the difference between mean_number and median_number and print the result.\nmean_number = np.mean(numbers)\nmedian_number = np.median(numbers)\nprint(mean_number - median_number)\n\n#Calculate the difference between the mean_number and the mode_number and print the result.\nmean_number = np.mean(numbers)\nmode_number = np.mode(numbers)\nprint(mean_number - mode_number)\n\n#Calculate the difference between the mean_number and the standard deviation_number and print the result.\nmean_number = np.mean(numbers)\nstandard_deviation_number = np']"
