,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code
0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\nprint(my_string)\n\nmy_string = ""B""\n\nprint(my_string)\n\nmy_string = ""C""\n\nprint(my_string)\n\nmy_string = ""D""\n\nprint(my_string)\n\nmy_string = ""E""\n\nprint(my_string)\n\nmy_string = ""F""\n\nprint(my_string)\n\nmy_string = ""G""\n\nprint(my_string)\n\nmy_string = ""H""', '#Lowercase the given string ""my_string"".\ndef lowercase(my_string):\n    return my_string.lower()\n\nprint(lowercase(""my_string""))\n\nprint(lowercase(""my_string_with_underscores""))\n\nprint(lowercase(""my_string_with_underscores_and_hyphens""))\n\nprint(lowercase(""my_string_with_hyphens""))\n\nprint(lowercase(""my_string_with_hyphens_and_underscores""))\n\nprint(lowercase(""my_string_with_hyphens_and_underscores_and_hyphens""))\n\nprint(lowercase(""my', '#Assign the distinct characters of the string to a variable named ""chars"".\nchars = string.ascii_lowercase\n\nprint(chars)\n\nprint(chars[0])\n\nprint(chars[-1])\n\nprint(chars[1:3])\n\nprint(chars[1:])\n\nprint(chars[:3])\n\nprint(chars[1:3:2])\n\nprint(chars[::2])\n\nprint(chars[::-1])\n\nprint(chars[1::2])\n\nprint(chars[::-2])\n\nprint(chars[1::-2])\n\nprint(chars[::-3])\n\nprint(chars[1::-', ""#Sort these characters in alphabetical order.\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] > s[j]:\n\t\t\t\ts[i], s[j] = s[j], s[i]\n\treturn ''.join(s)\n\ndef main():\n\ts = input()\n\tprint(sort_string(s))\n\nif __name__ == '__main__':\n\tmain()"", '#Print the resulting list of characters.\nprint(characters)\n\nprint(""The number of characters in the list is: "" + str(len(characters)))\n\nprint(""The first character in the list is: "" + characters[0])\n\nprint(""The last character in the list is: "" + characters[-1])\n\nprint(""The middle character in the list is: "" + characters[len(characters)//2])\n\nprint(""The character at the index 3 in the list is: "" + characters[3])\n\nprint(""The character at the index 10 in the list is: "" + characters[1']"
1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","['#Define a list of integers named ""numbers"" with the values {numbers}.\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(numbers)\n\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\nprint(numbers[3])\nprint(numbers[4])\nprint(numbers[5])\nprint(numbers[6])\nprint(numbers[7])\nprint(numbers[8])\nprint(numbers[9])\nprint(numbers[10])\n\nprint(numbers[0:1', '#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".\ntotal = sum(numbers)\n\nprint(""The sum of the elements in variable \\""numbers\\"" is: "" + str(total))\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")', '#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".\nnormalized = [x/sum(list) * 100 for x in list]\n\nprint(normalized)\n\nprint(sum(list))\n\nprint(max(list))\n\nprint(min(list))\n\nprint(sum(list)/len(list))\n\nprint(sum(list)/len(list)*100)\n\nprint(sum(list)/len(list)*100/sum(list))\n\nprint(sum(list)/len(list)*100/sum(list)/len(list))\n\nprint(sum(', '#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".\nformatted = """"\nfor i in range(len(normalized)):\n    formatted += str(normalized[i]) + "",""\n\nprint(formatted)\n', '#Print the variable ""formatted"".\nprint(formatted)\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable \'formatted\' is a string."")\n\nprint(""The variable']"
2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","['#Write a function that takes an integer minutes and converts it to seconds.\n\ndef minutes_to_seconds(minutes):\n    return minutes * 60\n\nprint(minutes_to_seconds(10))\n\ndef minutes_to_seconds(minutes):\n    return minutes * 60\n\nprint(minutes_to_seconds(10))\n\ndef minutes_to_seconds(minutes):\n    return minutes * 60\n\nprint(minutes_to_seconds(10))\n\ndef minutes_to_seconds(minutes):\n    return minutes * 60\n\nprint(minutes_to_seconds(10))\n\ndef minutes', '#Write a function that takes an integer hours and converts it to seconds.\n\ndef convert_hours_to_seconds(hours):\n    return hours * 3600\n\nprint(convert_hours_to_seconds(1))\nprint(convert_hours_to_seconds(2))\nprint(convert_hours_to_seconds(3))\nprint(convert_hours_to_seconds(4))\nprint(convert_hours_to_seconds(5))\nprint(convert_hours_to_seconds(6))\nprint(convert_hours_to_seconds(7))\nprint(convert_hours_to_seconds(8))', '#Print the total seconds of {a1} hours and {a2} minutes.\nprint(f""{a1} hours and {a2} minutes"")\n\nprint(f""The total seconds of {a1} hours and {a2} minutes is {total_seconds}"")\n\nprint(f""The total seconds of {a1} hours and {a2} minutes is {total_seconds} seconds"")\n\nprint(f""The total seconds of {a1} hours and {a2} minutes is {total_seconds} seconds."")\n\nprint(f""The total seconds of {a1} hours and {a2} minutes is {total_seconds}']"
3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","['#Implement a function which returns the n-th Fibonacci number.\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5))\n', '#Implement a function that computes the square of an integer argument.\n\ndef square(x):\n    return x * x\n\nprint(square(5))\n\ndef square_2(x):\n    return x * x\n\nprint(square_2(5))\n\ndef square_3(x):\n    return x * x\n\nprint(square_3(5))\n\ndef square_4(x):\n    return x * x\n\nprint(square_4(5))\n\ndef square_5(x):\n    return x * x\n\nprint(square_5(5))\n\ndef square_6(x):\n    return x', '#Print out the square of {a1}-th Fibonacci number.\nprint(fibonacci(a1))\n\na2 = 10\nprint(fibonacci(a2))\n\na3 = 100\nprint(fibonacci(a3))\n\na4 = 1000\nprint(fibonacci(a4))\n\na5 = 10000\nprint(fibonacci(a5))\n\na6 = 100000\nprint(fibonacci(a6))\n\na7 = 1000000\nprint(fibonacci(a7))']"
4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Count the number of negative numbers in the list as ""n_neg"".\nn_neg = 0\nfor i in range(len(list_of_numbers)):\n    if list_of_numbers[i] < 0:\n        n_neg += 1\n\nprint(""The number of negative numbers in the list is: "", n_neg)\n\nprint(""The list of numbers is: "", list_of_numbers)\n\nprint(""The sum of the numbers in the list is: "", sum(list_of_numbers))\n\nprint(""The average of the numbers in the list is: "", sum(list_of_numbers) / len(list', '#Count the number of positive numbers in the list as ""n_pos"".\nn_pos = len([x for x in list_of_numbers if x > 0])\nprint(n_pos)\n\n##Count the number of negative numbers in the list as ""n_neg"".\nn_neg = len([x for x in list_of_numbers if x < 0])\nprint(n_neg)\n\n##Count the number of zeroes in the list as ""n_zeroes"".\nn_zeroes = len([x for x in list_of_numbers if x == 0])\nprint(n_zeroes)', '#Print out the larger number of those two.\nprint(max(a,b))\n']"
5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","['#Import the pandas library.\nimport pandas as pd\n\n##Import the numpy library.\nimport numpy as np\n\n##Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n##Import the seaborn library.\nimport seaborn as sns\n\n##Import the statsmodels library.\nimport statsmodels.api as sm\n\n##Import the statsmodels.formula.api as smf\n\n##Import the statsmodels.tsa.api as smt\n\n##Import the statsmodels.tsa.stattools as smts\n\n##Import the statsmodels.tsa.stattools.stattools as smtst', '#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].\ndf = pd.DataFrame({\'Yes\': [a1, a2], \'No\': [a3, a4]})\n\nprint(df)\n\nprint(df.head())\n\nprint(df.tail())\n\nprint(df.describe())\n\nprint(df.shape)\n\nprint(df.info())\n\nprint(df.isnull().sum())\n\nprint(df.isnull().sum().sum())\n\nprint(df.isnull().sum().sum()/df.shape[0])\n\nprint(df.isnull().sum().sum()/df.shape[', '#Compute the mean per column and store the value in a variable named means.\nmeans = df.mean(axis=0)\n\nprint(means)\n\nprint(means.mean())\n\nprint(means.mean(axis=0))\n\nprint(means.mean(axis=1))\n\nprint(means.mean(axis=1).mean())\n\nprint(means.mean(axis=1).mean(axis=0))\n\nprint(means.mean(axis=1).mean(axis=0).mean())\n\nprint(means.mean(axis=1).mean(axis=0).mean(axis=0))\n\nprint', '#Print the variable means.\nprint(means)\n\n##Print the variable stds.\nprint(stds)\n\n##Print the variable variances.\nprint(variances)\n\n##Print the variable skews.\nprint(skews)\n\n##Print the variable kurtosis.\nprint(kurtosis)\n\n##Print the variable entropy.\nprint(entropy)\n\n##Print the variable entropy.\nprint(entropy)\n\n##Print the variable entropy.\nprint(entropy)\n\n##Print the variable entropy.\nprint(entropy)\n\n##Print the variable entropy.']"
6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","['#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".\n\ndef fizzbuzz(a1, a2):\n    for i in range(a1, a2+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(""fizzbuzz"")\n        elif i % 3 == 0:\n            print(""fizz"")\n        elif i % 5 == 0:\n            print(""buzz"")\n        else:\n            print(i)\n\nfizzbuzz(1, 100)\n', '#Create a list of integers ranging from {a3} to {a4}.\na3 = 1\na4 = 10\na5 = 100\na6 = 1000\na7 = 10000\na8 = 100000\na9 = 1000000\na10 = 10000000\na11 = 100000000\na12 = 1000000000\na13 = 10000000000\na1', '#Call the written function for each element in the list and store the result as ""new_list"".\nnew_list = [written(x) for x in list]\n\nprint(new_list)\n\n\'\'\'\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27', '#Print out the list ""new_list"".\nprint(new_list)\n\nprint(""The list is now sorted."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")\n\nprint(""The list is now reversed."")']"
7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","[""#Write a function that can take a string and return a list of word bigrams as pairs.\n\ndef bigrams(s):\n    return [s[i:i+2] for i in range(len(s)-1)]\n\nprint(bigrams('hello'))\n\ndef bigrams(s):\n    return [s[i:i+2] for i in range(len(s)-1)]\n\nprint(bigrams('hello'))\n\ndef bigrams(s):\n    return [s[i:i+2] for i in range(len(s)-1)]\n\nprint(bigrams('hello'))\n\ndef bigrams(s):\n    return ["", '#Assign the string ""{a1}"" to a variable named sentence.\nsentence = ""Hello World!""\n\nprint(sentence)\n\nprint(sentence[0])\n\nprint(sentence[1])\n\nprint(sentence[2])\n\nprint(sentence[3])\n\nprint(sentence[4])\n\nprint(sentence[5])\n\nprint(sentence[6])\n\nprint(sentence[7])\n\nprint(sentence[8])\n\nprint(sentence[9])\n\nprint(sentence[10])\n\nprint(sentence[11])\n\nprint(sentence[12])\n\nprint(sentence[13', '#Print out the bi-grams for the variable named sentence.\nprint(sentence)\n\nprint(""Bi-grams for the variable named sentence:"")\nfor i in range(len(sentence)-1):\n    print(sentence[i], "" "", sentence[i+1])\n\nprint(""Bi-grams for the variable named sentence:"")\nfor i in range(len(sentence)-2):\n    print(sentence[i], "" "", sentence[i+1], "" "", sentence[i+2])\n\nprint(""Bi-grams for the variable named sentence:"")\nfor i in range(len(sentence)-3):\n    print(sentence[i], "" "", sentence']"
8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","['#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".\nmy_notes = {\n    ""Kevin"": [a1, a2, a3, a4],\n    ""John"": [a1, a2, a3, a4],\n    ""Mike"": [a1, a2, a3, a4],\n    ""Mitch"": [a1, a2, a3, a4]\n}\n\nprint(my_notes)\n\nprint(my_notes[""Kevin""])\n\nprint(my_notes[""John""])\n\nprint(my_notes[""Mike""])\n\nprint(my_notes[""M', '#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\ndef top_note(dictionary):\n    return {k: v[0] for k, v in dictionary.items()}\n\nprint(top_note({""name"": ""John"", ""notes"": [3, 5, 4]}))\n\n##Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""bottom_note"": 4 }}.\n\ndef bottom_note(dictionary):\n    return {k: v[-1] for', '#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".\nmy_list = []\nfor name in dictionary:\n    top_note = dictionary[name]\n    my_list.append((name, top_note))\n\nmy_list.sort(key=lambda x: x[1], reverse=True)\n\nprint(my_list)\n\nprint(""The top 10 names with the highest notes are:"")\nfor i in range(10):\n    print(my_list[i][0])\n', '#Find the name with the highest top_note and assign it to ""top_name"".\ntop_name = """"\nfor name in names:\n    if name.top_note > top_note:\n        top_note = name.top_note\n        top_name = name.name\n\nprint(top_name)\n', '#Print the variable top_name.\nprint(top_name)\n\nprint(""The top 3 names are: "")\n\nfor i in range(3):\n    print(top_name[i])\n\nprint(""The top 3 names are: "")\n\nfor i in range(3):\n    print(top_name[i])\n\nprint(""The top 3 names are: "")\n\nfor i in range(3):\n    print(top_name[i])\n\nprint(""The top 3 names are: "")\n\nfor i in range(3):\n    print(top_name[i])']"
9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","['#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".\ndef to_binary(hex_number):\n    binary_number = """"\n    while hex_number > 0:\n        binary_number = str(hex_number % 2) + binary_number\n        hex_number = hex_number // 2\n    return binary_number\n\ndef to_hex(binary_number):\n    hex_number = 0\n    for i in range(len(binary_number)):\n        hex_number += int(binary_number[i]) * (2 ** i)\n    return hex_number\n\ndef to_decimal(binary_number):\n    decimal_number', '#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.\ndef to_hex(s):\n    return int(s, 2)\n\ndef main():\n    #Create a list of the input numbers.\n    numbers = [int(x) for x in input().split()]\n\n    #Create a list of the output numbers.\n    output = []\n\n    #Create a list of the output HEX numbers.\n    output_hex = []\n\n    #Create a list of the output binary numbers.\n    output_bin = []\n\n    #Create a list of the output decimal numbers.\n    output_dec = []\n\n    #Create a list of the output octal numbers.\n    output_', '#Assign the value {a1} to a variable named ""my_hex"".\nmy_hex = a1\n\nprint(my_hex)\n\nprint(type(my_hex))\n\nprint(my_hex.upper())\n\nprint(my_hex.lower())\n\nprint(my_hex.capitalize())\n\nprint(my_hex.title())\n\nprint(my_hex.swapcase())\n\nprint(my_hex.isalnum())\n\nprint(my_hex.isalpha())\n\nprint(my_hex.isdigit())\n\nprint(my_hex.isspace())\n\nprint(my_hex.', '#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".\nmy_binary = my_hex.to_binary()\n\nprint(my_binary)\n\nprint(my_binary.to_hex())\n\nprint(my_binary.to_octal())\n\nprint(my_binary.to_decimal())\n\nprint(my_binary.to_base64())\n\nprint(my_binary.to_base16())\n\nprint(my_binary.to_base32())\n\nprint(my_binary.to_base64url())\n\nprint(my_binary.to_base16', '#Convert ""my_binary"" back to a HEX number named ""result"".\nresult = int(my_binary, 2)\n\nprint(result)\n', '#Print the result.\nprint(result)\n']"
10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","['#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\nmy_dict = {a1: a2}\n\nprint(my_dict)\n\nprint(my_dict[""a1""])\n\nprint(my_dict[""a2""])\n\nprint(my_dict[""a3""])\n\nprint(my_dict[""a4""])\n\nprint(my_dict[""a5""])\n\nprint(my_dict[""a6""])\n\nprint(my_dict[""a7""])\n\nprint(my_dict[""a8""])\n\nprint(my_dict[""a9""])\n\nprint(my_dict[""a', '#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.\n\ndef invert(d):\n    return {v: k for k, v in d.items()}\n\nprint(invert({1: 2, 3: 4}))\n\ndef invert_dict(d):\n    return {v: k for k, v in d.items()}\n\nprint(invert_dict({1: 2, 3: 4}))\n\ndef invert_dict_2(d):\n    return {v: k for k, v in d.items()}\n\nprint(invert_dict_2({1: 2, 3: 4', '#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.\n\ndef is_inverted(dict1, dict2):\n    if dict1 == dict2:\n        return True\n    else:\n        return False\n\nprint(is_inverted({\'a\': 1, \'b\': 2}, {\'a\': 1, \'b\': 2}))\nprint(is_inverted({\'a\': 1, \'b\': 2}, {\'a\': 1, \'b\': 3}))\nprint(is_inverted({\'a\': 1, \'b\': 2}, {\'a\': 2, \'b\': 1}))\nprint(is_inverted({\'', '#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".\nmy_dict2 = {a3:my_dict}\n\nprint(my_dict2)\n\nprint(my_dict2[a3])\n\nprint(my_dict2[a3][a4])\n\nprint(my_dict2[a3][a4][a5])\n\nprint(my_dict2[a3][a4][a5][a6])\n\nprint(my_dict2[a3][a4][a5][a6][a7])\n\nprint(my_dict2[a3][a4][', '#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\nprint(my_dict2 == my_dict)\n\nprint(""my_dict2 is the inverted dictionary of my_dict."")\n\nprint(""my_dict2 is the inverted dictionary of my_dict2."")\n\nprint(""my_dict2 is the inverted dictionary of my_dict2."")\n\nprint(""my_dict2 is the inverted dictionary of my_dict2."")\n\nprint(""my_dict2 is the inverted dictionary of my_dict2."")\n\nprint(""my_dict2 is the inverted dictionary of my_dict2."")\n\nprint(""my_dict2 is']"
11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","['#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.\nclass Player:\n    def __init__(self, name, age, height, weight):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.weight = weight\n\n    def __str__(self):\n        return f""{self.name} is {self.age} years old, {self.height} inches tall, and {self.weight} pounds heavy.""\n\nplayer1 = Player(""John"", 25, 170, 120)\nplayer2 = Player(""Jane"", 26, 160', '#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".\n\nclass Person:\n    def __init__(self, name, age, height, weight):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.weight = weight\n\n    def get_age(self):\n        return f""{self.name} is age {self.age}""\n\n    def get_height(self):\n        return f""{self.name} is {self.height} cm""\n\n    def get_weight(self):\n        return f""{self.name} weighs {self.weight} kg""\n\np1 = Person(""John"", 2', '#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\nplayer = Player(""A1"", 20, 1.75, 100)\n\nprint(player.name)\nprint(player.age)\nprint(player.height)\nprint(player.weight)\n\nprint(player.name)\nprint(player.age)\nprint(player.height)\nprint(player.weight)\n\nprint(player.name)\nprint(player.age)\nprint(player.height)\nprint(player.weight)\n\nprint(player.name)\nprint(player.age)\nprint(', '#Call the getter for the {a5} of the player and print the result.\nprint(player.a5)\n\nplayer.a5 = 100\n\nprint(player.a5)\n\nplayer.a5 = 1000\n\nprint(player.a5)\n\nplayer.a5 = 10000\n\nprint(player.a5)\n\nplayer.a5 = 100000\n\nprint(player.a5)\n\nplayer.a5 = 1000000\n\nprint(player.a5)\n\nplayer.a5 = 10']"
12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","['#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.\n\ndef num_len(num):\n    return len(str(num))\n\nprint(num_len(5000))\n\ndef num_len_2(num):\n    return len(str(num))\n\nprint(num_len_2(5000))\n\ndef num_len_3(num):\n    return len(str(num))\n\nprint(num_len_3(5000))\n\ndef num_len_4(num):\n    return len(str(num))\n\nprint(num_len_4(5', '#Initialize a last ""my_list"" with the values {a1} and {a2}\nmy_list = [a1, a2]\n\nprint(my_list)\n\nprint(my_list[0])\nprint(my_list[1])\n\nmy_list[0] = 100\nmy_list[1] = 200\n\nprint(my_list)\n\nmy_list.append(300)\n\nprint(my_list)\n\nmy_list.insert(0, 400)\n\nprint(my_list)\n\nmy_list.remove(', '#Print the longest number in this list.\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))\n\nprint(max(numbers))']"
13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","['#Import the class LinearRegression from sklearn.linear_model\nfrom sklearn.linear_model import LinearRegression\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport pandas as pd\n\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import Ridge\n\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import GridSearchCV', '#Import math.sqrt()\nimport math\n\ndef main():\n    #Get the number of test cases\n    T = int(input())\n\n    #Loop through test cases\n    for i in range(T):\n        #Get the number of elements in the array\n        N = int(input())\n\n        #Initialize the array\n        arr = [0] * N\n\n        #Get the elements of the array\n        for j in range(N):\n            arr[j] = int(input())\n\n        #Get the sum of the elements in the array\n        sum = 0\n        for j in range(N):\n            sum += arr[j]\n\n        #', '#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\nx = 0\n\nwhile x < 10:\n    print(x)\n    x += 1\n\nprint(""Done!"")\n', '#Define a function ""f"" that multiplies a input argument by 2.\ndef f(x):\n    return x * 2\n\nprint(f(10))\n\nprint(f(10.0))\n\nprint(f(10.0 + 10.0))\n\nprint(f(10.0 + 10.0 + 10.0))\n\nprint(f(10.0 + 10.0 + 10.0 + 10.0))\n\nprint(f(10.0 + 10.0 + 10.0 + 10.', '#Create a numpy array of numbers ""y"" by applying f to each element of x.\ny = f(x)\n\nprint(y)\n\nprint(y.shape)\n\nprint(y.dtype)\n\nprint(y.size)\n\nprint(y.ndim)\n\nprint(y.size)\n\nprint(y.itemsize)\n\nprint(y.nbytes)\n\nprint(y.strides)\n\nprint(y.flags)\n\nprint(y.flat)\n\nprint(y.tolist())\n\nprint(y.T)\n\nprint(y.reshape(2,3))\n\nprint(y', '#Initialize a linear regression model.\nmodel = LinearRegression()\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\nprint(f""The mean squared error is {mean_squared_error(y_test, y_pred)}"")\nprint(f""The coefficient of determination is {r2_score(y_test, y_pred)}"")\n\nplt.scatter(X_test, y_test, color=\'red\')\nplt.plot(X_test, y_pred, color=\'blue\')\nplt.title(\'Linear Regression\')', '#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).\nmodel.fit(x_train, y_train, epochs=100, batch_size=100, verbose=1)\n\nprint(""Training complete"")\n\nprint(""Evaluating model..."")\n\ny_pred = model.predict(x_test)\n\nprint(""Done"")\n\nprint(""Confusion Matrix:"")\n\nprint(confusion_matrix(y_test, y_pred))\n\nprint(""Classification Report:"")\n\nprint(classification_report(y_test, y_pred))\n\nprint(""Accuracy: "", accuracy_score(y_test,', '#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.\nx_hat = model.predict(x)\n\nprint(x_hat)\n\nprint(x_hat.shape)\n\nprint(x_hat[0])\n\nprint(x_hat[0][0])\n\nprint(x_hat[0][0][0])\n\nprint(x_hat[0][0][0][0])\n\nprint(x_hat[0][0][0][0][0])\n\nprint(x_hat[0][0][0][0][0][0])\n\nprint(x_hat[0', '#Apply ceil() to the predicted value and print it as an integer.\nprint(np.ceil(predicted_value))\n\nprint(""The predicted value is: "", predicted_value)\n\nprint(""The actual value is: "", actual_value)\n\nprint(""The difference between the predicted and actual values is: "", predicted_value - actual_value)\n\nprint(""The absolute difference between the predicted and actual values is: "", abs(predicted_value - actual_value))\n\nprint(""The square of the difference between the predicted and actual values is: "", predicted_value ** 2 - actual_value ** 2)\n\nprint(""The square root of']"
14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","[""#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.\n\ndef encrypt(string):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in string:\n        new_string += alphabet[(alphabet.index(letter) + 26) % 26]\n    return new_string\n\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))"", '#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.\ndef decrypt(encrypted_text):\n    #Create a variable to store the decrypted text\n    decrypted_text = """"\n    #Create a for loop to iterate through the encrypted text\n    for i in range(len(encrypted_text)):\n        #Create a variable to store the character at the current index\n        character = encrypted_text[i]\n        #If the character is a letter, add it to the decrypted text\n        if character.isalpha():\n            decrypted_text += character\n        #If the character is a number, add it to the decrypted text\n        elif character.isdigit():\n            decrypted_text += character\n        #If', '#Assign ""{a1}"" to a variable named ""original_text"".\noriginal_text = a1\n\nprint(original_text)\n\nprint(type(original_text))\n\nprint(original_text.isalpha())\n\nprint(original_text.isalnum())\n\nprint(original_text.isdecimal())\n\nprint(original_text.isdigit())\n\nprint(original_text.islower())\n\nprint(original_text.isnumeric())\n\nprint(original_text.isprintable())\n\nprint(original_text.isspace())\n\nprint(original_text.istitle())\n\nprint', '#Call the function encrypt with original_text as argument and assign the result to a variable named \'encrypted_text\'.\nencrypted_text = encrypt(original_text)\n\nprint(""Encrypted Text: "" + encrypted_text)\n\nprint(""Decrypted Text: "" + decrypt(encrypted_text))\n', '#Call the function decrypt with encrypted_text as argument and assign the result to a variable named\'restored_text\'.\nrestored_text = decrypt(encrypted_text)\n\nprint(""The decrypted text is: "" + restored_text)\n', '#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\nmy_result = []\n\nfor i in range(len(restored_text)):\n    my_result.append((restored_text[i], encrypted_text[i]))\n\nprint(my_result)\n\nprint(""The decrypted text is: "" + decrypt(my_result))\n', '#Print the list.\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint']"
15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","['#Defines a class ""Person"" which takes name and id as constructor arguments.\nclass Person:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\n    def __str__(self):\n        return self.name\n\nclass Student(Person):\n    def __init__(self, name, id, marks):\n        super().__init__(name, id)\n        self.marks = marks\n\n    def __str__(self):\n        return super().__str__() + "" "" + str(self.marks)\n\nclass Teacher(Person):\n    def __init__(self, name, id, subject):\n        super().__init__(name, id)\n        self', '#Extend the class with a function __hash__ which uses the {a1} property as hash value.\nclass Hashable:\n    def __hash__(self):\n        return hash(self.a1)\n\nclass Hashable2(Hashable):\n    def __hash__(self):\n        return hash(self.a2)\n\nclass Hashable3(Hashable):\n    def __hash__(self):\n        return hash(self.a3)\n\nclass Hashable4(Hashable):\n    def __hash__(self):\n        return hash(self.a4)\n\nclass Hashable5(Hashable):\n    def __hash__(self):\n        return hash(self.a5)\n\nclass', '#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.\nclass Hashable(object):\n    def __eq__(self, other):\n        return self.hash == other.hash\n\nclass Node(Hashable):\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return str(self.value)\n\nclass BinarySearchTree(Hashable):\n    def __init__(self, root=None):\n        self.root = root\n\n    def __repr__(self):\n        return str(self.root)\n\n    def __', '#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.\npersons = [Person(""Person A"", 1), Person(""Person B"", 2), Person(""Person {a3}"", 3), Person(""Person {a2}"", 4)]\n\nfor person in persons:\n    print(person.name)\n\nfor person in persons:\n    print(person.id)\n\nfor person in persons:\n    print(person.age)\n\nfor person in persons:\n    print(person.name, person.id, person.age)\n\nfor person in persons:\n    print(person.name, person.id, person.age, sep=""', '#Create a set ""unique_persons"" of this list.\nunique_persons = set(persons)\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint(len(unique_persons))\n\nprint(unique_persons)\n\nprint', '#Print the number of elements in the set.\nprint(len(set))\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)\n\nprint(""The set is: "", set)']"
16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","['#Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".\n\nprint(str(4))\nprint(str(""4""))\nprint(int(""4""))\nprint(int(4))\n\nprint(type(str(4)))\nprint(type(str(""4"")))\nprint(type(int(""4"")))\nprint(type(int(4)))\n\nprint(type(str(4)))\nprint(type(str(""4"")))\nprint(type(int(""4"")))\nprint(type(int(4)))\n\nprint(type(str(4)))\nprint(type(str(""4"")))\nprint(type(int', '#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".\n\ndef int_to_str(n):\n    if n < 10:\n        return str(n)\n    else:\n        return int_to_str(n//10) + str(n%10)\n\nprint(int_to_str(4))\n\ndef int_to_str(n):\n    if n < 10:\n        return str(n)\n    else:\n        return int_to_str(n//10) + str(n%10)\n\nprint(int_to_str(4))\n\ndef int_to', '#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.\n\ndef str_to_int(s):\n    return int(s)\n\nprint(str_to_int(""4""))\n\ndef str_to_int(s):\n    return int(s)\n\nprint(str_to_int(""4""))\n\ndef str_to_int(s):\n    return int(s)\n\nprint(str_to_int(""4""))\n\ndef str_to_int(s):\n    return int(s)\n\nprint(str_to_int(""4""))\n\ndef str_to_int(s):', '#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").\nmy_result = [int_to_str(a1), str_to_int(a1)]\n\nprint(my_result)\n\nprint(type(my_result))\n\nprint(my_result[0])\n\nprint(my_result[1])\n\nprint(type(my_result[0]))\n\nprint(type(my_result[1]))\n\nprint(my_result[0] + my_result[1])\n\nprint(my_result[0] * my_result[1])\n\nprint(my_result[', '#Print the list.\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint']"
17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","['#Initialize dictionary of Morse codes named \'chars_to_dots\' with valuesnchars_to_dots = {\'A\':\'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.', ""#Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.\ndef encode_morse(morse_string):\n    morse_list = morse_string.split()\n    morse_list = [morse_list[i] for i in range(len(morse_list))]\n    morse_list = [morse_list[i].upper() for i in range(len(morse_list))]\n    morse_list = [morse_list[i] for i in range(len(morse_list)) if morse_list[i]!='']\n    morse_list = [morse_list["", '#Create a function named \'decode_morse\' that takes a Morse code as an argument and returns the decodes string.\ndef decode_morse(morse_code):\n    morse_code = morse_code.upper()\n    morse_code = morse_code.replace("" "", """")\n    morse_code = morse_code.replace(""A"", ""01"")\n    morse_code = morse_code.replace(""B"", ""02"")\n    morse_code = morse_code.replace(""C"", ""03"")\n    morse_code = morse_code.replace(""D"", ""04"")\n    morse_code = morse_code.replace', ""#Encode '{a1}' to morse code and assign the result to'morse_code'.\nmorse_code = ''\nfor letter in a1:\n    morse_code += morse_dict[letter]\n\nprint(morse_code)\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')\n\nprint('----------------------------------------')"", ""#Decode the variable named'morse_code' to a string named 'decoded_text'.\ndecoded_text = morse_code.decode()\n\nprint(decoded_text)\n"", ""#Print the variable named 'decoded_text'.\nprint(decoded_text)\n\n'''\nThe output of the above code is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:\n\nThe text is:""]"
18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","['#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.\na1 = 1\na2 = 2\ntarget = 3\n\nprint(a1 + a2)\nprint(target)\n\na1 = 1\na2 = 2\ntarget = 3\n\nprint(a1 + a2)\nprint(target)\n\na1 = 1\na2 = 2\ntarget = 3\n\nprint(a1 + a2)\nprint(target)\n\na1 = 1\na2 = 2\ntarget = 3\n\nprint(a1 + a2)\nprint', '#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.\n\ndef two_sum(nums, target):\n    """"""\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    """"""\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nprint(two_sum([2, 7, 11, 15], 9))\n', '#Run the function and print out the result.\nprint(f(10))\n\nprint(f(100))\n\nprint(f(1000))\n\nprint(f(10000))\n\nprint(f(100000))\n\nprint(f(1000000))\n\nprint(f(10000000))\n\nprint(f(100000000))\n\nprint(f(1000000000))\n\nprint(f(100000']"
19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","[""#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).\n\ndef sample_points(n, x_mean, y_mean, x_std, y_std):\n    x_samples = np.random.normal(x_mean, x_std, n)\n    y_samples = np.random.normal(y_mean, y_std, n)\n    return x_samples, y_samples\n\ndef plot_samples(x_samples, y_samples, x_mean, y_mean, x_std, y_std):\n    plt.scatter(x_samples, y_samples, color='red')\n    plt.plot"", '#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).\npoints1 = sample_points(a1, a1, 1, 1)\n\nprint(""The first 100 points are:"")\nprint(points1)\n\nprint(""\\n"")\n\nprint(""The first 100 points are:"")\nprint(points1)\n\nprint(""\\n"")\n\nprint(""The first 100 points are:"")\nprint(points1)\n\nprint(""\\n"")\n\nprint(""The first 100 points are:"")\nprint(points1)\n\nprint(""\\n"")\n\nprint(""The first 1', '#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).\npoints2 = sample_points(a1, a1, 1, 1)\n\nprint(""The mean of points2 is: "", mean(points2))\nprint(""The standard deviation of points2 is: "", std(points2))\n\nprint(""The mean of points1 is: "", mean(points1))\nprint(""The standard deviation of points1 is: "", std(points1))\n\nprint(""The mean of points3 is: "", mean(points3))\nprint(""The standard deviation of points3 is: "", std(points3))\n\nprint(""The mean', '#Concatenate these data points.\n\tdata = np.concatenate((data,data2),axis=0)\n\tdata = np.concatenate((data,data3),axis=0)\n\tdata = np.concatenate((data,data4),axis=0)\n\tdata = np.concatenate((data,data5),axis=0)\n\tdata = np.concatenate((data,data6),axis=0)\n\tdata = np.concatenate((data,data7),axis=0)\n\tdata = np.concatenate((data,data8),axis=0)\n\tdata = np.concatenate((data', '#Implement the k-means clustering algorithm with n iterations and the centroids as return value.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef kmeans(data, k, iterations):\n    centroids = np.random.rand(k, data.shape[1])\n    for i in range(iterations):\n        distances = np.zeros((data.shape[0], k))\n        for j in range(data.shape[0]):\n            for k in range(k):\n                distances[j, k] = np.linalg.norm(data[j] - centroids[k])\n        centroids = np.array([data[np.argmin(distances[j, :]), :] for', '#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".\nmy_centroids = kmeans(points, 2, 100)\n\nprint(""The centroids are: "")\nprint(my_centroids)\n\nprint(""The clusters are: "")\nprint(kmeans_clusters(points, my_centroids))\n\nprint(""The distance between the points is: "")\nprint(distance(points, my_centroids))\n\nprint(""The distance between the points is: "")\nprint(distance(points, my_centroids))\n\nprint(""The distance between the points is: "")\nprint(distance(points, my_centroids))\n\nprint(""', '#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".\n\nimport math\n\ndef centroid(points):\n    x = 0\n    y = 0\n    for point in points:\n        x += point[0]\n        y += point[1]\n    x = x / len(points)\n    y = y / len(points)\n    return (x, y)\n\ndef centroid_round(points):\n    x = 0\n    y = 0\n    for point in points:\n        x += round(point[0])\n        y += round(point[1])\n    x = x / len(points)\n    y = y / len(points)']"
20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","['#Define a list of integers named ""elements"" with values {numbers}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(elements)\n\nprint(elements[0])\n\nprint(elements[1])\n\nprint(elements[2])\n\nprint(elements[3])\n\nprint(elements[4])\n\nprint(elements[5])\n\nprint(elements[6])\n\nprint(elements[7])\n\nprint(elements[8])\n\nprint(elements[9])\n\nprint(elements[10', '#Calculate the sum of the even numbers of the list and store the result to variable ""even"".\neven = sum(x for x in numbers if x % 2 == 0)\n\nprint(even)\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""------------------------------------------------', '#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".\nodd = sum(odd_numbers)\n\nprint(odd)\n\nprint(""The sum of the odd numbers in the same list is: "" + str(odd))\n\nprint(""The sum of the even numbers in the same list is: "" + str(even))\n\nprint(""The sum of the odd numbers in the same list is: "" + str(odd))\n\nprint(""The sum of the even numbers in the same list is: "" + str(even))\n\nprint(""The sum of the odd numbers in the same list is: "" + str(odd))\n\nprint', '#Create a list named ""my_result"" containing the variables even and odd.\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)\n\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)\n\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)\n\nmy_result = [x for x in range(10) if x % 2 == 0]\nprint(my_result)', '#Print the list.\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint(list)\n\nprint(""The list is: "")\nprint']"
21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","['#Define a list named ""elements"" with the values {lst}.\nelements = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(elements)\n\nprint(elements[0])\n\nprint(elements[1])\n\nprint(elements[2])\n\nprint(elements[3])\n\nprint(elements[4])\n\nprint(elements[5])\n\nprint(elements[6])\n\nprint(elements[7])\n\nprint(elements[8])\n\nprint(elements[9])\n\nprint(elements[10', '#Count the number of zeros in variable elements and store the value into variable ""zero_count"".\nzero_count = 0\nfor i in range(len(variable)):\n    if variable[i] == 0:\n        zero_count += 1\n\nprint(""The number of zeros in the variable is: "", zero_count)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable)\n\nprint(""The variable is: "", variable', '#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".\nnon_zero = []\nfor i in range(len(list_of_numbers)):\n    if list_of_numbers[i]!= 0:\n        non_zero.append(list_of_numbers[i])\n\nprint(non_zero)\n\nprint(""The sum of all the numbers in the list is: "" + str(sum(non_zero)))\n\nprint(""The product of all the numbers in the list is: "" + str(product(non_zero)))\n\nprint(""The average of all the numbers in the list is: "" + str(average(', '#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".\n\nnon_zero = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,']"
22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","['#Import numpy and initialize a numpy array named X with values {array}.\nX = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\nprint(X)\n\nprint(X.shape)\n\nprint(X.ndim)\n\nprint(X.size)\n\nprint(X.dtype)\n\nprint(X.itemsize)\n\nprint(X.nbytes)\n\nprint(X.itemsize * X.shape[1])\n\nprint(X.itemsize * X.shape[0])\n\nprint(X.itemsize * X.shape[1] * X', '#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.\n\ndef sample_with_replacement(arr, n):\n    return np.random.choice(arr, size=n, replace=True)\n\nprint(sample_with_replacement([1,2,3,4,5], 3))\n\ndef sample_with_replacement_2(arr, n):\n    return np.random.choice(arr, size=n, replace=True)\n\nprint(sample_with_replacement_2([1,2,3,4,5], 3))\n\ndef sample_with_replacement_3(arr, n):', '#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".\ndef call_n_times(n):\n    samples = np.zeros((n,1000))\n    for i in range(n):\n        samples[i] = call_one_time()\n    return samples\n\ndef call_one_time():\n    #Call the function and store the result in a variable called ""result"".\n    result = call_function()\n    #Return the result.\n    return result\n\ndef call_function():\n    #Call the function and store the result in a variable called ""result"".\n    result = function()\n    #Return the result.\n    return result\n\ndef', '#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".\nmean = sample.mean()\nprint(mean)\n\n##Calculate the median of each element in variable ""sample"" and store the result to ""median"".\nmedian = sample.median()\nprint(median)\n\n##Calculate the mode of each element in variable ""sample"" and store the result to ""mode"".\nmode = sample.mode()\nprint(mode)\n\n##Calculate the variance of each element in variable ""sample"" and store the result to ""variance"".\nvariance = sample.var()\nprint(variance)\n\n##Calculate the standard deviation of each element in variable ""sample', '#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".\npercentile = [np.percentile(data, 2.5), np.percentile(data, 97.5)]\n\nprint(percentile)\n\nprint(np.mean(data))\n\nprint(np.std(data))\n\nprint(np.median(data))\n\nprint(np.min(data))\n\nprint(np.max(data))\n\nprint(np.var(data))\n\nprint(np.sum(data))\n\nprint(np.var(data))\n\nprint(np.var(data))\n\nprint(np', '#Print the variable ""percentile"".\nprint(percentile)\n\n##Print the variable ""percentile_rank"".\nprint(percentile_rank)\n\n##Print the variable ""quantile"".\nprint(quantile)\n\n##Print the variable ""quantile_rank"".\nprint(quantile_rank)\n\n##Print the variable ""std"".\nprint(std)\n\n##Print the variable ""sum"".\nprint(sum)\n\n##Print the variable ""var"".\nprint(var)\n\n##Print the variable ""var_pop"".\nprint(var_pop)\n\n##Print the variable ""var_samp"".\nprint']"
23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","['#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".\n\ndef even_digits(a, b):\n    my_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            my_digits.append(i)\n    return my_digits\n\nprint(even_digits(1, 100))\n', '#Assign the sum of the even digits to the variable ""result"".\nresult = 0\nfor i in range(1, 1000):\n    if i % 2 == 0:\n        result += i\n\nprint(result)\n', '#Print the resulting number as integer.\nprint(int(result))\n']"
24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","['#Find the maximum element in the list {A} and assign it to variable ""my_max"".\nmy_max = max(A)\n\nprint(""The maximum element in the list is: "", my_max)\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""', '#Find the minimum element in the same list.\n\ndef findMin(arr):\n    min = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(findMin(arr))\n', '#Compute the different between ""my_max"" and the minimum element.\nmy_min = min(my_list)\n\nprint(my_min)\n\nprint(""The minimum element is: "", my_min)\n\nprint(""The maximum element is: "", max(my_list))\n\nprint(""The maximum element is: "", max(my_list))\n\nprint(""The maximum element is: "", max(my_list))\n\nprint(""The maximum element is: "", max(my_list))\n\nprint(""The maximum element is: "", max(my_list))\n\nprint(""The maximum element is: "", max(my_list', '#Print the difference between the two numbers\nprint(num1 - num2)\n\n\'\'\'\nOutput:\n10\n\'\'\'\n\n\'\'\'\nExercise 10\nWrite a program that asks the user to enter two numbers and prints the product of the two numbers.\n\'\'\'\n\nnum1 = int(input(""Enter a number: ""))\nnum2 = int(input(""Enter another number: ""))\n\nprint(num1 * num2)\n\n\'\'\'\nOutput:\n100\n\'\'\'\n\n\'\'\'\nExercise 11\nWrite a program that asks the user to enter a number and prints the square']"
25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\nprint(my_string)\n\nmy_string = ""B""\n\nprint(my_string)\n\nmy_string = ""C""\n\nprint(my_string)\n\nmy_string = ""D""\n\nprint(my_string)\n\nmy_string = ""E""\n\nprint(my_string)\n\nmy_string = ""F""\n\nprint(my_string)\n\nmy_string = ""G""\n\nprint(my_string)\n\nmy_string = ""H""', '#Lowercase the given string ""my_string"".\ndef lowercase(my_string):\n    return my_string.lower()\n\nprint(lowercase(""my_string""))\n\nprint(lowercase(""my_string_with_underscores""))\n\nprint(lowercase(""my_string_with_underscores_and_hyphens""))\n\nprint(lowercase(""my_string_with_hyphens""))\n\nprint(lowercase(""my_string_with_hyphens_and_underscores""))\n\nprint(lowercase(""my_string_with_hyphens_and_underscores_and_hyphens""))\n\nprint(lowercase(""my', '#Assign the distinct characters of the string to a variable named ""chars"".\nchars = string.ascii_lowercase\n\nprint(chars)\n\nprint(chars[0])\n\nprint(chars[-1])\n\nprint(chars[1:3])\n\nprint(chars[1:])\n\nprint(chars[:3])\n\nprint(chars[1:3:2])\n\nprint(chars[::2])\n\nprint(chars[::-1])\n\nprint(chars[1::2])\n\nprint(chars[::-2])\n\nprint(chars[1::-2])\n\nprint(chars[::-3])\n\nprint(chars[1::-', ""#Sort these characters in alphabetical order.\n\tfor i in range(len(s)):\n\t\tfor j in range(i+1, len(s)):\n\t\t\tif s[i] > s[j]:\n\t\t\t\ts[i], s[j] = s[j], s[i]\n\treturn ''.join(s)\n\ndef main():\n\ts = input()\n\tprint(sort_string(s))\n\nif __name__ == '__main__':\n\tmain()"", '#Print the resulting list of characters.\nprint(characters)\n\nprint(""The number of characters in the list is: "" + str(len(characters)))\n\nprint(""The first character in the list is: "" + characters[0])\n\nprint(""The last character in the list is: "" + characters[-1])\n\nprint(""The middle character in the list is: "" + characters[len(characters)//2])\n\nprint(""The character at the index 3 in the list is: "" + characters[3])\n\nprint(""The character at the index 10 in the list is: "" + characters[1']"
26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","['#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.\na = ""{A}""\nb = ""{B}""\n\nprint(a.format(A=""Hello"", B=""World""))\nprint(b.format(A=""Hello"", B=""World""))\n\nprint(a.format(A=""Hello"", B=""World""))\nprint(b.format(A=""Hello"", B=""World""))\n\nprint(a.format(A=""Hello"", B=""World""))\nprint(b.format(A=""Hello"", B=""World""))\n\nprint(a.format(A=""Hello"", B=""World""))\nprint(b.format(', '#Define a function ""len_str"" that returns the length of a string.\ndef len_str(s):\n    return len(s)\n\nprint(len_str(""Hello World""))\nprint(len_str(""Hello World!""))\nprint(len_str(""Hello World! Hello World!""))\nprint(len_str(""Hello World! Hello World! Hello World!""))\nprint(len_str(""Hello World! Hello World! Hello World! Hello World!""))\nprint(len_str(""Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!""))\nprint(len_str(""Hello World! Hello World! Hello World', '#Assign the length of each string to a seperate variable.\n\nlength_of_string_1 = len(string_1)\nlength_of_string_2 = len(string_2)\n\nprint(length_of_string_1)\nprint(length_of_string_2)\n\nprint(""The length of the string 1 is: "" + str(length_of_string_1))\nprint(""The length of the string 2 is: "" + str(length_of_string_2))\n\nprint(""The length of the string 1 is: "" + str(len(string_1)))\nprint', '#Assign the longer string to the variable ""result"".\nresult = long_string\n\nprint(result)\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""', '#Print the resulting string.\nprint(result)\n']"
27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","['#Assign the positive floating point number {A} to a variable ""f"".\nf = 1.0\n\nprint(f)\n\nprint(type(f))\n\nprint(f + 1)\n\nprint(f * 2)\n\nprint(f / 2)\n\nprint(f % 2)\n\nprint(f ** 2)\n\nprint(f // 2)\n\nprint(f < 2)\n\nprint(f > 2)\n\nprint(f <= 2)\n\nprint(f >= 2)\n\nprint(f == 2)\n\nprint(f!= 2', '#Compute the integer part of the number as variable ""a"".\na = int(input(""Enter a number: ""))\n\nprint(""The integer part of the number is: "", a)\n', '#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".\nb = int(f.split(""."")[1])\n\nprint(f""The fractional part of the floating point number is {f}."")\nprint(f""The integer part of the floating point number is {i}."")\nprint(f""The fractional part of the floating point number is {f}."")\nprint(f""The integer part of the floating point number is {i}."")\nprint(f""The fractional part of the floating point number is {f}."")\nprint(f""The integer part of the floating point number is {i}."")\nprint(f""The fractional part of the floating point number is', '#Add them together and print the result.\nprint(a+b)\n\nprint(""a is greater than b? "", a>b)\nprint(""a is less than b? "", a<b)\nprint(""a is equal to b? "", a==b)\nprint(""a is not equal to b? "", a!=b)\n\nprint(""a is greater than or equal to b? "", a>=b)\nprint(""a is less than or equal to b? "", a<=b)\nprint(""a is equal to or not equal to b? "", a!=b)\n\nprint(""a is greater than or equal']"
28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","['#Assign the string value {s} to a variable ""my_string"".\nmy_string = ""Hello World!""\n\nprint(my_string)\n\nprint(my_string[0])\n\nprint(my_string[1])\n\nprint(my_string[2])\n\nprint(my_string[3])\n\nprint(my_string[4])\n\nprint(my_string[5])\n\nprint(my_string[6])\n\nprint(my_string[7])\n\nprint(my_string[8])\n\nprint(my_string[9])\n\nprint(my_string[10])', '#Lowercase the defined string.\n\tdef lower(self):\n\t\tself.string = self.string.lower()\n\n\tdef __str__(self):\n\t\treturn self.string\n\nclass Word:\n\tdef __init__(self, string):\n\t\tself.string = string\n\t\tself.word = string.split()\n\t\tself.word = [Word(word) for word in self.word]\n\n\tdef __str__(self):\n\t\treturn self.string\n\nclass Sentence:\n\tdef __init__(self, string):\n\t\tself.string = string\n\t\tself.sentence = string.split', ""#Count the number of vowels in a string\ndef count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello'))\nprint(count_vowels('hello world'))\nprint(count_vowels('hello world hello'))\nprint(count_vowels('hello world hello world'))\nprint(count_vowels('hello world hello world hello world'))\nprint(count_vowels('hello"", '#Print out the number of times each word appears in the text\nprint(word_count)\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.most_common(10))\n\nprint(word_count.']"
29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","['#Assign the positive integer {n} to a variable ""f"".\nf = 10\n\nprint(f)\n\nprint(type(f))\n\nprint(f + 1)\n\nprint(f * 2)\n\nprint(f / 2)\n\nprint(f % 2)\n\nprint(f ** 2)\n\nprint(f // 2)\n\nprint(f + 10)\n\nprint(f - 10)\n\nprint(f * 10)\n\nprint(f / 10)\n\nprint(f % 10)\n\nprint(', '#Create a list from 1 to ""f"" (inclusive).\nf = 1\n\nfor i in range(1, f):\n    print(i)\n\nprint(""End of loop"")\n\nfor i in range(1, f, 2):\n    print(i)\n\nprint(""End of loop"")\n\nfor i in range(1, f, 2):\n    print(i)\n\nprint(""End of loop"")\n\nfor i in range(1, f, 2):\n    print(i)\n\nprint(""End of loop"")\n\nfor i in range(1, f, 2):\n    print(i', '#Create and initialize a variable named ""factorial"".\nfactorial = 1\n\nfor i in range(1, 11):\n    factorial = factorial * i\n\nprint(""The factorial of 10 is: "" + str(factorial))\n\nprint(""The factorial of 11 is: "" + str(factorial(11)))\n\nprint(""The factorial of 12 is: "" + str(factorial(12)))\n\nprint(""The factorial of 13 is: "" + str(factorial(13)))\n\nprint(""The factorial of 14 is: "" + str(factorial(14)))', '#Compute the product of all the values in the list and assign the product to ""factorial"".\n\ndef factorial(list):\n    product = 1\n    for i in list:\n        product *= i\n    return product\n\nprint(factorial([1,2,3,4,5]))\n\nprint(factorial([1,2,3,4,5,6]))\n\nprint(factorial([1,2,3,4,5,6,7]))\n\nprint(factorial([1,2,3,4,5,6,7,8]))\n\nprint(factorial([1,2,3,4,5,6,7,8,9]))\n\nprint', '#Print out the variable ""factorial"".\nprint(factorial)\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""The factorial of 5 is: "" + str(factorial))\n\nprint(""']"
30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","['#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".\n\ndef triangle_sum(a, b):\n    two_edges = a + b\n    return two_edges\n\nprint(triangle_sum(10, 20))\n\ndef triangle_sum(a, b):\n    two_edges = a + b\n    return two_edges\n\nprint(triangle_sum(10, 20))\n\ndef triangle_sum(a, b):\n    two_edges = a + b\n    return two_edges\n\nprint(triangle_sum(10, 20))\n\ndef triangle_sum(a, b):', '#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".\nmaximum-edge = 0\nfor i in range(len(two-edges)):\n    maximum-edge = maximum-edge + 1\n\nprint(""The maximum length of the third edge is: "" + str(maximum-1))\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")', '#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".\nminimum-edge = 0\nfor i in range(0,len(edges)-2):\n    minimum-edge = minimum-edge + edges[i+2][0]\n\nprint(""The minimum length of the third edge is: "" + str(minimum-edge))\n\n\'\'\'\nSample Output:\nThe minimum length of the third edge is: 10\n\'\'\'\n', '#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\nmy_tuple = (maximum_edge, minimum_edge)\n\nprint(my_tuple)\n\nprint(my_tuple[0])\nprint(my_tuple[1])\n\nprint(my_tuple[0] + my_tuple[1])\n\nprint(my_tuple[0] * my_tuple[1])\n\nprint(my_tuple[0] / my_tuple[1])\n\nprint(my_tuple[0] % my_tuple[1])\n\nprint(my_tuple[0] ** my_tuple[1])', '#Print the variable ""my_tuple"".\nprint(my_tuple)\n\nmy_tuple = (1, 2, 3, 4, 5)\n\nprint(my_tuple)\n\nmy_tuple = (1, 2, 3, 4, 5, 6)\n\nprint(my_tuple)\n\nmy_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nprint(my_tuple)\n\nmy_tuple = (1, 2, 3,']"
31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","['#Compute factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\ndef factorial_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\nprint(factorial_recursive(5))\n\ndef factorial_iterative(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):', '#Implement a function to compute the remainder when dividing a number by 10.\n\ndef remainder(num):\n    return num % 10\n\nprint(remainder(12345))\nprint(remainder(123456))\nprint(remainder(1234567))\nprint(remainder(12345678))\nprint(remainder(123456789))\nprint(remainder(1234567890))\nprint(remainder(12345678901))\nprint(remainder(123456789', '#Print out the remainder when dividing the factorial of {n} by 10\nprint(n % 10)\n\nprint(n // 10)\n\nprint(n // 100)\n\nprint(n // 1000)\n\nprint(n // 10000)\n\nprint(n // 100000)\n\nprint(n // 1000000)\n\nprint(n // 10000000)\n\nprint(n // 100000000)\n\nprint(n // 1000']"
32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","['#Given a positive integer {n} and create a variable named ""n"" with this value.\n\nn = int(input(""Enter a positive integer: ""))\n\nprint(""The value of n is: "", n)\n', '#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides.\ndef compute_total_internal_angles(n):\n    return 2*math.pi*n/3\n\ndef compute_total_internal_angles_from_sides(sides):\n    return 2*math.pi*sides/3\n\ndef compute_total_internal_angles_from_sides_and_angles(sides, angles):\n    return 2*math.pi*sides/3*angles\n\ndef compute_total_internal_angles_from_sides_and_angles_and_radius(sides, angles, radius):\n    return 2*math.pi', ""#Convert the angle from degrees to radians\n\ttheta = theta * (math.pi/180)\n\tphi = phi * (math.pi/180)\n\n\treturn (theta, phi)\n\ndef get_distance(lat1, lon1, lat2, lon2):\n\t'''\n\tReturns the distance between two points on the earth\n\t'''\n\tR = 6371 # Radius of the earth in km\n\tlat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n\tdlon = lon"", ""#Round the angle to have two decimal digits.\n\tangle = round(angle, 2)\n\treturn angle\n\ndef get_angle_from_vector(vector):\n\t'''\n\tReturns the angle between the vector and the x axis.\n\t'''\n\tangle = math.atan2(vector[1], vector[0])\n\tangle = round(angle, 2)\n\treturn angle\n\ndef get_angle_from_vector_2(vector):\n\t'''\n\tReturns the angle between the vector and the y axis.\n\t'''\n\tangle = math.atan2(vector[2], vector"", '#Print out the angle of the line\n\tprint(angle)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*180/math.pi)\n\tprint(angle*1']"
33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","['#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.\ns1 = ""Hello""\ns2 = ""World""\n\nprint(s1)\nprint(s2)\n\nprint(s1 + s2)\nprint(s1 * 2)\nprint(s1[0])\nprint(s1[-1])\nprint(s1[0:3])\nprint(s1[0:3:2])\nprint(s1[0:3:2:1])\nprint(s1[0:3:2:1:2])\nprint(s1[0:3:2:1', '#Convert s1 and s2 to integers\ns1 = int(s1)\ns2 = int(s2)\n\nif s1 > s2:\n    print(""s1 is greater than s2"")\nelif s1 < s2:\n    print(""s1 is less than s2"")\nelse:\n    print(""s1 and s2 are equal"")\n', '#Compute the sum of the two integers and store it as the variable s.\ns = a + b\n\nprint(""The sum of the two integers is"", s)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is"", a + b)\n\nprint(""The sum of the two integers is', '#Print out the variable s\nprint(s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value of s is: "", s)\n\nprint(""The value']"
34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","['#Initialize the variable named lst with an integer list {l}.\nlst = [1, 2, 3, 4, 5]\n\nprint(lst)\n\nprint(lst[0])\n\nprint(lst[1])\n\nprint(lst[2])\n\nprint(lst[3])\n\nprint(lst[4])\n\nprint(lst[5])\n\nprint(lst[6])\n\nprint(lst[7])\n\nprint(lst[8])\n\nprint(lst[9])\n\nprint(lst[10])\n\nprint(lst[11])\n\nprint(lst[', '#Find the maximum of the variable lst and assign it to a variable named ma.\nma = max(lst)\n\nprint(ma)\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(lst)\n\nlst.sort()\n\nprint(lst)\n\nlst.reverse()\n\nprint(lst)\n\nlst.append(11)\n\nprint(lst)\n\nlst.insert(0, 12)\n\nprint(lst)\n\nlst.pop()\n\nprint(lst)\n\nlst.remove', '#Find the minimum of the variable lst and assign to a variable named mi.\nmi = min(lst)\n\nprint(mi)\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(lst)\n\nlst.sort()\n\nprint(lst)\n\nlst.reverse()\n\nprint(lst)\n\nlst.sort(reverse=True)\n\nprint(lst)\n\nlst.sort(key=lambda x: x**2)\n\nprint(lst)\n\nlst.sort(key=lambda x: x**', '#Create a list from mi and ma (inclusive).\nmi = [1,2,3,4,5,6,7,8,9,10]\nma = [11,12,13,14,15,16,17,18,19,20]\n\nprint(mi)\nprint(ma)\n\nprint(mi[0:3])\nprint(mi[3:6])\nprint(mi[6:9])\nprint(mi[9:12])\n\nprint(mi[0:3:2])\nprint(mi[3:6', '#Print the sum of this list.\nprint(sum(list1))\n\nlist2 = [1,2,3,4,5,6,7,8,9,10]\n\nprint(list2)\n\nlist3 = list2\n\nprint(list3)\n\nlist3.append(11)\n\nprint(list3)\n\nlist3.insert(1,111)\n\nprint(list3)\n\nlist3.remove(11)\n\nprint(list3)\n\nlist3.pop()\n\nprint(list3)\n\nlist3']"
35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","['#Implement a function to return the characters shared between two words.\n\ndef common_characters(s1, s2):\n    # Write your code here\n    return list(set(s1) & set(s2))\n\nprint(common_characters(""abracadabra"", ""car""))\nprint(common_characters(""abracadabra"", ""dog""))\nprint(common_characters(""abracadabra"", ""abracadabra""))\nprint(common_characters(""abracadabra"", ""dogg""))\nprint(common_characters(""abracadabra"", ""dogg""))\nprint(common_characters(""abracadabra"", ""', ""#Implement a function to find the number of vowels in a string.\n\ndef count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello'))\nprint(count_vowels('hello world'))\nprint(count_vowels('hello world hello'))\nprint(count_vowels('hello world hello world'))\nprint(count_vowels('hello world hello world hello world'))\nprint(count_vowels('hello world hello"", ""#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.\ns = s1 + s2\n\nprint(s)\n\nprint(s.count('a'))\n\nprint(s.find('a'))\n\nprint(s.index('a'))\n\nprint(s.replace('a', 'b'))\n\nprint(s.split(' '))\n\nprint(s.upper())\n\nprint(s.lower())\n\nprint(s.title())\n\nprint(s.strip())\n\nprint(s.lstrip())\n\nprint(s.rstrip())\n\nprint(s.split())\n\nprint(s."", ""#Print the number of vowels in the variable s\nprint(s.count('a'))\n\nprint(s.count('A'))\n\nprint(s.count('e'))\n\nprint(s.count('E'))\n\nprint(s.count('i'))\n\nprint(s.count('I'))\n\nprint(s.count('o'))\n\nprint(s.count('O'))\n\nprint(s.count('u'))\n\nprint(s.count('U'))\n\nprint(s.count('y'))\n\nprint(s.count('Y'))\n\nprint(s.count(' '))""]"
36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","['#Given a list of integers {l}, assign the list to a varialbe named lst1.\nlst1 = [1, 2, 3, 4, 5]\n\nlst2 = [1, 2, 3, 4, 5]\n\nlst3 = [1, 2, 3, 4, 5]\n\nlst4 = [1, 2, 3, 4, 5]\n\nlst5 = [1, 2, 3, 4, 5]\n\nlst6 = [1, 2, 3, 4, 5]\n\nlst7 = [1,', '#Find the negative numbers of the list and assign it to a new variable named lst2.\nlst2 = [i for i in range(10) if i < 0]\n\nprint(lst2)\n\nprint(""The sum of the list is: "", sum(lst2))\n\nprint(""The average of the list is: "", sum(lst2)/len(lst2))\n\nprint(""The maximum of the list is: "", max(lst2))\n\nprint(""The minimum of the list is: "", min(lst2))\n\nprint(""The difference between the maximum and minimum of the list is: "", max(lst2) - min(lst2', '#Compute the sum of numbers in lst2\ndef sum_lst2(lst2):\n    return sum(lst2)\n\nprint(sum_lst2([1,2,3,4,5]))\n\ndef sum_lst3(lst3):\n    return sum(lst3)\n\nprint(sum_lst3([1,2,3,4,5]))\n\ndef sum_lst4(lst4):\n    return sum(lst4)\n\nprint(sum_lst4([1,2,3,4,5]))\n\ndef sum_lst5(lst5):\n    return sum(lst5)', '#Print out the sum of the numbers in the list\nprint(sum(numbers))\n\nprint(numbers)\n\nprint(numbers[0])\n\nprint(numbers[1])\n\nprint(numbers[2])\n\nprint(numbers[3])\n\nprint(numbers[4])\n\nprint(numbers[5])\n\nprint(numbers[6])\n\nprint(numbers[7])\n\nprint(numbers[8])\n\nprint(numbers[9])\n\nprint(numbers[10])\n\nprint(numbers[11])\n\nprint(numbers[12])']"
37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","['#Import the pandas library.\nimport pandas as pd\n\n##Import the numpy library.\nimport numpy as np\n\n##Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n##Import the seaborn library.\nimport seaborn as sns\n\n##Import the statsmodels library.\nimport statsmodels.api as sm\n\n##Import the statsmodels.formula.api as smf\n\n##Import the statsmodels.tsa.api as smt\n\n##Import the statsmodels.tsa.stattools as smts\n\n##Import the statsmodels.tsa.stattools.stattools as smtst', '#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".\ndf = pd.read_csv(""./datasets/mlbootcamp5_train.csv"")\n\nprint(df.head())\n\nprint(df.info())\n\nprint(df.describe())\n\nprint(df.shape)\n\nprint(df.columns)\n\nprint(df.isnull().sum())\n\nprint(df.isnull().sum().sum())\n\nprint(df.isnull().sum().sum() / df.shape[0])\n\nprint(df.isnull().sum().sum() / df.shape[0])\n\nprint(df.isnull().', '#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\nmy_counts = df.groupby(""gender"").count()\n\nprint(my_counts)\n\n## Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\nmy_counts = df.groupby(""gender"").count()\n\nprint(my_counts)\n\n## Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\nmy_counts = df.groupby(""gender"").count()\n\nprint(my_counts)\n\n## Group by the column', '#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".\nplain_list = [1,2,3,4,5,6,7,8,9,10]\n\nprint(plain_list)\n\nprint(type(plain_list))\n\nprint(plain_list[0])\n\nprint(plain_list[1])\n\nprint(plain_list[2])\n\nprint(plain_list[3])\n\nprint(plain_list[4])\n\nprint(plain_list[5])\n\nprint(plain_list[6])\n\nprint(plain_list[7])\n\nprint', '#Print the maximum element of this list.\nprint(max(my_list))\n\nprint(""The minimum element of this list is: "", min(my_list))\n\nprint(""The average of this list is: "", sum(my_list)/len(my_list))\n\nprint(""The median of this list is: "", sorted(my_list)[len(my_list)//2])\n\nprint(""The mode of this list is: "", Counter(my_list).most_common(1)[0][0])\n\nprint(""The mode of this list is: "", Counter(my_list).most_common(']"
38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","[""#Define a string named's' with the value '{s}'.\ns = '{s}'\n\nprint(s)\n\nprint(s.format(s='Hello'))\n\nprint(s.format(s='World'))\n\nprint(s.format(s='!'))\n\nprint(s.format(s='?'))\n\nprint(s.format(s='!?'))\n\nprint(s.format(s='?!'))\n\nprint(s.format(s='!?!'))\n\nprint(s.format(s='!?!?'))\n\nprint(s.format(s='!?!"", ""#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'\npattern = re.compile(r'[,\\.]')\n\ndef main():\n    #Create a list of words to be used in the program\n    words = ['apple', 'banana', 'cherry', 'orange', 'pear', 'grape', 'kiwi','melon','mango', 'pineapple','strawberry', 'watermelon', 'grapefruit', 'kiwi','melon','mango', 'pineapple','strawberry', 'watermelon', 'grapefruit', 'kiwi','melon','mango"", ""#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'\ns2 = s.replace(',', '.')\n\nprint(s2)\n\n'''\nOutput:\n123.456,789.012,345.678,987.654,234.567,123.456,789.012,345.678,987.654,234.567,123.456,789.012,345.678,9"", ""#Split the string's2' into a list of words with a space and store the result to variable 'words'\nwords = s2.split()\n\nprint(words)\n\nprint(len(words))\n\nprint(words[0])\n\nprint(words[1])\n\nprint(words[2])\n\nprint(words[3])\n\nprint(words[4])\n\nprint(words[5])\n\nprint(words[6])\n\nprint(words[7])\n\nprint(words[8])\n\nprint(words[9])\n\nprint(words[10])\n\nprint(words[11])\n\nprint(words[12"", ""#Print a list of integers consisting of the length of each word in 'words'\nprint(len(words))\n\nprint(words)\n\nprint(words[0])\n\nprint(words[1])\n\nprint(words[2])\n\nprint(words[3])\n\nprint(words[4])\n\nprint(words[5])\n\nprint(words[6])\n\nprint(words[7])\n\nprint(words[8])\n\nprint(words[9])\n\nprint(words[10])\n\nprint(words[11])\n\nprint(words[12])\n\nprint(words[13""]"
39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","[""#Create a variable named's' with the value '{s}'.\ns = '{s}'\n\nprint(s.format(s='Hello World'))\n\nprint(s.format(s='Hello World', x=10))\n\nprint(s.format(s='Hello World', x=10, y=20))\n\nprint(s.format(s='Hello World', x=10, y=20, z=30))\n\nprint(s.format(s='Hello World', x=10, y=20, z=30, w=40))\n\nprint(s.format"", '#Lowercase the variable\'s\' and store the result to variable\'s2\'.\ns2 = s.lower()\n\nprint(s2)\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")\n\nprint(""--------------------------------------------------"")', ""#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.\npattern3 = re.compile(r'#\\w{3}')\n\nfor line in fileinput.input():\n    #If the line is not empty, then print it to the screen.\n    if line:\n        #If the line matches the pattern, then print the line to the screen.\n        if pattern1.match(line):\n            print(line)\n        #If the line matches the pattern2, then print the line to the screen.\n        elif pattern2.match(line):\n            print(line)\n        #If the line matches the pattern3, then print the line to the screen.\n        elif"", ""#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.\npattern6 = re.compile(r'#\\{([0-9a-f]{6})\\}')\n\nfor line in fileinput.input():\n    #Match the pattern 1\n    match = pattern1.match(line)\n    if match:\n        #Print the result\n        print(match.group(1))\n    #Match the pattern 2\n    match = pattern2.match(line)\n    if match:\n        #Print the result\n        print(match.group(1))\n    #Match the pattern 3\n    match = pattern3.match(line)\n    if match:\n        #Print the"", ""#Print True if the variable's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.\ndef pattern3(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\ndef pattern6(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\ndef pattern7(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\ndef pattern8(s1, s2):\n    if s1 == s2:\n        return True\n    else:\n        return False\n\ndef pattern9(s1, s2):""]"
40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","[""#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.\n\ndef count_values(lst):\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\nprint(count_values([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\ndef count_values(lst):\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] ="", ""#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.\ncounts = [count_values(lst) for lst in lsts]\n\nprint(counts)\n\nprint(counts[0])\n\nprint(counts[1])\n\nprint(counts[2])\n\nprint(counts[3])\n\nprint(counts[4])\n\nprint(counts[5])\n\nprint(counts[6])\n\nprint(counts[7])\n\nprint(counts[8])\n\nprint(counts[9])\n\nprint(counts[10])\n\nprint(counts[11])\n\nprint(counts[12"", ""#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.\n\ndef print_max_count(counts):\n    if len(counts) > len(numbers)/2:\n        print(max(counts, key=counts.get))\n    else:\n        print(None)\n\nprint_max_count(counts)\n\n'''\nSample Input 1:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nSample Output 1:\n\nNone\n\nSample Input 2:\n\nnumbers = [1, 2, 3""]"
41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","['#Import datetime and initialize a datetime object named \'today\' with {month}/{day}/{year} (month/day/year).\ntoday = datetime.date.today()\n\nprint(today)\n\nprint(today.month)\n\nprint(today.day)\n\nprint(today.year)\n\nprint(today.weekday())\n\nprint(today.strftime(""%A""))\n\nprint(today.strftime(""%B""))\n\nprint(today.strftime(""%d""))\n\nprint(today.strftime(""%m""))\n\nprint(today.strftime(""%Y""))\n\nprint(today.strftime(""%a""))\n\nprint(today.strftime(""%b""))\n\nprint(today.strftime(""%c""))', '#Add 7 days to the variable \'today\' and store the result to variable \'week\'.\nweek = today + timedelta(days=7)\n\nprint(week)\n\nprint(today)\n\nprint(today.weekday())\n\nprint(today.strftime(""%A""))\n\nprint(today.strftime(""%d""))\n\nprint(today.strftime(""%m""))\n\nprint(today.strftime(""%Y""))\n\nprint(today.strftime(""%a""))\n\nprint(today.strftime(""%b""))\n\nprint(today.strftime(""%B""))\n\nprint(today.strftime(""%c""))\n\nprint(today.strftime(""%j""))\n\nprint(today.strftime', ""#Print 'week' in the format '%m/%d/%Y'.\nprint(week)\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d/%Y'))\n\nprint(week.strftime('%m/%d""]"
42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","[""#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.\n\ndef word_weight(word):\n    return sum(ord(char) for char in word)\n\nprint(word_weight('hello'))\n\nprint(word_weight('hello world'))\n\nprint(word_weight('hello world hello'))\n\nprint(word_weight('hello world hello world'))\n\nprint(word_weight('hello world hello world hello world'))\n\nprint(word_weight('hello world hello world hello world hello world'))\n\nprint(word_weight('hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world"", ""#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.\n\ndef word_weight(words):\n    weights = []\n    for word in words:\n        weights.append(word_weight(word))\n    return weights\n\nprint(word_weight(['hello', 'world', 'hello', 'world']))\n\n##Write a function named 'word_weight_2' that takes a list of strings named 'words' with the value {words}', apply the function 'word_weight_2' to each word and store the result to variable 'weights'.\n\ndef word_weight_2(words):\n    weights = []\n    for word in words:\n        weights."", ""#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.\nprint(sorted(weights) == weights)\n\nprint('----------------------------------------')\n\nprint('The sorted list of weights is:')\nprint(sorted(weights))\n\nprint('----------------------------------------')\n\nprint('The sorted list of weights is:')\nprint(sorted(weights, reverse=True))\n\nprint('----------------------------------------')\n\nprint('The sorted list of weights is:')\nprint(sorted(weights, key=lambda x: x**2))\n\nprint('----------------------------------------')\n\nprint('The sorted list of weights is:')\nprint(sorted(weights, key=lambda x:""]"
43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","[""#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.\n\ndef is_palindrome(num):\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    if num_str == rev_num_str:\n        return True\n    else:\n        return False\n\nprint(is_palindrome(12345))\nprint(is_palindrome(123456))\nprint(is_palindrome(1234567))\nprint(is_palindrome(12345678))\nprint(is_palindrome(1234"", ""#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.\n\ndef descent(n):\n    if n == 0:\n        return 0\n    else:\n        return n + descent(n-1)\n\nprint(descent(10))\n\ndef descent(n):\n    if n == 0:\n        return 0\n    else:\n        return n + descent(n-1)\n\nprint(descent(10))\n\ndef descent(n):\n    if n == 0:\n        return 0\n    else:\n        return n + descent(n-1)\n\nprint(descent(10))\n\ndef descent("", '#Define an integer variable named \'base\' with the value {n}.\nbase = 10\n\nfor i in range(1, 1000000):\n    #If the number is divisible by 3, print it out.\n    if i % 3 == 0:\n        print(i, end = "" "")\n', '#While the variable \'base\' is not a single digit, apply the function \'is_palindrome\' on \'base\' and break if \'base\' is palindrome. Otherwise, apply the function \'descent\' to the variable \'base\' and store the result to variable \'base\'.\n\ndef is_palindrome(base):\n    if base == base[::-1]:\n        return True\n    else:\n        return False\n\ndef descent(base):\n    base = base - 1\n    return base\n\nbase = int(input(""Enter a number: ""))\n\nwhile is_palindrome(base) == False:\n    base = descent(base)\n\nprint(base)\n', '#Print \'False\' if the variable \'base\' is a single digit, otherwise print \'True\'.\n\nbase = 10\nif base == 10:\n    print(""True"")\nelse:\n    print(""False"")\n\nbase = 100\nif base == 10:\n    print(""True"")\nelse:\n    print(""False"")\n\nbase = 1000\nif base == 10:\n    print(""True"")\nelse:\n    print(""False"")\n\nbase = 10000\nif base == 10:\n    print(""True"")\nelse:\n    print(""False"")\n\nbase = 10000']"
44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","[""#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.\ninput = '{input}'\nstack = []\n\nfor i in input:\n    #If the character is a number, push it onto the stack.\n    if i.isdigit():\n        stack.append(i)\n    #If the character is a closing bracket, pop the top element from the stack and add it to the output.\n    elif i == '}':\n        output += stack.pop()\n    #If the character is a opening bracket, push it onto the stack.\n    elif i == '{':\n        stack.append(i)\n\nprint(output)"", '#Iterating over variable \'input\', if the current character is \'@\' and\'stack\' is not empty, pop the last element from\'stack\', otherwise append the character to\'stack\'.\n\ndef main():\n    input = ""a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z""\n    stack = []\n    for i in input:\n        if i == \'@\':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                stack.append(i)\n        else:\n            stack.append(i)\n    print(stack)\n\nif __name__ == ""__main__"":', ""#Print the joined string from'stack'.\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint(stack.pop())\n\nprint(stack)\n\nprint""]"
45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","['#Import the pandas library.\nimport pandas as pd\n\n##Import the numpy library.\nimport numpy as np\n\n##Import the matplotlib library.\nimport matplotlib.pyplot as plt\n\n##Import the seaborn library.\nimport seaborn as sns\n\n##Import the statsmodels library.\nimport statsmodels.api as sm\n\n##Import the statsmodels.formula.api as smf\n\n##Import the statsmodels.tsa.api as smt\n\n##Import the statsmodels.tsa.stattools as smts\n\n##Import the statsmodels.tsa.stattools.stattools as smtst', '#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\'./datasets/melb_data.csv\')\n\nX = df.iloc[:, 1:2].values\ny = df.iloc[:, 2].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape', '#Assign the attribute ""Price"" to the target variable ""y"".\ny = df[\'Price\']\n\n##Create a new variable ""x"" by adding the first column of ""df"" to the second column of ""df"".\nx = df[[\'Year\', \'Month\', \'Day\', \'Hour\', \'Minute\', \'Second\', \'WeekDay\', \'Weekend\', \'Price\']]\n\n##Create a new variable ""x"" by adding the first column of ""df"" to the second column of ""df"".\nx = df[[\'Year\', \'Month\', \'Day\', \'Hour\', \'Minute\', \'Second\', \'WeekDay\', \'Weekend\', \'Price\']]', '#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".\nmelb_predictors = df.drop(""Price"", axis=1)\n\nprint(melb_predictors.head())\n\nprint(melb_predictors.shape)\n\nprint(melb_predictors.info())\n\nprint(melb_predictors.describe())\n\nprint(melb_predictors.isnull().sum())\n\nprint(melb_predictors.isnull().sum() / melb_predictors.shape[0])\n\nprint(melb_predictors.isnull().sum() / melb_predictors.shape[0', '#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".\nX = df.drop(columns=[""target""])\n\ny = df[""target""]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n\nprint(X_train.head())\nprint(X_test.head())\nprint(y_train.head())', ""#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.\nx_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size=0.2, random_state=0)\n\nprint(x_train.shape)\nprint(x_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)\n\nprint(x_train.shape[0], 'train samples')\nprint(x_valid.shape[0], 'validation samples')\n\nprint(x_train.shape[1], 'features')\nprint(x"", '#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\nprint(f""Sum of first column of x_train: {sum(x_train[:, 0])}"")\nprint(f""Sum of first column of y_train: {sum(y_train[:, 0])}"")\n\nprint(""\\n"")\n\nprint(""x_train shape:"", x_train.shape)\nprint(""y_train shape:"", y_train.shape)\n\nprint(""\\n"")\n\nprint(""x_test shape:"", x_test.shape)\nprint(""y_test shape:"", y_test.shape)\n\nprint(""\\n"")']"
46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","['#Create a variable named lst1 with value {l}\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Find the minimum and maximum of lst1 and assign them to variables a and b respectively.\na = min(lst1)\nb = max(lst1)\n\nprint(""The minimum of lst1 is"", a)\nprint(""The maximum of lst1 is"", b)\n\nlst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(""The minimum of lst2 is"", min(lst2))\nprint(""The maximum of lst2 is"", max(lst2))\n\nlst3 = [1, 2, 3, 4, 5', '#Create a list from a to b (inclusive) and assign it to variable named lst2\nlst2 = [a for a in range(a,b+1)]\n\nprint(lst2)\n\nprint(lst2[0])\n\nprint(lst2[-1])\n\nprint(lst2[1:3])\n\nprint(lst2[1:])\n\nprint(lst2[:3])\n\nprint(lst2[1:])\n\nprint(lst2[1:3])\n\nprint(lst2[1:])\n\nprint(lst2[:3])\n\nprint(lst2[1:])\n\nprint(lst2[1:3', '#Find the elements that are in lst2 but not in lst1\nprint(lst1 - lst2)\n\nprint(lst1.intersection(lst2))\n\nprint(lst1.symmetric_difference(lst2))\n\nprint(lst1.difference(lst2))\n\nprint(lst1.pop())\n\nprint(lst1.remove(1))\n\nprint(lst1)\n\nprint(lst1.clear())\n\nprint(lst1)\n\nprint(lst1.copy())\n\nprint(lst1)\n\nprint(lst1.count(1))\n\nprint(lst1.index(1))', '#Print the sum of these elements\nprint(sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of the elements in the list is: "", sum(numbers))\n\nprint(""The sum of']"
47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","['#Initialize the variable named lst1 with a list {l}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Create a function called num_in_str() to check whether a string contains a number.\ndef num_in_str(str):\n    if str.isdigit():\n        return True\n    else:\n        return False\n\ndef main():\n    #Create a string called str1.\n    str1 = input(""Enter a string: "")\n    #Create a string called str2.\n    str2 = input(""Enter another string: "")\n    #Create a string called str3.\n    str3 = input(""Enter a third string: "")\n    #Create a string called str4.\n    str4 = input(""Enter a fourth string: "")\n    #Create a string called str5.\n    str5 = input(""Enter', '#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2.\nlst2 = num_in_str(lst1)\n\nprint(lst2)\n\nprint(lst2[0])\n\nprint(lst2[1])\n\nprint(lst2[2])\n\nprint(lst2[3])\n\nprint(lst2[4])\n\nprint(lst2[5])\n\nprint(lst2[6])\n\nprint(lst2[7])\n\nprint(lst2[8])\n\nprint(lst2[9])\n\nprint(lst2[10])\n\nprint(lst2[', '#Print out lst2\nprint(lst2)\n\nlst3 = [1,2,3,4,5,6,7,8,9,10]\n\nlst4 = [1,2,3,4,5,6,7,8,9,10]\n\nlst5 = [1,2,3,4,5,6,7,8,9,10]\n\nlst6 = [1,2,3,4,5,6,7,8,9,10]\n\nlst7 = [1,2,3,4,']"
48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","['#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.\ndef a(a1):\n    return a1 * a1\n\nprint(a(2))\n\ndef a(a1):\n    return a1 * a1\n\nprint(a(2))\n\ndef a(a1):\n    return a1 * a1\n\nprint(a(2))\n\ndef a(a1):\n    return a1 * a1\n\nprint(a(2))\n\ndef a(a1):\n    return a1 * a1\n\nprint(a(2))\n\ndef a(a1):\n    return a1 * a', '#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.\ndef b(a, a2):\n    return a * a2\n\nprint(b(1, 2))\n\ndef b(a, a2):\n    return a * a2\n\nprint(b(1, 2))\n\ndef b(a, a2):\n    return a * a2\n\nprint(b(1, 2))\n\ndef b(a, a2):\n    return a * a2\n\nprint(b(1, 2))\n\ndef b(a, a2):\n    return a * a2\n\nprint(b', '#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\ndef c(a):\n    return a * a3\n\nprint(c(10))\n\nprint(c(100))\n\nprint(c(1000))\n\nprint(c(10000))\n\nprint(c(100000))\n\nprint(c(1000000))\n\nprint(c(10000000))\n\nprint(c(100000000))\n\nprint(c(1000000000', '#Create a list named ""abc"" which contains the three functions in order of definition.\n\ndef add(x,y):\n    return x+y\n\ndef subtract(x,y):\n    return x-y\n\ndef multiply(x,y):\n    return x*y\n\ndef divide(x,y):\n    return x/y\n\ndef power(x,y):\n    return x**y\n\ndef square(x):\n    return x**2\n\ndef cube(x):\n    return x**3\n\ndef sqrt(x):\n    return x**0.5\n\ndef factorial(x):\n    return x**x\n\ndef factorial_recursive(x', '#Assign the integer {a4} to a variable ""my_init"".\nmy_init = a4\n\nprint(my_init)\n\nprint(type(my_init))\n\nprint(my_init.shape)\n\nprint(my_init.dtype)\n\nprint(my_init.size)\n\nprint(my_init.ndim)\n\nprint(my_init.size)\n\nprint(my_init.itemsize)\n\nprint(my_init.nbytes)\n\nprint(my_init.item())\n\nprint(my_init.tolist())\n\nprint(my_init.T)', '#Apply the first function of the list to ""my_init"" and name the result ""my_result"".\nmy_result = my_init(10)\n\nprint(my_result)\n\nprint(my_result.name)\n\nprint(my_result.age)\n\nprint(my_result.height)\n\nprint(my_result.weight)\n\nprint(my_result.eyes)\n\nprint(my_result.hair)\n\nprint(my_result.hair_color)\n\nprint(my_result.skin_color)\n\nprint(my_result.eye_color)\n\nprint(my_result.h', '#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\ndef power(x, y):\n    return x ** y\n\ndef my_function(x, y):\n    my_result = 0\n    for i in range(len(x)):\n        my_result += x[i] * y[i]\n    return my_result\n\nprint(my_function([1,', '#Print the variable named ""my_result"".\nprint(my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)\n\nprint(""The value of my_result is: "", my_result)']"
49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","['#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.\ndef pluralize(words):\n    plural_words = set()\n    for word in words:\n        if word in plural_words:\n            plural_words.add(word + ""s"")\n        else:\n            plural_words.add(word)\n    return plural_words\n\ndef get_word_count(word_list):\n    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ndef get_word_frequency', '#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.\ndef is_plural(word):\n    if word[-1] ==\'s\':\n        return True\n    else:\n        return False\n\ndef is_singular(word):\n    if word[-1] ==\'s\':\n        return False\n    else:\n        return True\n\ndef is_plural_or_singular(word):\n    if word[-1] ==\'s\':\n        return True\n    else:\n        return False\n\ndef is_plural_or_singular_or_not(word):\n    if word[-1] ==\'s\':\n        return True\n    else:\n        return False\n\ndef is_', '#Assign {a1} to a variable named ""words"".\nwords = a1\n\nprint(words)\n\nprint(type(words))\n\nprint(words[0])\n\nprint(words[1])\n\nprint(words[2])\n\nprint(words[3])\n\nprint(words[4])\n\nprint(words[5])\n\nprint(words[6])\n\nprint(words[7])\n\nprint(words[8])\n\nprint(words[9])\n\nprint(words[10])\n\nprint(words[11])\n\nprint(words[12])', '#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".\nwords_plural = words + ""s""\n\nprint(words_plural)\n\nprint(words_plural.title())\n\nprint(words_plural.upper())\n\nprint(words_plural.lower())\n\nprint(words_plural.capitalize())\n\nprint(words_plural.swapcase())\n\nprint(words_plural.replace(""s"", ""ies""))\n\nprint(words_plural.split())\n\nprint(words_plural.split(""s""))\n\nprint(words_plural.split(""s"", 1))\n\nprint(words_plural', '#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.\ncontains_plural = [word.is_plural() for word in words_plural]\n\nprint(contains_plural)\n\nprint(words_plural[0].is_plural())\n\nprint(words_plural[1].is_plural())\n\nprint(words_plural[2].is_plural())\n\nprint(words_plural[3].is_plural())\n\nprint(words_plural[4].is_plural())\n\nprint(words_plural[5].is_plural())\n\nprint(words_plural[6].is_plural())\n\nprint', '#Print out whether or not ""words_plural"" contains a word in plural as boolean.\ndef plural_check(words_plural):\n    if words_plural in plural_words:\n        return True\n    else:\n        return False\n\ndef plural_check_2(words_plural):\n    if words_plural in plural_words_2:\n        return True\n    else:\n        return False\n\ndef plural_check_3(words_plural):\n    if words_plural in plural_words_3:\n        return True\n    else:\n        return False\n\ndef plural_check_4(words_plural):\n    if words_plural in plural_words_4:\n        return True\n    else:']"
50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","['#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".\nmy_relative_altitude = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\nprint(my_relative_altitude)\n\nprint(my_relative_altitude[0])\n\nprint(my_relative_altitude[1])\n\nprint(my_relative_altitude[2])\n\nprint(my_relative_altitude[3])\n\nprint(my_relative_altitude[4])', '#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.\nmy_net_altitude = [0]\nfor i in range(1,len(my_net_list)):\n    my_net_altitude.append(my_net_altitude[i-1] + my_net_list[i])\n\nprint(my_net_altitude)\n\nprint(""The sum of all prefix sums is: "", sum(my_net_altitude))\n\nprint(""The sum of all prefix sums is: "", sum(my_net_altitude))\n\nprint(""The sum of all prefix sums is: "", sum(my_net_altitude))', '#Find the larget number in the list my_net_altitude and print it out.\nprint(max(my_net_altitude))\n\nprint(""The largest number in the list my_net_altitude is: "", max(my_net_altitude))\n\nprint(""The smallest number in the list my_net_altitude is: "", min(my_net_altitude))\n\nprint(""The average number in the list my_net_altitude is: "", sum(my_net_altitude)/len(my_net_altitude))\n\nprint(""The median number in the list my_net_altitude is: "", statistics.median(my_net_altitude))\n\nprint']"
51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","['#Assign the list of words ""{A}"" to a variable named ""my_sentences"".\nmy_sentences = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""]\n\nfor sentence in my_sentences:\n    print(sentence)\n\nprint()\n\nfor i in range(len(my_sentences)):\n    print(my_sentences[i])\n\nprint()', '#Assign an integer ""{K}"" to a variable named ""k"".\nk = 10\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(', '#Truncate the list such that it contains k words and store as truncated_list\ntruncated_list = truncated_list[:k]\n\nprint(truncated_list)\n\nprint(""The list is truncated to contain {} words."".format(k))\n\nprint(""The list is truncated to contain {} words."".format(len(truncated_list)))\n\nprint(""The list is truncated to contain {} words."".format(len(truncated_list)))\n\nprint(""The list is truncated to contain {} words."".format(len(truncated_list)))\n\nprint(""The list is truncated to contain {} words."".format(len(truncated_list)))\n\nprint(""The list is truncated', '#Print out the variable truncated_list.\nprint(truncated_list)\n\nprint(""The length of the truncated list is: "", len(truncated_list))\n\nprint(""The first element of the truncated list is: "", truncated_list[0])\n\nprint(""The last element of the truncated list is: "", truncated_list[-1])\n\nprint(""The middle element of the truncated list is: "", truncated_list[len(truncated_list)//2])\n\nprint(""The middle element of the truncated list is: "", truncated_list[len(truncated_list)//2+1])\n\nprint(""The middle element of']"
52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Count the frequencies of the integers in my_numbers.\n\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(f""The frequencies of the integers in my_numbers are: {my_numbers}"")\n\nprint(f""The frequencies of the integers in my_numbers are: {dict(Counter(my_numbers))}"")\n\nprint(f""The frequencies of the integers in my_numbers are: {Counter(my_numbers)}"")\n\nprint(f""The frequencies of the integers in my_numbers are: {', '#Find the integer that the frequency is 1 and store as one_time.\none_time = 0\nfor i in range(len(freq)):\n    if freq[i] == 1:\n        one_time = i\n        break\n\nprint(one_time)\n\nprint(freq)\n\nprint(freq[one_time])\n\nprint(freq[one_time] == 1)\n\nprint(freq[one_time] == freq[0])\n\nprint(freq[one_time] == freq[1])\n\nprint(freq[one_time] == freq[2])\n\nprint(freq[one_time]', '#Print out the variable one_time.\nprint(one_time)\n\nprint(""The value of one_time is: "", one_time)\n\nprint(""The value of one_time is: "", type(one_time))\n\nprint(""The value of one_time is: "", one_time.shape)\n\nprint(""The value of one_time is: "", one_time.dtype)\n\nprint(""The value of one_time is: "", one_time.size)\n\nprint(""The value of one_time is: "", one_time.ndim)\n\nprint(""The value of one_']"
53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Assign an integer ""{Val}"" to a variable named ""val"".\nval = 10\n\nprint(val)\n\nval = 10.0\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval', '#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.\nremove_numbers = [x for x in my_numbers if x!= val]\n\nprint(remove_numbers)\n\nprint(my_numbers)\n\nprint(my_numbers.count(val))\n\nprint(my_numbers.index(val))\n\nprint(my_numbers.index(val, 0, 10))\n\nprint(my_numbers.index(val, 10))\n\nprint(my_numbers.index(val, 10, 20))\n\nprint(my_numbers.index(val, 20', ""#Print out the variable remove_numbers.\nprint(remove_numbers)\n\n'''\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n'''\n\n'''\nTask 2:\nWrite a function called find_max_number.\nGiven an array of numbers, return the largest number in the array.\n\nFor example, given the array [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], your function should return 10.""]"
54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","['#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Assign an integer ""{Val}"" to a variable named ""val"".\nval = 10\n\nprint(val)\n\nval = 10.0\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval = ""Hello World""\n\nprint(val)\n\nval', '#Sum all the number in my_numbers and store as sum_numbers.\nsum_numbers = sum(my_numbers)\nprint(sum_numbers)\n\nprint(""The sum of the numbers in my_numbers is: "", sum_numbers)\n\nprint(""The sum of the numbers in my_numbers is: "", sum(my_numbers))\n\nprint(""The sum of the numbers in my_numbers is: "", sum(my_numbers))\n\nprint(""The sum of the numbers in my_numbers is: "", sum(my_numbers))\n\nprint(""The sum of the numbers in my_numbers is: "", sum(my_numbers))', '#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\ndef check_sum(val, sum_numbers):\n    if sum_numbers == val:\n        return ""True""\n    else:\n        return ""False""\n\nprint(check_sum(10, 15))\nprint(check_sum(10, 10))\nprint(check_sum(10, 11))\nprint(check_sum(10, 12))\nprint(check_sum(10, 13))\nprint(check_sum(10, 14))\nprint(check_sum(10,']"
55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","['#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".\nmy_numbers1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers1)\n\nprint(sorted(my_numbers1))\n\nprint(my_numbers1)\n\nprint(sorted(my_numbers1, reverse=True))\n\nprint(my_numbers1)\n\nprint(sorted(my_numbers1, key=lambda x: x*x))\n\nprint(my_numbers1)\n\nprint(sorted(my_numbers', '#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\nmy_numbers2 = sorted(B)\n\nprint(my_numbers2)\n\nprint(my_numbers2[0])\n\nprint(my_numbers2[-1])\n\nprint(my_numbers2[1:3])\n\nprint(my_numbers2[1:])\n\nprint(my_numbers2[:3])\n\nprint(my_numbers2[1:3:2])\n\nprint(my_numbers2[::2])\n\nprint(my_numbers2[::-1])\n\nprint(my_numbers2[1:])\n\nprint(', '#Merge the two sorted lists in a new sorted list and store as new_list.\n\ndef merge_sort(list1, list2):\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    list1.sort()\n    list2.sort()\n    new_list = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            new_list.append(list1[i])\n            i += 1\n        else:\n            new_list.append(list2[j])\n            j +=', ""#Print the sorted new_list.\nprint(new_list)\n\n'''\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n'''\n""]"
56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","['#Assign an integer array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\nprint(my_array)\n\nprint(my_array[0])\n\nprint(my_array[1])\n\nprint(my_array[2])\n\nprint(my_array[3])\n\nprint(my_array[4])\n\nprint(my_array[5])\n\nprint(my_array[6])\n\nprint(my_array[7])\n\nprint(my_array[8])\n\nprint(my_array[9])', '#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.\n\ndef max_subarray(my_array):\n    max_subarray = [0] * len(my_array)\n    max_subarray[0] = my_array[0]\n    max_subarray[1] = max(my_array[0], my_array[1])\n    for i in range(2, len(my_array)):\n        max_subarray[i] = max(max_subarray[i-1] + my_array[i], my_array[i])\n    return max_subarray\n\nprint(max_subarray([1, -2, 3,', '#Compute the sum of max_subarray and store as sum_subarry.\nsum_subarry = max_subarray(arr)\n\nprint(sum_subarry)\n', ""#Print out the variable sum_subarray.\nprint(sum_subarray)\n\n'''\nSample Input 1:\n\nInput:\n\narr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nn = 10\n\nOutput:\n\nSum of subarray is 10\n\nSample Output 2:\n\nInput:\n\narr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nn = 1""]"
57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","['#Assign the positive number ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\nprint(my_number)\n\nmy_number = 10.0\n\nprint(my_number)\n\nmy_number = 10.0 + 10\n\nprint(my_number)\n\nmy_number = 10.0 - 10\n\nprint(my_number)\n\nmy_number = 10.0 * 10\n\nprint(my_number)\n\nmy_number = 10.0 / 10\n\nprint(my_number)', '#Compute the squre root of the number and store as square_root. \nsquare_root = math.sqrt(number)\n\nprint(""The square root of"", number, ""is"", square_root)\n\nprint(""The square root of"", number, ""is"", math.sqrt(number))\n\nprint(""The square root of"", number, ""is"", math.sqrt(number))\n\nprint(""The square root of"", number, ""is"", math.sqrt(number))\n\nprint(""The square root of"", number, ""is"", math.sqrt(number))\n\nprint(""The square root of"", number, ""is"", math.sqrt(number', '#Compute the largest integer but not larger than square_root and store as largest_square_root.\nlargest_square_root = 0\nfor i in range(1,square_root+1):\n    for j in range(1,square_root+1):\n        if i*j > largest_square_root:\n            largest_square_root = i*j\n\nprint(largest_square_root)\n', '#Print the integer largest_square_root.\nprint(largest_square_root(100))\n']"
58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","['#Assign the list of words ""{A}"" to a variable named ""my_words"".\nmy_words = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""]\n\ndef main():\n    #Create a variable named ""my_word"" and assign it the value of the variable ""my_words"".\n    my_word = my_words[0]\n\n    #Print the value', ""#Count the length of the words in the list and store as a dictionary word_count. \nword_count = {}\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\nprint(word_count)\n\nprint(len(word_count))\n\nprint(word_count.get('python'))\n\nprint(word_count.get('python', 0))\n\nprint(word_count.get('python', 100))\n\nprint(word_count.get('python', 100) + 1)"", '#Find the element with the largest count in dictionary word_count and store as longest_word.\nlongest_word = max(word_count, key=word_count.get)\n\nprint(longest_word)\n', ""#print the variable longest_word.\nprint(longest_word)\n\n'''\nOutput:\n\nThe longest word in the dictionary is 'the'\n'''\n""]"
59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', ""#Return the elements that appears exactly once in the above list and store as my_uniques.\n\nmy_uniques = []\nfor i in range(len(my_list)):\n    if my_list[i] not in my_uniques:\n        my_uniques.append(my_list[i])\nprint(my_uniques)\n\n'''\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,"", '#Compute the sum of the list my_uniques and print it out.\nprint(sum(my_uniques))\n\nprint(""The list my_uniques is now sorted."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list my_uniques is now reversed."")\n\nprint(""The list']"
60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\nprint(my_matrix)\n\nprint(my_matrix.shape)\n\nprint(my_matrix.dtype)\n\nprint(my_matrix.itemsize)\n\nprint(my_matrix.itemsize * my_matrix.shape[0])\n\nprint(my_matrix.itemsize * my_matrix.shape[1])\n\nprint(my_matrix.itemsize * my_matrix.shape[2])\n\nprint(my_matrix.itemsize * my_matrix.shape[3])\n\nprint(my_matrix', ""#Find the diagonal elements of my matrix and store as diag_elements.\ndiag_elements = []\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        if i == j:\n            diag_elements.append(matrix[i][j])\n\nprint(diag_elements)\n\n'''\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n'''\n"", '#print out the sum of the variable diag_elements.\nprint(diag_elements)\n\nprint(""The sum of the elements of the diagonal is: "", sum(diag_elements))\n\nprint(""The sum of the elements of the off-diagonal is: "", sum(off_diag_elements))\n\nprint(""The sum of the elements of the off-diagonal is: "", sum(off_diag_elements))\n\nprint(""The sum of the elements of the off-diagonal is: "", sum(off_diag_elements))\n\nprint(""The sum of the elements of the off-diagonal is: "", sum(off_diag_elements))']"
61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\nprint(my_matrix)\n\nprint(my_matrix.shape)\n\nprint(my_matrix.dtype)\n\nprint(my_matrix.itemsize)\n\nprint(my_matrix.itemsize * my_matrix.shape[0])\n\nprint(my_matrix.itemsize * my_matrix.shape[1])\n\nprint(my_matrix.itemsize * my_matrix.shape[2])\n\nprint(my_matrix.itemsize * my_matrix.shape[3])\n\nprint(my_matrix', '#Assign the number ""{T}"" to a variable named ""t"".\nt = 10\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(type(t))\n\nprint(t)\n\nprint(', '#Compute the condition number of my_matrix and store as result.\nresult = np.linalg.cond(my_matrix)\nprint(result)\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%', '#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".\ndef check_if_smaller_than(t, result):\n    if result < t:\n        return True\n    else:\n        return False\n\ndef check_if_greater_than(t, result):\n    if result > t:\n        return True\n    else:\n        return False\n\ndef check_if_equal(t, result):\n    if result == t:\n        return True\n    else:\n        return False\n\ndef check_if_not_equal(t, result):\n    if result!= t:\n        return True\n    else:\n        return False\n\ndef check_if_greater_or_']"
62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","['#Assign the matrix ""{A}"" to a variable named ""a"".\na = A\n\nprint(a)\n\nprint(a[0][0])\n\nprint(a[0][1])\n\nprint(a[1][0])\n\nprint(a[1][1])\n\nprint(a[2][0])\n\nprint(a[2][1])\n\nprint(a[3][0])\n\nprint(a[3][1])\n\nprint(a[4][0])\n\nprint(a[4][1])\n\nprint(a[5][0])\n\nprint(a[5][', '#Assign the matrix ""{B}"" to a variable named ""b"".\nb = B\n\nprint(b)\n\nprint(b.shape)\n\nprint(b.dtype)\n\nprint(b.itemsize)\n\nprint(b.strides)\n\nprint(b.flat)\n\nprint(b.size)\n\nprint(b.ndim)\n\nprint(b.flags)\n\nprint(b.flags.writeable)\n\nprint(b.flags.f_contiguous)\n\nprint(b.flags.c_contiguous)\n\nprint(b.flags.aligned)\n\nprint(b.flags.', ""#Compute the multiplication of two matrices and store as result.\n\tresult = np.matmul(A,B)\n\tprint(result)\n\nif __name__ == '__main__':\n\tmain()"", '#Compute the sum of the result and print it out.\nprint(sum(result))\n']"
63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","['#Assign the matrix ""{A}"" to a variable named ""a"".\na = A\n\nprint(a)\n\nprint(a[0][0])\n\nprint(a[0][1])\n\nprint(a[1][0])\n\nprint(a[1][1])\n\nprint(a[2][0])\n\nprint(a[2][1])\n\nprint(a[3][0])\n\nprint(a[3][1])\n\nprint(a[4][0])\n\nprint(a[4][1])\n\nprint(a[5][0])\n\nprint(a[5][', '#Assign the matrix ""{B}"" to a variable named ""b"".\nb = B\n\nprint(b)\n\nprint(b.shape)\n\nprint(b.dtype)\n\nprint(b.itemsize)\n\nprint(b.strides)\n\nprint(b.flat)\n\nprint(b.size)\n\nprint(b.ndim)\n\nprint(b.flags)\n\nprint(b.flags.writeable)\n\nprint(b.flags.f_contiguous)\n\nprint(b.flags.c_contiguous)\n\nprint(b.flags.aligned)\n\nprint(b.flags.', '#Implement a function that computes the determinant of a matrix.\n\ndef determinant(matrix):\n    determinant = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            determinant += matrix[i][j] * (i + j + 1)\n    return determinant\n\nprint(determinant([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n', '#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".\ndef check_determinant(a, b):\n    if abs(np.linalg.det(a) - np.linalg.det(b)) > 1e-10:\n        print(""True"")\n    else:\n        print(""False"")\n\ndef check_inverse(a, b):\n    if np.linalg.det(a) * np.linalg.det(b) < 0:\n        print(""True"")\n    else:\n        print(""False"")\n\ndef check_inverse_matrix(a, b):\n    if np.linalg.det(a) * np.linalg.']"
64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","['#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Implement a function that computes the exponential output of a list.\n\ndef exponential_output(list):\n    return [math.exp(x) for x in list]\n\nprint(exponential_output([1, 2, 3]))\n\nprint(exponential_output([1, 2, 3, 4]))\n\nprint(exponential_output([1, 2, 3, 4, 5]))\n\nprint(exponential_output([1, 2, 3, 4, 5, 6]))\n\nprint(exponential_output([1, 2, 3, 4, 5,', '#Implement a function that computes summation of a list.\n\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\ndef sum_list_2(list):\n    return sum(list)\n\nprint(sum_list_2([1, 2, 3, 4, 5]))\n\ndef sum_list_3(list):\n    return sum(list)\n\nprint(sum_list_3([1, 2, 3, 4,', '#Implement a function that computes log of a number.\n\ndef log(x):\n    if x == 0:\n        return 0\n    else:\n        return x * log(x)\n\nprint(log(10))\nprint(log(100))\nprint(log(1000))\nprint(log(10000))\nprint(log(100000))\nprint(log(1000000))\nprint(log(10000000))\nprint(log(100000000))\nprint(log(1', '#Print out the log of sum exponential my_numbers.txt\n\ndef sum_exp(x):\n    if x == 0:\n        return 1\n    else:\n        return x + sum_exp(x-1)\n\ndef main():\n    f = open(""my_numbers.txt"", ""r"")\n    for line in f:\n        print(sum_exp(int(line)))\n\nif __name__ == ""__main__"":\n    main()\n']"
65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","['#Assign the list of points ""{A}"" to a variable named ""my_points"".\nmy_points = [A]\n\nprint(my_points)\n\nprint(my_points[0])\n\nprint(my_points[1])\n\nprint(my_points[2])\n\nprint(my_points[3])\n\nprint(my_points[4])\n\nprint(my_points[5])\n\nprint(my_points[6])\n\nprint(my_points[7])\n\nprint(my_points[8])\n\nprint(my_points[9])\n\nprint(my_points[10])', '#Assign the integer ""{K}"" to a variable named ""k"".\nk = 10\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(', '#Implement a function that computes the distance between a point and the origin (0,0).\n\ndef distance(point):\n    return math.sqrt(point[0]**2 + point[1]**2)\n\nprint(distance([1,2]))\n\ndef distance(point):\n    return math.sqrt(point[0]**2 + point[1]**2)\n\nprint(distance([1,2]))\n\ndef distance(point):\n    return math.sqrt(point[0]**2 + point[1]**2)\n\nprint(distance([1,2]))\n\ndef distance(point):\n    return math.sqrt(point[0]**2 + point[1]**', '#Implement a function that computes the k closest points in an array to the origin and store as result.\n\ndef k_closest_points(points, k):\n    # Write your code here\n    result = []\n    for i in range(len(points)):\n        result.append(points[i])\n    result.sort(key=lambda x: x[2])\n    return result[:k]\n\nprint(k_closest_points([[1, 3], [2, 3], [3, 3]], 2))\n', '#Compute the k closest points in my_points and print them out.\ndef k_closest_points(my_points, k):\n    #Sort the points by their distance from the origin\n    my_points.sort(key=lambda x: x[2])\n    #Return the k closest points\n    return my_points[:k]\n\ndef main():\n    #Read the data from the file\n    data = read_data(DATA_FILE)\n    #Create a list of the points\n    my_points = []\n    #For each point in the data\n    for point in data:\n        #Create a tuple of the point\n        point = tuple(point)\n        #Add the point']"
66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","['#Implement a function called LCP() to find the longest common prefix of two strings.\n\ndef LCP(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n    if str1[0] == str2[0]:\n        return 1 + LCP(str1[1:], str2[1:])\n    else:\n        return max(LCP(str1[1:], str2), LCP(str1, str2[1:]))\n\nprint(LCP(""abc"", ""ab""))\nprint(LCP(""abc"", ""abc""))\nprint(LCP(""abc"",', '#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Apply the function LCP() recusively to lst1 and lst2.\ndef LCP(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return 0\n    if lst1[0] == lst2[0]:\n        return 1 + LCP(lst1[1:], lst2[1:])\n    else:\n        return max(LCP(lst1[1:], lst2), LCP(lst1, lst2[1:]))\n\nprint(LCP([1, 2, 3, 4, 5], [1, 2, 3', '#Print the the longest common prefix of the strings in lst1 and lst2\ndef longestCommonPrefix(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return """"\n    if lst1[0] == lst2[0]:\n        return lst1[0]\n    else:\n        return longestCommonPrefix(lst1[1:], lst2)\n\nprint(longestCommonPrefix([""flower"",""flow"",""flight""], [""flow"",""flight"",""flight""]))\nprint(longestCommonPrefix([""dog"",""racecar"",""car""], [""car"",""racecar"",""car""]))\nprint(longestCommonPrefix([""dog"",""race']"
67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","['#Assigns a list {lst1} to a variable named lst1.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1[0] = 100\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse', ""#Create a frequency table of elements in lst1\nfreq_table = {}\nfor i in lst1:\n    if i in freq_table:\n        freq_table[i] += 1\n    else:\n        freq_table[i] = 1\n\nprint(freq_table)\n\nprint(freq_table.get('a'))\nprint(freq_table.get('b'))\nprint(freq_table.get('c'))\nprint(freq_table.get('d'))\nprint(freq_table.get('e'))\nprint(freq_table.get('f'))\nprint(freq_table.get('"", '#Find the elements with frequency larger than 1 and assign them to a list lst2\nlst2 = [i for i in lst if i > 1]\n\nprint(lst2)\n\nlst3 = [i for i in lst if i % 2 == 0]\n\nprint(lst3)\n\nlst4 = [i for i in lst if i % 2 == 0 and i > 1]\n\nprint(lst4)\n\nlst5 = [i for i in lst if i % 2 == 0 and i > 1 and i < 10]\n\nprint(lst5)\n\nlst6 = [i for', '#Print out lst2\nprint(lst2)\n\nlst3 = [1,2,3,4,5,6,7,8,9,10]\n\nlst4 = [1,2,3,4,5,6,7,8,9,10]\n\nlst5 = [1,2,3,4,5,6,7,8,9,10]\n\nlst6 = [1,2,3,4,5,6,7,8,9,10]\n\nlst7 = [1,2,3,4,']"
68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","[""#Initialize a variable named w1 with a string '{w}'\nw1 = '{w}'\n\nprint(w1.format(w='Hello'))\n\nprint(w1.format(w='World'))\n\nprint(w1.format(w='!'))\n\nprint(w1.format(w='?'))\n\nprint(w1.format(w='!?'))\n\nprint(w1.format(w='?!'))\n\nprint(w1.format(w='!?!'))\n\nprint(w1.format(w='!?!?'))\n\nprint(w1.format(w"", '#Get the first non-repeating character in w1\n\tfor i in range(len(w1)):\n\t\tif w1[i]!= w2[i]:\n\t\t\treturn w1[i]\n\treturn None\n\ndef get_longest_common_substring(w1, w2):\n\tlongest_common_substring = """"\n\tfor i in range(len(w1)):\n\t\tif w1[i] in w2:\n\t\t\tlongest_common_substring += w1[i]\n\t\telse:\n\t\t\tbreak\n\treturn longest_common_substring\n\ndef get_longest_common_substring_with', '#Find its corresponding index and assign it to n1\n\tn1 = 0\n\tfor i in range(len(n)):\n\t\tif n[i] == n1:\n\t\t\tn1 = i\n\treturn n1\n\ndef find_index_of_n2(n):\n\tn2 = 0\n\tfor i in range(len(n)):\n\t\tif n[i] == n2:\n\t\t\tn2 = i\n\treturn n2\n\ndef find_index_of_n3(n):\n\tn3 = 0\n\tfor i in range(len(n)):', '#Print out n1 and n2\nprint(n1, n2)\n\nprint(n1 + n2)\nprint(n1 - n2)\nprint(n1 * n2)\nprint(n1 / n2)\nprint(n1 // n2)\nprint(n1 % n2)\n\nprint(n1 ** n2)\n\nprint(n1 // 2)\nprint(n1 // 2.0)\nprint(n1 // 2.5)\nprint(n1 // 2.5 + 1)\n\nprint(n']"
69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","['#Assign a sentence \'{s1}\' to a variable named sentence1.\nsentence1 = ""I am a student""\n\nprint(sentence1)\n\nprint(sentence1[0])\n\nprint(sentence1[1])\n\nprint(sentence1[2])\n\nprint(sentence1[3])\n\nprint(sentence1[4])\n\nprint(sentence1[5])\n\nprint(sentence1[6])\n\nprint(sentence1[7])\n\nprint(sentence1[8])\n\nprint(sentence1[9])\n\nprint(sentence1[10])\n\nprint(sentence1[11])', ""#Assign a sentence '{s2}' to a variable named sentence2.\nsentence2 = s2\n\nprint(sentence1)\nprint(sentence2)\n\nprint(sentence1 == sentence2)\n\nprint(sentence1!= sentence2)\n\nprint(sentence1 < sentence2)\n\nprint(sentence1 <= sentence2)\n\nprint(sentence1 > sentence2)\n\nprint(sentence1 >= sentence2)\n\nprint(sentence1 == sentence2)\n\nprint(sentence1!= sentence2)\n\nprint(sentence1 < sentence2)\n\nprint(sentence1 <= sentence2)\n\nprint(sentence1 > sentence2"", '#Split sentence1 into words and assign them to words1.\nwords1 = sentence1.split()\n\nprint(words1)\n\nprint(len(words1))\n\nprint(words1[0])\n\nprint(words1[1])\n\nprint(words1[2])\n\nprint(words1[3])\n\nprint(words1[4])\n\nprint(words1[5])\n\nprint(words1[6])\n\nprint(words1[7])\n\nprint(words1[8])\n\nprint(words1[9])\n\nprint(words1[10])\n\nprint', '#Split sentence2 into words and assign them to words2.\nwords2 = sentence2.split()\n\nprint(words2)\n\nprint(len(words2))\n\nprint(words2[0])\n\nprint(words2[1])\n\nprint(words2[2])\n\nprint(words2[3])\n\nprint(words2[4])\n\nprint(words2[5])\n\nprint(words2[6])\n\nprint(words2[7])\n\nprint(words2[8])\n\nprint(words2[9])\n\nprint(words2[10])\n\nprint', '#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.\n\ndef find_uncommon_words(words1, words2):\n    uncommon_words = []\n    for word in words1:\n        if word in words2:\n            uncommon_words.append(word)\n    return uncommon_words\n\nwords1 = [""a"", ""b"", ""c"", ""a"", ""b"", ""c"", ""a"", ""b"", ""c""]\nwords2 = [""a"", ""b"", ""c"", ""a"", ""b"", ""c"", ""a"", ""b"", ""c""]\nprint(find_uncommon_words(words1', ""#Print uncommon_words.txt\n\nwith open('uncommon_words.txt', 'r') as f:\n    for line in f:\n        print(line.strip())\n""]"
70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","['#Assign a sentence \'{s1}\' to a variable named sentence1.\nsentence1 = ""I am a student""\n\nprint(sentence1)\n\nprint(sentence1[0])\n\nprint(sentence1[1])\n\nprint(sentence1[2])\n\nprint(sentence1[3])\n\nprint(sentence1[4])\n\nprint(sentence1[5])\n\nprint(sentence1[6])\n\nprint(sentence1[7])\n\nprint(sentence1[8])\n\nprint(sentence1[9])\n\nprint(sentence1[10])\n\nprint(sentence1[11])', '#Split sentence1 into words and assign them to words1.\nwords1 = sentence1.split()\n\nprint(words1)\n\nprint(len(words1))\n\nprint(words1[0])\n\nprint(words1[1])\n\nprint(words1[2])\n\nprint(words1[3])\n\nprint(words1[4])\n\nprint(words1[5])\n\nprint(words1[6])\n\nprint(words1[7])\n\nprint(words1[8])\n\nprint(words1[9])\n\nprint(words1[10])\n\nprint', ""#Remove punctuation in words1.\nwords1 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words1]\n\nwords2 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words2]\n\nwords3 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words3]\n\nwords4 = [word.translate(str.maketrans('', '', string.punctuation)) for word in words4]\n\nwords5 = [word.translate(str.maketrans('', '', string.punctuation))"", '#Compute the average word length in words1 and assign it avg. word length in words2\navg_word_length = (len(words1) + len(words2)) / 2\n\nprint(""Average word length in words1: "" + str(avg_word_length))\nprint(""Average word length in words2: "" + str(avg_word_length))\n\nprint(""Average word length in words1: "" + str(avg_word_length))\nprint(""Average word length in words2: "" + str(avg_word_length))\n\nprint(""Average word length in words1: "" + str(avg_word_', '#Print avg. time per iteration\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str(time_per_iter))\n\nprint(""Average time per iteration: "" + str']"
71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","['#Assigns strings {w1} and {w2} to variables w1 and w2 respectively.\nw1 = ""Hello""\nw2 = ""World""\n\nprint(w1)\nprint(w2)\n\nprint(w1 + w2)\nprint(w1 * w2)\nprint(w1 / w2)\nprint(w1 // w2)\nprint(w1 % w2)\nprint(w1 ** w2)\n\nprint(w1 + w2 + w1)\nprint(w1 * w2 * w1)\nprint(w1 / w2 / w1)\nprint(w1 // w2', '#Lower-case w1 and w2 are the same word, and w1 and w2 are not the same word.\n\ndef is_anagram(w1, w2):\n    if len(w1)!= len(w2):\n        return False\n    else:\n        return sorted(w1) == sorted(w2)\n\nprint(is_anagram(""w1"", ""w2""))\nprint(is_anagram(""w1"", ""w1""))\nprint(is_anagram(""w1"", ""w3""))\nprint(is_anagram(""w1"", ""w4""))\nprint(is', '#Count the frequency of letters in w1 and w2 and assign them to f1 and f2 respectively.\nf1 = 0\nf2 = 0\nfor i in range(len(w1)):\n    if w1[i] == w2[i]:\n        f1 += 1\n    else:\n        f2 += 1\n\nprint(f1, f2)\n\n\'\'\'\nSample Input 1:\nw1 = ""abc""\nw2 = ""abc""\n\nSample Output 1:\n2\n\nSample Input 2:\nw1 = ""abc""\nw2 = ""def""\n\nSample Output 2:\n1\n\'\'\'', '#Print if f1 is equal to f2\nprint(f1 == f2)\n\nprint(f1 == f3)\n\nprint(f1 == f4)\n\nprint(f1 == f5)\n\nprint(f1 == f6)\n\nprint(f1 == f7)\n\nprint(f1 == f8)\n\nprint(f1 == f9)\n\nprint(f1 == f10)\n\nprint(f1 == f11)\n\nprint(f1 == f12)\n\nprint(f1 == f13)\n\nprint(f']"
72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","['#Assign a string {w} to a variable named w1.\nw1 = ""Hello""\n\nprint(w1)\n\nprint(w1[0])\n\nprint(w1[1])\n\nprint(w1[2])\n\nprint(w1[3])\n\nprint(w1[4])\n\nprint(w1[5])\n\nprint(w1[6])\n\nprint(w1[7])\n\nprint(w1[8])\n\nprint(w1[9])\n\nprint(w1[10])\n\nprint(w1[11])\n\nprint', '#Concatenate the elements in w1 from end to beginning and assign it to w2\nw2 = w1[0:len(w1)-1]\n\nprint(w2)\n\nprint(w1)\n\nprint(w1[0:len(w1)-1])\n\nprint(w1[0:len(w1)-1])\n\nprint(w1[0:len(w1)-1])\n\nprint(w1[0:len(w1)-1])\n\nprint(w1[0:len(w1)-1])\n\nprint(w1[0:len(w1)-1])', ""#Print w2v model\nprint(model.wv.vocab)\n\nprint(model.wv.most_similar('the'))\n\nprint(model.wv.most_similar('the', topn=10))\n\nprint(model.wv.most_similar('the', topn=10, restrict_vocab=None))\n\nprint(model.wv.most_similar('the', topn=10, restrict_vocab=['the']))\n\nprint(model.wv.most_similar('the', topn=10, restrict_vocab=['the', 'the']))""]"
73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","['#Assign a natural number {n} to named num.\nnum = 10\n\nprint(num)\n\nnum = 10.0\n\nprint(num)\n\nnum = 10.0 + 10\n\nprint(num)\n\nnum = 10.0 + 10.0\n\nprint(num)\n\nnum = 10.0 + 10.0 + 10.0\n\nprint(num)\n\nnum = 10.0 + 10.0 + 10.0 + 10.0\n\nprint(num)', '#Create a list from 1 to num and assign it to a variable lst1\nlst1 = [1,2,3,4,5,6,7,8,9,10]\n\nprint(lst1)\n\nprint(lst1[0])\n\nprint(lst1[1])\n\nprint(lst1[2])\n\nprint(lst1[3])\n\nprint(lst1[4])\n\nprint(lst1[5])\n\nprint(lst1[6])\n\nprint(lst1[7])\n\nprint(lst1[8])\n\nprint(lst1[9])\n\nprint(lst', '#Compute the sum of squared of the numbers in lst1 and assign n1 to the variable n1\nn1 = sum(lst1)**2\n\nprint(""The sum of the squares of the numbers in lst1 is: "", n1)\n\nprint(""The square root of 10 is: "", math.sqrt(10))\n\nprint(""The square root of 2 is: "", math.sqrt(2))\n\nprint(""The square root of 3 is: "", math.sqrt(3))\n\nprint(""The square root of 4 is: "", math.sqrt(4))\n\nprint(""The square root of 5 is: "", math', '#Compute the sum of the numbers in lst1 and assign its square to n2\nn2 = sum(lst1)\n\nprint(n2)\n\nprint(n2**2)\n\nprint(n2**3)\n\nprint(n2**4)\n\nprint(n2**5)\n\nprint(n2**6)\n\nprint(n2**7)\n\nprint(n2**8)\n\nprint(n2**9)\n\nprint(n2**10)\n\nprint(n2**11)\n\nprint(n2**12)\n\nprint(n2**13)', '#Print out the difference between n1 and n2\nprint(n1 - n2)\n\nprint(n1 * n2)\n\nprint(n1 / n2)\n\nprint(n1 // n2)\n\nprint(n1 % n2)\n\nprint(n1 ** n2)\n\nprint(n1 // n2 ** 2)\n\nprint(n1 ** n2 ** 2)\n\nprint(n1 ** n2 ** 2)\n\nprint(n1 ** n2 ** 2)\n\nprint(n1 ** n2 ** 2)\n\nprint(']"
74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","['#Assigns a list {lst1} to a variable named vec1.\nvec1 = lst1\n\nprint(vec1)\n\nvec2 = [1,2,3,4,5]\n\nprint(vec2)\n\nvec3 = [1,2,3,4,5]\n\nprint(vec3)\n\nvec4 = [1,2,3,4,5]\n\nprint(vec4)\n\nvec5 = [1,2,3,4,5]\n\nprint(vec5)\n\nvec6 = [1,2,3,4,5]\n\nprint(vec6', '#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\nprint(vec1)\nprint(vec2)\n\nprint(vec1 == vec2)\n\nprint(vec1 is vec2)\n\nprint(vec1 is lst2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec', '#Normalize vec1\nvec1 = vec1/np.linalg.norm(vec1)\n\nprint(""vec1 norm: "", np.linalg.norm(vec1))\n\nprint(""vec2 norm: "", np.linalg.norm(vec2))\n\nprint(""vec1 dot vec2: "", np.dot(vec1, vec2))\n\nprint(""vec1 cross vec2: "", np.cross(vec1, vec2))\n\nprint(""vec1 cross vec2 norm: "", np.linalg.norm(np.cross(vec1, vec2)))\n\nprint(""vec1', ""#Normalize vec2\n\tvec2 = vec2/np.linalg.norm(vec2)\n\treturn vec2\n\ndef get_angle(vec1, vec2):\n\t'''\n\tGet angle between two vectors\n\t'''\n\treturn np.arccos(np.dot(vec1, vec2))\n\ndef get_angle_between_vectors(vec1, vec2):\n\t'''\n\tGet angle between two vectors\n\t'''\n\treturn np.arccos(np.dot(vec1, vec2))\n\ndef get_angle_between_vectors_2(vec"", ""#Compute the dot product of vec1 and vec2\n\tdot = np.dot(vec1, vec2)\n\treturn dot\n\ndef cosine_similarity(vec1, vec2):\n\t'''\n\tCompute the cosine similarity between two vectors\n\t'''\n\tdot = dot_product(vec1, vec2)\n\tnorm1 = np.linalg.norm(vec1)\n\tnorm2 = np.linalg.norm(vec2)\n\treturn dot / (norm1 * norm2)\n\ndef cosine_similarity_vector(vec1, vec2):\n\t'''\n\tCompute the cosine similarity between a vector and"", '#Print out the dot product of the two vectors\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2))\n\nprint(np.dot(v1,v2']"
75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","['#Assigns a list {lst1} to a variable named vec1.\nvec1 = lst1\n\nprint(vec1)\n\nvec2 = [1,2,3,4,5]\n\nprint(vec2)\n\nvec3 = [1,2,3,4,5]\n\nprint(vec3)\n\nvec4 = [1,2,3,4,5]\n\nprint(vec4)\n\nvec5 = [1,2,3,4,5]\n\nprint(vec5)\n\nvec6 = [1,2,3,4,5]\n\nprint(vec6', '#Assigns a list {lst2} to a variable named vec2.\nvec2 = lst2\n\nprint(vec1)\nprint(vec2)\n\nprint(vec1 == vec2)\n\nprint(vec1 is vec2)\n\nprint(vec1 is lst2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec2)\n\nprint(vec1 is vec1)\n\nprint(vec1 is vec', '#Assigns a list {lst3} to a variable named vec3.\nvec3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,2,3]\n\nlst3 = [1,', '#Convert vec1, vec2, and vec3 to numpy array\nvec1 = np.array(vec1)\nvec2 = np.array(vec2)\nvec3 = np.array(vec3)\n\nprint(""vec1: "", vec1)\nprint(""vec2: "", vec2)\nprint(""vec3: "", vec3)\n\nprint(""vec1.shape: "", vec1.shape)\nprint(""vec2.shape: "", vec2.shape)\nprint(""vec3.shape: "", vec3.shape)\n\nprint(""vec1.dtype: "", vec1.dtype)\nprint(""vec2.', '#Implement a function called dist() to compute the distance between two vectors.\n\ndef dist(v1, v2):\n    return math.sqrt(sum([(a-b)**2 for a,b in zip(v1, v2)]))\n\nprint(dist([1,2,3], [4,5,6]))\n\ndef dist(v1, v2):\n    return math.sqrt(sum([(a-b)**2 for a,b in zip(v1, v2)]))\n\nprint(dist([1,2,3], [4,5,6]))\n\ndef dist(v1, v2):\n    return math.', ""#Compute the distance between vec1 and vec2 and assign it to d1\n\td1 = np.linalg.norm(vec1 - vec2)\n\treturn d1\n\ndef get_distance_matrix(vec1, vec2):\n\t'''\n\tCompute the distance matrix between vec1 and vec2\n\t'''\n\td1 = np.linalg.norm(vec1 - vec2, axis=1)\n\td2 = np.linalg.norm(vec2 - vec1, axis=1)\n\treturn np.column_stack((d1, d2))\n\ndef get_distance_matrix_from_file(filename):"", '#Compute the distance between vec1 and vec3 and assign it to d2\nd2 = np.linalg.norm(vec1 - vec3)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""The distance between vec1 and vec3 is: "", d2)\n\nprint(""', '#Print out whether d1 is larger than d2\nprint(d1 > d2)\n\nprint(d1 < d2)\n\nprint(d1 >= d2)\n\nprint(d1 <= d2)\n\nprint(d1 == d2)\n\nprint(d1!= d2)\n\nprint(d1 is d2)\n\nprint(d1 is not d2)\n\nprint(d1 is d1)\n\nprint(d1 is not d1)\n\nprint(d1 is d2)\n\nprint(d1 is not d2)\n\nprint(d1']"
76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\nprint(lst2)\n\nlst2.append(6)\n\nprint(lst2)\n\nlst2.insert(1,7)\n\nprint(lst2)\n\nlst2.remove(7)\n\nprint(lst2)\n\nlst2.pop()\n\nprint(lst2)\n\nlst2.pop(1)\n\nprint(lst2)\n\nlst2.reverse()\n\nprint(lst2)\n\nlst2.sort()\n\nprint(lst', '#Create a function called std() to compute the standard deviation given a list of numbers.\ndef std(lst):\n    return math.sqrt(sum([(x-mean(lst))**2 for x in lst])/len(lst))\n\nprint(mean([1,2,3,4,5]))\nprint(std([1,2,3,4,5]))\n\nprint(mean([1,2,3,4,5]))\nprint(std([1,2,3,4,5]))\n\nprint(mean([1,2,3,4,5]))\nprint(std([1,2,3,4,5]))\n\nprint(', '#Call the function std() to calculate standard deviations for lst1 and lst2.\nlst1_std = std(lst1)\nlst2_std = std(lst2)\n\nprint(""The mean of the first list is: "", mean(lst1))\nprint(""The mean of the second list is: "", mean(lst2))\nprint(""The standard deviation of the first list is: "", lst1_std)\nprint(""The standard deviation of the second list is: "", lst2_std)\n\nprint(""The mean of the first list is: "", mean(lst1))\nprint(""The mean of the second list is: "", mean(lst2))', '#Print out the smaller standard deviation.\nprint(std_dev)\n\nprint(""The mean of the data is: "", mean)\n\nprint(""The median of the data is: "", median)\n\nprint(""The mode of the data is: "", mode)\n\nprint(""The variance of the data is: "", variance)\n\nprint(""The standard deviation of the data is: "", std_dev)\n\nprint(""The skewness of the data is: "", skewness)\n\nprint(""The kurtosis of the data is: "", kurtosis)\n\nprint(""The entropy of the data is: "",']"
77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Initialize a variable named lst2 with a list {l2}.\nlst2 = [1,2,3,4,5]\n\nprint(lst2)\n\nlst2.append(6)\n\nprint(lst2)\n\nlst2.insert(1,7)\n\nprint(lst2)\n\nlst2.remove(7)\n\nprint(lst2)\n\nlst2.pop()\n\nprint(lst2)\n\nlst2.pop(1)\n\nprint(lst2)\n\nlst2.reverse()\n\nprint(lst2)\n\nlst2.sort()\n\nprint(lst', '#Create a function called mean() to compute the mean given a list of numbers.\ndef mean(numbers):\n    return sum(numbers)/len(numbers)\n\nprint(mean([1,2,3,4,5]))\n\nprint(mean([1,2,3,4,5,6,7,8,9,10]))\n\nprint(mean([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,', '#Call the function mean() to calculate means for lst1 and lst2.\nlst1_mean = mean(lst1)\nlst2_mean = mean(lst2)\n\nprint(""The mean of the first list is: "", lst1_mean)\nprint(""The mean of the second list is: "", lst2_mean)\n\nprint(""The mean of the first list is: "", mean(lst1))\nprint(""The mean of the second list is: "", mean(lst2))\n\nprint(""The mean of the first list is: "", mean(lst1))\nprint(""The mean of the second list is: "", mean(lst2))', '#Print out the smaller mean.\nprint(np.mean(np.array(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], sorted(list(map(lambda x: x[1], sorted(']"
78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively.\navg = np.mean(lst1)\nsd = np.std(lst1)\n\nprint(""The mean is: "", avg)\nprint(""The standard deviation is: "", sd)\n\nprint(""The mean is: "", avg)\nprint(""The standard deviation is: "", sd)\n\nprint(""The mean is: "", avg)\nprint(""The standard deviation is: "", sd)\n\nprint(""The mean is: "", avg)\nprint(""The standard deviation is: "", sd)\n\nprint(""The mean is: "", avg)\nprint(""The standard deviation is:', '#Compute the coeffeicient of variation of the function\ndef coeff_var(x,y):\n    return np.var(y-x)\n\ndef coeff_var_2(x,y):\n    return np.var(y-x)**2\n\ndef coeff_var_3(x,y):\n    return np.var(y-x)**3\n\ndef coeff_var_4(x,y):\n    return np.var(y-x)**4\n\ndef coeff_var_5(x,y):\n    return np.var(y-x)**5\n\ndef coeff_var_6(', ""#Print out the coefficient of variation of the data\nprint(np.var(data))\n\nplt.plot(data)\nplt.show()\n\nplt.plot(data, label='data')\nplt.plot(model, label='model')\nplt.legend()\nplt.show()\n\nplt.plot(data, label='data')\nplt.plot(model, label='model')\nplt.legend()\nplt.show()\n\nplt.plot(data, label='data')\nplt.plot(model, label='model')\nplt.legend()\nplt.show()\n\nplt.""]"
79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","['#Initialize a variable named lst1 with a list {l1}.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse()\n\nprint(lst1)\n\nlst1.sort()\n\nprint(lst', '#Get the absolute value of every element in lst1 and assign to a lst2\nlst2 = [abs(x) for x in lst1]\n\nprint(lst2)\n\nlst3 = [x**2 for x in lst1]\n\nprint(lst3)\n\nlst4 = [x**2 for x in lst1 if x%2==0]\n\nprint(lst4)\n\nlst5 = [x**2 for x in lst1 if x%2==0 if x>0]\n\nprint(lst5)\n\nlst6 = [x**2 for x in lst1 if x%2==0 if x>0', '#Compute the sum of lst2 and assign to l1\nl1 = lst1 + lst2\n\nprint(l1)\n\nprint(type(l1))\n\nprint(l1[0])\n\nprint(l1[-1])\n\nprint(l1[1:3])\n\nprint(l1[1:])\n\nprint(l1[:3])\n\nprint(l1[1:])\n\nprint(l1[:])\n\nprint(l1[1:])\n\nprint(l1[:])\n\nprint(l1[1:])\n\nprint(l1[:])\n\nprint(l', '#Print out l1 and l2\nprint(l1)\nprint(l2)\n\nprint(l1.pop())\nprint(l2.pop())\n\nprint(l1.pop(0))\nprint(l2.pop(0))\n\nprint(l1.pop(0))\nprint(l2.pop(0))\n\nprint(l1.pop(0))\nprint(l2.pop(0))\n\nprint(l1.pop(0))\nprint(l2.pop(0))\n\nprint(l1.pop(0))']"
80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","['#Assigns a list {lst1} to a variable named lst1.\nlst1 = [1,2,3,4,5]\n\nprint(lst1)\n\nlst1[0] = 100\n\nprint(lst1)\n\nlst1.append(6)\n\nprint(lst1)\n\nlst1.insert(1,7)\n\nprint(lst1)\n\nlst1.remove(7)\n\nprint(lst1)\n\nlst1.pop()\n\nprint(lst1)\n\nlst1.pop(1)\n\nprint(lst1)\n\nlst1.reverse', '#Compute the sample mean of lst1 and lst2\nlst1_mean = np.mean(lst1)\nlst2_mean = np.mean(lst2)\n\nprint(""The sample mean of lst1 is: "", lst1_mean)\nprint(""The sample mean of lst2 is: "", lst2_mean)\n\nprint(""The sample mean of lst1 and lst2 is: "", lst1_mean + lst2_mean)\n\nprint(""The sample mean of lst1 and lst2 is: "", lst1_mean - lst2_mean)\n\nprint(""The sample mean of lst1 and lst', '#Compute the sample standard deviation of lst1 and lst2\nlst1_std = np.std(lst1)\nlst2_std = np.std(lst2)\n\nprint(""The sample standard deviation of lst1 is: "", lst1_std)\nprint(""The sample standard deviation of lst2 is: "", lst2_std)\n\nprint(""The mean of lst1 is: "", np.mean(lst1))\nprint(""The mean of lst2 is: "", np.mean(lst2))\n\nprint(""The median of lst1 is: "", np.median(lst1))\nprint(""The median of', '#Compute the z-statistic to test whether its mean is 0.\nz_stat = np.mean(np.abs(np.array(z_stat) - 0))\n\nprint(""z-statistic: "", z_stat)\n\nprint(""The p-value is: "", stats.norm.sf(z_stat))\n\nprint(""The critical value is: "", stats.norm.ppf(0.95))\n\nprint(""The critical value is: "", stats.norm.ppf(0.999))\n\nprint(""The critical value is: "", stats.norm.ppf(0.9999', '#Print out the z-statistic for each sample\nprint(z_stat)\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%\n\n#%%']"
81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","['#Assign a list {lst} to named lst1.\nlst1 = [1, 2, 3, 4, 5]\n\nlst2 = [1, 2, 3, 4, 5]\n\nlst3 = [1, 2, 3, 4, 5]\n\nlst4 = [1, 2, 3, 4, 5]\n\nlst5 = [1, 2, 3, 4, 5]\n\nlst6 = [1, 2, 3, 4, 5]\n\nlst7 = [1,', '#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively.\nlst1 = [1,2,3,4,5,6,7,8,9,10]\nlst_pos = []\nlst_neg = []\nfor i in lst1:\n    if i > 0:\n        lst_pos.append(i)\n    else:\n        lst_neg.append(i)\nprint(lst_pos)\nprint(lst_neg)\n\nlst_pos.sort()\nlst_neg.sort()\nprint(lst_pos)\nprint(lst_neg)\n\nlst_pos.reverse()\nlst_', '#Concatenate lst_pos and lst_neg and assign it lst2\nlst2 = lst_pos + lst_neg\n\nprint(lst2)\n\nprint(lst2[0])\n\nprint(lst2[1])\n\nprint(lst2[2])\n\nprint(lst2[3])\n\nprint(lst2[4])\n\nprint(lst2[5])\n\nprint(lst2[6])\n\nprint(lst2[7])\n\nprint(lst2[8])\n\nprint(lst2[9])\n\nprint(lst2[10])\n\nprint(lst2[11])', '#Print out lst2\nprint(lst2)\n\nlst3 = [1,2,3,4,5,6,7,8,9,10]\n\nlst4 = [1,2,3,4,5,6,7,8,9,10]\n\nlst5 = [1,2,3,4,5,6,7,8,9,10]\n\nlst6 = [1,2,3,4,5,6,7,8,9,10]\n\nlst7 = [1,2,3,4,']"
82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","['#Initialize a variable named w with a string {w}\nw = ""w""\n\nprint(w)\n\nprint(w.upper())\n\nprint(w.lower())\n\nprint(w.capitalize())\n\nprint(w.title())\n\nprint(w.swapcase())\n\nprint(w.isalpha())\n\nprint(w.isalnum())\n\nprint(w.isdigit())\n\nprint(w.isspace())\n\nprint(w.istitle())\n\nprint(w.islower())\n\nprint(w.isupper())\n\nprint(w.isnumeric())\n\nprint', ""#Lower every character in w to lower case.\nw = w.lower()\n\nprint(w)\n\nprint(w.count('a'))\n\nprint(w.find('a'))\n\nprint(w.find('a', 1))\n\nprint(w.find('a', 1, 2))\n\nprint(w.find('a', 1, 2, 3))\n\nprint(w.rfind('a'))\n\nprint(w.rfind('a', 1))\n\nprint(w.rfind('a', 1, 2))\n\nprint("", ""#Replace every alphabetical characters in w with ''\nw = w.replace('a', '')\nw = w.replace('b', '')\nw = w.replace('c', '')\nw = w.replace('d', '')\nw = w.replace('e', '')\nw = w.replace('f', '')\nw = w.replace('g', '')\nw = w.replace('h', '')\nw = w.replace('i', '')\nw = w.replace('j', '')\nw = w.replace('k', '')\nw = w.replace('l', '')\nw = w.replace('m"", '#Print out the new word after substitution\nprint(new_word)\n']"
83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","['#Import and initialize a numpy array ""X"" with the values {X}.\nX = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nprint(""X = "", X)\n\nprint(""X.shape = "", X.shape)\n\nprint(""X.dtype = "", X.dtype)\n\nprint(""X.itemsize = "", X.itemsize)\n\nprint(""X.nbytes = "", X.nbytes)\n\nprint(""X.ndim = "", X.ndim)\n\nprint(""X.size = "", X.size)', '#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".\n\ndef dot_product(X, Xn):\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            Xn[i][j] = X[i][j] * X[i][j]\n\ndef main():\n    #Read the input from the file\n    with open(""input.txt"", ""r"") as f:\n        lines = f.readlines()\n\n    #Create a list of lists, where each inner list represents a row of the matrix\n    X = []\n    for line in lines:\n        X.append(list(map(int', '#Set the diagonal elements of ""Xn"" to 0.\n\tfor i in range(n):\n\t\tXn[i][i] = 0.0\n\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif i == j:\n\t\t\t\tXn[i][j] = 1.0\n\t\t\telse:\n\t\t\t\tXn[i][j] = 0.0\n\n\treturn Xn\n\ndef get_Xn_from_X(X):\n\tn = X.shape[0]\n\tXn = np.zeros((n,n))\n\n\tfor i in range', '#Print out the maximum value (cast as a float) in ""Xn"".\nprint(max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is: "", max(Xn))\n\nprint(""The maximum value in Xn is:']"
84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","['#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.\npred = np.zeros(len(y))\nfor i in range(len(y)):\n    pred[i] = np.argmax(model.predict(X[i]))\n\nprint(""Accuracy: "", accuracy_score(y, pred))\nprint(""Precision: "", precision_score(y, pred))\nprint(""Recall: "", recall_score(y, pred))\nprint(""F1-score: "", f1_score(y, pred))\n\nprint(""Confusion Matrix:"")\nprint(confusion_matrix(y, pred))\n\nprint(""Classification Report:"")\nprint', '#Compare the equivalence of two arrays and store the results as ""match"".\n\ndef compare_arrays(arr1, arr2):\n    match = []\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            match.append(True)\n        else:\n            match.append(False)\n    return match\n\nprint(compare_arrays([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(compare_arrays([1, 2, 3, 4, 5], [1, 2, 3,', '#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".\nnon_zero = y > 0\n\n##Assign the boolean array for whether ""y"" is greater than 0 to a variable ""positive"".\npositive = y > 0\n\n##Assign the boolean array for whether ""y"" is greater than 0 to a variable ""negative"".\nnegative = y < 0\n\n##Assign the boolean array for whether ""y"" is greater than 0 to a variable ""zero"".\nzero = y == 0\n\n##Assign the boolean array for whether ""y"" is greater than 0 to a variable ""one"".\none = y ==', '#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".\ncorrect = match & non_zero\n\nprint(correct)\n\nprint(correct.shape)\n\nprint(correct.dtype)\n\nprint(correct.sum())\n\nprint(correct.mean())\n\nprint(correct.std())\n\nprint(correct.min())\n\nprint(correct.max())\n\nprint(correct.all())\n\nprint(correct.any())\n\nprint(correct.nonzero())\n\nprint(correct.size)\n\nprint(correct.ndim)\n\nprint(correct.size)\n\nprint(correct.shape)', '#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".\nprec = correct / pred\n\nprint(""Precision: "", prec)\n\nprint(""Accuracy: "", correct / total)\n\nprint(""F1 Score: "", 2 * prec * recall / (prec + recall))\n\nprint(""Confusion Matrix: "")\nprint(confusion_matrix(y_test, y_pred))\n\nprint(""Classification Report: "")\nprint(classification_report(y_test, y_pred))\n\nprint(""Confusion Matrix: "")\nprint(confusion_matrix(y_test, y_pred))\n\nprint(""Classification Report: "")\nprint', '#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".\n\trec = correct / (np.sum(y))\n\treturn rec\n\ndef precision(y, y_hat):\n\t\'\'\'\n\tCompute the precision by dividing the number of True values in ""correct"" by the number of predicted non-zero values in ""y_hat"", and store the result as ""prec"".\n\t\'\'\'\n\tprec = correct / (np.sum(y_hat))\n\treturn prec\n\ndef f1(y, y_hat):\n\t\'\'\'\n\tCompute the F1 score by computing the precision and recall, and then taking the average of', '#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\ndef harmonic_mean(prec, rec):\n    return 2.0 * prec * rec / (prec + rec)\n\ndef main():\n    #Read in the data from the file\n    with open(sys.argv[1], \'r\') as f:\n        data = f.readlines()\n\n    #Get the number of lines in the file\n    num_lines = len(data)\n\n    #Get the number of words in the file\n    num_words = len(data[0].split())\n\n    #Get the number of characters in the file\n    num_chars = len(data[0])']"
85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","['#Initialize a string named ""concat"" with {x}.\nconcat = ""Hello, World!""\n\nprint(concat)\n\nprint(concat.upper())\n\nprint(concat.lower())\n\nprint(concat.capitalize())\n\nprint(concat.title())\n\nprint(concat.swapcase())\n\nprint(concat.replace(""Hello"", ""World""))\n\nprint(concat.find(""World""))\n\nprint(concat.rfind(""World""))\n\nprint(concat.find(""Hello""))\n\nprint(concat.rfind(""Hello""))\n\nprint(concat.find(""Hello"", 10))\n\nprint(concat.', '#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.\nimport re\npat = re.compile(r\'[A-Z]\')\n\ndef is_capital(s):\n    #Check if the string is a capital letter.\n    return pat.match(s)\n\ndef is_capital_letter(s):\n    #Check if the string is a capital letter.\n    return pat.match(s)\n\ndef is_capital_letter_or_digit(s):\n    #Check if the string is a capital letter or a digit.\n    return pat.match(s) or pat.match(s)\n\ndef is_capital_letter_or', '#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".\n\ndef find_all_matches(pat, concat):\n    result = []\n    for i in range(len(concat)):\n        if concat[i:i+len(pat)] == pat:\n            result.append(concat[i:i+len(pat)])\n    return result\n\ndef main():\n    #These ""asserts"" using only for self-checking and not necessary for auto-testing\n    assert find_all_matches(""ab"", ""abc"") == [""ab"", ""ab""]\n    assert find_all_matches(""ab"", ""ab"") == [""ab""]\n    assert find_all_matches', '#Print out ""result"".\nprint(result)\n']"
86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","['#Initialize a list ""x"" with the values {x}.\nx = [x]\n\nfor i in range(1, n):\n    #Initialize a list ""y"" with the values {y}.\n    y = [y]\n    #Initialize a list ""z"" with the values {z}.\n    z = [z]\n    #Initialize a list ""w"" with the values {w}.\n    w = [w]\n    #Initialize a list ""u"" with the values {u}.\n    u = [u]\n    #Initialize a list ""v"" with the values {v}.\n    v = [v]\n    #Initialize a list ""w"" with the values', '#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".\nmean = np.mean(x)\nstd = np.std(x)\n\nprint(""The mean of x is"", mean)\nprint(""The standard deviation of x is"", std)\n\n## 2.3.2.3.\n## 2.3.2.3.1.\n## 2.3.2.3.2.\n## 2.3.2.3.3.\n## 2.3.2.3.4.\n## 2.3.2.3.5.\n## 2.3.2.', '#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".\n\ndef find_outliers(x, mean, std):\n    results = []\n    for i in x:\n        if i < mean - 2 * std:\n            results.append(i)\n        elif i > mean + 2 * std:\n            results.append(i)\n    return results\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmean = 4\nstd = 2\nprint(find_outliers(x, mean, std))\n\n##Find the values in x', '#Sort ""results"" in ascending order and print it out.\nresults.sort()\nprint(results)\n\nprint(""The first 10 results are:"")\nfor i in range(10):\n    print(results[i])\n\nprint(""The last 10 results are:"")\nfor i in range(len(results)-10, len(results)):\n    print(results[i])\n\nprint(""The first 10 results are:"")\nfor i in range(10):\n    print(results[i])\n\nprint(""The last 10 results are:"")\nfor i in range(len(results)-10, len']"
87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","['#Initialize a list ""x"" with the values {x}\nx = [x]\n\nfor i in range(1,n):\n    #Initialize a list ""y"" with the values {y}\n    y = [y]\n    #Initialize a list ""z"" with the values {z}\n    z = [z]\n    #Initialize a list ""w"" with the values {w}\n    w = [w]\n    #Initialize a list ""v"" with the values {v}\n    v = [v]\n    #Initialize a list ""u"" with the values {u}\n    u = [u]\n    #Initialize a list ""t"" with the values', '#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".\nvocab = sorted(list(set(x)))\n\nprint(""Vocab size: "", len(vocab))\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab: "", vocab)\n\nprint(""Vocab:', '#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".\nv2i = {}\nfor i, v in enumerate(vocab):\n    v2i[v] = i\n\ndef get_word_vector(word):\n    """"""\n    Get the vector representation of a word.\n    """"""\n    if word in v2i:\n        return v2i[word]\n    else:\n        return 0\n\ndef get_word_vector_list(words):\n    """"""\n    Get the vector representation of a list of words.\n    """"""\n    return [get_word_vector(word) for word in words]\n\ndef get_word_vector_matrix(words', '#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.\nfeatures = np.zeros((len(x), len(index)), dtype=int)\n\nfor i in range(len(x)):\n    for j in range(len(index)):\n        features[i][j] = x[i][index[j]]\n\nprint(features)\n\nprint(""The shape of features is: "", features.shape)\n\nprint(""The first 5 rows of features are: "", features[:5])\n\nprint(""The last 5 rows of features are: "", features[-5:])\n\nprint(""The first 5 rows of features are: "", features', '#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n\tfor i in range(len(x)):\n\t\tfor j in range(len(x[i])):\n\t\t\tx[i][j] = v2i[x[i][j]]\n\treturn x\n\ndef get_data(data_path, data_type):\n\tif data_type == \'train\':\n\t\tdata = np.load(data_path + \'train_data.npy\')\n\t\tlabels = np.load(data_path + \'train_labels.npy\')\n\telif data_type == \'test\':\n\t\tdata = np.load(', '#Print out ""features"".\nprint(features)\n\nprint(""Features shape: "", features.shape)\n\nprint(""Features type: "", type(features))\n\nprint(""Features values: "", features.values)\n\nprint(""Features columns: "", features.columns)\n\nprint(""Features index: "", features.index)\n\nprint(""Features dtypes: "", features.dtypes)\n\nprint(""Features info: "", features.info())\n\nprint(""Features describe: "", features.describe())\n\nprint(""Features corr: "", features.corr())\n\nprint(""Features corr with target: "", features.corr(target']"
88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","['#Initialize a variable ""x"" with {x}.\nx = 10\n\nprint(x)\n\nx = 10.0\n\nprint(x)\n\nx = 10.0 + 10\n\nprint(x)\n\nx = 10.0 + 10.0\n\nprint(x)\n\nx = 10.0 + 10.0 + 10.0\n\nprint(x)\n\nx = 10.0 + 10.0 + 10.0 + 10.0\n\nprint(x)', '#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".\nmapped = list(map(fun, lst))\n\nprint(mapped)\n\nprint(type(mapped))\n\nprint(type(mapped[0]))\n\nprint(type(mapped[0][0]))\n\nprint(type(mapped[0][0][0]))\n\nprint(type(mapped[0][0][0][0]))\n\nprint(type(mapped[0][0][0][0][0]))\n\nprint(type(mapped[0][0][0][0][0][0]))\n\nprint(type(mapped[0][0][0', '#Convert each element in ""mapped"" into string.\n\tmapped = [str(x) for x in mapped]\n\treturn mapped\n\ndef get_mapped_list(mapped):\n\tmapped_list = []\n\tfor i in mapped:\n\t\tmapped_list.append(i.strip())\n\treturn mapped_list\n\ndef get_mapped_list_from_file(file_name):\n\tmapped_list = []\n\twith open(file_name, \'r\') as f:\n\t\tfor line in f:\n\t\t\tmapped_list.append(line.strip())\n\treturn mapped_list\n\ndef', '#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.\nresults = {}\n\nfor i in range(len(mapped)):\n    if mapped[i] not in results:\n        results[mapped[i]] = []\n    results[mapped[i]].append(i)\n\nprint(results)\n\nfor key in results:\n    print(key, results[key])\n\nprint(len(results))\n\nprint(len(results[1]))\n\nprint(len(results[1][0]))\n\nprint(len(results[1][0][0]))\n\nprint(len(results[1][0][0][0]))', '#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.\nfor i in zip(mapped, x):\n    results[i[0]] = i[1]\n\nprint(results)\n', '#Print out the ""results"".\nprint(results)\n\nprint(""The best model is: "", results.best_estimator_)\nprint(""The best parameters are: "", results.best_params_)\n\nprint(""The best score is: "", results.best_score_)\n\nprint(""The best feature set is: "", results.best_features_)\n\nprint(""The best feature set is: "", results.best_estimator_.feature_importances_)\n\nprint(""The best feature set is: "", results.best_estimator_.feature_importances_)\n\nprint(""The best feature set is: "", results.best_']"
89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","['#Initialize a variable ""best"" with -1, ""array"" with {array} and ""best_score"" with 0.0\nbest = -1\narray = []\nbest_score = 0.0\n\nfor i in range(1, 101):\n    #Initialize a variable ""guess"" with a random integer between 1 and 100\n    guess = randint(1, 100)\n\n    #Initialize a variable ""score"" with 0.0\n    score = 0.0\n\n    #Initialize a variable ""count"" with 0\n    count = 0\n\n    #Loop through the array\n    for j in range(len(array)):', '#Assign the first element of ""array"" to a variable named ""minimum"".\nminimum = array[0]\n\nfor i in range(1, len(array)):\n    #If the current element of ""array"" is less than the ""minimum"" variable, then assign the current element of ""array"" to the ""minimum"" variable.\n    if array[i] < minimum:\n        minimum = array[i]\n\nprint(minimum)\n', '#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".\n\ndef find_minimum(array):\n    minimum = array[0]\n    for i in range(1, len(array)):\n        if array[i] < minimum:\n            minimum = array[i]\n    return minimum\n\ndef find_maximum(array):\n    maximum = array[0]\n    for i in range(1, len(array)):\n        if array[i] > maximum:\n            maximum = array[i]\n    return maximum\n\ndef find_median(array):\n    array.sort()\n    if len(array) % 2 == 0:\n        return (array[len(', '#Print out ""best"".\nprint(""Best: %f using %s"" % (best_score, best_params))\n\nprint(""Best: %f using %s"" % (best_score, best_params))\n\nprint(""Best: %f using %s"" % (best_score, best_params))\n\nprint(""Best: %f using %s"" % (best_score, best_params))\n\nprint(""Best: %f using %s"" % (best_score, best_params))\n\nprint(""Best: %f using %s"" % (best_score, best']"
90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","['#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.\ntarget = 10\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = []\n\ndef find_all_sub_arrays(nums, target):\n    #Write your code here\n    #Create a variable ""start"" with 0, and ""end"" with the length of the nums array.\n    start = 0\n    end = len(nums) - 1\n    #Create a variable ""count"" with 0.\n    count = 0\n    #Create a variable ""sub', '#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.\n\ndef find_index(nums, target):\n    result = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            result.append(i)\n    return result\n\nprint(find_index([1,2,3,4,5], 2))\nprint(find_index([1,2,3,4,5], 5))\nprint(find_index([1,2,3,4,5], 6))\nprint(find_index([1,2,3,4,5], 7))\nprint(', '#Print out the sum of elements in ""result"".\nprint(sum(result))\n']"
91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","['#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 10\n\ndef main():\n    #Print the first N numbers in nums.\n    print(nums[:N])\n\n    #Print the last N numbers in nums.\n    print(nums[-N:])\n\n    #Print the first N numbers in nums, but skip the last N numbers in nums.\n    print(nums[:N-1])\n\n    #Print the last N numbers in nums, but skip the first N numbers in nums.\n    print', '#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.\nall_nums = set(range(1, N+1))\n\nfor i in range(1, N):\n    #If the number is divisible by 3, add it to the set ""divisible_by_3"".\n    if i % 3 == 0:\n        divisible_by_3.add(i)\n    #If the number is divisible by 5, add it to the set ""divisible_by_5"".\n    if i % 5 == 0:\n        divisible_by_5.add(i)\n\nprint(f""The set of numbers divisible by', '#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""\ndiff = all_nums - set(nums)\n\nprint(diff)\n\nprint(len(diff))\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(len(diff))\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(len(diff))\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(len(diff))\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(len(diff))\n\nprint(diff.pop())\n\nprint(diff)', '#Pop the only element in ""diff"" print it out.\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint(diff.pop())\n\nprint(diff)\n\nprint']"
92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","['#Assign {x} to a variable named ""X"".\nX = 10\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(type(X))\n\nprint(X)\n\nprint(', '#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".\ncommon = set(X[0])\n\nfor i in range(1,len(X)):\n    #If the current element in the first index of ""X"" is not in the set ""common"", add it to the set ""common"".\n    if X[i][0] not in common:\n        common.add(X[i][0])\n\nprint(common)\n\nfor i in range(1,len(X)):\n    #If the current element in the first index of ""X"" is in the set ""common"", add it to the set ""common"".\n    if X[i', '#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""\n\tfor i in range(len(X)):\n\t\tif X[i] in common:\n\t\t\tcommon.remove(X[i])\n\t\telse:\n\t\t\tcommon.add(X[i])\n\treturn common\n\ndef get_common_elements(X, Y):\n\tcommon = set()\n\tfor i in range(len(X)):\n\t\tif X[i] in Y:\n\t\t\tcommon.add(X[i])\n\treturn common\n\ndef get_common_elements_set(X, Y):\n\tcommon = set()\n\tfor i', '#Cast ""common"" as a list and print it out.\nprint(common)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print(i)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print(i)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print(i)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print(i)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print(i)\n\nprint(""The common elements are:"")\n\nfor i in common:\n    print']"
93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","['#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.\nstart = {start}\nseq = [start]\n\nfor i in range(1, len(seq)):\n    #If the current element of ""seq"" is greater than the current element of ""start"", then:\n    if seq[i] > start:\n        #Append the current element of ""seq"" to the current element of ""start"".\n        start = seq[i]\n        #Append the current element of ""seq"" to the list ""seq"".\n        seq.append(start)\n    #Otherwise, do nothing.\n\nprint(seq)\n', '#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".\n\ndef even_or_odd(start):\n    if start % 2 == 0:\n        return start / 2\n    else:\n        return start * 3 + 1\n\ndef even_or_odd_iterative(start):\n    seq = []\n    while start!= 1:\n        if start % 2 == 0:\n            start /= 2\n        else:\n            start *= 3 + 1\n        seq.append(start)\n    return seq\n\ndef even_or_odd_recursive(start):\n    if start == 1:\n        return [start]\n    else:', '#Store the sum of all numbers in ""seq"" to ""results"".\nresults = 0\nfor i in seq:\n    results += i\n\nprint(results)\n', '#Print out the ""results"".\nprint(results)\n\nprint(""The best model is: "", results.best_estimator_)\nprint(""The best parameters are: "", results.best_params_)\n\nprint(""The best score is: "", results.best_score_)\n\nprint(""The best feature set is: "", results.best_features_)\n\nprint(""The best feature set is: "", results.best_estimator_.feature_importances_)\n\nprint(""The best feature set is: "", results.best_estimator_.feature_importances_)\n\nprint(""The best feature set is: "", results.best_']"
94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","['#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\npos = ""{start}""\n\nwhile True:\n    #If the position is ""{start}"", print ""Hello, World!"".\n    if pos == ""{start}"":\n        print(""Hello, World!"")\n        #If the position is ""{swap}"", swap the two variables.\n        pos = ""{swap}""\n    #Else, print ""Hello, {pos}!"".\n    else:\n        print(""Hello, {pos}!"".format(pos=pos))\n    #Wait for 1 second.\n    time.sleep(1)\n', '#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.\n\ndef move(x, y):\n    return y.replace(x, """")\n\nprint(move(""a"", ""b""))\nprint(move(""a"", ""a""))\nprint(move(""a"", ""aa""))\nprint(move(""a"", ""aaa""))\nprint(move(""a"", ""aaaa""))\nprint(move(""a"", ""aaaaa""))\nprint(move(""a"", ""aaaaaa""))\nprint(move(""a"", ""aaaaaaa""))\nprint(move(""a"", ""aaaaaaaa""))\nprint(move(""a"", ""aaaaaaaaa""))\nprint(', '#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".\n\ndef swap(arr, pos):\n    if pos == len(arr) - 1:\n        return arr\n    else:\n        arr[pos], arr[pos + 1] = arr[pos + 1], arr[pos]\n        return swap(arr, pos + 1)\n\ndef move(arr, pos):\n    if pos == len(arr) - 1:\n        return arr\n    else:\n        arr[pos], arr[pos + 1] = arr[pos + 1], arr[pos]\n        return move(arr, pos + 1)\n\ndef main', '#Print out ""pos"".\nprint(pos)\n\nprint(""The length of the list is: "", len(pos))\n\nprint(""The first element of the list is: "", pos[0])\n\nprint(""The last element of the list is: "", pos[-1])\n\nprint(""The middle element of the list is: "", pos[len(pos)//2])\n\nprint(""The middle element of the list is: "", pos[len(pos)//2+1])\n\nprint(""The middle element of the list is: "", pos[len(pos)//2-1])\n\nprint(""The middle']"
95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","['#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.\nstack = []\nnum = """"\n\nwhile True:\n    #Get the next character from the input.\n    c = input()\n\n    #If the character is a number, add it to the ""num"" variable.\n    if c.isdigit():\n        num += c\n    #If the character is a ""+"" or ""-"", pop two elements from the stack, and add them to the ""num"" variable.\n    elif c == ""+"" or c == ""-"":\n        num1 = stack.pop()\n        num2 = stack.pop()\n        if c == ""+"":\n            num = str(int(num1) + int(', '#For each chracter in ""num"", append the character to ""stack"".\n\tfor i in range(0, len(num)):\n\t\tstack.append(num[i])\n\treturn stack\n\ndef reverse_complement(seq):\n\tcomplement = {\'A\':\'T\', \'C\':\'G\', \'G\':\'C\', \'T\':\'A\'}\n\treturn \'\'.join([complement[base] for base in seq[::-1]])\n\ndef reverse_complement_seq(seq):\n\treturn reverse_complement(seq)\n\ndef reverse_complement_seq_list(seq_list):\n\treturn [reverse_complement_seq(seq) for seq in seq', '#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.\n\ndef pop_and_print_stack(stack):\n    result = """"\n    while stack:\n        result += stack.pop()\n    print(result)\n\npop_and_print_stack(stack)\n\n\'\'\'\nOutput:\n\nEnter the number of elements in the stack: 5\nEnter the elements of the stack: 1 2 3 4 5\nEnter the elements of the stack: 6 7 8 9 10\nEnter the elements of the stack: 11 12 13 14 15\nEnter the elements', '#Cast ""result"" as integer and print it out.\nprint(result)\n']"
96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","['#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".\njoined_arrow = "" "".join(arrows)\n\nprint(joined_arrow)\n\nprint(type(joined_arrow))\n\nprint(joined_arrow.count("" ""))\n\nprint(type(joined_arrow.count("" "")))\n\nprint(joined_arrow.count("" ""))\n\nprint(type(joined_arrow.count("" "")))\n\nprint(joined_arrow.count("" ""))\n\nprint(type(joined_arrow.count("" "")))\n\nprint(joined_arrow.count("" ""))\n\nprint(type(joined_arrow.count("" ""', '#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.\n\ndef count_arrow(arr):\n    left = 0\n    right = 0\n    for i in range(len(arr)):\n        if arr[i] == \'L\':\n            left += 1\n        elif arr[i] == \'R\':\n            right += 1\n    return left, right\n\nprint(count_arrow(arr))\n\n##Task 2:\n\n##Write a function that takes a string as input and returns the string reversed.\n\ndef reverse_string(str):\n    return str[::-1]\n\nprint(reverse_string(str))\n\n##Task', '#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.\n\ndef print_right_facing_arrows(left, right):\n    if right > left:\n        print(right - left)\n\nprint_right_facing_arrows(1, 2)\nprint_right_facing_arrows(1, 3)\nprint_right_facing_arrows(2, 3)\nprint_right_facing_arrows(3, 4)\nprint_right_facing_arrows(4, 5)\nprint_right_facing_arrows(5, 6)\nprint_right_facing_arrows(6, 7)', '#Otherwise, print out the string that consists of (left - right) left-facing arrows.\n\ndef print_left_facing_arrows(n):\n    if n == 1:\n        print(""1"")\n    else:\n        print(str(n) + "" "" + str(n - 1) + "" "" + str(n - 2) + "" "" + str(n - 3) + "" "" + str(n - 4))\n\nprint_left_facing_arrows(1)\nprint_left_facing_arrows(2)\nprint_left_facing_arrows(3)\nprint_left_facing_arrows(4)\nprint_left']"
97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","['#Initialize an array ""array"" with {x}.\narray = [x]\n\nfor i in range(1, n):\n    #Add the value of the array to the value of the current element.\n    array.append(array[i-1] + array[i])\n\nprint(array[n-1])\n', '#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".\n\tdiff = max(array) - min(array)\n\treturn diff\n\ndef get_mean(array):\n\t\'\'\'\n\tThis function calculates the mean of the array.\n\t\'\'\'\n\tmean = sum(array) / len(array)\n\treturn mean\n\ndef get_median(array):\n\t\'\'\'\n\tThis function calculates the median of the array.\n\t\'\'\'\n\tarray.sort()\n\tif len(array) % 2 == 0:\n\t\treturn (array[len(array) // 2] + array[len(array) //', '#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\n\tresult = False\n\tfor i in range(len(array)):\n\t\tif array[i] == ""diff"":\n\t\t\tresult = True\n\t\t\tbreak\n\treturn result\n\ndef check_for_diff_in_array(array):\n\tresult = False\n\tfor i in range(len(array)):\n\t\tif array[i] == ""diff"":\n\t\t\tresult = True\n\t\t\tbreak\n\treturn result\n\ndef check_for_diff_in_array_2(array):\n\tresult = False\n\tfor i in range(len(array)):', '#Print out ""result""\nprint(result)\n']"
98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","['#Initialize a variable ""original"" with ""{x}""\noriginal = ""{x}""\n\nprint(original)\n\nprint(original.format(x=10))\n\nprint(original.format(x=10, y=20))\n\nprint(original.format(x=10, y=20, z=30))\n\nprint(original.format(x=10, y=20, z=30, w=40))\n\nprint(original.format(x=10, y=20, z=30, w=40, x=50))', '#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.\ndic = OrderedDict()\n\nfor i in range(len(original)):\n    dic[original[i]] = 0\n\nfor i in range(len(original)):\n    dic[original[i]] += 1\n\nprint(dic)\n\nprint(dic.items())\n\nprint(dic.keys())\n\nprint(dic.values())\n\nprint(dic.get(\'a\'))\n\nprint(dic.get(\'b\'))\n\nprint(dic.get(\'c\'))\n\nprint(dic.get(\'d\'))\n\nprint(dic.get(\'e\'))', '#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.\nfor char in original:\n    if char in dic:\n        dic[char] += 1\n    else:\n        dic[char] = 1\n\nprint(dic)\n\nprint(dic.get(\'a\'))\nprint(dic.get(\'b\'))\nprint(dic.get(\'c\'))\nprint(dic.get(\'d\'))\nprint(dic.get(\'e\'))\nprint(dic.get(\'f\'))\nprint(dic.get(\'g\'))\nprint(dic.get(\'h\'))\nprint(dic.get(\'i\'))\nprint(dic.get(\'j\'))', '#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".\nresult = """"\nfor key, value in dic.items():\n    result += key + "" "" + value + ""\\n""\n\nprint(result)\n', '#Print out ""result"".\nprint(result)\n']"
99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","['#Import re and define a regular expression that matches an email address.\nimport re\n\nemail_regex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)"")\n\ndef validate_email(email):\n    """"""\n    Function to validate an email address.\n    """"""\n    return email_regex.match(email)\n\ndef validate_password(password):\n    """"""\n    Function to validate a password.\n    """"""\n    return len(password) >= 8\n\ndef validate_username(username):\n    """"""\n    Function to validate a', '#Search for an email address in ""{x}"" and store the first match to a variable ""address"".\n\nimport re\n\nx = ""nnheo@example.com""\n\naddress = re.search(r""(\\w+@\\w+\\.com)"", x)\n\nprint(address.group(1))\n', '#Remove the substring starting from the @ symbol from ""address"".\ndef remove_substring(address):\n    return address[address.find(\'@\')+1:]\n\ndef get_address_from_file(file_name):\n    with open(file_name, \'r\') as f:\n        for line in f:\n            if line.startswith(\'address\'):\n                return remove_substring(line)\n\ndef get_address_from_file_with_default(file_name, default_address):\n    address = get_address_from_file(file_name)\n    if address == None:\n        return default_address\n    else:\n        return address', '#Replace non-alphabetical symbols with a whitespace in ""address"".\naddress = address.replace("" "", """")\n\nprint(address)\n\nprint(address.isalpha())\n\nprint(address.isalnum())\n\nprint(address.isdecimal())\n\nprint(address.isdigit())\n\nprint(address.islower())\n\nprint(address.isnumeric())\n\nprint(address.isspace())\n\nprint(address.istitle())\n\nprint(address.isupper())\n\nprint(address.islower())\n\nprint(address.isupper())\n\nprint(address.isalnum())\n\nprint(', '#Print out ""address"".\nprint(address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""Address: "", address)\n\nprint(""--------------------------------------------------"")\n\nprint(""']"
100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Implement a function that returns the distinct elements of a list.\n\ndef distinct_elements(list):\n    return list(set(list))\n\nprint(distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n', '#Compute the distinct elements of my_numbers and store as unique_list.\nunique_list = list(set(my_numbers))\n\nprint(unique_list)\n\nprint(len(unique_list))\n\nprint(unique_list[0])\n\nprint(unique_list[1])\n\nprint(unique_list[2])\n\nprint(unique_list[3])\n\nprint(unique_list[4])\n\nprint(unique_list[5])\n\nprint(unique_list[6])\n\nprint(unique_list[7])\n\nprint(unique_list[8])\n\nprint(unique_list', '#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.\n\ndef second_largest(unique_list):\n    if len(unique_list) == 0:\n        return 0\n    else:\n        second_largest = unique_list[0]\n        for i in range(1, len(unique_list)):\n            if unique_list[i] > second_largest:\n                second_largest = unique_list[i]\n        return second_largest\n\nprint(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(second_largest']"
101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Implement a function that returns the prefix sum of a list as an array.\n\ndef prefix_sum(arr):\n    # Write your code here\n    prefix_sum = [0] * len(arr)\n    prefix_sum[0] = arr[0]\n    for i in range(1, len(arr)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n    return prefix_sum\n\nprint(prefix_sum([1, 2, 3, 4, 5]))\n', '#Compute the prefix sum of my_numbers and store as prefix_sum_list.\nprefix_sum_list = []\nfor i in my_numbers:\n    prefix_sum_list.append(prefix_sum(i))\n\nprint(prefix_sum_list)\n\nprint(prefix_sum_list[0])\n\nprint(prefix_sum_list[1])\n\nprint(prefix_sum_list[2])\n\nprint(prefix_sum_list[3])\n\nprint(prefix_sum_list[4])\n\nprint(prefix_sum_list[5])\n\nprint(prefix_sum_list[6])\n\nprint', '#Print out the largest element in prefix_sum_list. \nprint(max(prefix_sum_list))\n']"
102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","['#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\nmy_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_numbers)\n\nprint(my_numbers[0])\n\nprint(my_numbers[1])\n\nprint(my_numbers[2])\n\nprint(my_numbers[3])\n\nprint(my_numbers[4])\n\nprint(my_numbers[5])\n\nprint(my_numbers[6])\n\nprint(my_numbers[7])\n\nprint(', '#Count the distances from each element in my_number to 0...\n\ndef count_distances(my_number):\n    distances = []\n    for i in range(len(my_number)):\n        distances.append(abs(my_number[i] - 0))\n    return distances\n\nprint(count_distances(my_number))\n\nprint(my_number)\n\nprint(my_number[0])\n\nprint(my_number[1])\n\nprint(my_number[2])\n\nprint(my_number[3])\n\nprint(my_number[4])\n\nprint(my_number[5])', '#Find the closest number to 0 in my_number and store as closest_number.\nclosest_number = 0\nfor i in range(1, 1000000):\n    if abs(my_number - i) < abs(my_number - closest_number):\n        closest_number = i\n\nprint(closest_number)\n', ""#Print out the distance from closest_number to 0. \nprint(closest_number)\n\n'''\nSample Output:\n\nEnter a number: 10\nThe closest number is 10.\n'''\n""]"
103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","['#Assign the string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\nprint(my_string)\n\nmy_string = ""B""\n\nprint(my_string)\n\nmy_string = ""C""\n\nprint(my_string)\n\nmy_string = ""D""\n\nprint(my_string)\n\nmy_string = ""E""\n\nprint(my_string)\n\nmy_string = ""F""\n\nprint(my_string)\n\nmy_string = ""G""\n\nprint(my_string)\n\nmy_string = ""H""', '#Implement a function that checks whether a string only contains unique characters.\n\ndef unique_characters(string):\n    # Your code here\n    return len(set(string)) == len(string)\n\nprint(unique_characters(""abc""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))\nprint(unique_characters(""abcde""))', '#Find the longest substring of my_string that contains only unique characters and store as result_substring.\n\nmy_string = ""abcde""\nresult_substring = """"\n\nfor i in range(len(my_string)):\n    for j in range(i+1, len(my_string)):\n        if my_string[i] == my_string[j]:\n            result_substring += my_string[i]\n\nprint(result_substring)\n\n\'\'\'\nSample Output:\n\nabcde\n\'\'\'\n', '#Print out the length of result_substring.\nprint(len(result_substring))\n\nprint(""The result is: "" + result_substring)\n']"
104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","['#Assign a string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\nprint(my_string)\n\nmy_string = ""B""\n\nprint(my_string)\n\nmy_string = ""C""\n\nprint(my_string)\n\nmy_string = ""D""\n\nprint(my_string)\n\nmy_string = ""E""\n\nprint(my_string)\n\nmy_string = ""F""\n\nprint(my_string)\n\nmy_string = ""G""\n\nprint(my_string)\n\nmy_string = ""H""', '#Find the repeated characters in the my_string.\n\nmy_string = ""This is a test string""\n\nrepeated_chars = []\n\nfor char in my_string:\n    if char in repeated_chars:\n        repeated_chars.append(char)\n    else:\n        repeated_chars.append(char)\n\nprint(repeated_chars)\n\nprint(len(repeated_chars))\n\nprint(repeated_chars.count(\'t\'))\n\nprint(repeated_chars.count(\'t\'))\n\nprint(repeated_chars.count(\'t\'))\n\nprint(repeated_chars.count(\'t\'))\n\nprint(', '#Count the frequency of these repeated characters.\n\ndef count_repeated_chars(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\nprint(count_repeated_chars(""abcabcabc""))\n\ndef count_repeated_chars_2(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\nprint(count_repeated_chars_2(""abcabc', '#Print out the length of most frequent character.\nprint(max(char_freq.items(), key=operator.itemgetter(1))[0])\n']"
105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","['#Assign a string ""{A}"" to a variable named ""my_string"".\nmy_string = ""A""\n\nprint(my_string)\n\nmy_string = ""B""\n\nprint(my_string)\n\nmy_string = ""C""\n\nprint(my_string)\n\nmy_string = ""D""\n\nprint(my_string)\n\nmy_string = ""E""\n\nprint(my_string)\n\nmy_string = ""F""\n\nprint(my_string)\n\nmy_string = ""G""\n\nprint(my_string)\n\nmy_string = ""H""', ""#Implement a function that checks whether a string is a palindrome.\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar'))\nprint(is_palindrome('racecar"", '#Find all substrings of my_string which is a palindrome and store as a list.\n\ndef palindrome_substrings(my_string):\n    palindrome_substrings = []\n    for i in range(len(my_string)):\n        for j in range(i, len(my_string)):\n            if my_string[i:j+1] == my_string[j::-1]:\n                palindrome_substrings.append(my_string[i:j+1])\n    return palindrome_substrings\n\nprint(palindrome_substrings(""abba""))\nprint(palindrome_substrings(""abba""))\nprint(palindrome_substrings(""', '#Print out the length of longest palindrome in the above list.\n\ndef longestPalindrome(s):\n    longest = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                if len(s[i:j+1]) > longest:\n                    longest = len(s[i:j+1])\n    return longest\n\nprint(longestPalindrome(""babad""))\nprint(longestPalindrome(""cbbd""))\nprint(longestPalindrome(""a""))\nprint(longestPalindrome(""ab""))\nprint(longestPalindrome']"
106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","['#Assign an integer ""{A}"" to a variable named ""my_integer"".\nmy_integer = 10\n\nprint(my_integer)\n\nmy_integer = 10.0\n\nprint(my_integer)\n\nmy_integer = 10j\n\nprint(my_integer)\n\nmy_integer = 10.0 + 10j\n\nprint(my_integer)\n\nmy_integer = 10.0 + 10j\n\nprint(my_integer)\n\nmy_integer = 10.0 + 10j\n\nprint(my_integer)\n\nmy', '#Implement a function that checks whether an integer is a prime number.\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(10))\nprint(is_prime(11))\nprint(is_prime(12))\nprint(is_prime(13))\nprint(is_prime(14', '#Find all prime numbers that are less than my_integer and store as prime_result.\nprime_result = []\nfor i in range(2, my_integer):\n    if is_prime(i):\n        prime_result.append(i)\n\nprint(prime_result)\n\nprint(""The sum of all prime numbers less than or equal to"", my_integer, ""is"", sum(prime_result))\n', ""#Print out the length of prime_result.\nprint(len(prime_result))\n\n'''\nSample Output:\n\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n'''\n""]"
107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\nprint(my_array)\n\nprint(my_array[0])\n\nprint(my_array[1])\n\nprint(my_array[2])\n\nprint(my_array[3])\n\nprint(my_array[4])\n\nprint(my_array[5])\n\nprint(my_array[6])\n\nprint(my_array[7])\n\nprint(my_array[8])\n\nprint(my_array[9])', '#Assign a positive integer ""{K}"" to a variable named ""k"".\nk = 10\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(type(k))\n\nprint(k)\n\nprint(', '#Implement a function that rotates one array to the right by 1 step.\n\ndef rotate_right(arr):\n    # Write your code here\n    n = len(arr)\n    for i in range(n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = 0\n    return arr\n\nprint(rotate_right([1,2,3,4,5]))\nprint(rotate_right([1,2,3,4,5,6]))\nprint(rotate_right([1,2,3,4,5,6,7]))\nprint(rotate_right([1,2,3,', '#Rotate my_array k steps and store as rotated_result.\nrotated_result = my_array.rotate(k)\n\nprint(rotated_result)\n\nprint(my_array)\n\nprint(my_array.rotate(k))\n\nprint(my_array)\n\nprint(my_array.rotate(k))\n\nprint(my_array)\n\nprint(my_array.rotate(k))\n\nprint(my_array)\n\nprint(my_array.rotate(k))\n\nprint(my_array)\n\nprint(my_array.rotate(k))\n\nprint(my_array', ""#Print out rotated_result.txt\nwith open('rotated_result.txt', 'w') as f:\n    for line in rotated_result:\n        f.write(line)\n""]"
108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\nprint(my_array)\n\nprint(my_array[0])\n\nprint(my_array[1])\n\nprint(my_array[2])\n\nprint(my_array[3])\n\nprint(my_array[4])\n\nprint(my_array[5])\n\nprint(my_array[6])\n\nprint(my_array[7])\n\nprint(my_array[8])\n\nprint(my_array[9])', '#Compute the sum of my_array and store as my_sum.\nmy_sum = sum(my_array)\n\nprint(""The sum of my_array is: "", my_sum)\n\nprint(""The sum of my_array is: "", my_array)\n\nprint(""The sum of my_array is: "", my_array[0])\n\nprint(""The sum of my_array is: "", my_array[-1])\n\nprint(""The sum of my_array is: "", my_array[1:3])\n\nprint(""The sum of my_array is: "", my_array[1:])\n\nprint(""The', '#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.\n\ndef subset_sum_equal(A, my_sum):\n    # Write your code here\n    if len(A) == 0:\n        return False\n    if len(A) == 1:\n        return A[0] == my_sum/2\n    if len(A) == 2:\n        return A[0] == my_sum/2 and A[1] == my_sum/2\n    if len(A) == 3:\n        return A[0] == my_sum/2 and A[1] == my_sum/2 and A[2] ==', '#Print out the function output when the above array is my_array.\nprint(my_array)\n\nmy_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(my_array)\n\nmy_array.sort()\n\nprint(my_array)\n\nmy_array.reverse()\n\nprint(my_array)\n\nmy_array.append(11)\n\nprint(my_array)\n\nmy_array.insert(1, 111)\n\nprint(my_array)']"
109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\nprint(my_number)\n\nmy_number = 10.0\n\nprint(my_number)\n\nmy_number = 10.0 + 10\n\nprint(my_number)\n\nmy_number = 10.0 - 10\n\nprint(my_number)\n\nmy_number = 10.0 * 10\n\nprint(my_number)\n\nmy_number = 10.0 / 10\n\nprint(my_number)', '#Compute the square root of my_number and store as root_number.\nroot_number = math.sqrt(my_number)\n\nprint(""The square root of"", my_number, ""is"", root_number)\n\nprint(""The square root of"", my_number, ""is"", math.sqrt(my_number))\n\nprint(""The square root of"", my_number, ""is"", math.sqrt(my_number, 2))\n\nprint(""The square root of"", my_number, ""is"", math.sqrt(my_number, 3))\n\nprint(""The square root of"", my_number, ""is"", math', '#Implement a function that only returns the integer part of a float number.\n\ndef int_part(number):\n    return int(number)\n\nprint(int_part(1.5))\nprint(int_part(1.50))\nprint(int_part(1.500))\nprint(int_part(1.5000))\nprint(int_part(1.50000))\nprint(int_part(1.500000))\nprint(int_part(1.5000000))\nprint(int_part(1.50000', ""#Print out the integer part of root_number.\nprint(root_number)\n\n'''\nOutput:\n12\n'''\n""]"
110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\nprint(my_number)\n\nmy_number = 10.0\n\nprint(my_number)\n\nmy_number = 10.0 + 10\n\nprint(my_number)\n\nmy_number = 10.0 - 10\n\nprint(my_number)\n\nmy_number = 10.0 * 10\n\nprint(my_number)\n\nmy_number = 10.0 / 10\n\nprint(my_number)', '#Plus my_number by 1 and store as plus_number.\nplus_number = my_number + 1\n\nprint(""my_number is"", my_number)\nprint(""plus_number is"", plus_number)\n\nprint(""my_number is"", my_number)\nprint(""plus_number is"", plus_number)\n\nprint(""my_number is"", my_number)\nprint(""plus_number is"", plus_number)\n\nprint(""my_number is"", my_number)\nprint(""plus_number is"", plus_number)\n\nprint(""my_number is"", my_number)\nprint(""plus', '#Implement a function that only returns the digits of an integer as a list.\n\ndef digits(n):\n    return [int(i) for i in str(n)]\n\nprint(digits(123456789))\nprint(digits(1234567890))\nprint(digits(12345678901))\nprint(digits(123456789012))\nprint(digits(1234567890123))\nprint(digits(12345678901234))', '#Print out the digits of plus_number.\nprint(plus_number)\n\nprint(""The sum of the digits of plus_number is: "" + str(sum(plus_number)))\n\nprint(""The sum of the digits of plus_number is: "" + str(sum(plus_number)))\n\nprint(""The sum of the digits of plus_number is: "" + str(sum(plus_number)))\n\nprint(""The sum of the digits of plus_number is: "" + str(sum(plus_number)))\n\nprint(""The sum of the digits of plus_number is: "" + str(sum(']"
111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","['#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\nmy_number = 10\n\nprint(my_number)\n\nmy_number = 10.0\n\nprint(my_number)\n\nmy_number = 10.0 + 10\n\nprint(my_number)\n\nmy_number = 10.0 - 10\n\nprint(my_number)\n\nmy_number = 10.0 * 10\n\nprint(my_number)\n\nmy_number = 10.0 / 10\n\nprint(my_number)', '#Implement a function that computes the square sum of two integers.\n\ndef square_sum(a, b):\n    return a**2 + b**2\n\nprint(square_sum(1, 2))\nprint(square_sum(2, 3))\nprint(square_sum(3, 4))\nprint(square_sum(4, 5))\nprint(square_sum(5, 6))\nprint(square_sum(6, 7))\nprint(square_sum(7, 8))\nprint(square_sum(8, 9))\nprint(square_sum(9, 1', '#Implement a function that checks one number is the sum of two square numbers.\n\ndef square_sum(num):\n    return num**2\n\ndef square_sum_2(num):\n    return num**2 + num\n\ndef square_sum_3(num):\n    return num**2 + num + num\n\ndef square_sum_4(num):\n    return num**2 + num + num + num\n\ndef square_sum_5(num):\n    return num**2 + num + num + num + num\n\ndef square_sum_6(num):\n    return num**2 + num + num + num + num + num\n\ndef square', '#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".\n\nmy_number = 10\n\nif my_number % 2 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\nmy_number = 100\n\nif my_number % 2 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\nmy_number = 1000\n\nif my_number % 2 == 0:\n    print(""True"")\nelse:\n    print(""False"")\n\nmy_number = 10000\n\nif my_number %']"
112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","['#Assign an array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\nprint(my_array)\n\nprint(my_array[0])\n\nprint(my_array[1])\n\nprint(my_array[2])\n\nprint(my_array[3])\n\nprint(my_array[4])\n\nprint(my_array[5])\n\nprint(my_array[6])\n\nprint(my_array[7])\n\nprint(my_array[8])\n\nprint(my_array[9])', '#Implement a function that computes standard deviation of an array.\n\ndef standard_deviation(array):\n    return np.std(array)\n\nprint(standard_deviation([1, 2, 3, 4, 5]))\n\nprint(standard_deviation([1, 2, 3, 4, 5, 6]))\n\nprint(standard_deviation([1, 2, 3, 4, 5, 6, 7]))\n\nprint(standard_deviation([1, 2, 3, 4, 5, 6, 7, 8]))\n\nprint(standard', ""#Calculate the standard deviation of my_array and store as result.\nresult = np.std(my_array)\nprint(result)\n\n'''\nOutput:\n1.0\n'''\n\n'''\nExercise 10\n\nWrite a function called my_mean that takes in an array of numbers and returns the mean of the array.\n\nExample:\n\nmy_array = [1, 2, 3, 4, 5]\n\nmy_mean(my_array)\n\nOutput:\n3.0\n'''\n\n'''\nExercise 11\n\nWrite a function called my_median that takes in an array of"", '#Print out ""True"" if result is less than 1. Otherwise, print ""False"".\nprint(result < 1)\n\nprint(""--------------------------------------------------"")\n\nprint(""Is 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000']"
113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","['#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\nmy_matrix = A\n\nprint(my_matrix)\n\nprint(my_matrix.shape)\n\nprint(my_matrix.dtype)\n\nprint(my_matrix.itemsize)\n\nprint(my_matrix.itemsize * my_matrix.shape[0])\n\nprint(my_matrix.itemsize * my_matrix.shape[1])\n\nprint(my_matrix.itemsize * my_matrix.shape[2])\n\nprint(my_matrix.itemsize * my_matrix.shape[3])\n\nprint(my_matrix', '#Calculate the number of rows of my_matrix and store as row_number.\nrow_number = len(my_matrix)\n\nprint(""The number of rows of my_matrix is: "" + str(row_number))\n\nprint(""The number of columns of my_matrix is: "" + str(len(my_matrix[0])))\n\nprint(""The number of elements in my_matrix is: "" + str(len(my_matrix)))\n\nprint(""The number of elements in my_matrix is: "" + str(len(my_matrix[0])))\n\nprint(""The number of elements in my_matrix is: "" + str(len', '#Calculate the number of columns of my_matrix and store as column_number.\ncolumn_number = len(my_matrix[0])\n\nprint(""The number of columns of my_matrix is: "" + str(column_number))\n\nprint(""The number of rows of my_matrix is: "" + str(len(my_matrix)))\n\nprint(""The number of elements in my_matrix is: "" + str(len(my_matrix[0])))\n\nprint(""The first element of my_matrix is: "" + str(my_matrix[0][0]))\n\nprint(""The second element of my_matrix is: "" + str(my', '#Calculate the sum of row_number and column_number and print the result.\nprint(sum(row_number) + sum(column_number))\n']"
114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","['#Assign the array ""{A}"" to a variable named ""my_array"".\nmy_array = [1, 2, 3, 4, 5]\n\nprint(my_array)\n\nprint(my_array[0])\n\nprint(my_array[1])\n\nprint(my_array[2])\n\nprint(my_array[3])\n\nprint(my_array[4])\n\nprint(my_array[5])\n\nprint(my_array[6])\n\nprint(my_array[7])\n\nprint(my_array[8])\n\nprint(my_array[9])', '#Calculate the mean of my_array and store as mean_number.\nmean_number = np.mean(my_array)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "", mean_number)\n\nprint(""The mean of my_array is: "",', '#Calculate the median of my_array and store as median_number.\nmedian_number = np.median(my_array)\n\nprint(median_number)\n\nprint(type(median_number))\n\nprint(type(my_array))\n\nprint(type(my_array[0]))\n\nprint(type(my_array[0][0]))\n\nprint(type(my_array[0][0][0]))\n\nprint(type(my_array[0][0][0][0]))\n\nprint(type(my_array[0][0][0][0][0]))\n\nprint(type(my', ""#Calculate the difference between mean_number and median_number and print the result.\nmean_number = np.mean(numbers)\nmedian_number = np.median(numbers)\nprint(mean_number - median_number)\n\n'''\nSample Output\n\nEnter the number of elements: 5\nEnter the elements: 1 2 3 4 5\nThe mean is 3.5\nThe median is 3.\n'''\n""]"
