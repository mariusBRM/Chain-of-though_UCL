,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code
0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","['def sandwich_string(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = ""{A}""\n\treturn my_string\n\ndef sandwich_string_2(A):\n\tmy_string = ""{A}""\n\treturn my_string\n\ndef sandwich_string_3(A):\n\tmy_string = ""{A}""\n\treturn my_string\n\ndef sandwich_string_4(A):\n\tmy_string = ""{A}""\n\treturn my_string\n\ndef sandwich_string_5(A):\n\tmy_string = ""{A}""\n\treturn my_string\n\ndef sandwich', 'def sandwich_string(A):\n\t#Lowercase the given string ""my_string"".\n\tA = A.lower()\n\treturn A\n\ndef sandwich_string_2(A):\n\treturn A.lower()\n\ndef sandwich_string_3(A):\n\treturn A.lower()\n\ndef sandwich_string_4(A):\n\treturn A.lower()\n\ndef sandwich_string_5(A):\n\treturn A.lower()\n\ndef sandwich_string_6(A):\n\treturn A.lower()\n\ndef sandwich_string_7(A):\n\treturn A.lower()', 'def sandwich_string(A):\n\t#Assign the distinct characters of the string to a variable named ""chars"".\n\tchars = set(A)\n\treturn \'\'.join(chars)\n\ndef sandwich_string_2(A):\n\treturn \'\'.join(set(A))\n\ndef sandwich_string_3(A):\n\treturn \'\'.join(set(A))\n\ndef sandwich_string_4(A):\n\treturn \'\'.join(set(A))\n\ndef sandwich_string_5(A):\n\treturn \'\'.join(set(A))\n\ndef sandwich_string_6(A):\n\treturn \'\'.join(set(A))', ""def sandwich_string(A):\n\t#Sort these characters in alphabetical order.\n\tA.sort()\n\treturn ''.join(A)\n\ndef sandwich_string_2(A):\n\tA.sort()\n\treturn ''.join(A)\n\ndef sandwich_string_3(A):\n\tA.sort()\n\treturn ''.join(A)\n\ndef sandwich_string_4(A):\n\tA.sort()\n\treturn ''.join(A)\n\ndef sandwich_string_5(A):\n\tA.sort()\n\treturn ''.join(A)\n\ndef sandwich_string_6("", 'def sandwich_string(A):\n\t#Print the resulting list of characters.\n\tfor i in range(len(A)):\n\t\tprint(A[i], end="""")\n\nsandwich_string(A)\n\nprint(""\\n"")\n\nA = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]\n\ndef sandwich_string(A):']"
1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","['def normalize_integer_list(numbers):\n\t#Define a list of integers named ""numbers"" with the values {numbers}.\n\tnumbers = [int(x) for x in numbers]\n\treturn numbers\n\ndef normalize_float_list(numbers):\n\tnumbers = [float(x) for x in numbers]\n\treturn numbers\n\ndef normalize_string_list(numbers):\n\tnumbers = [str(x) for x in numbers]\n\treturn numbers\n\ndef normalize_list(numbers):\n\tif type(numbers) == list:\n\t\treturn numbers\n\telif type(numbers) == tuple:\n\t\treturn list(numbers)\n\telif type(numbers) == str:', 'def normalize_integer_list(numbers):\n\t#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".\n\ttotal = sum(numbers)\n\treturn [x/total for x in numbers]\n\ndef normalize_float_list(numbers):\n\treturn [x/sum(numbers) for x in numbers]\n\ndef normalize_list(numbers):\n\tif type(numbers) == list:\n\t\tif len(numbers) == 0:\n\t\t\treturn numbers\n\t\telif len(numbers) == 1:\n\t\t\treturn numbers[0]\n\t\telse:\n\t\t\treturn normalize_float_list(numbers)\n\telse:\n\t\treturn numbers\n\ndef normalize_list_', 'def normalize_integer_list(numbers):\n\t#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".\n\tnormalized = []\n\tfor number in numbers:\n\t\tnormalized.append(number/100)\n\treturn normalized\n\ndef normalize_float_list(numbers):\n\tnormalized = []\n\tfor number in numbers:\n\t\tnormalized.append(number/100)\n\treturn normalized\n\ndef normalize_string_list(numbers):\n\tnormalized = []\n\tfor number in numbers:\n\t\tnormalized.append(number)\n\treturn normalized\n\ndef normalize_list(numbers):\n\tif type(numbers) == list:\n\t\tif type(numbers[', 'def normalize_integer_list(numbers):\n\t#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number).replace(""."", "",""))\n\treturn formatted\n\ndef normalize_float_list(numbers):\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number).replace(""."", "",""))\n\treturn formatted\n\ndef normalize_string_list(strings):\n\tformatted = []\n\tfor string in strings:\n\t\tformatted.append(string.replace(""."", "",""))\n\treturn formatted\n\ndef normalize_date_list(dates):\n\tformatted = []', 'def normalize_integer_list(numbers):\n\t#Print the variable ""formatted"".\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number))\n\treturn formatted\n\ndef normalize_float_list(numbers):\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number))\n\treturn formatted\n\ndef normalize_string_list(numbers):\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number))\n\treturn formatted\n\ndef normalize_list(numbers):\n\tif type(numbers) == list:\n\t\treturn numbers\n\telse:']"
2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","['def convert_time(a1,a2):\n\t#Write a function that takes an integer minutes and converts it to seconds.\n\treturn a1*60+a2\n\ndef convert_time_to_string(a1,a2):\n\treturn str(a1)+"" minutes and ""+str(a2)+"" seconds""\n\ndef convert_time_to_string_2(a1,a2):\n\treturn str(a1)+"" hours and ""+str(a2)+"" minutes""\n\ndef convert_time_to_string_3(a1,a2):\n\treturn str(a1)+"" days and ""+str(a2)+"" hours""\n\ndef convert_time_to', 'def convert_time(a1,a2):\n\t#Write a function that takes an integer hours and converts it to seconds.\n\tif a1 < 12:\n\t\treturn a1*60*60\n\telse:\n\t\treturn (a1-12)*60*60 + a2*60\n\ndef convert_time_to_string(a1,a2):\n\tif a1 < 12:\n\t\treturn str(a1)+"" hours""\n\telse:\n\t\treturn str(a1-12)+"" hours and ""+str(a2)+"" minutes""\n\ndef convert_time_to_string_2(a1,a2):', 'def convert_time(a1,a2):\n\t#Print the total seconds of {a1} hours and {a2} minutes.\n\treturn a1*3600+a2*60\n\ndef convert_time_to_seconds(a1,a2):\n\treturn a1*3600+a2*60\n\ndef convert_time_to_minutes(a1,a2):\n\treturn a1*60+a2\n\ndef convert_time_to_hours(a1,a2):\n\treturn a1\n\ndef convert_time_to_days(a1,a2):\n\treturn a1*24+a2']"
3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","['def squared_fibonacci(a1):\n\t#Implement a function which returns the n-th Fibonacci number.\n\ta2 = 0\n\ta3 = 1\n\tn = 0\n\twhile n < a1:\n\t\tn += 1\n\t\ta2, a3 = a3, a2 + a3\n\treturn a2\n\nprint(squared_fibonacci(10))\n', 'def squared_fibonacci(a1):\n\t#Implement a function that computes the square of an integer argument.\n\treturn a1 * a1\n\ndef fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\ndef fibonacci_recursive(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci_recursive(n-1) + fibonacci_recursive(n-2)', 'def squared_fibonacci(a1):\n\t#Print out the square of {a1}-th Fibonacci number.\n\ta2 = 0\n\ta3 = 1\n\tprint(a1, end = "" "")\n\twhile a2 < a1:\n\t\ta2 = a3\n\t\ta3 = a2 + a1\n\t\tprint(a3, end = "" "")\n\nsquared_fibonacci(10)\n']"
4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","['def count_negative_numbers(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tnegative_numbers = 0\n\tfor i in my_numbers:\n\t\tif i < 0:\n\t\t\tnegative_numbers += 1\n\treturn negative_numbers\n\nprint(count_negative_numbers([-1, 0, 1, 2, -1, -4]))\n\ndef count_positive_numbers(A):\n\tmy_numbers = A\n\tpositive_numbers = 0\n\tfor i in my_numbers:\n\t\tif i > 0:\n\t\t\tpositive_numbers += 1\n\treturn positive', 'def count_negative_numbers(A):\n\t#Count the number of negative numbers in the list as ""n_neg"".\n\tn_neg = 0\n\tfor i in range(len(A)):\n\t\tif A[i] < 0:\n\t\t\tn_neg += 1\n\treturn n_neg\n\ndef count_positive_numbers(A):\n\tn_pos = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:\n\t\t\tn_pos += 1\n\treturn n_pos\n\ndef count_zero_numbers(A):\n\tn_zero = 0\n\tfor i in range(len(A', 'def count_negative_numbers(A):\n\t#Count the number of positive numbers in the list as ""n_pos"".\n\tn_pos = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:\n\t\t\tn_pos += 1\n\treturn n_pos\n\ndef count_positive_numbers(A):\n\tn_pos = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:\n\t\t\tn_pos += 1\n\treturn n_pos\n\ndef count_positive_and_negative_numbers(A):\n\tn_pos = 0\n\tn_neg =', 'def count_negative_numbers(A):\n\t#Print out the larger number of those two.\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] < A[j]:\n\t\t\t\tprint(A[i], A[j])\n\ndef count_positive_numbers(A):\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:\n\t\t\tprint(A[i])\n\ndef count_positive_and_negative_numbers(A):\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:']"
5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","['def pandas_mean(a1,a2,a3,a4):\n\t#Import the pandas library.\n\timport pandas as pd\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\timport seaborn as sns\n\timport warnings\n\twarnings.filterwarnings(""ignore"")\n\tdf = pd.DataFrame({\'a1\':a1,\'a2\':a2,\'a3\':a3,\'a4\':a4})\n\tdf = df.sort_values(by=[\'a1\',\'a2\',\'a3\',\'a4\'])\n\tdf = df.reset_index(drop=True)\n\tdf = df.drop_duplicates()\n\tdf = df.reset_index(', 'def pandas_mean(a1,a2,a3,a4):\n\t#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].\n\tdf = pd.DataFrame({\'Yes\': [a1,a2], \'No\': [a3,a4]})\n\treturn df.mean()\n\ndef pandas_median(a1,a2,a3,a4):\n\tdf = pd.DataFrame({\'Yes\': [a1,a2], \'No\': [a3,a4]})\n\treturn df.median()\n\ndef pandas_mode(a1,a2,a3,a4):\n\tdf = pd.DataFrame({\'Yes\': [a1,a2], \'No\': [a', 'def pandas_mean(a1,a2,a3,a4):\n\t#Compute the mean per column and store the value in a variable named means.\n\tmeans = a1.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean(axis=1)\n\tmeans = means.mean', 'def pandas_mean(a1,a2,a3,a4):\n\t#Print the variable means.\n\tprint(""The mean of the variables is: "", a1.mean(), a2.mean(), a3.mean(), a4.mean())\n\ndef pandas_median(a1,a2,a3,a4):\n\tprint(""The median of the variables is: "", a1.median(), a2.median(), a3.median(), a4.median())\n\ndef pandas_mode(a1,a2,a3,a4):\n\tprint(""The mode of the variables is: "", a1.mode(), a2.mode(), a3.mode']"
6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","['def fizz_buzz(a1,a2,a3,a4):\n\t#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".\n\tif a1%a2==0 and a1%a3==0 and a1%a4==0:\n\t\treturn ""fizzbuzz""\n\telif a1%a2==0 and a1%a3==0:\n\t\treturn ""fizz""\n\telif a1%a2==0 and a1%a4==0:\n\t\treturn ""buzz""\n\telif a1%a2==0:\n\t\treturn ""fizz""\n\telif a1%a3==0:\n\t\treturn ""fizz""\n\telif a1%', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Create a list of integers ranging from {a3} to {a4}.\n\tlist_of_numbers = [a3,a4]\n\tfor i in range(a1,a2):\n\t\tif i % 3 == 0 and i % 5 == 0:\n\t\t\tlist_of_numbers.append(i)\n\treturn list_of_numbers\n\nprint(fizz_buzz(1,100,13,15))\n', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Call the written function for each element in the list and store the result as ""new_list"".\n\tnew_list = [fizz_buzz(a1,a2,a3,a4) for a1 in a1]\n\tnew_list = [fizz_buzz(a1,a2,a3,a4) for a1 in a2]\n\tnew_list = [fizz_buzz(a1,a2,a3,a4) for a1 in a3]\n\tnew_list = [fizz_buzz(a1,a2,a3,a4) for a1 in a4]\n\treturn new', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Print out the list ""new_list"".\n\tnew_list = []\n\tfor i in range(a1,a2+1):\n\t\tif i % 3 == 0 and i % 5 == 0:\n\t\t\tnew_list.append(""FizzBuzz"")\n\t\telif i % 3 == 0:\n\t\t\tnew_list.append(""Fizz"")\n\t\telif i % 5 == 0:\n\t\t\tnew_list.append(""Buzz"")\n\t\telse:\n\t\t\tnew_list.append(i)\n\tprint(new_list)\n\nfizz_buzz(1,1']"
7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","['def bi-grams(a1):\n\t#Write a function that can take a string and return a list of word bigrams as pairs.\n\tbigrams = []\n\tfor i in range(len(a1)-1):\n\t\tbigrams.append((a1[i],a1[i+1]))\n\treturn bigrams\n\ndef trigrams(a1):\n\ttrigrams = []\n\tfor i in range(len(a1)-2):\n\t\ttrigrams.append((a1[i],a1[i+1],a1[i+2]))\n\treturn trigrams\n\ndef bigrams_trigrams(a1):\n\tbigrams_trigrams = []\n\tfor', 'def bi-grams(a1):\n\t#Assign the string ""{a1}"" to a variable named sentence.\n\tsentence = a1\n\tsentence = sentence.lower()\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.split()\n\tsentence = "" "".join(sentence)\n\tsentence = sentence.', 'def bi-grams(a1):\n\t#Print out the bi-grams for the variable named sentence.\n\tfor i in range(len(a1)-1):\n\t\tprint(a1[i], a1[i+1])\n\ndef main():\n\tsentence = input(""Enter a sentence: "")\n\tsentence = sentence.lower()\n\tsentence = sentence.split()\n\tprint(""The sentence is: "", sentence)\n\tprint(""The first word is: "", sentence[0])\n\tprint(""The last word is: "", sentence[-1])\n\tprint(""The first 3 words are: "", sentence[0:3])\n\tprint(""The last 3 words']"
8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","['def top_note(a1,a2,a3,a4):\n\t#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".\n\tmy_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}\n\tprint(my_notes)\n\tprint(""The top note is: "" + str(max(my_notes.values(), key=len)))\n\tprint(""The top note is: "" + str(max(my_notes.values(), key', 'def top_note(a1,a2,a3,a4):\n\t#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\tdef top_note_dict(a1,a2,a3,a4):\n\t\ta5 = {}\n\t\tfor key in a1:\n\t\t\ta5[key] = a1[key]\n\t\tfor key in a2:\n\t\t\ta5[key] = a2[key]\n\t\tfor key in a3:\n\t\t\ta5[key] = a3[key]\n\t\tfor key in a4:\n\t\t\ta5[key] = a4[key]\n\t\ta6 = {}\n\t\tfor key in a5:\n\t\t\tif', 'def top_note(a1,a2,a3,a4):\n\t#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".\n\tmy_list = []\n\tfor name in a1:\n\t\tif a1[name] > a2[name]:\n\t\t\tif a1[name] > a3[name]:\n\t\t\t\tif a1[name] > a4[name]:\n\t\t\t\t\tmy_list.append([name,a1[name]])\n\treturn my_list\n\ndef top_note_2(a1,a2,a3,a4):\n\tmy_list = []\n\tfor name in a1:\n\t\tif a1[name] > a2[name]:', 'def top_note(a1,a2,a3,a4):\n\t#Find the name with the highest top_note and assign it to ""top_name"".\n\ttop_name = """"\n\ttop_note = 0\n\tfor i in range(len(a1)):\n\t\tif a1[i] > top_note:\n\t\t\ttop_note = a1[i]\n\t\t\ttop_name = a2[i]\n\tfor i in range(len(a3)):\n\t\tif a3[i] > top_note:\n\t\t\ttop_note = a3[i]\n\t\t\ttop_name = a4[i]\n\treturn top_name\n\ndef top_note_list(a1,a', 'def top_note(a1,a2,a3,a4):\n\t#Print the variable top_name.\n\tprint(""The top note is: "" + a1)\n\tprint(""The top note is: "" + a2)\n\tprint(""The top note is: "" + a3)\n\tprint(""The top note is: "" + a4)\n\ntop_note(""C"",""D"",""E"",""F"")\n\ndef top_note_2(a1,a2,a3,a4):\n\tprint(""The top note is: "" + a1)\n\tprint(""The top note is: "" + a2)\n\tprint(""The top note is:']"
9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","['def hex_to_binary(a1):\n\t#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".\n\treturn bin(int(a1, 16))[2:]\n\ndef binary_to_hex(a2):\n\treturn hex(int(a2, 2))[2:]\n\ndef binary_to_decimal(a3):\n\treturn int(a3, 2)\n\ndef decimal_to_binary(a4):\n\treturn bin(a4)[2:]\n\ndef decimal_to_hex(a5):\n\treturn hex(a5)[2:]\n\ndef decimal_to_binary(a6):\n\treturn bin(a', 'def hex_to_binary(a1):\n\t#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.\n\treturn int(a1, 16)\n\ndef binary_to_hex(a2):\n\treturn hex(a2)\n\ndef to_binary(a3):\n\treturn int(a3, 2)\n\ndef to_hex(a4):\n\treturn hex(int(a4))\n\ndef to_decimal(a5):\n\treturn int(a5, 10)\n\ndef to_octal(a6):\n\treturn oct(int(a6))\n\ndef to_decimal_hex(a7):', 'def hex_to_binary(a1):\n\t#Assign the value {a1} to a variable named ""my_hex"".\n\tmy_hex = a1\n\tbinary = """"\n\tfor i in range(len(my_hex)):\n\t\tbinary += bin(int(my_hex[i], 16))[2:].zfill(8)\n\treturn binary\n\ndef binary_to_hex(a2):\n\tmy_binary = a2\n\thex_string = """"\n\tfor i in range(len(my_binary)):\n\t\thex_string += hex(int(my_binary[i], 2))[2:].zfill(2)\n\treturn hex_string\n\ndef', 'def hex_to_binary(a1):\n\t#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".\n\tmy_binary = """"\n\tfor i in range(len(a1)):\n\t\tmy_binary += bin(int(a1[i], 16))[2:].zfill(8)\n\treturn my_binary\n\ndef binary_to_hex(a2):\n\tmy_hex = """"\n\tfor i in range(len(a2)):\n\t\tmy_hex += hex(int(a2[i], 2))[2:].zfill(2)\n\treturn my_hex\n\ndef binary_to_decimal(a3):\n\tmy_decimal', 'def hex_to_binary(a1):\n\t#Convert ""my_binary"" back to a HEX number named ""result"".\n\tresult = 0\n\tfor i in range(len(a1)):\n\t\tresult = result + int(a1[i], 16) * (2 ** (len(a1) - i - 1))\n\treturn result\n\ndef binary_to_hex(a2):\n\tresult = """"\n\tfor i in range(len(a2)):\n\t\tresult = result + hex(a2[i])[2:].zfill(2)\n\treturn result\n\ndef binary_to_decimal(a3):\n\tresult = 0\n\tfor', 'def hex_to_binary(a1):\n\t#Print the result.\n\tprint(bin(int(a1, 16)))\n\nhex_to_binary(""0x1234"")\n\ndef binary_to_hex(a2):\n\tprint(hex(int(a2, 2)))\n\nbinary_to_hex(""0b1010101"")\n\ndef binary_to_octal(a3):\n\tprint(oct(int(a3, 2)))\n\nbinary_to_octal(""0o1010101"")\n\ndef binary_to_decimal']"
10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","['def invert_dict(a1,a2,a3):\n\t#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\n\tmy_dict = {a1:a2}\n\tfor key in a3:\n\t\tmy_dict[key] = a3[key]\n\treturn my_dict\n\ndef get_dict_keys(a1,a2,a3):\n\tmy_dict = {a1:a2}\n\tfor key in a3:\n\t\tmy_dict[key] = a3[key]\n\treturn my_dict.keys()\n\ndef get_dict_values(a1,a2,a3):\n\tmy_dict = {', 'def invert_dict(a1,a2,a3):\n\t#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.\n\tinvert = {}\n\tfor key in a1:\n\t\tinvert[a2[key]] = a1[key]\n\treturn invert\n\ndef main():\n\ta1 = {""z"": ""q"", ""w"": ""f""}\n\ta2 = {""q"": ""z"", ""f"": ""w""}\n\ta3 = invert_dict(a1,a2,a3)\n\tprint(a3)\n\nif __name__ == ""__main__"":\n\tmain()', 'def invert_dict(a1,a2,a3):\n\t#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.\n\tif a1 == a2:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef is_inverted(a1,a2,a3):\n\tif a1 == a2:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef is_inverted_dict(a1,a2,a3):\n\tif a1 == a2:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef is_inverted_list(a1,a2,a3):\n\tif a1 == a2:\n\t\treturn False', 'def invert_dict(a1,a2,a3):\n\t#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".\n\tmy_dict2 = {a3:a1}\n\tfor key in a2:\n\t\tif key in my_dict2:\n\t\t\tmy_dict2[key].append(a2[key])\n\t\telse:\n\t\t\tmy_dict2[key] = [a2[key]]\n\treturn my_dict2\n\ndef get_dict_keys(a1,a2,a3):\n\tmy_dict2 = invert_dict(a1,a2,a3)\n\treturn my_dict2.keys()\n\ndef get_', 'def invert_dict(a1,a2,a3):\n\t#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\n\tif a1 in a2:\n\t\tif a2[a1] in a3:\n\t\t\tif a3[a2[a1]] in a1:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False\n\ndef get_dict_value(a1,a2,a3):\n\tif a1 in a2:\n\t\tif a2[a1] in a3:\n\t\t\tif a3[a2[a1]] in a1:\n\t\t\t\treturn a1[']"
11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","['def class_definition(a1,a2,a3,a4,a5):\n\t#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.\n\tclass Player:\n\t\tdef __init__(self,name,age,height,weight):\n\t\t\tself.name = name\n\t\t\tself.age = age\n\t\t\tself.height = height\n\t\t\tself.weight = weight\n\t\tdef __str__(self):\n\t\t\treturn ""Name: "" + self.name + ""\\nAge: "" + str(self.age) + ""\\nHeight: "" + str(self.height) + ""\\nWeight: "" + str(self.weight)\n\treturn Player(a1,a2,a3,a4)\n\ndef main', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".\n\tdef get_age():\n\t\treturn ""{{name}} is age {{age}}""\n\tdef get_height():\n\t\treturn ""{{name}} is {{height}} cm""\n\tdef get_weight():\n\t\treturn ""{{name}} weighs {{weight}} kg""\n\treturn get_age(),get_height(),get_weight()\n\ndef main():\n\tprint(class_definition(""John"",""Smith"",""18"",""120"",""150""))\n\nif __name__ == ""__main__"":\n\tmain()', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n\tplayer = Player(a1,a2,a3,a4,a5)\n\treturn player\n\ndef main():\n\tplayer = class_definition(""John"",""20"",""170"",""100"",""100"")\n\tprint(player.name)\n\tprint(player.age)\n\tprint(player.height)\n\tprint(player.weight)\n\nif __name__ == ""__main__"":\n\tmain()', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Call the getter for the {a5} of the player and print the result.\n\tprint(a5.getter())\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player,player,player,player,player)\n\nclass_definition(player']"
12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","['def longest_number(a1):\n\t#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.\n\tdef num_len(num):\n\t\treturn len(str(num))\n\treturn max(a1, key=num_len)\n\nprint(longest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(longest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,', 'def longest_number(a1):\n\t#Initialize a last ""my_list"" with the values {a1}\n\tmy_list = [a1]\n\tfor i in range(1, len(a1)):\n\t\tif a1[i] > a1[i-1]:\n\t\t\tmy_list.append(a1[i])\n\treturn my_list\n\ndef longest_number_2(a1):\n\tmy_list = [a1]\n\tfor i in range(1, len(a1)):\n\t\tif a1[i] > a1[i-1]:\n\t\t\tmy_list.append(a1[i])\n\treturn my', 'def longest_number(a1):\n\t#Print the longest number in this list.\n\tlongest = a1[0]\n\tfor i in a1:\n\t\tif i > longest:\n\t\t\tlongest = i\n\treturn longest\n\nprint(longest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(longest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,']"
13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","['def linear_regression(a1):\n\t#Import the class LinearRegression from sklearn.linear_model\n\tfrom sklearn.linear_model import LinearRegression\n\tfrom sklearn.metrics import mean_squared_error, r2_score\n\tfrom sklearn.model_selection import train_test_split\n\tfrom sklearn.preprocessing import PolynomialFeatures\n\tfrom sklearn.pipeline import make_pipeline\n\tfrom sklearn.preprocessing import StandardScaler\n\tfrom sklearn.pipeline import Pipeline\n\tfrom sklearn.model_selection import cross_val_score\n\tfrom sklearn.model_selection import GridSearchCV\n\tfrom sklearn.model_selection import RandomizedSearchCV\n\tfrom sklearn.model_selection import cross_', 'def linear_regression(a1):\n\t#Import math.\n\timport math\n\timport numpy as np\n\timport pandas as pd\n\timport matplotlib.pyplot as plt\n\timport seaborn as sns\n\tfrom sklearn.linear_model import LinearRegression\n\tfrom sklearn.metrics import mean_squared_error, r2_score\n\tfrom sklearn.model_selection import train_test_split\n\tfrom sklearn.preprocessing import PolynomialFeatures\n\tfrom sklearn.preprocessing import StandardScaler\n\tfrom sklearn.pipeline import make_pipeline\n\tfrom sklearn.preprocessing import PolynomialFeatures\n\tfrom sklearn.preprocessing import StandardScaler\n\tfrom sklearn.pipeline import make_pipeline', 'def linear_regression(a1):\n\t#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\n\tx = np.arange(0,10)\n\ty = a1*x + a2\n\treturn x,y\n\ndef plot_linear_regression(x,y):\n\tplt.plot(x,y)\n\tplt.xlabel(\'x\')\n\tplt.ylabel(\'y\')\n\tplt.title(\'Linear Regression\')\n\tplt.show()\n\ndef plot_linear_regression_with_scatter(x,y):\n\tplt.scatter(x,y)\n\tplt.xlabel(\'x\')\n\tplt.ylabel(\'y\')', 'def linear_regression(a1):\n\t#Define a function ""f"" that multiplies a input argument by 2.\n\tdef f(x):\n\t\treturn a1 * x\n\treturn f\n\ndef main():\n\ta1 = 2\n\tf = linear_regression(a1)\n\tprint(f(1))\n\nif __name__ == \'__main__\':\n\tmain()', 'def linear_regression(a1):\n\t#Create a numpy array of numbers ""y"" by applying f to each element of x.\n\ty = np.array([f(x) for x in a1])\n\tx = np.array(a1)\n\tm, b = np.polyfit(x, y, 1)\n\treturn m, b\n\ndef f(x):\n\treturn x**2 + 2*x + 1\n\ndef main():\n\ta1 = [1, 2, 3, 4, 5]\n\tm, b = linear_regression(a1)\n\tprint(m, b)\n\nif __name__ == \'__', 'def linear_regression(a1):\n\t#Initialize a linear regression model.\n\tmodel = LinearRegression()\n\tmodel.fit(a1, a1)\n\treturn model\n\ndef plot_regression(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27', ""def linear_regression(a1):\n\t#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).\n\tmodel = LinearRegression()\n\tmodel.fit(a1.reshape(-1, 1), a1.reshape(-1, 1))\n\treturn model\n\ndef plot_model(model, x, y):\n\tplt.scatter(x, y)\n\tplt.plot(x, model.predict(x.reshape(-1, 1)), color='red')\n\tplt.show()\n\ndef plot_data(x, y):\n\tplt.scatter(x, y)\n\tplt.show()\n\ndef plot_model_and_data"", 'def linear_regression(a1):\n\t#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.\n\tx_hat = a1\n\treturn x_hat\n\ndef linear_regression_error(a1, a2):\n\tx_hat = linear_regression(a1)\n\treturn (a2 - x_hat) ** 2\n\ndef linear_regression_gradient(a1, a2):\n\tx_hat = linear_regression(a1)\n\treturn 2 * (a2 - x_hat)\n\ndef linear_regression_hessian(a1, a2):\n\tx_hat = linear_regression(a1)', 'def linear_regression(a1):\n\t#Apply ceil() to the predicted value and print it as an integer.\n\tprint(int(ceil(a1)))\n\nlinear_regression(10)\nlinear_regression(10.5)\nlinear_regression(10.9)\nlinear_regression(11.1)\nlinear_regression(11.5)\nlinear_regression(11.9)\nlinear_regression(12.1)\nlinear_regression(12.5)\nlinear_regression(12.9)\nlinear_regression(13.1)\nlinear_regression(13.5)\nlinear_regression(13.']"
14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","[""def encrypt_and_decrypt(a1):\n\t#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.\n\tdef encrypt(a2):\n\t\ta3 = ''\n\t\tfor i in range(len(a2)):\n\t\t\tif a2[i] in alphabet:\n\t\t\t\ta3 += alphabet[(alphabet.index(a2[i]) + 26) % 26]\n\t\t\telse:\n\t\t\t\ta3 += a2[i]\n\t\treturn a3\n\treturn encrypt(a1)\n\nprint(encrypt_and_decrypt('hi'))\nprint(encrypt_and_decrypt('asdfghjkl'))\nprint(encrypt_and_decrypt('gf'))"", ""def encrypt_and_decrypt(a1):\n\t#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.\n\tdef decrypt(a2):\n\t\treturn a2.decode('utf-8')\n\treturn decrypt(a1)\n\ndef encrypt(a1):\n\treturn a1.encode('utf-8')\n\ndef decrypt(a2):\n\treturn a2.decode('utf-8')\n\ndef encrypt_and_decrypt(a1):\n\treturn decrypt(encrypt(a1))\n\ndef encrypt_and_decrypt(a1):\n\treturn decrypt(encrypt(a1))\n\ndef encrypt_and_decrypt(a1):\n\treturn decrypt"", 'def encrypt_and_decrypt(a1):\n\t#Assign ""{a1}"" to a variable named ""original_text"".\n\toriginal_text = a1\n\tprint(""Original text: "" + original_text)\n\tprint(""Encrypting..."")\n\tencrypted_text = encrypt(original_text)\n\tprint(""Encrypted text: "" + encrypted_text)\n\tprint(""Decrypting..."")\n\tdecrypted_text = decrypt(encrypted_text)\n\tprint(""Decrypted text: "" + decrypted_text)\n\treturn decrypted_text\n\ndef encrypt(a1):\n\ta2 = """"\n\tfor i in range(len(a1)):\n\t\ta2 += chr((ord(a', 'def encrypt_and_decrypt(a1):\n\t#Call the function encrypt with original_text as argument and assign the result to a variable named \'encrypted_text\'.\n\tencrypted_text = encrypt(a1)\n\tprint(""Encrypted Text: "" + encrypted_text)\n\tprint(""Decrypted Text: "" + decrypt(encrypted_text))\n\nencrypt_and_decrypt(""Hello World"")\n', ""def encrypt_and_decrypt(a1):\n\t#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.\n\trestored_text = decrypt(a1)\n\treturn restored_text\n\ndef encrypt(a1):\n\tglobal key\n\tglobal iv\n\tglobal cipher\n\tglobal encrypted_text\n\tglobal decrypted_text\n\tglobal encrypted_text_length\n\tglobal decrypted_text_length\n\tglobal encrypted_text_length_2\n\tglobal decrypted_text_length_2\n\tglobal encrypted_text_length_3\n\tglobal decrypted_text_length_3\n\tglobal encrypted_text_length_4\n\tglobal decrypted_text_length_4"", 'def encrypt_and_decrypt(a1):\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []\n\tfor i in range(len(a1)):\n\t\tif a1[i] == "" "":\n\t\t\tmy_result.append("" "")\n\t\telif a1[i] == ""A"":\n\t\t\tmy_result.append(""B"")\n\t\telif a1[i] == ""B"":\n\t\t\tmy_result.append(""A"")\n\t\telif a1[i] == ""C"":\n\t\t\tmy_result.append(""D"")\n\t\telif a1[i] == ""D"":\n\t\t\tmy_result.append(""C"")', 'def encrypt_and_decrypt(a1):\n\t#Print the list.\n\tprint(a1)\n\tprint(""Encrypting..."")\n\ta2 = encrypt(a1)\n\tprint(""Decrypting..."")\n\ta3 = decrypt(a2)\n\tprint(a3)\n\nencrypt_and_decrypt([1,2,3,4,5,6,7,8,9,10])\n']"
15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","['def compare_object_equivalence(a1,a2,a3):\n\t#Defines a class ""Person"" which takes name and id as constructor arguments.\n\tclass Person:\n\t\tdef __init__(self,name,id):\n\t\t\tself.name = name\n\t\t\tself.id = id\n\t\tdef __str__(self):\n\t\t\treturn self.name\n\tp1 = Person(""John"",123)\n\tp2 = Person(""John"",123)\n\tp3 = Person(""John"",123)\n\tp4 = Person(""John"",123)\n\tp5 = Person(""John"",123)\n\tp6 = Person(""John"",123)\n\tp7 =', 'def compare_object_equivalence(a1,a2,a3):\n\t#Extend the class with a function __hash__ which uses the {a1} property as hash value.\n\tif a1.__hash__() == a2.__hash__() and a1.__hash__() == a3.__hash__():\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef compare_object_equivalence_recursive(a1,a2,a3):\n\tif a1 == a2 and a1 == a3:\n\t\treturn True\n\telif isinstance(a1,list) and isinstance(a2,list) and isinstance(a3,list):\n\t\tif len(a1) == len(a2) and len(a1) == len(', 'def compare_object_equivalence(a1,a2,a3):\n\t#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.\n\tif a1.__hash__() == a2.__hash__() and a1.__hash__() == a3.__hash__():\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef compare_object_hash(a1,a2,a3):\n\tif a1.__hash__() == a2.__hash__() and a1.__hash__() == a3.__hash__():\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef compare_object_equality(a1,a2,a3):\n\tif a1 == a2 and a1 == a3', 'def compare_object_equivalence(a1,a2,a3):\n\t#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.\n\tpersons = [Person(a1,a2,a3),Person(a1,a2,a3),Person(a1,a2,a3)]\n\tfor person in persons:\n\t\tprint(person.name)\n\tprint()\n\tprint(""Person A"")\n\tprint(""Name: "",a1)\n\tprint(""Id: "",a2)\n\tprint()\n\tprint(""Person B"")\n\tprint(""Name: "",a1)\n\tprint(""Id: "",a2)\n\tprint()\n\tprint(""Person {a3}"")', 'def compare_object_equivalence(a1,a2,a3):\n\t#Create a set ""unique_persons"" of this list.\n\tunique_persons = set()\n\tfor person in a1:\n\t\tunique_persons.add(person)\n\tfor person in a2:\n\t\tunique_persons.add(person)\n\tfor person in a3:\n\t\tunique_persons.add(person)\n\treturn unique_persons\n\ndef compare_object_equivalence_2(a1,a2,a3):\n\tunique_persons = set()\n\tfor person in a1:\n\t\tunique_persons.add(person)\n\tfor person in a2:\n\t\tunique_persons', 'def compare_object_equivalence(a1,a2,a3):\n\t#Print the number of elements in the set.\n\tprint(""Number of elements in the set: "",len(a1))\n\tprint(""Number of elements in the set: "",len(a2))\n\tprint(""Number of elements in the set: "",len(a3))\n\tprint(""Number of elements in the set: "",len(a1.intersection(a2)))\n\tprint(""Number of elements in the set: "",len(a1.intersection(a3)))\n\tprint(""Number of elements in the set: "",len(a2.intersection(a3)))\n\tprint(""Number of elements in the set:']"
16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","['def drunken_python(a1):\n\t#Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".\n\treturn str(a1)\n\nprint(drunken_python(4))\nprint(drunken_python(""4""))\nprint(drunken_python(4))\nprint(drunken_python(""4""))\n\nprint(type(drunken_python(4)))\nprint(type(drunken_python(""4"")))\nprint(type(drunken_python(4)))\nprint(type(drunken_python(""4"")))\n\nprint(drunken_python(4))\nprint(drunken_python(""4', 'def drunken_python(a1):\n\t#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".\n\tdef int_to_str(a2):\n\t\treturn str(a2)\n\treturn int_to_str(a1)\n\nprint(drunken_python(4))\n\ndef drunken_python(a1):\n\tdef int_to_str(a2):\n\t\treturn str(a2)\n\treturn int_to_str(a1)\n\nprint(drunken_python(4))\n\ndef drunken_python(a1):\n\tdef int_to_str(a2):\n\t\treturn str', 'def drunken_python(a1):\n\t#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.\n\tdef str_to_int(a2):\n\t\treturn int(a2)\n\treturn str_to_int(a1)\n\nprint(drunken_python(""4""))\n\ndef drunken_python(a1):\n\tdef str_to_int(a2):\n\t\treturn int(a2)\n\treturn str_to_int(a1)\n\nprint(drunken_python(""4""))\n\ndef drunken_python(a1):\n\tdef str_to_int(a2):\n\t\treturn int', 'def drunken_python(a1):\n\t#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").\n\tmy_result = [int_to_str(a1), str_to_int(a1)]\n\treturn my_result\n\ndef main():\n\tprint(drunken_python(1))\n\tprint(drunken_python(2))\n\tprint(drunken_python(3))\n\tprint(drunken_python(4))\n\tprint(drunken_python(5))\n\tprint(drunken_python(6))\n\tprint(drunken_python(7))\n\tprint(drunken_', 'def drunken_python(a1):\n\t#Print the list.\n\tprint(a1)\n\tprint(a1[0])\n\tprint(a1[1])\n\tprint(a1[2])\n\tprint(a1[3])\n\tprint(a1[4])\n\tprint(a1[5])\n\tprint(a1[6])\n\tprint(a1[7])\n\tprint(a1[8])\n\tprint(a1[9])\n\tprint(a1[10])\n\tprint(a1[11])\n\tprint(a1[12])']"
17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","['def morse_code(a1):\n\t#Initialize dictionary of Morse codes named \'chars_to_dots\' with valuesn\tchars_to_dots = {\'A\':\'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\':', ""def morse_code(a1):\n\t#Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.\n\tdef encode_morse(a2):\n\t\ta3 = ''\n\t\tfor i in a2:\n\t\t\tif i =='':\n\t\t\t\ta3 +=''\n\t\t\telif i == '.':\n\t\t\t\ta3 += '.'\n\t\t\telif i == '-':\n\t\t\t\ta3 +='-'\n\t\t\telif i == ',':\n\t\t\t\ta3 += ','\n\t\t\telif i == ':':\n\t\t\t\ta3 +=':'\n\t\t\telif i == ';':\n\t\t\t\ta3 +=';'\n\t\t\telif i == '?':\n\t\t\t\ta3 += '?'"", ""def morse_code(a1):\n\t#Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.\n\tdef decode_morse(morse):\n\t\tmorse_dict = {\n\t\t\t'A':'.-',\n\t\t\t'B':'-...',\n\t\t\t'C':'-.-.',\n\t\t\t'D':'-..',\n\t\t\t'E':'.',\n\t\t\t'F':'..-.',\n\t\t\t'G':'--.',\n\t\t\t'H':'....',\n\t\t\t'I':'..',\n\t\t\t'J':'.---',\n\t\t\t'K':'-.-',\n\t\t\t'L':'.-..',\n\t\t\t'M':'--',\n\t\t\t'N':'-.',\n\t\t\t'O':'"", ""def morse_code(a1):\n\t#Encode '{a1}' to morse code and assign the result to'morse_code'.\n\tmorse_code = ''\n\tfor i in a1:\n\t\tif i =='':\n\t\t\tmorse_code +=''\n\t\telif i == 'A':\n\t\t\tmorse_code += '.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -"", ""def morse_code(a1):\n\t#Decode the variable named'morse_code' to a string named 'decoded_text'.\n\tdecoded_text = ''\n\tfor i in range(len(a1)):\n\t\tif a1[i] =='':\n\t\t\tdecoded_text +=''\n\t\telif a1[i] == 'A':\n\t\t\tdecoded_text += 'A'\n\t\telif a1[i] == 'B':\n\t\t\tdecoded_text += 'B'\n\t\telif a1[i] == 'C':\n\t\t\tdecoded_text += 'C'\n\t\telif a1[i] == 'D':\n\t\t\tdecoded_text += 'D'\n\t\telif a1["", 'def morse_code(a1):\n\t#Print the variable named \'decoded_text\'.\n\tdecoded_text = """"\n\tfor i in range(len(a1)):\n\t\tif a1[i] == "" "":\n\t\t\tdecoded_text += "" ""\n\t\telif a1[i] == ""."":\n\t\t\tdecoded_text += "".""\n\t\telif a1[i] == ""-"":\n\t\t\tdecoded_text += "" -""\n\t\telif a1[i] == "","":\n\t\t\tdecoded_text += "",""\n\t\telif a1[i] == "":"":\n\t\t\tdecoded_text += "" : ""\n\t\telif a1[i] == "";']"
18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","['def two-sum(a1,a2):\n\t#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.\n\ttarget = a2\n\ta = []\n\tfor i in range(len(a1)):\n\t\tfor j in range(len(a1)):\n\t\t\tif a1[i] + a1[j] == target:\n\t\t\t\ta.append([a1[i],a1[j]])\n\treturn a\n\ndef two_sum_2(a1,a2):\n\ta = []\n\tfor i in range(len(a1)):\n\t\tfor j in range(len(a1)):\n\t\t\tif a1[i] + a1[', 'def two-sum(a1,a2):\n\t#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.\n\tfor i in range(len(a1)):\n\t\tfor j in range(len(a2)):\n\t\t\tif a1[i]+a2[j]==target:\n\t\t\t\treturn [i,j]\n\treturn [-1,-1]\n\ndef two_sum_2(a1,a2):\n\tfor i in range(len(a1)):\n\t\tfor j in range(len(a2)):\n\t\t\tif a1[i]+a2[j]==target:\n\t\t\t\treturn [i,j]\n\treturn [-1,-1]\n\ndef', 'def two-sum(a1,a2):\n\t#Run the function and print out the result.\n\treturn sum(a1[i] for i in range(len(a1)) if a1[i] + a2[i] == 2020)\n\nprint(two_sum([1,2,3,4,5], [1,2,3,4,5]))\nprint(two_sum([1,2,3,4,5], [1,2,3,4,6]))\nprint(two_sum([1,2,3,4,5], [1,2,3,4,6,7]))\nprint']"
19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","['def k-means(a1):\n\t#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).\n\tn = len(a1)\n\tx_mean = np.mean(a1, axis=0)\n\ty_mean = np.mean(a1, axis=1)\n\tx_std = np.std(a1, axis=0)\n\ty_std = np.std(a1, axis=1)\n\tx_samples = np.random.normal(x_mean, x_std, n)\n\ty_samples = np.random.normal(y_mean, y_std, n)\n\treturn x_samples,', 'def k-means(a1):\n\t#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).\n\tpoints1 = sample(a1, 100)\n\tprint(""The points are: "")\n\tprint(points1)\n\tprint(""The number of points is: "")\n\tprint(len(points1))\n\tprint(""The mean is: "")\n\tprint(mean(points1))\n\tprint(""The standard deviation is: "")\n\tprint(std(points1))\n\tprint(""The minimum is: "")\n\tprint(min(points1))\n\tprint(""The maximum is: "")\n\tprint(max(points1))\n\tprint(""', 'def k-means(a1):\n\t#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).\n\tpoints2 = sample(a1, 100, (-a1, -a1))\n\tprint(""The points are: "")\n\tprint(points2)\n\tprint(""The number of points is: "")\n\tprint(len(points2))\n\tprint(""The mean is: "")\n\tprint(mean(points2))\n\tprint(""The standard deviation is: "")\n\tprint(std(points2))\n\tprint(""The minimum is: "")\n\tprint(min(points2))\n\tprint(""The maximum is: "")\n\tprint(max', 'def k-means(a1):\n\t#Concatenate these data points.\n\ta = np.concatenate((a1,a1),axis=0)\n\ta = np.random.permutation(a)\n\ta = a[:10000]\n\ta = a.astype(np.float32)\n\ta = a.reshape(a.shape[0],-1)\n\ta = a.T\n\ta = a.astype(np.float32)\n\ta = a.reshape(a.shape[0],-1)\n\ta = a.T\n\ta = a.astype(np.', 'def k-means(a1):\n\t#Implement the k-means clustering algorithm with n iterations and the centroids as return value.\n\tn = len(a1)\n\tcentroids = []\n\tfor i in range(n):\n\t\tcentroids.append(a1[i])\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif a1[i] == a1[j]:\n\t\t\t\ta1[j] = 0\n\tfor i in range(n):\n\t\ta1[i] = round(a1[i])\n\treturn a1\n\ndef main():\n\ta1 = [1, 2, 3, 4,', 'def k-means(a1):\n\t#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".\n\tmy_centroids = []\n\tfor i in range(0,100):\n\t\tmy_centroids.append(a1)\n\treturn my_centroids\n\ndef assign_clusters(my_centroids, a1):\n\tmy_clusters = []\n\tfor i in range(0,len(my_centroids)):\n\t\tmy_clusters.append(0)\n\tfor i in range(0,len(a1)):\n\t\tfor j in range(0,len(my_centroids)):\n\t\t\tif(a1[i] == my_centroids[j]):', 'def k-means(a1):\n\t#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".\n\tc1 = (-1, -1)\n\tc2 = (-1, -1)\n\tfor i in range(len(a1)):\n\t\tif a1[i][0] < c1[0]:\n\t\t\tc1 = a1[i]\n\t\tif a1[i][0] > c2[0]:\n\t\t\tc2 = a1[i]\n\tprint(""The two centroids are: "", c1, c2)\n\ndef main():\n\ta1 = []\n\ta2 = []\n\ta3 = []\n\ta']"
20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","['def even_odd_sum(numbers):\n\t#Define a list of integers named ""elements"" with values {numbers}.\n\telements = [numbers]\n\tfor i in range(2, len(numbers)):\n\t\telements.append(elements[i-1] + elements[i-2])\n\treturn elements[-1]\n\nprint(even_odd_sum([1, 2, 3, 4, 5]))\nprint(even_odd_sum([1, 2, 3, 4, 5, 6]))\nprint(even_odd_sum([1, 2, 3, 4, 5, 6, 7]))\nprint(', 'def even_odd_sum(numbers):\n\t#Calculate the sum of the even numbers of the list and store the result to variable ""even"".\n\teven = 0\n\tfor number in numbers:\n\t\tif number % 2 == 0:\n\t\t\teven += number\n\tprint(even)\n\neven_odd_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n', 'def even_odd_sum(numbers):\n\t#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".\n\todd = 0\n\tfor i in numbers:\n\t\tif i % 2 == 0:\n\t\t\todd += i\n\treturn odd\n\nprint(even_odd_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n', 'def even_odd_sum(numbers):\n\t#Create a list named ""my_result"" containing the variables even and odd.\n\tmy_result = []\n\tfor i in range(len(numbers)):\n\t\tif numbers[i] % 2 == 0:\n\t\t\tmy_result.append(numbers[i])\n\t\telse:\n\t\t\tmy_result.append(numbers[i] + 1)\n\treturn my_result\n\nprint(even_odd_sum([1, 2, 3, 4, 5]))\nprint(even_odd_sum([1, 2, 3, 4, 5, 6]))\nprint(even_odd_sum', 'def even_odd_sum(numbers):\n\t#Print the list.\n\tprint(numbers)\n\teven_sum = 0\n\todd_sum = 0\n\tfor number in numbers:\n\t\tif number % 2 == 0:\n\t\t\teven_sum += number\n\t\telse:\n\t\t\todd_sum += number\n\tprint(even_sum)\n\tprint(odd_sum)\n\neven_odd_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n']"
21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","['def shift_zeros(lst):\n\t#Define a list named ""elements"" with the values {lst}.\n\telements = lst\n\tfor i in range(len(elements)):\n\t\tif elements[i] == 0:\n\t\t\telements[i] = 1\n\treturn elements\n\ndef shift_ones(lst):\n\telements = lst\n\tfor i in range(len(elements)):\n\t\tif elements[i] == 1:\n\t\t\telements[i] = 0\n\treturn elements\n\ndef shift_all(lst):\n\telements = lst\n\tfor i in range(len(elements)):\n\t\tif elements[i] == 1:\n\t\t\telements', 'def shift_zeros(lst):\n\t#Count the number of zeros in variable elements and store the value into variable ""zero_count"".\n\tzero_count = 0\n\tfor i in lst:\n\t\tif i == 0:\n\t\t\tzero_count += 1\n\treturn zero_count\n\ndef shift_ones(lst):\n\tzero_count = shift_zeros(lst)\n\treturn zero_count\n\ndef shift_all(lst):\n\tzero_count = shift_zeros(lst)\n\tone_count = shift_ones(lst)\n\treturn zero_count + one_count\n\ndef shift_all_2(lst):\n\tzero_count = shift_zeros(', 'def shift_zeros(lst):\n\t#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".\n\tnon_zero = []\n\tfor i in range(len(lst)):\n\t\tif lst[i]!= 0:\n\t\t\tnon_zero.append(lst[i])\n\treturn non_zero\n\ndef get_max_value(lst):\n\tmax_value = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] > max_value:\n\t\t\tmax_value = lst[i]\n\treturn max_value\n\ndef get_min_value(lst):\n\tmin_value = 0\n\tfor i', 'def shift_zeros(lst):\n\t#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".\n\tnon_zero = []\n\tresult = []\n\tfor i in lst:\n\t\tif i == 0:\n\t\t\tnon_zero.append(i)\n\t\telse:\n\t\t\tresult.append(i)\n\tprint(non_zero)\n\tprint(result)\n\treturn result\n\nshift_zeros([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0']"
22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","['def bootstrap_95%_ci(array,n):\n\t#Import numpy and initialize a numpy array named X with values {array}.\n\timport numpy as np\n\tX = np.array(array)\n\tX = X.reshape(len(X),1)\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T\n\tX = X.T', 'def bootstrap_95%_ci(array,n):\n\t#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.\n\tarray_size = len(array)\n\tarray_size_95 = int(array_size*0.95)\n\tarray_size_99 = int(array_size*0.99)\n\tarray_size_99_95 = int(array_size*0.9995)\n\tarray_size_99_99 = int(array_size*0.9999)\n\tarray_size_99_99_95 = int(array_size*0.99995', 'def bootstrap_95%_ci(array,n):\n\t#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".\n\tsamples = np.zeros((n,len(array)))\n\tfor i in range(n):\n\t\tsamples[i,:] = array\n\tsamples = np.mean(samples,axis=0)\n\tsamples = np.std(samples,axis=0)\n\treturn samples\n\ndef bootstrap_95%_ci_2(array,n):\n\tsamples = np.zeros((n,len(array)))\n\tfor i in range(n):\n\t\tsamples[i,:] = array\n\tsamples = np.mean(samples,axis=0)\n\tsamples', 'def bootstrap_95%_ci(array,n):\n\t#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".\n\tmean = np.mean(array)\n\tsample = np.random.choice(array,n,replace=True,p=[1-mean,mean])\n\treturn sample\n\ndef bootstrap_95%_ci_2(array,n):\n\tsample = np.random.choice(array,n,replace=True,p=[1-np.mean(array),np.mean(array)])\n\treturn sample\n\ndef bootstrap_95%_ci_3(array,n):\n\tsample = np.random.choice(array,n,replace=', 'def bootstrap_95%_ci(array,n):\n\t#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".\n\tpercentile = []\n\tfor i in range(n):\n\t\tpercentile.append(np.percentile(array,2.5))\n\tfor i in range(n):\n\t\tpercentile.append(np.percentile(array,97.5))\n\treturn percentile\n\ndef bootstrap_95_ci(array,n):\n\tpercentile = bootstrap_95(array,n)\n\treturn np.percentile(percentile,50),np.percentile(percentile,95)\n\ndef bootstrap_95_ci_2(array,n):\n\tpercentile =', 'def bootstrap_95%_ci(array,n):\n\t#Print the variable ""percentile"".\n\tpercentile = np.percentile(array, 95)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95% CI: "", percentile)\n\tprint(""95']"
23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","['def sum_even_digits(a,b):\n\t#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".\n\tmy_digits = []\n\tfor i in range(a,b+1):\n\t\tif i%10 == 0:\n\t\t\tmy_digits.append(i)\n\treturn my_digits\n\ndef sum_odd_digits(a,b):\n\tmy_digits = []\n\tfor i in range(a,b+1):\n\t\tif i%10!= 0:\n\t\t\tmy_digits.append(i)\n\treturn my_digits\n\ndef sum_digits(a,b):\n\tmy_digits = []\n\tfor', 'def sum_even_digits(a,b):\n\t#Assign the sum of the even digits to the variable ""result"".\n\tresult = 0\n\tfor i in range(len(a)):\n\t\tif a[i] % 2 == 0:\n\t\t\tresult += a[i]\n\treturn result\n\ndef sum_odd_digits(a,b):\n\tresult = 0\n\tfor i in range(len(a)):\n\t\tif a[i] % 2!= 0:\n\t\t\tresult += a[i]\n\treturn result\n\ndef sum_digits(a,b):\n\tresult = 0\n\tfor i in range(len(a)):', 'def sum_even_digits(a,b):\n\t#Print the resulting number as integer.\n\tprint(a+b)\n\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,2)\nsum_even_digits(1,']"
24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","['def min-max_diff(A):\n\t#Find the maximum element in the list {A} and assign it to variable ""my_max"".\n\tmy_max = max(A)\n\tprint(""The maximum element in the list is: "", my_max)\n\tprint(""The minimum element in the list is: "", min(A))\n\tprint(""The difference between the maximum and minimum element is: "", my_max - min(A))\n\nmin_max_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n', 'def min-max_diff(A):\n\t#Find the minimum element in the same list.\n\tmin_val = A[0]\n\tfor i in range(1,len(A)):\n\t\tif A[i] < min_val:\n\t\t\tmin_val = A[i]\n\tprint(""Minimum element in the same list is: "", min_val)\n\n\tmax_val = A[0]\n\tfor i in range(1,len(A)):\n\t\tif A[i] > max_val:\n\t\t\tmax_val = A[i]\n\tprint(""Maximum element in the same list is: "", max_val)\n\n\tprint(""', 'def min-max_diff(A):\n\t#Compute the different between ""my_max"" and the minimum element.\n\tmy_max = max(A)\n\tmin_element = min(A)\n\treturn my_max - min_element\n\ndef max_diff(A):\n\tmy_max = max(A)\n\treturn my_max - min(A)\n\ndef min_diff(A):\n\tmy_min = min(A)\n\treturn my_min - max(A)\n\ndef max_diff_2(A):\n\tmy_max = max(A)\n\treturn my_max - min(A)\n\ndef min_diff', 'def min-max_diff(A):\n\t#Print the difference between the minimum and maximum values in the array\n\tprint(min(A) - max(A))\n\nmin_max_diff([1, 2, 3, 4, 5])\nmin_max_diff([1, 2, 3, 4, 5, 6])\nmin_max_diff([1, 2, 3, 4, 5, 6, 7])\nmin_max_diff([1, 2, 3, 4, 5, 6, 7, 8])\nmin_']"
25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","['def distinct_chars(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\tmy_string = my_string.lower()\n\tmy_string = my_string.replace("" "", """")\n\tmy_string = my_string.replace(""\\n"", """")\n\tmy_string = my_string.replace(""\\t"", """")\n\tmy_string = my_string.replace(""\\r"", """")\n\tmy_string = my_string.replace(""\\0"", """")\n\tmy_string = my_string.replace(""\\x00"", """")\n\tmy_string = my_string.replace(""\\x01"", """")', 'def distinct_chars(A):\n\t#Lowercase the given string ""my_string"".\n\tA = A.lower()\n\treturn len(set(A))\n\ndef distinct_words(A):\n\tA = A.split()\n\treturn len(set(A))\n\ndef distinct_lines(A):\n\tA = A.split(\'\\n\')\n\treturn len(set(A))\n\ndef distinct_chars_and_words(A):\n\tA = A.split()\n\treturn len(set(A))\n\ndef distinct_chars_and_lines(A):\n\tA = A.split(\'\\n\')\n\treturn len', 'def distinct_chars(A):\n\t#Assign the distinct characters of the string to a variable named ""chars"".\n\tchars = set(A)\n\treturn chars\n\ndef is_palindrome(A):\n\tif len(A) == 0:\n\t\treturn True\n\telse:\n\t\treturn A[0] == A[-1] and is_palindrome(A[1:-1])\n\ndef is_palindrome_iterative(A):\n\tif len(A) == 0:\n\t\treturn True\n\telse:\n\t\treturn A[0] == A[-1] and is_palindrome_iterative(A[1:-1])\n\ndef is', 'def distinct_chars(A):\n\t#Sort these characters in alphabetical order.\n\tA.sort()\n\tdistinct_chars = []\n\tfor i in range(len(A)):\n\t\tif A[i] not in distinct_chars:\n\t\t\tdistinct_chars.append(A[i])\n\treturn distinct_chars\n\ndef get_distinct_chars(A):\n\tdistinct_chars = []\n\tfor i in range(len(A)):\n\t\tif A[i] not in distinct_chars:\n\t\t\tdistinct_chars.append(A[i])\n\treturn distinct_chars\n\ndef get_distinct_chars_count(A):', 'def distinct_chars(A):\n\t#Print the resulting list of characters.\n\tprint(list(set(A)))\n\ndistinct_chars(""abcde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")\ndistinct_chars(""abccde"")']"
26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","['def longer_string(A,B):\n\t#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.\n\ta = A\n\tb = B\n\tif len(a) > len(b):\n\t\ta,b = b,a\n\treturn a + b\n\ndef shorter_string(A,B):\n\ta = A\n\tb = B\n\tif len(a) < len(b):\n\t\ta,b = b,a\n\treturn a + b\n\ndef longer_string_2(A,B):\n\ta = A\n\tb = B\n\tif len(a) > len(b):\n\t\ta,b = b,', 'def longer_string(A,B):\n\t#Define a function ""len_str"" that returns the length of a string.\n\tdef len_str(s):\n\t\treturn len(s)\n\treturn len_str(A) > len_str(B)\n\nprint(longer_string(""Hello"",""World""))\nprint(longer_string(""Hello"",""Hello""))\nprint(longer_string(""Hello"",""Hello World""))\nprint(longer_string(""Hello"",""Hello World World""))\nprint(longer_string(""Hello"",""Hello World World World""))\nprint(longer_string(""Hello"",""Hello World World World World""))\nprint(longer_string(""Hello"",""Hello World World', 'def longer_string(A,B):\n\t#Assign the length of each string to a seperate variable.\n\tlength_A = len(A)\n\tlength_B = len(B)\n\tif length_A > length_B:\n\t\treturn A\n\telse:\n\t\treturn B\n\ndef shorter_string(A,B):\n\tlength_A = len(A)\n\tlength_B = len(B)\n\tif length_A < length_B:\n\t\treturn A\n\telse:\n\t\treturn B\n\ndef longest_string(A,B):\n\tif len(A) > len(B):\n\t\treturn A\n\telse:', 'def longer_string(A,B):\n\t#Assign the longer string to the variable ""result"".\n\tresult = """"\n\tfor i in range(len(A)):\n\t\tif A[i] > B[i]:\n\t\t\tresult += A[i]\n\t\telse:\n\t\t\tresult += B[i]\n\treturn result\n\ndef shorter_string(A,B):\n\tresult = """"\n\tfor i in range(len(A)):\n\t\tif A[i] < B[i]:\n\t\t\tresult += A[i]\n\t\telse:\n\t\t\tresult += B[i]\n\treturn result\n\ndef longer_string_2(A,B):', 'def longer_string(A,B):\n\t#Print the resulting string.\n\tprint(A+B)\n\nlonger_string(""Hello"",""World"")\n\ndef longer_string_2(A,B):\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)\n\tprint(A+B)']"
27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","['def sum_float_digits(A):\n\t#Assign the positive floating point number {A} to a variable ""f"".\n\tf = A\n\tsum = 0\n\twhile f > 0:\n\t\tsum += f % 10\n\t\tf //= 10\n\treturn sum\n\ndef sum_float_digits_2(A):\n\tsum = 0\n\twhile A > 0:\n\t\tsum += A % 10\n\t\tA //= 10\n\treturn sum\n\ndef sum_float_digits_3(A):\n\tsum = 0\n\twhile A > 0:\n\t\tsum += A % 10\n\t\tA //= 1', 'def sum_float_digits(A):\n\t#Compute the integer part of the number as variable ""a"".\n\ta = int(A)\n\tif a == 0:\n\t\treturn 0\n\telse:\n\t\treturn sum_float_digits(str(a)) + 1\n\ndef sum_float_digits_2(A):\n\ta = int(A)\n\tif a == 0:\n\t\treturn 0\n\telse:\n\t\treturn sum_float_digits_2(str(a)) + 1\n\ndef sum_float_digits_3(A):\n\ta = int(A)\n\tif a == 0:', 'def sum_float_digits(A):\n\t#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".\n\tb = int(A.split(""."")[1])\n\tif b == 0:\n\t\treturn A\n\telse:\n\t\treturn A + ""."" + str(b)\n\ndef sum_float_digits_2(A):\n\tb = int(A.split(""."")[1])\n\tif b == 0:\n\t\treturn A\n\telse:\n\t\treturn A + ""."" + str(b)\n\ndef sum_float_digits_3(A):\n\tb = int(A.split(""."")[1])\n\tif b == 0:\n\t\treturn A', 'def sum_float_digits(A):\n\t#Add them together and print the result.\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tsum += A[i]\n\tprint(sum)\n\nsum_float_digits([1.1, 2.2, 3.3, 4.4, 5.5])\nsum_float_digits([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])\nsum_float_digits([1.1, 2.2, 3.3, 4.4, 5.']"
28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","['def count_vowels(s):\n\t#Assign the string value {s} to a variable ""my_string"".\n\tmy_string = s\n\tvowels = 0\n\tfor letter in my_string:\n\t\tif letter in ""aeiou"":\n\t\t\tvowels += 1\n\treturn vowels\n\nprint(count_vowels(""hello""))\nprint(count_vowels(""hello there""))\nprint(count_vowels(""hello there, how are you?""))\nprint(count_vowels(""hello there, how are you? I\'m fine.""))\nprint(count_vowels(""hello there, how are you? I\'m fine. I\'m fine.""))\nprint(count', ""def count_vowels(s):\n\t#Lowercase the defined string.\n\ts = s.lower()\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor i in s:\n\t\tif i in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels('hello'))\nprint(count_vowels('hello world'))\nprint(count_vowels('hello world hello'))\nprint(count_vowels('hello world hello world'))\nprint(count_vowels('hello world hello world hello world'))\nprint(count_vowels"", ""def count_vowels(s):\n\t#Count the number of vowels in the string\n\tvowels = 0\n\tfor letter in s:\n\t\tif letter in 'aeiou':\n\t\t\tvowels += 1\n\treturn vowels\n\ndef count_consonants(s):\n\tconsonants = 0\n\tfor letter in s:\n\t\tif letter not in 'aeiou':\n\t\t\tconsonants += 1\n\treturn consonants\n\ndef count_letters(s):\n\tletters = 0\n\tfor letter in s:\n\t\tletters += 1\n\treturn letters\n\ndef count_words(s"", ""def count_vowels(s):\n\t#Print out the number of vowels in the string\n\tvowels = 0\n\tfor i in range(len(s)):\n\t\tif s[i] in 'aeiouAEIOU':\n\t\t\tvowels += 1\n\tprint(vowels)\n\ncount_vowels('hello')\ncount_vowels('hello world')\ncount_vowels('hello world hello')\ncount_vowels('hello world hello world')\ncount_vowels('hello world hello world hello world')\ncount_vowels('hello world hello world hello world hello world hello world hello world hello world hello world hello""]"
29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","['def factorial(n):\n\t#Assign the positive integer {n} to a variable ""f"".\n\tf = 1\n\tfor i in range(1, n+1):\n\t\tf *= i\n\treturn f\n\nprint(factorial(5))\n\ndef fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5))\n\ndef fibonacci_recursive(n):\n\tif n == 0:\n\t\treturn 0\n\telif n', 'def factorial(n):\n\t#Create a list from 1 to ""f"" (inclusive).\n\tf = [1]\n\tfor i in range(2, n+1):\n\t\tf.append(f[i-1] * i)\n\treturn f[n]\n\ndef fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\ndef fibonacci_recursive(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1', 'def factorial(n):\n\t#Create and initialize a variable named ""factorial"".\n\tfactorial = 1\n\tfor i in range(1, n+1):\n\t\tfactorial = factorial * i\n\treturn factorial\n\ndef fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\ndef fibonacci_recursive(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:', 'def factorial(n):\n\t#Compute the product of all the values in the list and assign the product to ""factorial"".\n\tfactorial = 1\n\tfor i in range(1, n+1):\n\t\tfactorial *= i\n\treturn factorial\n\ndef fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\ndef fibonacci_recursive(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fib', 'def factorial(n):\n\t#Print out the variable ""factorial"".\n\tprint(""Factorial of"", n, ""is"", factorial_recursive(n))\n\ndef factorial_recursive(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial_recursive(n-1)\n\ndef main():\n\tprint(""Enter a number to calculate its factorial:"")\n\tn = int(input())\n\tfactorial(n)\n\nif __name__ == ""__main__"":\n\tmain()']"
30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","['def max_edge_triangle(a,b):\n\t#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".\n\ttwo_edges = a + b\n\treturn two_edges\n\ndef max_edge_triangle_2(a,b):\n\ttwo_edges = a + b\n\treturn two_edges\n\ndef max_edge_triangle_3(a,b):\n\ttwo_edges = a + b\n\treturn two_edges\n\ndef max_edge_triangle_4(a,b):\n\ttwo_edges = a + b\n\treturn two_edges\n\ndef max_edge_triangle_5(a,b):\n\ttwo_edges = a +', 'def max_edge_triangle(a,b):\n\t#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".\n\tmaximum_edge = 1 - (a + b)\n\treturn maximum_edge\n\ndef max_edge_square(a,b):\n\tmaximum_edge = 1 - (a + b)\n\treturn maximum_edge\n\ndef max_edge_circle(a,b):\n\tmaximum_edge = 1 - (a + b)\n\treturn maximum_edge\n\ndef max_edge_triangle_square(a,b):\n\tmaximum_edge = 1 - (a + b)\n\treturn maximum_edge\n\ndef max_edge_', 'def max_edge_triangle(a,b):\n\t#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".\n\tminimum_edge = min(a,b)\n\treturn minimum_edge\n\ndef max_edge_square(a,b):\n\tminimum_edge = min(a,b)\n\treturn minimum_edge\n\ndef max_edge_rectangle(a,b):\n\tminimum_edge = min(a,b)\n\treturn minimum_edge\n\ndef max_edge_circle(a,b):\n\tminimum_edge = min(a,b)\n\treturn minimum_edge\n\ndef max_edge_triangle_area(a,b):', 'def max_edge_triangle(a,b):\n\t#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\n\tmy_tuple = (a,b)\n\tif a>b:\n\t\tmy_tuple = (b,a)\n\tif a==b:\n\t\tmy_tuple = (a,a)\n\tif a<b:\n\t\tmy_tuple = (b,a)\n\treturn my_tuple\n\ndef max_edge_triangle_2(a,b):\n\tif a>b:\n\t\treturn (b,a)\n\telif a==b:\n\t\treturn (a,a)\n\telif a<b:\n\t\treturn (b', 'def max_edge_triangle(a,b):\n\t#Print the variable ""my_tuple"".\n\tmy_tuple = (a,b)\n\tprint(my_tuple)\n\tprint(max(my_tuple))\n\tprint(min(my_tuple))\n\tprint(sum(my_tuple))\n\tprint(my_tuple[0] + my_tuple[1])\n\tprint(my_tuple[0] * my_tuple[1])\n\tprint(my_tuple[0] / my_tuple[1])\n\tprint(my_tuple[0] % my_tuple[1])\n\tprint(my_tuple[0] **']"
31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","['def factorial_and_remainder(n):\n\t#Compute factorial and remainder\n\tfact = 1\n\trem = 0\n\twhile n > 0:\n\t\tfact *= n\n\t\trem += n\n\t\tn -= 1\n\treturn fact, rem\n\ndef main():\n\tn = int(input(""Enter a number: ""))\n\tfact, rem = factorial_and_remainder(n)\n\tprint(""Factorial: "", fact)\n\tprint(""Remainder: "", rem)\n\nif __name__ == ""__main__"":\n\tmain()', 'def factorial_and_remainder(n):\n\t#Implement a function to compute the remainder when dividing a number by 10 and then multiplying it by 10.\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n % 10 + factorial_and_remainder(n // 10)\n\nprint(factorial_and_remainder(10))\n', 'def factorial_and_remainder(n):\n\t#Print out the remainder when dividing the factorial of {n} by 10.\n\tif n == 0:\n\t\treturn 0, 0\n\telif n == 1:\n\t\treturn 1, 0\n\telse:\n\t\treturn n % 10, n // 10\n\ndef main():\n\tn = int(input(""Enter a number: ""))\n\tprint(factorial_and_remainder(n))\n\nif __name__ == ""__main__"":\n\tmain()']"
32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","['def sum_polygon_angles(n):\n\t#Given a positive integer {n} and create a variable named ""n"" with this value.\n\tn = int(n)\n\tsum = 0\n\tfor i in range(n):\n\t\tsum += i\n\treturn sum\n\ndef sum_polygon_angles_2(n):\n\tn = int(n)\n\tsum = 0\n\tfor i in range(n):\n\t\tsum += i\n\treturn sum\n\ndef sum_polygon_angles_3(n):\n\tn = int(n)\n\tsum = 0\n\tfor i in range(n):\n\t\tsum += i\n\treturn sum\n\ndef sum_', 'def sum_polygon_angles(n):\n\t#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides\n\treturn sum(polygon_angles(n))\n\ndef polygon_angles(n):\n\tangles = []\n\tfor i in range(n):\n\t\tangles.append(i*360/n)\n\treturn angles\n\ndef polygon_area(n):\n\treturn (n*(n+1))/2\n\ndef polygon_perimeter(n):\n\treturn 2*n\n\ndef polygon_centroid(n):\n\treturn (n/2)*polygon_area(n)\n\ndef polygon_convex_hull(n):\n\treturn polygon', 'def sum_polygon_angles(n):\n\t#Convert the angle from degrees to radians\n\tangle = n * math.pi / 180\n\treturn sum(map(math.sin, [angle, angle + math.pi]))\n\ndef sum_polygon_area(n):\n\treturn sum(map(math.sin, [n * math.pi / 2, n * math.pi]))\n\ndef sum_polygon_perimeter(n):\n\treturn sum(map(math.sin, [n * math.pi / 2, n * math.pi, 0]))\n\ndef sum_polygon_perimeter_2(n):', 'def sum_polygon_angles(n):\n\t#Round the angle to have two decimal digits\n\treturn round(sum(map(math.radians, n)), 2)\n\ndef get_polygon_angles(n):\n\treturn [sum_polygon_angles(n[i]) for i in range(len(n))]\n\ndef get_polygon_area(n):\n\treturn sum(map(lambda x: x*x, n))\n\ndef get_polygon_perimeter(n):\n\treturn sum(map(lambda x: 2*x, n))\n\ndef get_polygon_centroid(n):\n\treturn sum(map(lambda x', 'def sum_polygon_angles(n):\n\t#Print out the angle of the polygon\n\tprint(n.area)\n\treturn n.area\n\ndef sum_polygon_perimeter(n):\n\tprint(n.length)\n\treturn n.length\n\ndef sum_polygon_area(n):\n\tprint(n.area)\n\treturn n.area\n\ndef sum_polygon_length(n):\n\tprint(n.length)\n\treturn n.length\n\ndef sum_polygon_area_perimeter(n):\n\tprint(n.area)\n\tprint(n.length)\n\treturn n.']"
33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","['def sum_string_numbers(s1,s2):\n\t#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.\n\ts1 = s1.split()\n\ts2 = s2.split()\n\ts1 = [int(i) for i in s1]\n\ts2 = [int(i) for i in s2]\n\ts1.sort()\n\ts2.sort()\n\ts1.append(0)\n\ts2.append(0)\n\ts1.append(0)\n\ts2.append(0)\n\ts1.append(0)\n\ts2.append(0)\n\ts1.append(', 'def sum_string_numbers(s1,s2):\n\t#Convert s1 and s2 to integers\n\ts1 = int(s1)\n\ts2 = int(s2)\n\treturn s1+s2\n\ndef sum_string_numbers_2(s1,s2):\n\treturn int(s1)+int(s2)\n\ndef sum_string_numbers_3(s1,s2):\n\treturn int(s1)+int(s2)\n\ndef sum_string_numbers_4(s1,s2):\n\treturn int(s1)+int(s2)\n\ndef sum_string_numbers_5', 'def sum_string_numbers(s1,s2):\n\t#Compute the sum of the two integers and store it as the variable s3\n\ts3 = int(s1) + int(s2)\n\treturn s3\n\ndef sum_string_numbers_2(s1,s2):\n\ts3 = int(s1) + int(s2)\n\treturn s3\n\ndef sum_string_numbers_3(s1,s2):\n\ts3 = int(s1) + int(s2)\n\treturn s3\n\ndef sum_string_numbers_4(s1,s2):\n\ts3 = int(s1) + int(', 'def sum_string_numbers(s1,s2):\n\t#Print out the variable s1 and s2\n\tprint(s1+s2)\n\nsum_string_numbers(""Hello"",""World"")\n\ndef sum_string_numbers(s1,s2):\n\tprint(s1+s2)\n\nsum_string_numbers(""Hello"",""World"")\n\ndef sum_string_numbers(s1,s2):\n\tprint(s1+s2)\n\nsum_string_numbers(""Hello"",""World"")\n\ndef sum_string_numbers(s1,s2):\n\tprint(s1+s2)\n\nsum']"
34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","['def min-max_sum(l):\n\t#Initialize the variable named lst with an integer list {l}.\n\tlst = [int(i) for i in l]\n\tmin_sum = max_sum = lst[0]\n\tfor i in lst:\n\t\tmin_sum = min(min_sum, i)\n\t\tmax_sum = max(max_sum, i)\n\treturn min_sum, max_sum\n\ndef min_max_sum_list(l):\n\tmin_sum = max_sum = lst[0]\n\tfor i in lst:\n\t\tmin_sum = min(min_sum, i)\n\t\tmax_sum = max', 'def min-max_sum(l):\n\t#Find the maximum of the variable lst and assign it to a variable named ma.\n\tma = max(l)\n\treturn ma\n\ndef max_sum(l):\n\tmax_sum = 0\n\tfor i in l:\n\t\tmax_sum += i\n\treturn max_sum\n\ndef max_product(l):\n\tmax_product = 1\n\tfor i in l:\n\t\tmax_product *= i\n\treturn max_product\n\ndef max_product_2(l):\n\tmax_product = 1\n\tfor i in l:\n\t\tmax_product = max(max_product, i)', 'def min-max_sum(l):\n\t#Find the minimum of the variable lst and assign to a variable named mi.\n\tmi = min(l)\n\treturn mi\n\ndef max_sum(l):\n\tmax_sum = 0\n\tfor i in l:\n\t\tmax_sum += i\n\treturn max_sum\n\ndef max_min_sum(l):\n\tmax_sum = 0\n\tmin_sum = 0\n\tfor i in l:\n\t\tmax_sum += i\n\t\tmin_sum += i\n\treturn max_sum, min_sum\n\ndef max_min_sum_list(l):\n\tmax_sum = 0', 'def min-max_sum(l):\n\t#Create a list from mi and ma (inclusive).\n\tmi = min(l)\n\tma = max(l)\n\treturn mi + ma\n\ndef max_sum(l):\n\tmax_sum = 0\n\tfor i in l:\n\t\tmax_sum = max(max_sum, i)\n\treturn max_sum\n\ndef max_sum_list(l):\n\tmax_sum = 0\n\tfor i in l:\n\t\tmax_sum = max(max_sum, i)\n\treturn max_sum\n\ndef max_sum_list_2(l):\n\tmax', 'def min-max_sum(l):\n\t#Print the sum of this list.\n\tprint(sum(l))\n\tmin_val = min(l)\n\tmax_val = max(l)\n\tprint(min_val, max_val)\n\treturn min_val, max_val\n\nmin_max_sum([1, 2, 3, 4, 5])\nmin_max_sum([1, 2, 3, 4, 5, 6])\nmin_max_sum([1, 2, 3, 4, 5, 6, 7])\nmin_max_']"
35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","['def vowel_overlap(s1,s2):\n\t#Implement a function to return the characters shared between two words.\n\ts1 = s1.lower()\n\ts2 = s2.lower()\n\ts1_vowels = set(s1)\n\ts2_vowels = set(s2)\n\treturn s1_vowels.intersection(s2_vowels)\n\nprint(vowel_overlap(""hello"",""ello""))\nprint(vowel_overlap(""hello"",""hell""))\nprint(vowel_overlap(""hello"",""ello""))\nprint(vowel_overlap(""hello"",""hello""))\nprint(vowel_overlap(""hello"",""hell""))\nprint', ""def vowel_overlap(s1,s2):\n\t#Implement a function to find the number of vowels in a string.\n\tvowels = ['a','e','i','o','u']\n\tcount = 0\n\tfor i in range(len(s1)):\n\t\tif s1[i] in vowels and s2[i] in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(vowel_overlap('hello','ello'))\nprint(vowel_overlap('hello','ell'))\nprint(vowel_overlap('hello','elllo'))\nprint(vowel_overlap('hello','elloo'))\nprint(vowel_overlap('hello','"", 'def vowel_overlap(s1,s2):\n\t#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.\n\ts = s1 + s2\n\ts = s.replace("" "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "","""")\n\ts = s.replace(""  "",""', 'def vowel_overlap(s1,s2):\n\t#Print the number of vowels in the variable s1\n\tvowels = 0\n\tfor i in range(len(s1)):\n\t\tif s1[i] in \'aeiou\':\n\t\t\tvowels += 1\n\tprint(vowels)\n\tif vowels == 0:\n\t\tprint(""No vowels in the string"")\n\telse:\n\t\tprint(""Vowels in the string"")\n\nvowel_overlap(""hello"",""hola"")\nvowel_overlap(""hello"",""hello"")\nvowel_overlap(""hello"",""hola"")\nvowel_overlap(""hello"",""hello"")\nvowel_']"
36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","['def sum_neg(l):\n\t#Given a list of integers {l}, assign the list to a varialbe named lst1.\n\tlst1 = []\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tlst1.append(i)\n\treturn lst1\n\ndef sum_neg_2(l):\n\tlst1 = []\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tlst1.append(i)\n\treturn sum(lst1)\n\ndef sum_neg_3(l):\n\tlst1 = []\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tlst1.append(i)\n\treturn', 'def sum_neg(l):\n\t#Find the negative numbers of the list and assign it to a new variable named lst2\n\tlst2 = [x for x in l if x < 0]\n\treturn sum(lst2)\n\ndef sum_pos(l):\n\tlst2 = [x for x in l if x > 0]\n\treturn sum(lst2)\n\ndef sum_pos_neg(l):\n\tlst2 = [x for x in l if x > 0 and x < 0]\n\treturn sum(lst2)\n\ndef sum_pos_neg_zero(l):\n\tlst2 = [x for x in l if x >', 'def sum_neg(l):\n\t#Compute the sum of numbers in lst2\n\treturn sum(filter(lambda x: x < 0, l))\n\ndef sum_pos(l):\n\treturn sum(filter(lambda x: x > 0, l))\n\ndef sum_pos_neg(l):\n\treturn sum(filter(lambda x: x > 0 and x < 0, l))\n\ndef sum_pos_neg_zero(l):\n\treturn sum(filter(lambda x: x > 0 and x < 0 and x == 0, l))\n\ndef sum_pos_neg_zero_neg', 'def sum_neg(l):\n\t#Print out the sum of all negative numbers in the list\n\tsum = 0\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_pos(l):\n\tsum = 0\n\tfor i in l:\n\t\tif i > 0:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_pos_neg(l):\n\tsum = 0\n\tfor i in l:\n\t\tif i > 0:\n\t\t\tsum += i\n\t\tif i < 0:\n\t\t\tsum += i']"
37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","['def load_dataset(a1):\n\t#Import the pandas library.\n\timport pandas as pd\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\timport seaborn as sns\n\timport os\n\timport sys\n\timport glob\n\timport re\n\timport random\n\timport string\n\timport time\n\timport datetime\n\timport math\n\timport copy\n\timport warnings\n\timport itertools\n\timport operator\n\timport functools\n\timport operator\n\timport itertools\n\timport operator\n\timport functools\n\timport operator\n\timport functools\n\timport operator\n\timport functools\n\timport operator\n\timport functools\n\timport operator', 'def load_dataset(a1):\n\t#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".\n\tdf = pd.read_csv(a1)\n\tdf.head()\n\tdf.info()\n\tdf.describe()\n\tdf.shape\n\tdf.columns\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum()\n\tdf.isnull().sum', 'def load_dataset(a1):\n\t#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\n\tmy_counts = a1.groupby(""gender"").count()\n\treturn my_counts\n\ndef plot_bar_chart(my_counts):\n\tplt.figure(figsize=(10, 5))\n\tplt.bar(my_counts.index, my_counts[""age""])\n\tplt.xlabel(""Gender"")\n\tplt.ylabel(""Number of people"")\n\tplt.title(""Age distribution"")\n\tplt.show()\n\ndef plot_pie_chart(my_counts):\n\tplt.figure(figsize=(10, 5))', 'def load_dataset(a1):\n\t#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".\n\tplain_list = a1.values\n\tprint(plain_list)\n\treturn plain_list\n\ndef load_dataset_2(a1):\n\tplain_list = a1.values\n\tprint(plain_list)\n\treturn plain_list\n\ndef load_dataset_3(a1):\n\tplain_list = a1.values\n\tprint(plain_list)\n\treturn plain_list\n\ndef load_dataset_4(a1):\n\tplain_list = a1.values\n\tprint(plain_list)', 'def load_dataset(a1):\n\t#Print the maximum element of this list.\n\tprint(max(a1))\n\tprint(min(a1))\n\tprint(sum(a1))\n\tprint(len(a1))\n\tprint(a1)\n\tprint(a1[0])\n\tprint(a1[-1])\n\tprint(a1[0:5])\n\tprint(a1[0:5:2])\n\tprint(a1[0:5:3])\n\tprint(a1[0:5:4])\n\tprint(a1[0:5:5])\n\tprint(']"
38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","[""def char_length_list(s):\n\t#Define a string named's' with the value '{s}'.\n\ts = '{s}'\n\treturn len(s)\n\ndef char_length_list_2(s):\n\treturn len(s)\n\ndef char_length_list_3(s):\n\treturn len(s)\n\ndef char_length_list_4(s):\n\treturn len(s)\n\ndef char_length_list_5(s):\n\treturn len(s)\n\ndef char_length_list_6(s):\n\treturn len(s)\n\ndef char_length_list_7(s):"", ""def char_length_list(s):\n\t#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'\n\tpattern = re.compile(r'[,\\.]')\n\treturn len(pattern.findall(s))\n\ndef char_length_list_2(s):\n\treturn len(re.findall(r'[,\\.]', s))\n\ndef char_length_list_3(s):\n\treturn len(re.findall(r'[,\\.]', s))\n\ndef char_length_list_4(s):\n\treturn len(re.findall(r'[,\\.]', s))\n\ndef char_length_list_5(s):\n\treturn len"", ""def char_length_list(s):\n\t#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'\n\ts2 = re.sub(r',', r' ', s)\n\ts2 = re.sub(r'\\.', r' ', s2)\n\ts2 = re.sub(r'\\s+', r' ', s2)\n\ts2 = re.sub(r'\\n', r' ', s2)\n\ts2 = re.sub(r'\\r', r' ', s2)\n\ts2 = re.sub(r'\\t', r' ', s2)\n\ts2 = re.sub(r'\\v', r' ', s2"", ""def char_length_list(s):\n\t#Split the string's2' into a list of words with a space and store the result to variable 'words'\n\twords = s.split()\n\tlength = []\n\tfor word in words:\n\t\tlength.append(len(word))\n\treturn length\n\ndef char_length_list_2(s):\n\twords = s.split()\n\tlength = []\n\tfor word in words:\n\t\tlength.append(len(word))\n\treturn length\n\ndef char_length_list_3(s):\n\twords = s.split()\n\tlength = []\n\tfor word in words:\n\t\tlength.append(len(word))\n\treturn length"", ""def char_length_list(s):\n\t#Print a list of integers consisting of the length of each word in 'words'\n\treturn [len(word) for word in s.split()]\n\ndef char_length_list_2(s):\n\treturn [len(word) for word in s.split()]\n\ndef char_length_list_3(s):\n\treturn [len(word) for word in s.split()]\n\ndef char_length_list_4(s):\n\treturn [len(word) for word in s.split()]\n\ndef char_length_list_5(s):\n\treturn [len(word) for word in s.split()]""]"
39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","[""def hex_to_rgb(s):\n\t#Create a variable named's' with the value '{s}'.\n\ts = s.lstrip('#')\n\ts = s.upper()\n\ts = s[0:6] + s[6:8] + s[8:10] + s[10:12] + s[12:14] + s[14:16]\n\ts = s.replace(' ', '')\n\ts = s.replace('0X', '')\n\ts = s.replace('0x', '')\n\ts = s.replace('0', '')\n\ts = s.replace(' ', '')\n\ts ="", ""def hex_to_rgb(s):\n\t#Lowercase the variable's' and store the result to variable's2'.\n\ts2 = s.lower()\n\tif s2[0] == '#':\n\t\ts2 = s2[1:]\n\tif len(s2) == 3:\n\t\ts2 = s2[0] + s2[0] + s2[1] + s2[1] + s2[2] + s2[2]\n\tif len(s2) == 6:\n\t\ts2 = s2[0] + s2[1] + s2[2] + s2[3] + s2[4]"", ""def hex_to_rgb(s):\n\t#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.\n\tpattern3 = re.compile(r'([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})')\n\trgb = pattern3.match(s).groups()\n\treturn tuple(int(x, 16) for x in rgb)\n\ndef rgb_to_hex(r, g, b):\n\treturn '#%02x%02x%02x' % (r, g, b)\n\ndef rgb_to_hsv(r, g, b):"", ""def hex_to_rgb(s):\n\t#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.\n\tpattern6 = re.compile(r'([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})')\n\trgb = []\n\tfor match in pattern6.finditer(s):\n\t\trgb.append(int(match.group(1), 16))\n\t\trgb.append(int(match.group(2), 16))\n\t\trgb.append(int(match.group(3), 16))\n\treturn rgb\n\ndef rgb_to_hex(r"", 'def hex_to_rgb(s):\n\t#Print True if the variable\'s2\' if it matches with either of variables \'pattern3\' or \'pattern6\', False otherwise.\n\tif re.match(pattern3, s) or re.match(pattern6, s):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef rgb_to_hex(r, g, b):\n\treturn ""#%02x%02x%02x"" % (r, g, b)\n\ndef rgb_to_hex_list(r, g, b):\n\treturn [r, g, b]\n\ndef hex_to_rgb_list(s):\n\treturn [int(s[i:i+2],']"
40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","[""def majority_vote(lst):\n\t#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.\n\tcount_values = {}\n\tfor i in lst:\n\t\tif i in count_values:\n\t\t\tcount_values[i] += 1\n\t\telse:\n\t\t\tcount_values[i] = 1\n\treturn count_values\n\nprint(majority_vote([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"", ""def majority_vote(lst):\n\t#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.\n\tcounts = count_values(lst)\n\tprint(counts)\n\tprint(max(counts.values()))\n\tprint(min(counts.values()))\n\tprint(sum(counts.values())/len(counts.values()))\n\tprint(counts.get(max(counts.values())))\n\tprint(counts.get(min(counts.values())))\n\tprint(counts.get(sum(counts.values())/len(counts.values())))\n\tprint(counts.get(counts.get(max(counts.values()))))\n\tprint(counts.get"", ""def majority_vote(lst):\n\t#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.\n\tcounts = {}\n\tfor i in lst:\n\t\tif i in counts:\n\t\t\tcounts[i] += 1\n\t\telse:\n\t\t\tcounts[i] = 1\n\tfor key in counts:\n\t\tif counts[key] > len(lst)/2:\n\t\t\treturn key\n\treturn None\n\nprint(majority_vote([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3""]"
41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","[""def week_later(year,month,day):\n\t#Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).\n\ttoday = datetime.datetime(year,month,day)\n\ttoday = today + datetime.timedelta(days=7)\n\treturn today\n\ndef week_earlier(year,month,day):\n\ttoday = datetime.datetime(year,month,day)\n\ttoday = today - datetime.timedelta(days=7)\n\treturn today\n\ndef month_later(year,month,day):\n\ttoday = datetime.datetime(year,month,day)\n\ttoday = today + datetime.timedelta(days=30)\n\treturn today\n\ndef month"", ""def week_later(year,month,day):\n\t#Add 7 days to the variable 'today' and store the result to variable 'week'.\n\tweek = datetime.date(year,month,day) + datetime.timedelta(days=7)\n\treturn week\n\ndef week_earlier(year,month,day):\n\tweek = datetime.date(year,month,day) - datetime.timedelta(days=7)\n\treturn week\n\ndef week_between(year,month,day1,day2):\n\tweek = datetime.date(year,month,day1) + datetime.timedelta(days=7) - datetime.date(year,month,day2)\n\treturn week\n\ndef"", ""def week_later(year,month,day):\n\t#Print 'week' in the format '%m/%d/%Y'.\n\treturn '%s/%s/%s'%(month,day,year)\n\ndef week_earlier(year,month,day):\n\treturn '%s/%s/%s'%(month,day,year-1)\n\ndef month_later(year,month,day):\n\treturn '%s/%s/%s'%(month+1,day,year)\n\ndef month_earlier(year,month,day):\n\treturn '%s/%s/%s'%(month-1,day,year)\n\ndef day_later(year,month,day):\n\treturn '%""]"
42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","[""def sorted_word_weights(words):\n\t#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.\n\tword_weight = lambda word: sum(ord(char) for char in word)\n\treturn sorted(words, key=word_weight, reverse=True)\n\ndef main():\n\twords = read_words()\n\tsorted_words = sorted_word_weights(words)\n\tprint(sorted_words)\n\nif __name__ == '__main__':\n\tmain()"", ""def sorted_word_weights(words):\n\t#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.\n\tweights = []\n\tfor word in words:\n\t\tweights.append(word_weight(word))\n\treturn weights\n\ndef word_weight(word):\n\treturn len(word)\n\ndef most_common_word(words):\n\treturn max(set(words), key=words.count)\n\ndef most_common_word_weight(words):\n\treturn max(set(words), key=word_weight)\n\ndef most_common_word_count(words):\n\treturn max(set(words), key=words.count)"", ""def sorted_word_weights(words):\n\t#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.\n\tif sorted(words) == sorted(words_weights):\n\t\tprint('True')\n\telse:\n\t\tprint('False')\n\nwords_weights = ['apple', 'banana', 'cherry', 'orange', 'pear', 'grape', 'kiwi','melon', 'pineapple','strawberry', 'watermelon']\nsorted_word_weights(words_weights)\n\nwords_weights = ['apple', 'banana', 'cherry', 'orange', 'pear', 'grape', 'kiwi','melon', 'pineapple',""]"
43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","['def create_palindrome(n):\n\t#Create a function named \'is_palindrome\' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.\n\tif n < 0:\n\t\treturn False\n\telif n == 0:\n\t\treturn True\n\telse:\n\t\treturn str(n) == str(n)[::-1]\n\ndef main():\n\tn = int(input(""Enter a number: ""))\n\tif create_palindrome(n):\n\t\tprint(""The number is a palindrome"")\n\telse:\n\t\tprint(""The number is not a palindrome"")\n\nif __name__ == ""__main__"":\n\tmain()', ""def create_palindrome(n):\n\t#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.\n\tdef descent(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n + descent(n-1)\n\treturn descent(n)\n\nprint(create_palindrome(10))\n"", 'def create_palindrome(n):\n\t#Define an integer variable named \'base\' with the value {n}.\n\tbase = n\n\twhile base > 1:\n\t\tbase = base // 10\n\treturn base\n\ndef is_palindrome(n):\n\tbase = create_palindrome(n)\n\treturn n == base\n\ndef main():\n\tn = int(input(""Enter a number: ""))\n\tif is_palindrome(n):\n\t\tprint(""The number is a palindrome."")\n\telse:\n\t\tprint(""The number is not a palindrome."")\n\nif __name__ == ""__main__"":\n\tmain()', ""def create_palindrome(n):\n\t#While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.\n\tbase = n\n\twhile not is_palindrome(base):\n\t\tbase = descent(base)\n\treturn base\n\ndef is_palindrome(n):\n\treturn n == n[::-1]\n\ndef descent(n):\n\treturn n - 1\n\ndef main():\n\tn = int(input())\n\tprint(create_palindrome(n))\n\nif __name__ == '__main__':\n\tmain()"", ""def create_palindrome(n):\n\t#Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.\n\tif n < 10:\n\t\treturn False\n\telse:\n\t\tbase = n\n\t\twhile base > 0:\n\t\t\tbase = base // 10\n\t\treturn base == 1\n\ndef is_palindrome(n):\n\tif n < 10:\n\t\treturn False\n\telse:\n\t\tbase = n\n\t\twhile base > 0:\n\t\t\tbase = base // 10\n\t\treturn base == base\n\ndef is_palindrome_recursive(n):\n\tif n < 10:\n\t\treturn False""]"
44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","[""def simulate_backspace(input):\n\t#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.\n\tinput = '{' + input + '}'\n\tstack = []\n\tfor i in range(len(input)):\n\t\tif input[i] == '{':\n\t\t\tstack.append(input[i])\n\t\telif input[i] == '}':\n\t\t\tif len(stack) > 0:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\treturn False\n\treturn True\n\ndef simulate_bracket(input):\n\tinput = '{' + input + '}'\n\tstack = []\n\tfor i in range(len(input)):\n\t\tif input[i] == '{':"", ""def simulate_backspace(input):\n\t#Iterating over variable 'input', if the current character is '@' and'stack' is not empty, pop the last element from'stack', otherwise append the character to'stack'.\n\tfor i in range(len(input)):\n\t\tif input[i] == '@' and len(stack) > 0:\n\t\t\tstack.pop()\n\t\telse:\n\t\t\tstack.append(input[i])\n\treturn stack\n\ndef simulate_backspace_v2(input):\n\tstack = []\n\tfor i in range(len(input)):\n\t\tif input[i] == '@' and len(stack) > 0:\n\t\t\tstack.pop()\n\t\telse:\n\t\t\tstack.append(input[i])\n\treturn stack\n\ndef simulate"", ""def simulate_backspace(input):\n\t#Print the joined string from'stack'.\n\tprint(input.join(stack))\n\tstack.pop()\n\ndef simulate_delete(input):\n\tprint(input.join(stack))\n\tstack.pop()\n\ndef simulate_enter(input):\n\tprint(input.join(stack))\n\tstack.append(input.join(stack))\n\ndef simulate_left(input):\n\tprint(input.join(stack))\n\tstack.append(input.join(stack))\n\ndef simulate_right(input):\n\tprint(input.join(stack))\n\tstack.append(""]"
45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","['def pandas_df_manipulation(a1,a2):\n\t#Import the pandas library.\n\timport pandas as pd\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\timport seaborn as sns\n\timport warnings\n\twarnings.filterwarnings(""ignore"")\n\timport os\n\timport sys\n\timport time\n\timport datetime\n\timport random\n\timport math\n\timport re\n\timport copy\n\timport itertools\n\timport operator\n\timport functools\n\timport collections\n\timport statistics\n\timport statistics as st\n\timport statistics as st\n\timport statistics as st\n\timport statistics as st\n\timport statistics as st\n\timport statistics as st', 'def pandas_df_manipulation(a1,a2):\n\t#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\n\tfrom sklearn.model_selection import train_test_split\n\tdf = pd.read_csv(\'./datasets/melb_data.csv\')\n\tX = df.iloc[:,:-1]\n\ty = df.iloc[:,-1]\n\tX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\tprint(X_train.shape)\n\tprint(X_test.shape)\n\tprint(y_train.shape)', 'def pandas_df_manipulation(a1,a2):\n\t#Assign the attribute ""Price"" to the target variable ""y"".\n\ty = a1[\'Price\']\n\tx = a2[\'Price\']\n\tx = x.to_numpy()\n\ty = y.to_numpy()\n\tx = np.array(x)\n\ty = np.array(y)\n\tx = x.reshape(len(x),1)\n\ty = y.reshape(len(y),1)\n\tx = np.append(x,y,axis=1)\n\tx = np.delete(x,0,axis=0)\n\tx = np.delete(x,', 'def pandas_df_manipulation(a1,a2):\n\t#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".\n\tmelb_predictors = a1.drop(""Price"",axis=1)\n\tmelb_predictors = melb_predictors.drop(a2,axis=1)\n\tmelb_predictors = melb_predictors.drop(a1,axis=1)\n\tmelb_predictors = melb_predictors.drop(a2,axis=1)\n\tmelb_predictors = melb_predictors.drop(a1,axis=1)\n\tmelb_predictors = melb_predictors.drop(a', 'def pandas_df_manipulation(a1,a2):\n\t#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".\n\tX = a1.select_dtypes(include=[\'object\']).columns.tolist()\n\tX = [x for x in X if x!= \'id\']\n\tX = [x for x in X if x!= \'date\']\n\tX = [x for x in X if x!= \'time\']\n\tX = [x for x in X if x!= \'datetime\']\n\tX = [x for x in X if x!= \'year\']\n\tX = [x for x in X if x!=\'month\']\n\tX = [x for x in X if x!=', 'def pandas_df_manipulation(a1,a2):\n\t#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.\n\tx_train, x_valid, y_train, y_valid = train_test_split(a1, a2, test_size=0.2, random_state=0)\n\treturn x_train, x_valid, y_train, y_valid\n\ndef main():\n\ta1 = 0.8\n\ta2 = 0.2\n\tx_train, x_valid, y_train, y_valid = pandas_df_manipulation(a1,a2)\n\tprint(x_train.shape)', 'def pandas_df_manipulation(a1,a2):\n\t#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\n\tprint(a1.sum())\n\tprint(a2.sum())\n\tprint(a1.sum(axis=0))\n\tprint(a2.sum(axis=0))\n\tprint(a1.sum(axis=1))\n\tprint(a2.sum(axis=1))\n\tprint(a1.sum(axis=None))\n\tprint(a2.sum(axis=None))\n\tprint(a1.sum(axis=0,skipna=False))\n\tprint(a2.sum(axis=0,skip']"
46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","['def sum_non-overlap_range(l):\n\t#Create a variable named lst1 with value {l}\n\tlst1 = l\n\tlst2 = []\n\tfor i in range(len(l)):\n\t\tif i == 0:\n\t\t\tlst2.append(l[i])\n\t\telif i == len(l)-1:\n\t\t\tlst2.append(l[i])\n\t\telse:\n\t\t\tlst2.append(l[i])\n\treturn sum(lst2)\n\nprint(sum_non-overlap_range([1,2,3,4,5,6,7,8,9,10]))\n', 'def sum_non-overlap_range(l):\n\t#Find the minimum and maximum of lst1 and assign them to variables a and b respectively\n\ta = min(l)\n\tb = max(l)\n\tsum = 0\n\tfor i in l:\n\t\tif i >= a and i <= b:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_non_overlap_range_2(l):\n\ta = min(l)\n\tb = max(l)\n\tsum = 0\n\tfor i in l:\n\t\tif i >= a and i <= b:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_non_overlap_range_3(l):', 'def sum_non-overlap_range(l):\n\t#Create a list from a to b (inclusive) and assign it to variable named lst2\n\tlst2 = []\n\tfor i in range(l[0],l[1]+1):\n\t\tlst2.append(i)\n\treturn lst2\n\ndef sum_non_overlap_range_2(l):\n\tlst2 = []\n\tfor i in range(l[0],l[1]+1):\n\t\tlst2.append(i)\n\treturn lst2\n\ndef sum_non_overlap_range_3(l):\n\tlst2 = []\n\tfor i in range(l[0],l[1]+1):', 'def sum_non-overlap_range(l):\n\t#Find the elements that are in lst2 but not in lst1\n\treturn [x for x in l if x not in l2]\n\ndef sum_overlap_range(l):\n\treturn [x for x in l if x in l2]\n\ndef sum_overlap_range_2(l):\n\treturn [x for x in l if x in l2]\n\ndef sum_overlap_range_3(l):\n\treturn [x for x in l if x in l2]\n\ndef sum_overlap_range_4(l):\n\treturn [x for x in l if x in l2]', 'def sum_non-overlap_range(l):\n\t#Print the sum of these elements in the list\n\tsum = 0\n\tfor i in l:\n\t\tsum += i\n\treturn sum\n\ndef sum_non_overlap_range_2(l):\n\tsum = 0\n\tfor i in l:\n\t\tif i > 0:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_non_overlap_range_3(l):\n\tsum = 0\n\tfor i in l:\n\t\tif i > 0:\n\t\t\tsum += i\n\treturn sum\n\ndef sum_non_overlap_range_4(']"
47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","['def detect_digits(l):\n\t#Initialize the variable named lst1 with a list {l}.\n\tlst1 = [l]\n\tlst2 = []\n\tlst3 = []\n\tlst4 = []\n\tlst5 = []\n\tlst6 = []\n\tlst7 = []\n\tlst8 = []\n\tlst9 = []\n\tlst10 = []\n\tlst11 = []\n\tlst12 = []\n\tlst13 = []\n\tlst14 = []\n\tlst15 = []\n\tlst16 = []\n\tlst17 = []\n\tlst18 = []\n\tlst19 = []', 'def detect_digits(l):\n\t#Create a function called num_in_str() to check whether a string contains a number.\n\tdef num_in_str(s):\n\t\tfor i in s:\n\t\t\tif i.isdigit():\n\t\t\t\treturn True\n\t\treturn False\n\n\tif num_in_str(l):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef detect_letters(l):\n\tdef num_in_str(s):\n\t\tfor i in s:\n\t\t\tif i.isalpha():\n\t\t\t\treturn True\n\t\treturn False\n\n\tif num_in_str(l):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef detect_punctuation', 'def detect_digits(l):\n\t#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2\n\tlst2 = num_in_str(l)\n\tlst3 = []\n\tfor i in lst2:\n\t\tif i.isdigit():\n\t\t\tlst3.append(i)\n\treturn lst3\n\ndef num_in_str(l):\n\tlst4 = []\n\tfor i in l:\n\t\tif i.isdigit():\n\t\t\tlst4.append(i)\n\treturn lst4\n\ndef remove_duplicates(l):\n\tlst5 = []\n\tfor i in l:\n\t\tif i not in lst5:\n\t\t\tlst5', 'def detect_digits(l):\n\t#Print out lst2\n\tprint(l)\n\tlst2 = []\n\tfor i in l:\n\t\tif i.isdigit():\n\t\t\tlst2.append(i)\n\treturn lst2\n\ndef detect_letters(l):\n\tlst3 = []\n\tfor i in l:\n\t\tif i.isalpha():\n\t\t\tlst3.append(i)\n\treturn lst3\n\ndef detect_punctuation(l):\n\tlst4 = []\n\tfor i in l:\n\t\tif i in string.punctuation:\n\t\t\tlst4.append(i)\n\treturn lst']"
48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","['def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.\n\tdef a(x):\n\t\treturn x*a1\n\treturn a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a(a', 'def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.\n\tdef b(x):\n\t\treturn x*a2\n\treturn b\n\ndef cascading_functions_2(a1,a2,a3,a4):\n\tdef b(x):\n\t\treturn x*a2\n\treturn b\n\ndef cascading_functions_3(a1,a2,a3,a4):\n\tdef b(x):\n\t\treturn x*a2\n\treturn b\n\ndef cascading_functions_4(a1,a2,a3,a4):\n\tdef b(x):', 'def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\n\tdef c(x):\n\t\treturn x*a3\n\treturn c\n\ndef cascading_functions_2(a1,a2,a3,a4):\n\tdef c(x):\n\t\treturn x*a3\n\treturn c\n\ndef cascading_functions_3(a1,a2,a3,a4):\n\tdef c(x):\n\t\treturn x*a3\n\treturn c\n\ndef cascading_functions_4(a1,a2,a3,a4):\n\tdef c(x):', 'def cascading_functions(a1,a2,a3,a4):\n\t#Create a list named ""abc"" which contains the three functions in order of definition.\n\tabc = [a1,a2,a3,a4]\n\tprint(abc)\n\tprint(type(abc))\n\tprint(len(abc))\n\tprint(abc[0])\n\tprint(abc[1])\n\tprint(abc[2])\n\tprint(abc[3])\n\tprint(type(abc[0]))\n\tprint(type(abc[1]))\n\tprint(type(abc[2]))\n\tprint(type(abc[3]))\n\tprint(abc[0] + abc[1] + abc[2', 'def cascading_functions(a1,a2,a3,a4):\n\t#Assign the integer {a4} to a variable ""my_init"".\n\tmy_init = a4\n\tprint(""my_init is: "", my_init)\n\tprint(""a1 is: "", a1)\n\tprint(""a2 is: "", a2)\n\tprint(""a3 is: "", a3)\n\tprint(""a4 is: "", a4)\n\tprint(""a1 + a2 is: "", a1 + a2)\n\tprint(""a1 - a2 is: "", a1 - a2)\n\tprint(""a1 * a2 is: "", a1 * a2)\n\tprint(""', 'def cascading_functions(a1,a2,a3,a4):\n\t#Apply the first function of the list to ""my_init"" and name the result ""my_result"".\n\tmy_result = a1(a2,a3,a4)\n\tprint(""my_result: "",my_result)\n\tprint(""my_result.name: "",my_result.name)\n\tprint(""my_result.age: "",my_result.age)\n\tprint(""my_result.height: "",my_result.height)\n\tprint(""my_result.weight: "",my_result.weight)\n\tprint(""my_result.eyes: "",my_result.eyes)\n\tprint(""my_result.teeth', 'def cascading_functions(a1,a2,a3,a4):\n\t#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".\n\tmy_result = a1(a2(a3(a4)))\n\treturn my_result\n\nprint(cascading_functions(lambda x: x**2, lambda x: x**3, lambda x: x**4, lambda x: x**5))\n\ndef cascading_functions_2(a1,a2,a3,a4):\n\tmy_result = a1(a2(a3(a4)))\n\treturn my_result\n\nprint(cascading_functions_2(lambda x: x**2, lambda x:', 'def cascading_functions(a1,a2,a3,a4):\n\t#Print the variable named ""my_result"".\n\tprint(a1,a2,a3,a4)\n\treturn a1+a2+a3+a4\n\ndef main():\n\ta1 = 10\n\ta2 = 20\n\ta3 = 30\n\ta4 = 40\n\tmy_result = cascading_functions(a1,a2,a3,a4)\n\tprint(my_result)\n\nif __name__ == ""__main__"":\n\tmain()']"
49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","['def pluralize_duplicates(a1):\n\t#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.\n\ta2 = set()\n\tfor word in a1:\n\t\tif word in a2:\n\t\t\ta2.remove(word)\n\t\telse:\n\t\t\ta2.add(word + ""s"")\n\treturn a2\n\ndef get_word_count(a1):\n\treturn len(a1)\n\ndef get_word_count_with_duplicates(a1):\n\treturn len(pluralize_duplicates(a1))\n\ndef get_word_count_with_duplicates_and_plural(a1):\n\treturn len(plural', 'def pluralize_duplicates(a1):\n\t#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.\n\tdef is_plural(word):\n\t\tif word[-1] ==\'s\':\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\ta2 = []\n\tfor word in a1:\n\t\tif is_plural(word):\n\t\t\ta2.append(word[:-1])\n\t\telse:\n\t\t\ta2.append(word)\n\treturn a2\n\ndef get_word_count(a1):\n\ta2 = []\n\tfor word in a1:\n\t\ta2.append(word)\n\treturn len(a2)', 'def pluralize_duplicates(a1):\n\t#Assign {a1} to a variable named ""words"".\n\twords = a1\n\tfor i in range(len(words)):\n\t\tfor j in range(i+1, len(words)):\n\t\t\tif words[i] == words[j]:\n\t\t\t\twords[j] = words[j] + ""s""\n\treturn words\n\ndef pluralize_duplicates_2(a1):\n\twords = a1\n\tfor i in range(len(words)):\n\t\tfor j in range(i+1, len(words)):\n\t\t\tif words[i] == words[j]:\n\t\t\t\twords[j] = words', 'def pluralize_duplicates(a1):\n\t#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".\n\twords_plural = a1.replace(""s"", ""es"")\n\treturn words_plural\n\ndef pluralize_duplicates_2(a1):\n\twords_plural = a1.replace(""s"", ""es"")\n\treturn words_plural\n\ndef pluralize_duplicates_3(a1):\n\twords_plural = a1.replace(""s"", ""es"")\n\treturn words_plural\n\ndef pluralize_duplicates_4(a1):\n\twords_plural = a1.replace(""s"", ""es"")\n\treturn words_plural', 'def pluralize_duplicates(a1):\n\t#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.\n\tcontains_plural = False\n\tfor word in a1:\n\t\tif word in plural_words:\n\t\t\tcontains_plural = True\n\treturn contains_plural\n\ndef pluralize_words(a1):\n\tfor word in a1:\n\t\tif word in plural_words:\n\t\t\ta1[a1.index(word)] = word + ""s""\n\treturn a1\n\ndef pluralize_words_and_duplicates(a1):\n\tfor word in a1:\n\t\tif word in plural_words:\n\t\t\ta1[a1.', 'def pluralize_duplicates(a1):\n\t#Print out whether or not ""words_plural"" contains a word in plural as boolean.\n\tif a1 in words_plural:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef pluralize_duplicates_2(a1):\n\tif a1 in words_plural:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef pluralize_duplicates_3(a1):\n\tif a1 in words_plural:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef pluralize_duplicates_4(a1):\n\tif a1 in words_plural:\n\t\treturn True\n\telse:\n\t\treturn False']"
50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","['def highest_altitude(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".\n\tmy_relative_altitude = []\n\tfor i in A:\n\t\tmy_relative_altitude.append(i[2])\n\thighest_altitude = max(my_relative_altitude)\n\treturn highest_altitude\n\ndef lowest_altitude(A):\n\tmy_relative_altitude = []\n\tfor i in A:\n\t\tmy_relative_altitude.append(i[2])\n\tlowest_altitude = min(my_relative_altitude)\n\treturn lowest_altitude\n\ndef average_altitude(A):\n\tmy_relative_altitude = []', 'def highest_altitude(A):\n\t#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.\n\tmy_net_altitude = [0]\n\tfor i in range(len(A)):\n\t\tmy_net_altitude.append(my_net_altitude[i] + A[i])\n\treturn my_net_altitude[-1]\n\ndef lowest_altitude(A):\n\tmy_net_altitude = [0]\n\tfor i in range(len(A)):\n\t\tmy_net_altitude.append(my_net_altitude[i] + A[i])\n\treturn my_net_altitude[0]\n\ndef highest_altitude_', 'def highest_altitude(A):\n\t#Find the larget number in the list my_net_altitude and print it out.\n\thighest_altitude = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > highest_altitude:\n\t\t\thighest_altitude = A[i]\n\tprint(highest_altitude)\n\nhighest_altitude(my_net_altitude)\n\ndef highest_altitude_2(A):\n\thighest_altitude = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > highest_altitude:\n\t\t\thighest_altitude = A[i]\n\treturn highest_altitude\n\nhighest_altitude_2(my']"
51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","['def truncate_words(A,K):\n\t#Assign the list of words ""{A}"" to a variable named ""my_sentences"".\n\tmy_sentences = A\n\tmy_sentences = [word for word in my_sentences if len(word) <= K]\n\treturn my_sentences\n\ndef get_word_count(A):\n\tmy_word_count = {}\n\tfor word in A:\n\t\tif word in my_word_count:\n\t\t\tmy_word_count[word] += 1\n\t\telse:\n\t\t\tmy_word_count[word] = 1\n\treturn my_word_count\n\ndef get_word_freq(A):\n\tmy_word_', 'def truncate_words(A,K):\n\t#Assign an integer ""{K}"" to a variable named ""k"".\n\tk = K\n\tfor i in range(len(A)):\n\t\tif len(A[i]) > k:\n\t\t\tA[i] = A[i][:k]\n\treturn A\n\ndef get_word_count(A):\n\tword_count = {}\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j] in word_count:\n\t\t\t\tword_count[A[i][j]] += 1\n\t\t\telse:\n\t\t\t\tword_count[A[', 'def truncate_words(A,K):\n\t#Truncate the list such that it contains k words and store as truncated_list\n\ttruncated_list = []\n\tfor i in range(len(A)):\n\t\tif len(A[i]) <= K:\n\t\t\ttruncated_list.append(A[i])\n\t\telse:\n\t\t\ttruncated_list.append(A[i][:K])\n\treturn truncated_list\n\ndef get_word_count(A):\n\tword_count = {}\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j] in word_count:\n\t\t\t\tword_count[', 'def truncate_words(A,K):\n\t#Print out the variable truncated_list.\n\ttruncated_list = []\n\tfor i in range(len(A)):\n\t\tif len(A[i]) <= K:\n\t\t\ttruncated_list.append(A[i])\n\t\telse:\n\t\t\ttruncated_list.append(A[i][:K])\n\treturn truncated_list\n\ndef get_word_count(A):\n\tword_count = {}\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j] in word_count:\n\t\t\t\tword_count[']"
52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","['def single_element(A):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tprint(my_numbers)\n\tprint(type(my_numbers))\n\tprint(my_numbers[0])\n\tprint(type(my_numbers[0]))\n\tprint(my_numbers[0])\n\tprint(type(my_numbers[0]))\n\tprint(my_numbers[0])\n\tprint(type(my_numbers[0]))\n\tprint(my_numbers[0])\n\tprint(type(my_numbers[0]))\n\tprint(my_numbers[0])\n\tprint(type', ""def single_element(A):\n\t#Count the frequencies of the integers in my_numbers.\n\tmy_numbers = [int(x) for x in A]\n\treturn len(set(my_numbers))\n\ndef main():\n\tA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(single_element(A))\n\nif __name__ == '__main__':\n\tmain()"", 'def single_element(A):\n\t#Find the integer that the frequency is 1 and store as one_time.\n\tone_time = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tone_time = i\n\t\t\tbreak\n\treturn one_time\n\ndef find_all_ones(A):\n\tones = []\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tones.append(i)\n\treturn ones\n\ndef find_all_zeros(A):\n\tzeros = []\n\tfor i in range(len(A)):\n\t\tif A[', 'def single_element(A):\n\t#Print out the variable one_time.\n\tprint(""The variable one_time is: "", A[0])\n\ndef multiple_elements(A):\n\tprint(""The variable A is: "", A)\n\ndef multiple_elements_2(A):\n\tprint(""The variable A is: "", A)\n\tprint(""The variable A is: "", A)\n\ndef multiple_elements_3(A):\n\tprint(""The variable A is: "", A)\n\tprint(""The variable A is: "", A)\n\tprint(""The variable A is: "", A)\n\ndef multiple_elements_4(']"
53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","['def remove_elements(A,Val):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tfor i in range(len(my_numbers)):\n\t\tif my_numbers[i] == Val:\n\t\t\tmy_numbers.pop(i)\n\treturn my_numbers\n\ndef remove_duplicates(A):\n\tmy_numbers = A\n\tfor i in range(len(my_numbers)):\n\t\tfor j in range(i+1,len(my_numbers)):\n\t\t\tif my_numbers[i] == my_numbers[j]:\n\t\t\t\tmy_numbers.pop(j)\n\treturn my_numbers', 'def remove_elements(A,Val):\n\t#Assign an integer ""{Val}"" to a variable named ""val"".\n\tval = Val\n\tfor i in range(len(A)):\n\t\tif A[i] == val:\n\t\t\tA.pop(i)\n\treturn A\n\ndef remove_duplicates(A):\n\tA = list(set(A))\n\treturn A\n\ndef remove_duplicates_2(A):\n\tA = list(set(A))\n\tA.sort()\n\treturn A\n\ndef remove_duplicates_3(A):\n\tA = list(set(A))\n\tA.sort(reverse=True)\n\treturn A', 'def remove_elements(A,Val):\n\t#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.\n\tremove_numbers = []\n\tfor i in range(len(A)):\n\t\tif A[i]!= Val:\n\t\t\tremove_numbers.append(A[i])\n\treturn remove_numbers\n\ndef remove_duplicates(A):\n\tremove_duplicates = []\n\tfor i in range(len(A)):\n\t\tif A[i] not in remove_duplicates:\n\t\t\tremove_duplicates.append(A[i])\n\treturn remove_duplicates\n\ndef remove_duplicates_2(A):\n\tremove_duplicates = []\n\tfor i in range', 'def remove_elements(A,Val):\n\t#Print out the variable remove_numbers.\n\tremove_numbers = []\n\tfor i in range(len(A)):\n\t\tif A[i]!= Val:\n\t\t\tremove_numbers.append(A[i])\n\treturn remove_numbers\n\ndef remove_duplicates(A):\n\tremove_duplicates = []\n\tfor i in range(len(A)):\n\t\tif A[i] not in remove_duplicates:\n\t\t\tremove_duplicates.append(A[i])\n\treturn remove_duplicates\n\ndef remove_duplicates_2(A):\n\tremove_duplicates = []\n\tfor i in range']"
54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","['def check_array_sum(A,Val):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tsum = 0\n\tfor i in my_numbers:\n\t\tsum += i\n\tif sum == Val:\n\t\tprint(""The array is a sum of all the integers."")\n\telse:\n\t\tprint(""The array is not a sum of all the integers."")\n\ncheck_array_sum([1,2,3,4,5],10)\ncheck_array_sum([1,2,3,4,5],11)\ncheck_array_sum([1,2,3,4,5],12)', 'def check_array_sum(A,Val):\n\t#Assign an integer ""{Val}"" to a variable named ""val"".\n\tval = Val\n\tfor i in range(len(A)):\n\t\tval = val + A[i]\n\treturn val\n\ndef check_array_product(A,Val):\n\tval = 1\n\tfor i in range(len(A)):\n\t\tval = val * A[i]\n\treturn val\n\ndef check_array_product_2(A,Val):\n\tval = 1\n\tfor i in range(len(A)):\n\t\tval = val * A[i]\n\treturn val\n\ndef check_array_product', 'def check_array_sum(A,Val):\n\t#Sum all the number in my_numbers and store as sum_numbers.\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\tif sum_numbers == Val:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_array_sum_2(A,Val):\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\tif sum_numbers == Val:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_array_sum_3(A,', 'def check_array_sum(A,Val):\n\t#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\tif sum_numbers == Val:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_array_sum_2(A,Val):\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\tif sum_numbers == Val:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_array_sum_3(A,']"
55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","['def merge_sorted_lists(A,B):\n\t#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".\n\tmy_numbers1 = sorted(A)\n\tprint(my_numbers1)\n\tprint(len(my_numbers1))\n\tprint(my_numbers1[0])\n\tprint(my_numbers1[-1])\n\tprint(my_numbers1[0:2])\n\tprint(my_numbers1[0:2])\n\tprint(my_numbers1[0:2])\n\tprint(my_numbers1[0:2])\n\tprint(my_numbers1[0:2])\n\tprint(my_numbers1[0', 'def merge_sorted_lists(A,B):\n\t#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\n\tmy_numbers2 = B\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] < B[j]:\n\t\t\tmy_numbers2.append(A[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tmy_numbers2.append(B[j])\n\t\t\tj += 1\n\twhile i < len(A):\n\t\tmy_numbers2.append(A[i])\n\t\ti += 1\n\twhile j', 'def merge_sorted_lists(A,B):\n\t#Merge the two sorted lists in a new sorted list and store as new_list.\n\tnew_list = []\n\ti = 0\n\tj = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] < B[j]:\n\t\t\tnew_list.append(A[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tnew_list.append(B[j])\n\t\t\tj += 1\n\tnew_list += A[i:]\n\tnew_list += B[j:]\n\treturn new_list\n\ndef merge_sorted_lists_recursive(A,B):', 'def merge_sorted_lists(A,B):\n\t#Print the sorted new_list.\n\tnew_list = []\n\ti = 0\n\tj = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] < B[j]:\n\t\t\tnew_list.append(A[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tnew_list.append(B[j])\n\t\t\tj += 1\n\twhile i < len(A):\n\t\tnew_list.append(A[i])\n\t\ti += 1\n\twhile j < len(B):\n\t\tnew_list']"
56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","['def maximum_subarray(A):\n\t#Assign an integer array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in range(len(A)):\n\t\tmax_ending_here = max(max_ending_here + A[i], A[i])\n\t\tif max_ending_here > max_so_far:\n\t\t\tmax_so_far = max_ending_here\n\treturn max_so_far\n\nprint(maximum_subarray([1, -2, 3, 4, -1, 2, 1, -5', 'def maximum_subarray(A):\n\t#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.\n\tmax_subarray = [0] * len(A)\n\tmax_subarray[0] = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_subarray[i] = max(max_subarray[i-1] + A[i], A[i])\n\treturn max_subarray\n\ndef maximum_subarray_2(A):\n\tmax_subarray = [0] * len(A)\n\tmax_subarray[0] = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax', 'def maximum_subarray(A):\n\t#Compute the sum of max_subarray and store as sum_subarry.\n\tsum_subarray = A[0]\n\tfor i in range(1, len(A)):\n\t\tsum_subarray = max(sum_subarray + A[i], A[i])\n\treturn sum_subarray\n\ndef maximum_subarray_2(A):\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_sum = max(max_sum + A[i], A[i])\n\treturn max_sum\n\ndef maximum_subarray_3(A):\n\tmax_sum = A[', 'def maximum_subarray(A):\n\t#Print out the variable sum_subarray.\n\tsum_subarray = 0\n\tmax_subarray = 0\n\tfor i in range(len(A)):\n\t\tsum_subarray = sum_subarray + A[i]\n\t\tif sum_subarray > max_subarray:\n\t\t\tmax_subarray = sum_subarray\n\t\tif sum_subarray < 0:\n\t\t\tsum_subarray = 0\n\treturn max_subarray\n\nA = [1, -2, 3, -4, 5, 6, 7, 8, 9, 10]\nprint(maximum_subarray(A']"
57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","['def max_square_root_integer(A):\n\t#Assign the positive number ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\twhile my_number > 0:\n\t\tif my_number % 2 == 0:\n\t\t\tmy_number = my_number / 2\n\t\telse:\n\t\t\tmy_number = (3 * my_number) + 1\n\treturn my_number\n\nprint(max_square_root_integer(10))\nprint(max_square_root_integer(12))\nprint(max_square_root_integer(13))\nprint(max_square_root_integer(14))\nprint(', 'def max_square_root_integer(A):\n\t#Compute the squre root of the number and store as square_root. \n\t\n\tsquare_root = 0\n\twhile A > 0:\n\t\tsquare_root += A % 10\n\t\tA //= 10\n\treturn square_root\n\ndef max_square_root_float(A):\n\tsquare_root = 0\n\twhile A > 0:\n\t\tsquare_root += A % 10\n\t\tA //= 10\n\treturn square_root\n\ndef max_square_root_string(A):\n\tsquare_root = 0\n\twhile A > 0:\n\t\tsquare_root +=', 'def max_square_root_integer(A):\n\t#Compute the largest integer but not larger than square_root and store as largest_square_root.\n\tlargest_square_root = 0\n\tfor i in range(1, int(math.sqrt(A))+1):\n\t\tif A % i == 0:\n\t\t\tlargest_square_root = i\n\t\t\tbreak\n\treturn largest_square_root\n\ndef max_square_root_float(A):\n\tlargest_square_root = 0\n\tfor i in range(1, int(math.sqrt(A))+1):\n\t\tif A % i == 0:\n\t\t\tlargest_square_root = i\n\t\t\tbreak\n\treturn largest_', 'def max_square_root_integer(A):\n\t#Print the integer largest_square_root.\n\tlargest_square_root = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j] > largest_square_root:\n\t\t\t\tlargest_square_root = A[i][j]\n\treturn largest_square_root\n\ndef max_square_root_float(A):\n\tlargest_square_root = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j]']"
58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","['def longest_word(A):\n\t#Assign the list of words ""{A}"" to a variable named ""my_words"".\n\tmy_words = A\n\tlongest_word = """"\n\tfor word in my_words:\n\t\tif len(word) > len(longest_word):\n\t\t\tlongest_word = word\n\treturn longest_word\n\nprint(longest_word([""a"", ""banana"", ""apples"", ""apricot""]))\nprint(longest_word([""a"", ""banana"", ""apples"", ""apricot"", ""orange""]))\nprint(longest_word([""a"", ""banana"", ""apples"", ""apricot"", ""orange"", ""kiwi""]))\nprint(longest', 'def longest_word(A):\n\t#Count the length of the words in the list and store as a dictionary word_count. \nword_count = {}\nfor word in A:\n\tif word in word_count:\n\t\tword_count[word] += 1\n\telse:\n\t\tword_count[word] = 1\n\nlongest_word = max(word_count, key=word_count.get)\nprint(longest_word)\n', 'def longest_word(A):\n\t#Find the element with the largest count in dictionary word_count and store as longest_word.\n\tlongest_word = """"\n\tlongest_count = 0\n\tfor word in A:\n\t\tif word in word_count:\n\t\t\tif word_count[word] > longest_count:\n\t\t\t\tlongest_word = word\n\t\t\t\tlongest_count = word_count[word]\n\treturn longest_word\n\ndef longest_word_count(A):\n\tlongest_word = """"\n\tlongest_count = 0\n\tfor word in A:\n\t\tif word in word_count:\n\t\t\tif word_count[word] > longest_count:', 'def longest_word(A):\n\t#print the variable longest_word.\n\tlongest_word = """"\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[i])):\n\t\t\tif A[i][j] == "" "":\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tif len(longest_word) < len(A[i][j]):\n\t\t\t\t\tlongest_word = A[i][j]\n\treturn longest_word\n\ndef longest_word_in_list(A):\n\tlongest_word = """"\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A[']"
59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","['def sum_unique_elements(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\n\tsum = 0\n\n\tfor i in my_numbers:\n\t\tsum += i\n\n\treturn sum\n\nprint(sum_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n', 'def sum_unique_elements(A):\n\t#Return the elements that appears exactly once in the above list and store as my_uniques.\n\tmy_uniques = []\n\tfor i in A:\n\t\tif i not in my_uniques:\n\t\t\tmy_uniques.append(i)\n\treturn my_uniques\n\ndef sum_unique_elements_2(A):\n\tmy_uniques = []\n\tfor i in A:\n\t\tif i not in my_uniques:\n\t\t\tmy_uniques.append(i)\n\treturn len(my_uniques)\n\ndef sum_unique_elements_3(A):\n\tmy_uniques = []\n\tfor', 'def sum_unique_elements(A):\n\t#Compute the sum of the list my_uniques and print it out.\n\tmy_uniques = []\n\tfor i in A:\n\t\tif i not in my_uniques:\n\t\t\tmy_uniques.append(i)\n\tprint(sum(my_uniques))\n\nsum_unique_elements([1,2,3,4,5,6,7,8,9,10])\nsum_unique_elements([1,2,3,4,5,6,7,8,9,10,11])\nsum_unique_elements([1,2,3,4,5,6,7']"
60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","['def digonal_sum(A):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\n\tsum = 0\n\n\tfor i in range(len(my_matrix)):\n\t\tfor j in range(len(my_matrix[i])):\n\t\t\tsum += my_matrix[i][j]\n\n\treturn sum\n\ndef main():\n\tA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tprint(digonal_sum(A))\n\nif __name__ == ""__main__"":\n\tmain()', ""def digonal_sum(A):\n\t#Find the diagonal elements of my matrix and store as diag_elements.\n\tdiag_elements = []\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i == j:\n\t\t\t\tdiag_elements.append(A[i][j])\n\treturn diag_elements\n\ndef main():\n\tA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tprint(A)\n\tprint(diagonal_sum(A))\n\nif __name__ == '__main__':\n\tmain()"", 'def digonal_sum(A):\n\t#print out the sum of the variable diag_elements.\n\tdiag_elements = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i == j:\n\t\t\t\tdiag_elements += A[i][j]\n\treturn diag_elements\n\ndef main():\n\tA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tprint(A)\n\tprint(sum_of_diagonals(A))\n\tprint(sum_of_diagonals_2(A))']"
61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","['def matrix_condition_number(A,T):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\tn = my_matrix.shape[0]\n\tm = my_matrix.shape[1]\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix.T\n\tmy_matrix = my_matrix', 'def matrix_condition_number(A,T):\n\t#Assign the number ""{T}"" to a variable named ""t"".\n\tt = T\n\tA_t = A.transpose()\n\tA_t_A = A_t.dot(A)\n\tA_t_A_t = A_t_A.transpose()\n\tA_t_A_t_A = A_t_A_t.dot(A)\n\tA_t_A_t_A_t = A_t_A_t_A.transpose()\n\tA_t_A_t_A_t_A = A_t_A_t_A_t.dot', 'def matrix_condition_number(A,T):\n\t#Compute the condition number of my_matrix and store as result.\n\tresult = np.linalg.cond(A)\n\treturn result\n\ndef matrix_rank(A):\n\treturn np.linalg.matrix_rank(A)\n\ndef matrix_eig(A):\n\treturn np.linalg.eig(A)\n\ndef matrix_eigvals(A):\n\treturn np.linalg.eigvals(A)\n\ndef matrix_eigvals_sorted(A):\n\treturn np.linalg.eigvals(A).sort()\n\ndef matrix_eigvals_sorted_by_index(A):\n\treturn np.linalg', 'def matrix_condition_number(A,T):\n\t#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".\n\tif np.linalg.cond(A) < T:\n\t\treturn ""True""\n\telse:\n\t\treturn ""False""\n\ndef matrix_rank(A):\n\treturn np.linalg.matrix_rank(A)\n\ndef matrix_eig(A):\n\treturn np.linalg.eig(A)\n\ndef matrix_eigvals(A):\n\treturn np.linalg.eigvals(A)\n\ndef matrix_eigvals_sorted(A):\n\treturn np.linalg.eigvals(A).sort()\n\ndef matrix_eigvals_']"
62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","['def matrix_multiplication_sum(A,B):\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\ta = a.transpose()\n\ta = a.dot(B)\n\ta = a.transpose()\n\ta = a.dot(a)\n\treturn a\n\ndef matrix_multiplication_product(A,B):\n\ta = A\n\tb = B\n\ta = a.transpose()\n\tb = b.transpose()\n\ta = a.dot(b)\n\ta = a.transpose()\n\treturn a\n\ndef matrix_multiplication_product_sum(A,B):\n\ta = A', 'def matrix_multiplication_sum(A,B):\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\tc = [[0 for i in range(len(b[0]))] for j in range(len(b))]\n\tfor i in range(len(b)):\n\t\tfor j in range(len(b[0])):\n\t\t\tc[i][j] = 0\n\t\t\tfor k in range(len(b[0])):\n\t\t\t\tc[i][j] += A[i][k] * b[k][j]\n\treturn c\n\ndef matrix_multiplication_product(A,B):\n\tc = [[0 for i', 'def matrix_multiplication_sum(A,B):\n\t#Compute the multiplication of two matrices and store as result.\n\tresult = np.zeros((A.shape[0],B.shape[1]))\n\tfor i in range(A.shape[0]):\n\t\tfor j in range(B.shape[1]):\n\t\t\tresult[i][j] = A[i][0]*B[0][j] + A[i][1]*B[1][j] + A[i][2]*B[2][j] + A[i][3]*B[3][j] + A[i][4]*B[4][j] + A[i][5]*B[', 'def matrix_multiplication_sum(A,B):\n\t#Compute the sum of the result and print it out.\n\tresult = np.sum(A*B)\n\tprint(result)\n\ndef matrix_multiplication_product(A,B):\n\tresult = np.dot(A,B)\n\tprint(result)\n\ndef matrix_multiplication_transpose(A,B):\n\tresult = np.transpose(A) * B\n\tprint(result)\n\ndef matrix_multiplication_determinant(A):\n\tresult = np.linalg.det(A)\n\tprint(result)\n\ndef matrix_multiplication_inverse(A):\n\tresult']"
63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","['def matrix_determinant_(A,B):\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\ta = a.transpose()\n\ta = a.reshape(a.shape[0],1)\n\ta = a.transpose()\n\ta = a.reshape(1,a.shape[0])\n\ta = a.transpose()\n\ta = a.reshape(a.shape[0],a.shape[0])\n\ta = a.transpose()\n\ta = a.reshape(a.shape[0],a.shape[0])\n\ta = a.transpose()\n\ta = a.reshape(a.shape', 'def matrix_determinant_(A,B):\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\tif(A.shape[0]!= A.shape[1]):\n\t\tprint(""Matrix must be square."")\n\t\treturn\n\telse:\n\t\tprint(""Determinant of matrix is: "", end="""")\n\tfor i in range(A.shape[0]):\n\t\tfor j in range(A.shape[1]):\n\t\t\tif(i == j):\n\t\t\t\tprint(A[i][j], end="" "")\n\t\t\telse:\n\t\t\t\tprint(A[i][j] * b[j][i], end="" "")\n\t\tprint()', 'def matrix_determinant_(A,B):\n\t#Implement a function that computes the determinant of a matrix.\n\tif A.shape[0]!= A.shape[1]:\n\t\traise ValueError(""Matrix must be square."")\n\tif A.shape[0] == 1:\n\t\treturn A[0][0]\n\telse:\n\t\treturn A[0][0]*matrix_determinant_(A[1:],B)\n\ndef matrix_inverse_(A):\n\tif A.shape[0]!= A.shape[1]:\n\t\traise ValueError(""Matrix must be square."")\n\tif A.shape[0] == 1:\n\t\treturn A\n\telse:', 'def matrix_determinant_(A,B):\n\t#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".\n\tif A[0][0] == A[1][1] == A[2][2] == 0:\n\t\treturn ""True""\n\telse:\n\t\treturn ""False""\n\ndef matrix_inverse_(A):\n\tif matrix_determinant_(A,A) == ""True"":\n\t\tdet = matrix_determinant_(A,A)\n\t\tdet_inv = 1/det\n\t\tA[0][0] = det_inv\n\t\tA[1][1] = det_inv\n\t\tA[2][2] = det_inv']"
64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","['def log-sum-exp(A):\n\t#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tmax_number = max(my_numbers)\n\tmy_numbers.remove(max_number)\n\tmy_numbers.append(max_number)\n\tmy_sum = 0\n\tfor i in range(len(my_numbers)):\n\t\tmy_sum += math.exp(my_numbers[i])\n\treturn math.log(my_sum)\n\ndef main():\n\tA = [1, 2, 3, 4, 5, 6, 7, 8, 9,', 'def log-sum-exp(A):\n\t#Implement a function that computes the exponential output of a list.\n\tA = np.array(A)\n\tm = A.shape[0]\n\tA = A - np.max(A)\n\tA = np.exp(A)\n\tA = A / np.sum(A)\n\tA = np.sum(A)\n\treturn A\n\ndef softmax(A):\n\tA = np.array(A)\n\tm = A.shape[0]\n\tA = A - np.max(A)\n\tA = np.exp(A)\n\tA = A / np.sum(A', 'def log-sum-exp(A):\n\t#Implement a function that computes summation of a list.\n\tA = np.array(A)\n\tm = A.shape[0]\n\tA = A - np.max(A)\n\tA = np.exp(A)\n\tA = A / np.sum(A)\n\tA = np.log(A)\n\tA = A - np.max(A)\n\tA = A - np.log(np.sum(A))\n\treturn A\n\ndef softmax(A):\n\tA = np.array(A)\n\tm = A.shape[0]\n\tA = A', 'def log-sum-exp(A):\n\t#Implement a function that computes log of a number.\n\tA = np.array(A)\n\tif np.max(A) == 0:\n\t\treturn np.log(np.sum(np.exp(A)))\n\telse:\n\t\treturn np.log(np.sum(np.exp(A - np.max(A))))\n\ndef softmax(A):\n\tA = np.array(A)\n\treturn np.exp(A) / np.sum(np.exp(A))\n\ndef sigmoid(A):\n\tA = np.array(A)\n\treturn 1 / (', 'def log-sum-exp(A):\n\t#Print out the log of sum exponential my_numbers.\n\tA = np.array(A)\n\tA = np.log(A)\n\tA = np.sum(A, axis=1)\n\tA = np.log(A)\n\treturn A\n\ndef softmax(A):\n\tA = np.array(A)\n\tA = np.exp(A)\n\tA = A / np.sum(A, axis=1, keepdims=True)\n\treturn A\n\ndef sigmoid(A):\n\tA = np.array(A)\n\tA = 1 / (1 + np.']"
65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","['def k_nearest_points(A,K):\n\t#Assign the list of points ""{A}"" to a variable named ""my_points"".\n\tmy_points = A\n\tmy_distances = []\n\tfor i in range(len(my_points)):\n\t\tfor j in range(len(my_points)):\n\t\t\tif i!= j:\n\t\t\t\tmy_distances.append(euclidian_distance(my_points[i],my_points[j]))\n\tmy_distances.sort()\n\treturn my_distances[:K]\n\ndef euclidian_distance(p1,p2):\n\treturn math.sqrt((p1[0]-p2[0])**2 + (p1[', 'def k_nearest_points(A,K):\n\t#Assign the integer ""{K}"" to a variable named ""k"".\n\tk = K\n\tn = len(A)\n\tD = np.zeros((n,n))\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tD[i,j] = np.linalg.norm(A[i]-A[j])\n\tD = D + D.T\n\tD = D/2\n\tD = D + D.T\n\tD = D/2\n\tD = D + D.T\n\tD = D/2\n\tD = D + D.T\n\tD = D', 'def k_nearest_points(A,K):\n\t#Implement a function that computes the distance between a point and the origin (0,0).\n\tA = np.array(A)\n\tK = np.array(K)\n\treturn np.linalg.norm(A-np.array([0,0]),axis=1)\n\ndef k_nearest_neighbors(A,K):\n\tA = np.array(A)\n\tK = np.array(K)\n\treturn np.argsort(A,axis=1)[:,:K]\n\ndef k_nearest_neighbors_distance(A,K):\n\tA = np.array(A)\n\tK = np.array(K)', 'def k_nearest_points(A,K):\n\t#Implement a function that computes the k closest points in an array to the origin and store as result.\n\tresult = []\n\tfor i in range(K):\n\t\tresult.append(A[i])\n\treturn result\n\ndef k_nearest_points_2(A,K):\n\tresult = []\n\tfor i in range(K):\n\t\tresult.append(A[i])\n\treturn result\n\ndef k_nearest_points_3(A,K):\n\tresult = []\n\tfor i in range(K):\n\t\tresult.append(A[i])\n\treturn result\n\ndef k_nearest_points_4(A,K', 'def k_nearest_points(A,K):\n\t#Compute the k closest points in my_points and print them out.\n\tdistances = []\n\tfor i in range(len(A)):\n\t\tdistances.append(np.linalg.norm(A[i]-A[K]))\n\tdistances = np.array(distances)\n\tprint(distances)\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.argsort()[:K])\n\tprint(distances.']"
66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","['def longest_common_prefix(l1):\n\t#Implement a function called LCP() to find the longest common prefix of two strings.\n\tif len(l1) == 0:\n\t\treturn """"\n\tif len(l1) == 1:\n\t\treturn l1[0]\n\tif len(l1) == 2:\n\t\treturn l1[0] if l1[0] == l1[1] else """"\n\tif len(l1) == 3:\n\t\treturn l1[0] if l1[0] == l1[1] and l1[1] == l1[2] else """"\n\tif len(l1) == 4', 'def longest_common_prefix(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = l1\n\tlst2 = []\n\tfor i in range(len(l1)):\n\t\tfor j in range(len(l2)):\n\t\t\tif l1[i] == l2[j]:\n\t\t\t\tlst2.append(l1[i])\n\t\t\telse:\n\t\t\t\tbreak\n\t\telse:\n\t\t\treturn lst1[:i]\n\treturn lst2\n\ndef longest_common_suffix(l1):\n\tlst1 = l1\n\tlst2 = []\n\tfor i in range(len(l1)):\n\t\tfor j', 'def longest_common_prefix(l1):\n\t#Apply the function LCP() recusively to lst1 and lst2\n\tif len(l1) == 0:\n\t\treturn """"\n\telif len(l1) == 1:\n\t\treturn l1[0]\n\telse:\n\t\treturn longest_common_prefix(l1[1:]) + l1[0]\n\ndef longest_common_prefix_2(l1, l2):\n\tif len(l1) == 0:\n\t\treturn """"\n\telif len(l2) == 0:\n\t\treturn """"\n\telif l1[0] == l2[0]:', 'def longest_common_prefix(l1):\n\t#Print the the longest common prefix of the strings in lst1\n\tif len(l1) == 0:\n\t\treturn """"\n\telif len(l1) == 1:\n\t\treturn l1[0]\n\telse:\n\t\tl1.sort()\n\t\tl2 = l1[0]\n\t\tfor i in range(1, len(l1)):\n\t\t\tif l1[i]!= l2:\n\t\t\t\treturn l1[:i]\n\t\treturn l1\n\ndef longest_common_suffix(l1):\n\tif len(l1) == 0:\n\t\treturn """"\n\telif len']"
67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","['def duplicate_elments(lst1):\n\t#Assigns a list {lst1} to a variable named lst1_copy\n\tlst1_copy = lst1[:]\n\treturn lst1_copy\n\ndef remove_duplicates(lst1):\n\tlst1_copy = duplicate_elments(lst1)\n\tlst1_copy.sort()\n\treturn lst1_copy\n\ndef remove_duplicates_2(lst1):\n\tlst1_copy = duplicate_elments(lst1)\n\tlst1_copy.sort()\n\treturn lst1_copy\n\ndef remove_duplicates_3(lst1):\n\tlst1_copy = duplicate_elments(lst', 'def duplicate_elments(lst1):\n\t#Create a frequency table of elements in lst1\n\tfreq_table = {}\n\tfor i in lst1:\n\t\tif i in freq_table:\n\t\t\tfreq_table[i] += 1\n\t\telse:\n\t\t\tfreq_table[i] = 1\n\treturn freq_table\n\ndef get_most_common_element(freq_table):\n\tmost_common_element = None\n\tmost_common_count = 0\n\tfor i in freq_table:\n\t\tif freq_table[i] > most_common_count:\n\t\t\tmost_common_count = freq_table[i', 'def duplicate_elments(lst1):\n\t#Find the elements with frequency larger than 1 and assign them to a list lst2\n\tlst2 = []\n\tfor i in lst1:\n\t\tif lst1.count(i) > 1:\n\t\t\tlst2.append(i)\n\treturn lst2\n\ndef find_all_substrings(string):\n\tlst = []\n\tfor i in range(len(string)):\n\t\tfor j in range(i+1, len(string)+1):\n\t\t\tlst.append(string[i:j])\n\treturn lst\n\ndef find_all_substrings_2(string):\n\tlst = []\n\tfor i in range', 'def duplicate_elments(lst1):\n\t#Print out lst2\n\tlst2 = []\n\tfor i in lst1:\n\t\tlst2.append(i)\n\treturn lst2\n\ndef remove_duplicates(lst1):\n\tlst2 = []\n\tfor i in lst1:\n\t\tif i not in lst2:\n\t\t\tlst2.append(i)\n\treturn lst2\n\ndef remove_duplicates_2(lst1):\n\tlst2 = []\n\tfor i in lst1:\n\t\tif i not in lst2:\n\t\t\tlst2.append(i)\n\treturn lst2\n\ndef remove']"
68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","[""def first_unique_character(w):\n\t#Initialize a variable named w1 with a string '{w}'\n\tw1 = '{w}'\n\tfor i in range(len(w)):\n\t\tif w[i] not in w1:\n\t\t\tw1 = w[i]\n\treturn w1\n\ndef first_unique_character_2(w):\n\tw1 = ''\n\tfor i in range(len(w)):\n\t\tif w[i] not in w1:\n\t\t\tw1 += w[i]\n\treturn w1\n\ndef first_unique_character_3(w):\n\tw1 = ''\n\tfor i in range(len"", 'def first_unique_character(w):\n\t#Get the first non-repeating character in w1\n\tfor i in range(len(w)):\n\t\tif w[i] not in w[:i]:\n\t\t\treturn w[i]\n\treturn None\n\ndef first_unique_character_index(w):\n\tfor i in range(len(w)):\n\t\tif w[i] not in w[:i]:\n\t\t\treturn i\n\treturn None\n\ndef first_unique_character_index_2(w):\n\tfor i in range(len(w)):\n\t\tif w[i] not in w[:i]:\n\t\t\treturn i\n\treturn None', 'def first_unique_character(w):\n\t#Find its corresponding index and assign it to n1\n\tn1 = w.find(w[0])\n\tfor i in range(1,len(w)):\n\t\tif w[i] == w[n1]:\n\t\t\tn1 = i\n\treturn n1\n\ndef second_unique_character(w):\n\tn1 = first_unique_character(w)\n\tn2 = w.find(w[n1])\n\treturn n2\n\ndef third_unique_character(w):\n\tn1 = first_unique_character(w)\n\tn2 = second_unique_character(', 'def first_unique_character(w):\n\t#Print out n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35']"
69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","[""def uncommon_words(s1,s2):\n\t#Assign a sentence '{s1}' to a variable named sentence1.\n\tsentence1 = s1\n\tsentence2 = s2\n\tsentence1 = sentence1.lower()\n\tsentence2 = sentence2.lower()\n\tsentence1 = sentence1.split()\n\tsentence2 = sentence2.split()\n\tsentence1 = set(sentence1)\n\tsentence2 = set(sentence2)\n\tsentence1 = sentence1.difference(sentence2)\n\tsentence2 = sentence2.difference(sentence1)\n\tsentence1 = list(sentence1)\n\tsentence2 = list(sentence2)\n\tsentence1.sort()"", ""def uncommon_words(s1,s2):\n\t#Assign a sentence '{s2}' to a variable named sentence2.\n\tsentence2 = s2\n\tsentence1 = s1\n\tsentence1 = sentence1.lower()\n\tsentence2 = sentence2.lower()\n\tsentence1 = sentence1.split()\n\tsentence2 = sentence2.split()\n\tsentence1 = list(set(sentence1))\n\tsentence2 = list(set(sentence2))\n\tsentence1 =''.join(sentence1)\n\tsentence2 =''.join(sentence2)\n\tsentence1 = sentence1.split()\n\tsentence2 = sentence2.split()\n\tsentence1 = list"", 'def uncommon_words(s1,s2):\n\t#Split sentence1 into words and assign them to words1.\n\twords1 = s1.split()\n\twords2 = s2.split()\n\twords1 = [w for w in words1 if w not in words2]\n\treturn words1\n\ndef uncommon_words_count(s1,s2):\n\twords1 = s1.split()\n\twords2 = s2.split()\n\twords1 = [w for w in words1 if w not in words2]\n\treturn len(words1)\n\ndef uncommon_words_percent(s1,s2):\n\twords1 =', 'def uncommon_words(s1,s2):\n\t#Split sentence2 into words and assign them to words2.\n\twords2 = s2.split()\n\twords1 = s1.split()\n\twords1 = [w for w in words1 if w not in words2]\n\treturn words1\n\ndef uncommon_words_count(s1,s2):\n\twords1 = s1.split()\n\twords2 = s2.split()\n\twords1 = [w for w in words1 if w not in words2]\n\treturn len(words1)\n\ndef uncommon_words_percent(s1,s2):\n\twords1 =', 'def uncommon_words(s1,s2):\n\t#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.\n\tuncommon_words = []\n\tfor word in s1:\n\t\tif word in s2:\n\t\t\tuncommon_words.append(word)\n\treturn uncommon_words\n\ndef most_common_words(s1,s2):\n\tcommon_words = []\n\tfor word in s1:\n\t\tif word in s2:\n\t\t\tcommon_words.append(word)\n\tcommon_words = Counter(common_words).most_common(10)\n\treturn common_words\n\ndef most_common_words_in_list(', 'def uncommon_words(s1,s2):\n\t#Print uncommon_words.\n\ts1 = s1.lower()\n\ts2 = s2.lower()\n\ts1 = s1.split()\n\ts2 = s2.split()\n\ts1 = set(s1)\n\ts2 = set(s2)\n\treturn s1.difference(s2)\n\ndef get_common_words(s1,s2):\n\ts1 = s1.lower()\n\ts2 = s2.lower()\n\ts1 = s1.split()\n\ts2 = s2.split()']"
70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","[""def average_words_length(s1):\n\t#Assign a sentence '{s1}' to a variable named sentence1.\n\tsentence1 = s1\n\twords = sentence1.split()\n\tlength = len(words)\n\taverage = length/2\n\treturn average\n\ndef average_words_length_2(s1):\n\tsentence1 = s1\n\twords = sentence1.split()\n\tlength = len(words)\n\taverage = length/2\n\treturn average\n\ndef average_words_length_3(s1):\n\tsentence1 = s1\n\twords = sentence1.split()\n\tlength = len(words)\n\taverage = length/"", 'def average_words_length(s1):\n\t#Split sentence1 into words and assign them to words1.\n\twords1 = s1.split()\n\tlength = 0\n\tfor word in words1:\n\t\tlength += len(word)\n\treturn length/len(words1)\n\ndef average_words_length_list(s1):\n\twords1 = s1.split()\n\tlength = 0\n\tfor word in words1:\n\t\tlength += len(word)\n\treturn length/len(words1)\n\ndef average_words_length_list_2(s1):\n\twords1 = s1.split()\n\tlength =', ""def average_words_length(s1):\n\t#Remove punctuation in words1.\n\ts1 = re.sub(r'[^\\w\\s]', '', s1)\n\ts1 = re.sub(r'\\s+','', s1)\n\ts1 = re.sub(r'\\s+','', s1)\n\ts1 = re.sub(r'\\s+','', s1)\n\ts1 = re.sub(r'\\s+','', s1)\n\ts1 = re.sub(r'\\s+','', s1)\n\ts1 = re.sub(r'\\s+','', s1)"", 'def average_words_length(s1):\n\t#Compute the average word length in words1 and assign it avg.\n\tavg_word_length = 0\n\tfor word in s1:\n\t\tavg_word_length += len(word)\n\tavg_word_length = avg_word_length / len(s1)\n\treturn avg_word_length\n\ndef average_words_length_list(s1):\n\tavg_word_length = 0\n\tfor word in s1:\n\t\tavg_word_length += len(word)\n\tavg_word_length = avg_word_length / len(s1)\n\treturn avg_word_length', 'def average_words_length(s1):\n\t#Print avg. word length\n\ts1 = s1.lower()\n\ts1 = s1.split()\n\ts1 = [word for word in s1 if word.isalpha()]\n\ts1 = [word for word in s1 if len(word) > 1]\n\ts1 = [word for word in s1 if len(word) < 10]\n\ts1 = [word for word in s1 if len(word) > 1]\n\ts1 = [word for word in s1 if len(word) < 10]']"
71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","['def compare_char_freq(w1,w2):\n\t#Assigns strings {w1} and {w2} to variables w1 and w2 respectively\n\tw1 = w1.lower()\n\tw2 = w2.lower()\n\tw1_count = 0\n\tw2_count = 0\n\tfor i in w1:\n\t\tif i in w2:\n\t\t\tw1_count += 1\n\tfor i in w2:\n\t\tif i in w1:\n\t\t\tw2_count += 1\n\treturn w1_count,w2_count\n\ndef compare_word_freq(w1,w2):\n\tw1 = w1.lower()\n\tw', 'def compare_char_freq(w1,w2):\n\t#Lower-case w1 and w2\n\tw1 = w1.lower()\n\tw2 = w2.lower()\n\tif w1 == w2:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\ndef compare_word_freq(w1,w2):\n\tif w1 == w2:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\ndef compare_word_freq_with_char_freq(w1,w2):\n\tif w1 == w2:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\ndef', 'def compare_char_freq(w1,w2):\n\t#Count the frequency of letters in w1 and w2 and assign them to f1 and f2\n\tf1 = 0\n\tf2 = 0\n\tfor i in range(len(w1)):\n\t\tif w1[i] == w2[i]:\n\t\t\tf1 += 1\n\t\telse:\n\t\t\tf2 += 1\n\treturn f1,f2\n\ndef compare_word_freq(w1,w2):\n\tf1 = 0\n\tf2 = 0\n\tfor i in range(len(w1)):\n\t\tif w1[i] == w2[i]:\n\t\t\tf1 += 1', 'def compare_char_freq(w1,w2):\n\t#Print if f1 is equal to f2\n\tif w1 == w2:\n\t\tprint(""The words are equal"")\n\telse:\n\t\tprint(""The words are not equal"")\n\ndef compare_word_freq(w1,w2):\n\tif w1 == w2:\n\t\tprint(""The words are equal"")\n\telse:\n\t\tprint(""The words are not equal"")\n\ndef compare_word_freq_2(w1,w2):\n\tif w1 == w2:\n\t\tprint(""The words are equal"")\n\telse:\n\t\tprint(""The words are not equal"")']"
72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","['def reverse_string(w):\n\t#Assign a string {w} to a variable named w1\n\tw1 = w\n\tw1 = w1[::-1]\n\treturn w1\n\nprint(reverse_string(""Hello""))\n', 'def reverse_string(w):\n\t#Concatenate the elements in w1 from end to beginning and assign it to w2\n\tw2 = """"\n\tfor i in range(len(w)-1,-1,-1):\n\t\tw2 = w2 + w[i]\n\treturn w2\n\ndef reverse_string_2(w):\n\tw2 = """"\n\tfor i in range(len(w)-1,-1,-1):\n\t\tw2 = w2 + w[i]\n\treturn w2\n\ndef reverse_string_3(w):\n\tw2 = """"\n\tfor i in range(len(w)-1,-1,-1):\n\t\tw', 'def reverse_string(w):\n\t#Print w2\n\tw2 = """"\n\tfor i in range(len(w)):\n\t\tw2 += w[len(w)-1-i]\n\treturn w2\n\ndef reverse_string_2(w):\n\tw2 = """"\n\tfor i in range(len(w)):\n\t\tw2 += w[i]\n\treturn w2\n\ndef reverse_string_3(w):\n\tw2 = """"\n\tfor i in range(len(w)):\n\t\tw2 += w[len(w)-1-i]\n\treturn w2']"
73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","['def square_sum_diff(n):\n\t#Assign a natural number {n} to named num\n\tnum = n\n\tsum = 0\n\tfor i in range(1,num+1):\n\t\tsum += i\n\treturn sum\n\nprint(square_sum_diff(10))\n\ndef square_sum_diff_2(n):\n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += i\n\treturn sum\n\nprint(square_sum_diff_2(10))\n\ndef square_sum_diff_3(n):\n\tsum = 0\n\tfor i in range(', 'def square_sum_diff(n):\n\t#Create a list from 1 to num and assign it to a variable lst1\n\tlst1 = [1]\n\tfor i in range(1,n+1):\n\t\tlst1.append(lst1[i-1] + lst1[i])\n\treturn lst1[-1]\n\nprint(square_sum_diff(10))\n', 'def square_sum_diff(n):\n\t#Compute the sum of squared of the numbers in lst1 and assign n1 to the variable n1\n\tn1 = 0\n\tfor i in lst1:\n\t\tn1 += i**2\n\treturn n1\n\ndef square_sum_diff_list(lst):\n\tn1 = 0\n\tfor i in lst:\n\t\tn1 += i**2\n\treturn n1\n\ndef square_sum_diff_list_2(lst):\n\tn1 = 0\n\tfor i in lst:\n\t\tn1 += i**2\n\treturn n1\n\ndef square_sum_diff_list_3(', 'def square_sum_diff(n):\n\t#Compute the sum of the numbers in lst1 and assign its square to n2\n\tn2 = 0\n\tfor i in lst1:\n\t\tn2 += i**2\n\treturn n2\n\ndef square_sum_diff_2(n):\n\tn2 = 0\n\tfor i in lst1:\n\t\tn2 += i**2\n\treturn n2\n\ndef square_sum_diff_3(n):\n\tn2 = 0\n\tfor i in lst1:\n\t\tn2 += i**2\n\treturn n2\n\ndef square_sum_diff_4(n):\n\tn2 =', 'def square_sum_diff(n):\n\t#Print out the difference between n1 and n2\n\tprint(n1 - n2)\n\nsquare_sum_diff(10)\n\ndef square_sum_diff_2(n):\n\tn1 = 10\n\tn2 = 10\n\tprint(n1 - n2)\n\nsquare_sum_diff_2(10)\n\ndef square_sum_diff_3(n):\n\tn1 = 10\n\tn2 = 10\n\tprint(n1 - n2)\n\nsquare_sum_diff_3(10)\n\ndef']"
74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","['def cosine_sim(lst1,lst2):\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = np.array(lst1)\n\tvec2 = np.array(lst2)\n\treturn np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list_list(', 'def cosine_sim(lst1,lst2):\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = np.array(lst2)\n\tvec1 = np.array(lst1)\n\treturn np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list_list(', 'def cosine_sim(lst1,lst2):\n\t#Normalize vec1\n\tvec1 = np.array(lst1)\n\tvec1 = vec1/np.linalg.norm(vec1)\n\tvec2 = np.array(lst2)\n\tvec2 = vec2/np.linalg.norm(vec2)\n\treturn np.dot(vec1,vec2)\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1[i],lst2[i]) for i in range(len(lst1))]\n\ndef cosine_sim_list_list(lst1,', 'def cosine_sim(lst1,lst2):\n\t#Normalize vec2\n\tvec2 = [x/np.linalg.norm(x) for x in lst2]\n\treturn np.dot(vec1,vec2)\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]\n\ndef cosine_sim_list_list_list(lst1,lst2):\n\treturn [cosine_sim(lst1,lst2)]', 'def cosine_sim(lst1,lst2):\n\t#Compute the dot product of vec1 and vec2\n\tdot_product = np.dot(lst1,lst2)\n\tnorm1 = np.linalg.norm(lst1)\n\tnorm2 = np.linalg.norm(lst2)\n\treturn dot_product / (norm1 * norm2)\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1[i],lst2[i]) for i in range(len(lst1))]\n\ndef cosine_sim_list_with_threshold(lst1,lst2,threshold):\n\treturn [cosine_', 'def cosine_sim(lst1,lst2):\n\t#Print out the dot product of the two vectors\n\tdot_product = 0\n\tfor i in range(len(lst1)):\n\t\tdot_product += lst1[i]*lst2[i]\n\treturn dot_product/(math.sqrt(sum([x**2 for x in lst1]))*math.sqrt(sum([x**2 for x in lst2])))\n\ndef cosine_sim_list(lst1,lst2):\n\treturn [cosine_sim(lst1[i],lst2[i]) for i in range(len(lst1))]\n\ndef cosine_sim_']"
75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","['def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = lst1\n\tvec2 = lst2\n\tvec3 = lst3\n\tdist = 0\n\tfor i in range(len(vec1)):\n\t\tdist += (vec1[i]-vec2[i])**2\n\treturn dist\n\ndef vector_distance_2(lst1,lst2,lst3):\n\tvec1 = lst1\n\tvec2 = lst2\n\tvec3 = lst3\n\tdist = 0\n\tfor i in range(len(vec1)):\n\t\tdist += (vec1[i]-vec3', 'def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = lst2\n\tvec3 = lst3\n\tdist = 0\n\tfor i in range(len(vec2)):\n\t\tdist += (vec2[i]-vec3[i])**2\n\treturn math.sqrt(dist)\n\ndef vector_distance_2(lst1,lst2,lst3):\n\tvec2 = lst2\n\tvec3 = lst3\n\tdist = 0\n\tfor i in range(len(vec2)):\n\t\tdist += (vec2[i]-vec3[i])**2\n\treturn dist', 'def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst3} to a variable named vec3\n\tvec3 = lst3\n\tfor i in range(len(lst1)):\n\t\tvec3[i] = lst1[i] - lst2[i]\n\treturn vec3\n\ndef vector_dot(lst1,lst2):\n\tdot = 0\n\tfor i in range(len(lst1)):\n\t\tdot += lst1[i] * lst2[i]\n\treturn dot\n\ndef vector_cross(lst1,lst2):\n\tcross = [0,0,0]\n\tfor i in range(3):', 'def vector_distance(lst1,lst2,lst3):\n\t#Convert vec1, vec2, and vec3 to numpy array\n\tvec1 = np.array(lst1)\n\tvec2 = np.array(lst2)\n\tvec3 = np.array(lst3)\n\treturn np.linalg.norm(vec1-vec2)\n\ndef get_distance_matrix(lst1,lst2):\n\treturn np.array([[vector_distance(lst1[i],lst2[j],lst1[j]) for j in range(len(lst2))] for i in range(len(lst1))])\n\ndef get_distance_matrix_from_file(filename):', 'def vector_distance(lst1,lst2,lst3):\n\t#Implement a function called dist() to compute the distance between two vectors.\n\treturn np.linalg.norm(np.subtract(lst1,lst2))\n\ndef vector_angle(lst1,lst2,lst3):\n\treturn np.arccos(np.dot(lst1,lst2)/(np.linalg.norm(lst1)*np.linalg.norm(lst2)))\n\ndef vector_angle_between_vectors(lst1,lst2):\n\treturn np.arccos(np.dot(lst1,lst2)/(np.linalg.norm(lst1)*np.linalg.norm(lst2)))\n\ndef', 'def vector_distance(lst1,lst2,lst3):\n\t#Compute the distance between vec1 and vec2 and assign it to d1\n\td1 = np.linalg.norm(np.subtract(lst1,lst2))\n\td2 = np.linalg.norm(np.subtract(lst2,lst3))\n\td3 = np.linalg.norm(np.subtract(lst3,lst1))\n\treturn np.sqrt(d1**2 + d2**2 + d3**2)\n\ndef get_closest_point(lst,point):\n\tclosest_point = None\n\tclosest_dist = None\n\tfor i in range(len(lst)):\n\t\tdist = vector', 'def vector_distance(lst1,lst2,lst3):\n\t#Compute the distance between vec1 and vec3 and assign it to d2\n\td2 = np.linalg.norm(np.subtract(lst1,lst3))\n\treturn d2\n\ndef vector_distance_2(lst1,lst2,lst3):\n\td2 = np.linalg.norm(np.subtract(lst1,lst2))\n\treturn d2\n\ndef vector_distance_3(lst1,lst2,lst3):\n\td2 = np.linalg.norm(np.subtract(lst1,lst3))\n\treturn d2\n\ndef vector_distance_4(lst1,lst2', 'def vector_distance(lst1,lst2,lst3):\n\t#Print out whether d1 is larger than d2\n\tif lst1[0] > lst2[0]:\n\t\tif lst1[0] > lst3[0]:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 0\n\telse:\n\t\tif lst2[0] > lst3[0]:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 0\n\ndef vector_distance_2(lst1,lst2,lst3):\n\tif lst1[0] > lst2[0]:\n\t\tif lst1[0] > lst3[0]:\n\t\t\treturn 1\n\t\telse']"
76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","['def compare_standard_deviations(l1,l2):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\tlst2 = [l2]\n\tlst3 = []\n\tlst4 = []\n\tlst5 = []\n\tlst6 = []\n\tlst7 = []\n\tlst8 = []\n\tlst9 = []\n\tlst10 = []\n\tlst11 = []\n\tlst12 = []\n\tlst13 = []\n\tlst14 = []\n\tlst15 = []\n\tlst16 = []\n\tlst17 = []\n\tlst18 = []\n\tlst19', 'def compare_standard_deviations(l1,l2):\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\tlst1 = [l1]\n\tlst3 = []\n\tlst4 = []\n\tlst5 = []\n\tlst6 = []\n\tlst7 = []\n\tlst8 = []\n\tlst9 = []\n\tlst10 = []\n\tlst11 = []\n\tlst12 = []\n\tlst13 = []\n\tlst14 = []\n\tlst15 = []\n\tlst16 = []\n\tlst17 = []\n\tlst18 = []\n\tlst19', 'def compare_standard_deviations(l1,l2):\n\t#Create a function called std() to compute the standard deviation given a list of numbers.\n\treturn math.sqrt(sum([(x-mean(l1))**2 for x in l1])/len(l1))\n\ndef compare_standard_deviations_list(l1,l2):\n\treturn [compare_standard_deviations(l1,l2)]\n\ndef compare_standard_deviations_list_list(l1,l2):\n\treturn [compare_standard_deviations(l1,l2)]\n\ndef compare_standard_deviations_list_list_list(l1,l2):\n\treturn [compare', 'def compare_standard_deviations(l1,l2):\n\t#Call the function std() to calculate standard deviations for lst1 and lst2.\n\treturn std(l1),std(l2)\n\ndef compare_mean_and_standard_deviations(l1,l2):\n\treturn mean(l1),std(l2)\n\ndef compare_mean_and_mean(l1,l2):\n\treturn mean(l1),mean(l2)\n\ndef compare_mean_and_median(l1,l2):\n\treturn mean(l1),median(l2)\n\ndef compare_mean_and_mode(l1,l2):\n\treturn mean(', 'def compare_standard_deviations(l1,l2):\n\t#Print out the smaller standard deviation.\n\tif l1 < l2:\n\t\tprint(""The smaller standard deviation is: "",l1)\n\telse:\n\t\tprint(""The smaller standard deviation is: "",l2)\n\ndef compare_standard_deviations_2(l1,l2):\n\tif l1 < l2:\n\t\tprint(""The smaller standard deviation is: "",l1)\n\telse:\n\t\tprint(""The smaller standard deviation is: "",l2)\n\ndef compare_standard_deviations_3(l1,l2):\n\tif l1 < l2:']"
77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","['def compare_means(l1,l2):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\tlst2 = [l2]\n\tlst3 = []\n\tlst4 = []\n\tlst5 = []\n\tlst6 = []\n\tlst7 = []\n\tlst8 = []\n\tlst9 = []\n\tlst10 = []\n\tlst11 = []\n\tlst12 = []\n\tlst13 = []\n\tlst14 = []\n\tlst15 = []\n\tlst16 = []\n\tlst17 = []\n\tlst18 = []\n\tlst19', 'def compare_means(l1,l2):\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\tlst1 = [l1]\n\twhile len(lst1) > 0 and len(lst2) > 0:\n\t\tlst1_mean = np.mean(lst1)\n\t\tlst2_mean = np.mean(lst2)\n\t\tif lst1_mean < lst2_mean:\n\t\t\tlst1.remove(lst1_mean)\n\t\telse:\n\t\t\tlst2.remove(lst2_mean)\n\treturn lst1\n\ndef compare_means_2(l1,l2):', 'def compare_means(l1,l2):\n\t#Create a function called mean() to compute the mean given a list of numbers.\n\treturn sum(l1)/len(l1)\n\ndef compare_stdevs(l1,l2):\n\treturn math.sqrt(sum([(x-mean(l1))**2 for x in l1])/len(l1))\n\ndef compare_medians(l1,l2):\n\treturn median(l1)\n\ndef compare_ranges(l1,l2):\n\treturn max(l1)-min(l1)\n\ndef compare_skews(l1,l2):\n\treturn compare_stdevs(l1', 'def compare_means(l1,l2):\n\t#Call the function mean() to calculate means for lst1 and lst2.\n\treturn mean(l1),mean(l2)\n\ndef compare_stdevs(l1,l2):\n\treturn stdev(l1),stdev(l2)\n\ndef compare_medians(l1,l2):\n\treturn median(l1),median(l2)\n\ndef compare_ranges(l1,l2):\n\treturn range(min(l1),max(l1)+1),range(min(l2),max(l2)+1)\n\ndef compare_ranges_stdevs(l1,l2):', 'def compare_means(l1,l2):\n\t#Print out the smaller mean.\n\tif l1 < l2:\n\t\tprint(""The smaller mean is: "",l1)\n\telse:\n\t\tprint(""The smaller mean is: "",l2)\n\ndef compare_stdevs(l1,l2):\n\tif l1 < l2:\n\t\tprint(""The smaller standard deviation is: "",l1)\n\telse:\n\t\tprint(""The smaller standard deviation is: "",l2)\n\ndef compare_variances(l1,l2):\n\tif l1 < l2:\n\t\tprint(""The smaller variance is: "",l']"
78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","['def coefficient_of_variation(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\tlst2 = [l1]\n\tlst3 = [l1]\n\tlst4 = [l1]\n\tlst5 = [l1]\n\tlst6 = [l1]\n\tlst7 = [l1]\n\tlst8 = [l1]\n\tlst9 = [l1]\n\tlst10 = [l1]\n\tlst11 = [l1]\n\tlst12 = [l1]\n\tlst13 = [l1]\n\tlst14 = [', 'def coefficient_of_variation(l1):\n\t#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively\n\tavg = np.mean(l1)\n\tsd = np.std(l1)\n\treturn sd/avg\n\ndef get_mean_and_sd(l1):\n\tavg = np.mean(l1)\n\tsd = np.std(l1)\n\treturn avg, sd\n\ndef get_mean_and_sd_of_list(l1):\n\tavg = np.mean(l1)\n\tsd = np.std(l1)\n\treturn avg, sd\n\ndef get_mean_and_sd_of', 'def coefficient_of_variation(l1):\n\t#Compute the coeffeicient of variation of the l1-norm\n\treturn np.sqrt(np.mean(np.square(l1)))\n\ndef compute_l1_norm(l1):\n\treturn np.sqrt(np.mean(np.square(l1)))\n\ndef compute_l2_norm(l2):\n\treturn np.sqrt(np.mean(np.square(l2)))\n\ndef compute_l1_norm_squared(l1):\n\treturn np.mean(np.square(l1))\n\ndef compute_l2_norm_squared(l', 'def coefficient_of_variation(l1):\n\t#Print out the coefficient of variation of the data\n\tprint(""The coefficient of variation is: "", np.std(l1))\n\ndef correlation_coefficient(l1, l2):\n\tprint(""The correlation coefficient is: "", np.corrcoef(l1, l2)[0,1])\n\ndef plot_scatter(l1, l2):\n\tplt.scatter(l1, l2)\n\tplt.show()\n\ndef plot_histogram(l1, l2):\n\tplt.hist(l1, bins=100)\n\tplt.show()\n\ndef plot']"
79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","['def l1_norm(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\twhile True:\n\t\tif len(lst1) == 1:\n\t\t\tbreak\n\t\telse:\n\t\t\tlst1 = [lst1[i] + lst1[i+1] for i in range(len(lst1)-1)]\n\treturn lst1[0]\n\ndef l2_norm(l2):\n\treturn math.sqrt(sum([x**2 for x in l2]))\n\ndef l2_norm_squared(l2):\n\treturn sum([x**2 for x in l2])', 'def l1_norm(l1):\n\t#Get the absolute value of every element in lst1 and assign to a lst2\n\tlst2 = [abs(x) for x in l1]\n\treturn lst2\n\ndef l2_norm(l2):\n\tlst2 = [x**2 for x in l2]\n\treturn lst2\n\ndef l1_norm_squared(l1):\n\tlst2 = [x**2 for x in l1]\n\treturn lst2\n\ndef l2_norm_squared(l2):\n\tlst2 = [x**2 for x in l2]\n\treturn lst2\n\ndef l1_norm_squared_', 'def l1_norm(l1):\n\t#Compute the sum of lst2 and assign to l1\n\tl1 = np.sum(l1)\n\treturn l1\n\ndef l2_norm(l2):\n\tl2 = np.sqrt(np.sum(l2**2))\n\treturn l2\n\ndef l1_norm_squared(l1):\n\tl1 = np.sum(l1**2)\n\treturn l1\n\ndef l2_norm_squared(l2):\n\tl2 = np.sqrt(np.sum(l2**2))\n\treturn l2\n\ndef l1_norm_squared', 'def l1_norm(l1):\n\t#Print out l1 norm\n\tprint(""L1 Norm: "", np.linalg.norm(l1))\n\ndef l2_norm(l2):\n\tprint(""L2 Norm: "", np.linalg.norm(l2))\n\ndef l1_norm_squared(l1):\n\tprint(""L1 Norm Squared: "", np.linalg.norm(l1)**2)\n\ndef l2_norm_squared(l2):\n\tprint(""L2 Norm Squared: "", np.linalg.norm(l2)**2)\n\ndef l1_norm_']"
80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","['def z-statistic(lst1):\n\t#Assigns a list {lst1} to a variable named lst1\n\tlst1 = sorted(lst1)\n\tn = len(lst1)\n\tm = n-1\n\tz = 0\n\tfor i in range(n):\n\t\tz += (lst1[i]-lst1[m])*(lst1[i]-lst1[m])\n\tz = z/(n-1)\n\treturn z\n\ndef z_test(lst1,lst2):\n\tz = z_statistic(lst1)\n\tif z > 0:\n\t\tprint(""The two lists are not equal"")\n\telse:', 'def z-statistic(lst1):\n\t#Compute the sample mean of lst1\n\tmean = sum(lst1)/len(lst1)\n\tvar = sum([(x-mean)**2 for x in lst1])/len(lst1)\n\treturn (mean-mean**2/var)**0.5\n\ndef z_test(lst1,lst2):\n\tmean1 = z_statistic(lst1)\n\tmean2 = z_statistic(lst2)\n\tvar1 = z_statistic(lst1)**2\n\tvar2 = z_statistic(lst2)**2\n\treturn (mean1-mean2)/sqrt(var1', 'def z-statistic(lst1):\n\t#Compute the sample standard deviation of lst1\n\tlst1_std = np.std(lst1)\n\tlst1_mean = np.mean(lst1)\n\treturn lst1_std, lst1_mean\n\ndef z_test(lst1, lst2):\n\tlst1_std, lst1_mean = z_statistic(lst1)\n\tlst2_std, lst2_mean = z_statistic(lst2)\n\treturn lst1_std, lst1_mean, lst2_std, lst2_mean\n\ndef z_test_pvalue(lst1, lst2', 'def z-statistic(lst1):\n\t#Compute the z-statistic to test whether its mean is 0\n\tmean = np.mean(lst1)\n\tlst2 = [x - mean for x in lst1]\n\tz = np.sum(lst2**2) / (len(lst1) - 1)\n\treturn z\n\ndef z_test(lst1, lst2):\n\tz = z_statistic(lst1)\n\tif z < 0:\n\t\treturn 0\n\telse:\n\t\treturn 1\n\ndef z_test_2(lst1, lst2):\n\tz = z_statistic(lst1)', 'def z-statistic(lst1):\n\t#Print out the z-statistic\n\tprint(""The z-statistic is: "", stats.zscore(lst1))\n\ndef main():\n\tlst1 = [1,2,3,4,5,6,7,8,9,10]\n\tz_statistic(lst1)\n\nif __name__ == ""__main__"":\n\tmain()']"
81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","['def move_all_negative_elements_to_end(lst):\n\t#Assign a list {lst} to named lst1\n\tlst1 = lst[:]\n\tfor i in range(len(lst1)):\n\t\tif lst1[i] < 0:\n\t\t\tlst1.insert(i, lst1.pop(i+1))\n\treturn lst1\n\ndef move_all_positive_elements_to_end(lst):\n\tlst1 = lst[:]\n\tfor i in range(len(lst1)):\n\t\tif lst1[i] > 0:\n\t\t\tlst1.insert(i, lst1.pop(i+1))\n\treturn lst1\n\ndef', 'def move_all_negative_elements_to_end(lst):\n\t#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively\n\tlst_pos = []\n\tlst_neg = []\n\tfor i in lst:\n\t\tif i < 0:\n\t\t\tlst_neg.append(i)\n\t\telse:\n\t\t\tlst_pos.append(i)\n\treturn lst_pos, lst_neg\n\ndef main():\n\tlst = [1, -2, 3, -4, 5, 6, 7, 8, 9, 10]\n\tlst_pos, lst_neg = move_all_negative_elements_to_end(lst)', 'def move_all_negative_elements_to_end(lst):\n\t#Concatenate lst_pos and lst_neg and assign it lst2\n\tlst2 = lst + lst_neg\n\tlst2.sort()\n\treturn lst2\n\ndef move_all_positive_elements_to_end(lst):\n\tlst2 = lst + lst_pos\n\tlst2.sort()\n\treturn lst2\n\ndef move_all_zero_elements_to_end(lst):\n\tlst2 = lst + lst_zero\n\tlst2.sort()\n\treturn lst2\n\ndef move_all_negative_elements_to_beginning(lst):\n\tlst2 = lst + lst_neg', 'def move_all_negative_elements_to_end(lst):\n\t#Print out lst2\n\tlst2 = []\n\tfor i in lst:\n\t\tif i < 0:\n\t\t\tlst2.append(i)\n\tlst2.sort()\n\tlst2.reverse()\n\tlst2.append(lst[0])\n\treturn lst2\n\ndef move_all_positive_elements_to_end(lst):\n\tlst2 = []\n\tfor i in lst:\n\t\tif i > 0:\n\t\t\tlst2.append(i)\n\tlst2.sort()\n\tlst2.reverse()\n\tlst2.append(']"
82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","['def remove_alphabetical_characters(w):\n\t#Initialize a variable named w with a string {w}\n\tw = str(w)\n\talphabet = ""abcdefghijklmnopqrstuvwxyz""\n\tnew_w = """"\n\tfor i in w:\n\t\tif i in alphabet:\n\t\t\tnew_w += i\n\treturn new_w\n\ndef remove_punctuation(w):\n\tw = str(w)\n\tpunctuation = ""!@#$%^&*()_+{}[]:;?><,./""\n\tnew_w = """"\n\tfor i in w:\n\t\tif i not in punctuation:\n\t\t\tnew_w += i\n\treturn new_w\n\ndef remove', 'def remove_alphabetical_characters(w):\n\t#Lower every character in w\n\tw = w.lower()\n\tw = w.replace("" "", """")\n\tw = w.replace(""á"", ""a"")\n\tw = w.replace(""é"", ""e"")\n\tw = w.replace(""í"", ""i"")\n\tw = w.replace(""ó"", ""o"")\n\tw = w.replace(""ú"", ""u"")\n\tw = w.replace(""ñ"", ""n"")\n\tw = w.replace(""ü"", ""u"")\n\tw = w.replace(""ç"", ""c"")\n\tw = w.', ""def remove_alphabetical_characters(w):\n\t#Replace every alphabetical characters in w with ''\n\treturn ''.join(c for c in w if c.isalpha())\n\ndef remove_punctuation(w):\n\treturn ''.join(c for c in w if c not in string.punctuation)\n\ndef remove_numbers(w):\n\treturn ''.join(c for c in w if c.isdigit())\n\ndef remove_stopwords(w):\n\treturn''.join([word for word in w.split() if word not in stopwords.words('english')])\n\ndef remove_stopwords_and_numbers(w):\n\treturn''.join([word for word in"", 'def remove_alphabetical_characters(w):\n\t#Print out the new word after substitution\n\tprint(w)\n\tw = w.lower()\n\tw = w.replace("" "", """")\n\tw = w.replace(""á"", ""a"")\n\tw = w.replace(""é"", ""e"")\n\tw = w.replace(""í"", ""i"")\n\tw = w.replace(""ó"", ""o"")\n\tw = w.replace(""ú"", ""u"")\n\tw = w.replace(""ñ"", ""n"")\n\tw = w.replace(""á"", ""a"")\n\tw = w.replace(""é"", ""e"")']"
83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","['def largest_norm(X):\n\t#Import and initialize a numpy array ""X"" with the values {X}.\n\tX = np.array(X)\n\tX = X.reshape(len(X), 1)\n\tX = X.T\n\tX = X.astype(float)\n\tX = X / np.linalg.norm(X, ord=2, axis=0)\n\treturn X\n\ndef largest_norm_2(X):\n\tX = np.array(X)\n\tX = X.reshape(len(X), 1)\n\tX = X.T\n\tX = X.astype(float)\n\tX = X / np', 'def largest_norm(X):\n\t#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".\n\tXn = np.zeros((X.shape[0], X.shape[0]))\n\tfor i in range(X.shape[0]):\n\t\tfor j in range(X.shape[0]):\n\t\t\tXn[i, j] = np.dot(X[i, :], X[j, :])\n\treturn Xn\n\ndef largest_norm_matrix(X):\n\tXn = np.zeros((X.shape[0], X.shape[0]))\n\tfor i in range(X.shape[0]):\n\t\tfor j in range(', 'def largest_norm(X):\n\t#Set the diagonal elements of ""Xn"" to 0.\n\tXn = np.diag(X)\n\treturn np.max(np.abs(Xn))\n\ndef largest_norm_vector(X):\n\treturn np.max(np.abs(X))\n\ndef largest_norm_matrix(X):\n\treturn np.max(np.abs(X))\n\ndef largest_norm_tensor(X):\n\treturn np.max(np.abs(X))\n\ndef largest_norm_tensor_vector(X):\n\treturn np.max(np.abs(X))\n\ndef largest_', 'def largest_norm(X):\n\t#Print out the maximum value (cast as a float) in ""Xn"".\n\treturn max(abs(x) for x in X)\n\ndef largest_norm_vector(X):\n\treturn np.array([largest_norm(x) for x in X])\n\ndef largest_norm_matrix(X):\n\treturn np.array([largest_norm(x) for x in X])\n\ndef largest_norm_vector_matrix(X):\n\treturn np.array([largest_norm(x) for x in X])\n\ndef largest_norm_matrix_vector(X):\n\treturn np.array([largest_norm(x']"
84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","['def f1_score(pred,y):\n\t#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.\n\tpred = np.array(pred)\n\ty = np.array(y)\n\treturn f1_score(y,pred)\n\ndef precision_score(pred,y):\n\tpred = np.array(pred)\n\ty = np.array(y)\n\treturn precision_score(y,pred)\n\ndef recall_score(pred,y):\n\tpred = np.array(pred)\n\ty = np.array(y)\n\treturn recall_score(y,pred)\n\ndef accuracy_score(pred,y):', 'def f1_score(pred,y):\n\t#Compare the equivalence of two arrays and store the results as ""match"".\n\tmatch = 0\n\tfor i in range(len(pred)):\n\t\tif pred[i] == y[i]:\n\t\t\tmatch += 1\n\treturn match/len(pred)\n\ndef f1_score_list(pred,y):\n\tmatch = 0\n\tfor i in range(len(pred)):\n\t\tif pred[i] == y[i]:\n\t\t\tmatch += 1\n\treturn match/len(pred)\n\ndef f1_score_list_2(pred,y):\n\tmatch = 0\n\tfor i', 'def f1_score(pred,y):\n\t#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".\n\tnon_zero = (y > 0)\n\treturn f1_score(pred[non_zero],y[non_zero])\n\ndef precision_score(pred,y):\n\tnon_zero = (y > 0)\n\treturn precision_score(pred[non_zero],y[non_zero])\n\ndef recall_score(pred,y):\n\tnon_zero = (y > 0)\n\treturn recall_score(pred[non_zero],y[non_zero])\n\ndef accuracy_score(pred,y):', 'def f1_score(pred,y):\n\t#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".\n\tcorrect = np.logical_and(pred == y, y!= 0)\n\treturn np.sum(correct) / len(correct)\n\ndef f1_score_binary(pred,y):\n\tcorrect = np.logical_and(pred == y, y!= 0)\n\treturn np.sum(correct) / len(correct)\n\ndef f1_score_multiclass(pred,y):\n\tcorrect = np.logical_and(pred == y, y!= 0)\n\treturn np.sum(correct) / len(correct)', 'def f1_score(pred,y):\n\t#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".\n\tprec = precision_score(y,pred)\n\treturn prec\n\ndef f1_score_macro(pred,y):\n\tf1 = f1_score(pred,y,average=\'macro\')\n\treturn f1\n\ndef f1_score_micro(pred,y):\n\tf1 = f1_score(pred,y,average=\'micro\')\n\treturn f1\n\ndef f1_score_weighted(pred,y):\n\tf1 = f1_score(pred,y,average=\'weighted\')\n\treturn f1', 'def f1_score(pred,y):\n\t#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".\n\trec = recall_score(y,pred)\n\treturn rec\n\ndef f1_score_macro(pred,y):\n\tf1_score_macro = f1_score(pred,y,average=\'macro\')\n\treturn f1_score_macro\n\ndef f1_score_micro(pred,y):\n\tf1_score_micro = f1_score(pred,y,average=\'micro\')\n\treturn f1_score_micro\n\ndef f1_score_weighted(pred,y):\n\tf1_score_weighted', 'def f1_score(pred,y):\n\t#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\n\treturn f1_score(y,pred,average=\'macro\')\n\ndef precision_score(pred,y):\n\treturn precision_score(y,pred,average=\'macro\')\n\ndef recall_score(pred,y):\n\treturn recall_score(y,pred,average=\'macro\')\n\ndef accuracy_score(pred,y):\n\treturn accuracy_score(y,pred)\n\ndef confusion_matrix(pred,y):\n\treturn confusion_matrix(y,pred)\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=']"
85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","['def add_space(x):\n\t#Initialize a string named ""concat"" with {x}.\n\tconcat = ""{x}""\n\tfor i in range(1, len(x)):\n\t\tconcat = concat + "" "" + x[i]\n\treturn concat\n\ndef add_space_to_end(x):\n\tconcat = ""{x}""\n\tfor i in range(1, len(x)):\n\t\tconcat = concat + "" "" + x[i]\n\treturn concat\n\ndef add_space_to_start(x):\n\tconcat = x + "" ""\n\tfor i in range(1, len(x)):\n\t\tconcat = concat + ""', 'def add_space(x):\n\t#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.\n\timport re\n\tpat = re.compile(r\'[A-Z]\')\n\treturn pat.sub(\' \', x)\n\ndef remove_space(x):\n\timport re\n\tpat = re.compile(r\'[A-Z]\')\n\treturn pat.sub(\'\', x)\n\ndef remove_punctuation(x):\n\timport re\n\tpat = re.compile(r\'[^\\w\\s]\')\n\treturn pat.sub(\'\', x)\n\ndef remove_numbers(x):\n\timport re\n\tpat = re.compile(r\'\\d+\')', 'def add_space(x):\n\t#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".\n\tresult = []\n\tfor i in range(len(x)):\n\t\tif x[i] in concat:\n\t\t\tresult.append(x[i])\n\t\t\tresult.append("" "")\n\treturn """".join(result)\n\ndef remove_space(x):\n\tresult = []\n\tfor i in range(len(x)):\n\t\tif x[i]!= "" "":\n\t\t\tresult.append(x[i])\n\treturn """".join(result)\n\ndef remove_all_spaces(x):\n\tresult = []\n\tfor i in range(len', 'def add_space(x):\n\t#Print out ""result"".\n\tprint(x)\n\treturn x\n\nadd_space(10)\nadd_space(20)\nadd_space(30)\n\ndef add_space_2(x):\n\tprint(x)\n\treturn x\n\nadd_space_2(10)\nadd_space_2(20)\nadd_space_2(30)\n\ndef add_space_3(x):\n\tprint(x)\n\treturn x\n\nadd_space_3(10)\nadd_space_3(20']"
86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","['def remove_outlier(x):\n\t#Initialize a list ""x"" with the values {x}.\n\tx = [x]\n\tfor i in range(1,len(x)):\n\t\tif x[i] - x[i-1] > 3:\n\t\t\tx.remove(x[i-1])\n\treturn x\n\ndef remove_outliers(x):\n\tx = [x]\n\tfor i in range(1,len(x)):\n\t\tif x[i] - x[i-1] > 3:\n\t\t\tx.remove(x[i-1])\n\treturn x\n\ndef remove_outliers_2(x):', 'def remove_outlier(x):\n\t#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".\n\tmean = np.mean(x)\n\tstd = np.std(x)\n\tx = (x - mean) / std\n\treturn x\n\ndef remove_outlier_2(x):\n\tx = np.array(x)\n\tx = x[~np.isnan(x)]\n\treturn x\n\ndef remove_outlier_3(x):\n\tx = np.array(x)\n\tx = x[~np.isnan(x)]\n\tx = x[~np.isinf(x)]\n\treturn x\n\ndef remove_outlier', 'def remove_outlier(x):\n\t#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".\n\tresults = []\n\tfor i in x:\n\t\tif i < mean - 2 * std:\n\t\t\tresults.append(i)\n\t\telif i > mean + 2 * std:\n\t\t\tresults.append(i)\n\treturn results\n\ndef remove_outliers(x):\n\tresults = []\n\tfor i in x:\n\t\tif i < mean - 2 * std:\n\t\t\tresults.append(i)\n\t\telif i > mean + 2 * std:\n\t\t\tresults.append(i)\n\treturn results\n\ndef remove_outliers_', 'def remove_outlier(x):\n\t#Sort ""results"" in ascending order and print it out.\n\tresults = sorted(x)\n\tprint(results)\n\tprint(len(results))\n\tprint(results[len(results)-1])\n\tprint(results[0])\n\tprint(results[len(results)-2])\n\tprint(results[len(results)-3])\n\tprint(results[len(results)-4])\n\tprint(results[len(results)-5])\n\tprint(results[len(results)-6])\n\tprint(results[len(results)-7])\n\tprint(results[len(results)-8])']"
87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","['def convert_to_categorical(x):\n\t#Initialize a list ""x"" with the values {x}\n\tx = np.array(x)\n\tx = x.reshape(len(x), 1)\n\treturn x\n\ndef get_data(path):\n\tdata = pd.read_csv(path)\n\tdata = data.drop([\'Unnamed: 0\'], axis=1)\n\tdata = data.dropna()\n\tdata = data.drop([\'Unnamed: 0\'], axis=1)\n\tdata = data.dropna()\n\tdata = data.drop([\'Unnamed: 0\'], axis=1)\n\tdata = data.dropna()', 'def convert_to_categorical(x):\n\t#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".\n\tvocab = sorted(list(set(x)))\n\treturn np_utils.to_categorical(x, num_classes=len(vocab))\n\ndef get_data(data_path, batch_size, num_classes):\n\tprint(""Loading data..."")\n\tx_train, y_train = load_data(data_path + ""train.csv"")\n\tx_test, y_test = load_data(data_path + ""test.csv"")\n\tx_val, y_val = load_data(data_path + ""val.csv"")', 'def convert_to_categorical(x):\n\t#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".\n\tv2i = {v: i for i, v in enumerate(vocab)}\n\treturn np.array([v2i[v] for v in x])\n\ndef convert_to_one_hot(x, n_classes):\n\treturn np.eye(n_classes)[x]\n\ndef get_data(data_path, vocab_path, n_classes):\n\tdata = pd.read_csv(data_path)\n\tvocab = pd.read_csv(vocab_path)\n\tdata = data.values\n\tvocab = vocab.values', 'def convert_to_categorical(x):\n\t#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.\n\tfeatures = np.zeros((len(x), len(index)), dtype=int)\n\tfor i in range(len(x)):\n\t\tfeatures[i][index.index(x[i])] = 1\n\treturn features\n\ndef get_data(filename):\n\tdata = pd.read_csv(filename)\n\tdata = data.dropna()\n\tdata = data.drop(columns=[\'Unnamed: 0\'])\n\tdata = data.drop(columns=[\'Unnamed: 1\'])\n\tdata = data.drop(columns=[\'Unnamed: 2', 'def convert_to_categorical(x):\n\t#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n\treturn np.array(x).astype(\'int32\')\n\ndef convert_to_categorical_v2(x):\n\treturn np.array(x).astype(\'int32\')\n\ndef convert_to_categorical_v3(x):\n\treturn np.array(x).astype(\'int32\')\n\ndef convert_to_categorical_v4(x):\n\treturn np.array(x).astype(\'int32\')\n\ndef convert_to_categorical_v5(x):\n\treturn np.array(x).astype(\'int', 'def convert_to_categorical(x):\n\t#Print out ""features"".\n\tprint(""Converting to categorical..."")\n\tx = x.astype(\'category\')\n\treturn x\n\ndef get_data(path):\n\tprint(""Getting data..."")\n\tdata = pd.read_csv(path)\n\tdata = data.drop([\'Unnamed: 0\'], axis=1)\n\tdata = data.dropna()\n\tdata = data.reset_index(drop=True)\n\tdata = data.astype(\'float32\')\n\tdata = data.reset_index(drop=True)\n\tdata = data.drop([\'index\'], axis']"
88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","['def group_by_key(fun,x):\n\t#Initialize a variable ""x"" with {x}.\n\tx = {x}\n\tfor i in range(len(x)):\n\t\tfor j in range(i+1,len(x)):\n\t\t\tif fun(x[i],x[j]):\n\t\t\t\tx.add(x[j])\n\treturn x\n\ndef group_by_key_and_value(fun,x):\n\tx = {x}\n\tfor i in range(len(x)):\n\t\tfor j in range(i+1,len(x)):\n\t\t\tif fun(x[i],x[j]):\n\t\t\t\tx.add', 'def group_by_key(fun,x):\n\t#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".\n\tmapped = [fun(x[i]) for i in range(len(x))]\n\treturn mapped\n\ndef group_by_key_and_sum(fun,x):\n\tmapped = [fun(x[i],x[i+1]) for i in range(len(x)-1)]\n\treturn mapped\n\ndef group_by_key_and_sum_and_count(fun,x):\n\tmapped = [fun(x[i],x[i+1],x[i+2]) for i in range(len(x)-2)]', 'def group_by_key(fun,x):\n\t#Convert each element in ""mapped"" into string.\n\tmapped = map(str,x)\n\treturn dict(zip(mapped,fun(mapped)))\n\ndef group_by_key_and_value(fun,x):\n\tmapped = map(str,x)\n\treturn dict(zip(mapped,fun(mapped)))\n\ndef group_by_key_and_value_and_count(fun,x):\n\tmapped = map(str,x)\n\treturn dict(zip(mapped,fun(mapped)))\n\ndef group_by_key_and_value_and_count_and_sum(', 'def group_by_key(fun,x):\n\t#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.\n\tresults = {}\n\tfor i in x:\n\t\tresults[fun(i)] = []\n\treturn results\n\ndef group_by_key_and_value(fun,x,y):\n\tresults = {}\n\tfor i in x:\n\t\tresults[fun(i,y)] = []\n\treturn results\n\ndef group_by_key_and_value_and_count(fun,x,y,z):\n\tresults = {}\n\tfor i in x:\n\t\tresults[fun(i,y,z)] = []\n\treturn results', 'def group_by_key(fun,x):\n\t#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.\n\tresults = []\n\tfor mapped,x in zip(fun(x),x):\n\t\tresults.append(mapped)\n\treturn results\n\ndef group_by_key_and_value(fun,x,y):\n\tresults = []\n\tfor mapped,x,y in zip(fun(x,y),x,y):\n\t\tresults.append(mapped)\n\treturn results\n\ndef group_by_key_and_value_and_index(fun,x,y,z):\n\tresults = []\n\tfor mapped,x,y,', 'def group_by_key(fun,x):\n\t#Print out the ""results"".\n\tprint(fun(x))\n\treturn fun(x)\n\ndef group_by_key_and_value(fun,x):\n\tprint(fun(x))\n\treturn fun(x)\n\ndef group_by_key_and_value_and_count(fun,x):\n\tprint(fun(x))\n\treturn fun(x)\n\ndef group_by_key_and_value_and_count_and_sum(fun,x):\n\tprint(fun(x))\n\treturn fun(x)\n\ndef group_']"
89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","['def max_stock_profit(array):\n\t#Initialize a variable ""best"" with -1, ""array"" with {array}\n\tbest = -1\n\tarray = sorted(array)\n\tfor i in range(len(array)):\n\t\tif i == 0:\n\t\t\tbest = array[i]\n\t\telse:\n\t\t\tif array[i] > best:\n\t\t\t\tbest = array[i]\n\treturn best\n\ndef max_stock_profit_2(array):\n\tbest = -1\n\tfor i in range(len(array)):\n\t\tif i == 0:\n\t\t\tbest = array[i]\n\t\telse:\n\t\t\tif array[i] > best:', 'def max_stock_profit(array):\n\t#Assign the first element of ""array"" to a variable named ""minimum"".\n\tminimum = array[0]\n\tfor i in range(1, len(array)):\n\t\tif array[i] < minimum:\n\t\t\tminimum = array[i]\n\treturn minimum\n\ndef max_stock_profit_2(array):\n\tminimum = array[0]\n\tfor i in range(1, len(array)):\n\t\tif array[i] < minimum:\n\t\t\tminimum = array[i]\n\treturn minimum\n\ndef max_stock_profit_3(array):\n\tminimum = array[0]\n\tfor i in range(1', 'def max_stock_profit(array):\n\t#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".\n\tbest = array[1]\n\tminimum = array[1]\n\tfor i in range(2, len(array)):\n\t\tif array[i] - minimum > best:\n\t\t\tbest = array[i] - minimum\n\t\tif array[i] < minimum:\n\t\t\tminimum = array[i]\n\treturn best\n\nprint(max_stock_profit([1, 2, 3, 4, 5]))\nprint(max_stock_profit([1, 2, 3, 4, 5, 6]))\nprint(max_', 'def max_stock_profit(array):\n\t#Print out ""best"".\n\tbest = array[0]\n\tfor i in range(1, len(array)):\n\t\tif array[i] > best:\n\t\t\tbest = array[i]\n\tprint(best)\n\nmax_stock_profit([1, 2, 3, 4, 5])\nmax_stock_profit([1, 2, 3, 4, 5, 6])\nmax_stock_profit([1, 2, 3, 4, 5, 6, 7])\nmax_stock_profit([1,']"
90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","['def sum_positions(target,nums):\n\t#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.\n\ttarget = target\n\tnums = nums\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tfor j in range(len(nums)):\n\t\t\tif nums[i] + nums[j] == target:\n\t\t\t\tresult.append([nums[i],nums[j]])\n\treturn result\n\ndef sum_positions_2(target,nums):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tfor j in range(len(nums)):\n\t\t\tif nums[i] + nums[j] == target:\n\t\t\t\tresult', 'def sum_positions(target,nums):\n\t#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tif nums[i] == target:\n\t\t\tresult.append(i)\n\treturn result\n\ndef sum_positions_2(target,nums):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tif nums[i] == target:\n\t\t\tresult.append(i)\n\treturn result\n\ndef sum_positions_3(target,nums):\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tif nums[i] == target:', 'def sum_positions(target,nums):\n\t#Print out the sum of elements in ""result"".\n\tresult = 0\n\tfor i in range(len(nums)):\n\t\tresult += nums[i]\n\tprint(result)\n\nsum_positions(1, [1,2,3,4,5])\nsum_positions(1, [1,2,3,4,5,6])\nsum_positions(1, [1,2,3,4,5,6,7])\nsum_positions(1, [1,2,3,4,5,6,7,8])\nsum_positions(1, [1,2,']"
91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","['def find_missing_num(nums,N):\n\t#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.\n\tnums = set(nums)\n\tN = set(N)\n\tmissing_num = 0\n\tfor i in range(1,N+1):\n\t\tif i not in nums:\n\t\t\tmissing_num = i\n\t\t\tbreak\n\treturn missing_num\n\nif __name__ == ""__main__"":\n\tnums = [1,2,3,4,5,6,7,8,9,10]\n\tN = 11\n\tprint(find_missing_num(nums,N))', 'def find_missing_num(nums,N):\n\t#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.\n\tall_nums = set(range(1,N+1))\n\tfor num in nums:\n\t\tall_nums.remove(num)\n\treturn all_nums\n\ndef find_missing_num_2(nums,N):\n\tall_nums = set(range(1,N+1))\n\tfor num in nums:\n\t\tall_nums.remove(num)\n\treturn all_nums.pop()\n\ndef find_missing_num_3(nums,N):\n\tall_nums = set(range(1,N+1))', 'def find_missing_num(nums,N):\n\t#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""\n\tdiff = set(nums) - set(all_nums)\n\treturn diff.pop()\n\ndef find_missing_num_2(nums,N):\n\tall_nums = set(nums)\n\tfor i in range(N):\n\t\tall_nums.add(i)\n\treturn all_nums.pop()\n\ndef find_missing_num_3(nums,N):\n\tall_nums = set(nums)\n\tfor i in range(N):\n\t\tall_nums.add(i)\n\treturn all_nums.pop()', 'def find_missing_num(nums,N):\n\t#Pop the only element in ""diff"" print it out.\n\tdiff = []\n\tfor i in range(N):\n\t\tdiff.append(nums[i])\n\tdiff.pop()\n\tprint(diff)\n\tfor i in range(N):\n\t\tif(nums[i]!= diff[i]):\n\t\t\treturn diff[i]\n\nif __name__ == ""__main__"":\n\tnums = [1,2,3,4,5,6,7,8,9,10]\n\tN = len(nums)\n\tprint(find_missing_num(nums,N))']"
92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","['def common_num_in_matrix(x):\n\t#Assign {x} to a variable named ""X"".\n\tX = x\n\tnum_in_matrix = 0\n\tfor i in range(len(X)):\n\t\tfor j in range(len(X[i])):\n\t\t\tif X[i][j] == 1:\n\t\t\t\tnum_in_matrix += 1\n\treturn num_in_matrix\n\ndef common_num_in_matrix_2(x):\n\tX = x\n\tnum_in_matrix = 0\n\tfor i in range(len(X)):\n\t\tfor j in range(len(X[i])):\n\t\t\tif X', 'def common_num_in_matrix(x):\n\t#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".\n\tcommon = set(x[0])\n\tfor i in range(1, len(x)):\n\t\tcommon = common.intersection(set(x[i]))\n\treturn len(common)\n\ndef common_num_in_matrix_2(x):\n\tcommon = set()\n\tfor i in range(len(x)):\n\t\tfor j in range(len(x[i])):\n\t\t\tcommon.add(x[i][j])\n\treturn len(common)\n\ndef common_num_in_matrix_3(x):\n\tcommon = set', 'def common_num_in_matrix(x):\n\t#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""\n\tcommon = set()\n\tfor i in range(len(x)):\n\t\tif x[i] in common:\n\t\t\tcontinue\n\t\telse:\n\t\t\tcommon.add(x[i])\n\treturn len(common)\n\ndef common_num_in_matrix_2(x):\n\tcommon = set()\n\tfor i in range(len(x)):\n\t\tif x[i] in common:\n\t\t\tcontinue\n\t\telse:\n\t\t\tcommon.add(x[i])\n\treturn len(common)\n\ndef common_num_in_matrix_', 'def common_num_in_matrix(x):\n\t#Cast ""common"" as a list and print it out.\n\tcommon = [i for i in x if i == ""common""]\n\tprint(common)\n\ndef common_num_in_matrix_2(x):\n\tcommon = [i for i in x if i == ""common""]\n\tprint(common)\n\ndef common_num_in_matrix_3(x):\n\tcommon = [i for i in x if i == ""common""]\n\tprint(common)\n\ndef common_num_in_matrix_4(x):\n\tcommon = [i for i in x if i == ""common""]']"
93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","['def sum_collatz(start):\n\t#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.\n\tseq = [start]\n\twhile True:\n\t\tif start % 2 == 0:\n\t\t\tstart = start // 2\n\t\telse:\n\t\t\tstart = 3 * start + 1\n\t\tif start == 1:\n\t\t\tbreak\n\t\tseq.append(start)\n\treturn seq\n\ndef sum_collatz(start):\n\tseq = [start]\n\twhile True:\n\t\tif start % 2 == 0:\n\t\t\tstart = start // 2\n\t\telse:\n\t\t\tstart = 3 * start + 1', 'def sum_collatz(start):\n\t#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".\n\tseq = []\n\twhile start!= 1:\n\t\tif start % 2 == 0:\n\t\t\tstart = start / 2\n\t\telse:\n\t\t\tstart = start * 3 + 1\n\t\tseq.append(start)\n\treturn seq\n\ndef sum_collatz(start):\n\tseq = []\n\twhile start!= 1:\n\t\tif start % 2 == 0:\n\t\t\tstart = start / 2\n\t\telse:\n\t\t\tstart = start * 3 + 1\n\t\tseq.append(start)\n\treturn', 'def sum_collatz(start):\n\t#Store the sum of all numbers in ""seq"" to ""results"".\n\tresults = 0\n\tseq = start\n\twhile seq > 1:\n\t\tif seq % 2 == 0:\n\t\t\tseq = seq / 2\n\t\telse:\n\t\t\tseq = 3 * seq + 1\n\t\tresults += seq\n\treturn results\n\ndef sum_collatz_recursive(start):\n\tif start == 1:\n\t\treturn 1\n\telse:\n\t\treturn sum_collatz_recursive(start - 1) + sum_collatz_recursive(start - 2)\n\ndef sum_col', 'def sum_collatz(start):\n\t#Print out the ""results"".\n\tprint(start)\n\tif start == 1:\n\t\treturn 1\n\telse:\n\t\treturn start + sum_collatz(start // 2)\n\nprint(sum_collatz(10))\n']"
94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","['def cup_swap(start,swap):\n\t#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\n\tpos = start\n\twhile pos!= swap:\n\t\tpos = pos + 1\n\t\tprint(pos)\n\ncup_swap(1,2)\ncup_swap(1,3)\ncup_swap(1,4)\ncup_swap(1,5)\ncup_swap(1,6)\ncup_swap(1,7)\ncup_swap(1,8)\ncup_swap(1,9)\ncup_swap(1,10)\ncup_swap(1,11)\ncup_swap(1,12', 'def cup_swap(start,swap):\n\t#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.\n\tx = start\n\ty = swap\n\twhile x!= y:\n\t\tx = x.replace(x, """")\n\t\ty = y.replace(y, """")\n\treturn y\n\ndef cup_swap_2(start,swap):\n\tx = start\n\ty = swap\n\twhile x!= y:\n\t\tx = x.replace(x, """")\n\t\ty = y.replace(y, """")\n\treturn y\n\ndef cup_swap_3(start,swap):\n\tx = start\n\ty = swap\n\twhile x', 'def cup_swap(start,swap):\n\t#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".\n\tfor i in range(len(swap)):\n\t\tif swap[i] in pos:\n\t\t\tmove(pos[swap[i]],start)\n\t\t\tpos[swap[i]] = start\n\treturn start\n\ndef move(pos,start):\n\tglobal pos_list\n\tpos_list.append(pos)\n\tpos_list.append(start)\n\ndef move_all(start,end):\n\tglobal pos_list\n\tpos_list.append(start)\n\tpos_list.append(end)\n\ndef move_all_except(', 'def cup_swap(start,swap):\n\t#Print out ""pos"".\n\tprint(""pos"",start)\n\tprint(""swap"",swap)\n\tif start == swap:\n\t\tprint(""swap is the same as start"")\n\t\treturn\n\tif start > swap:\n\t\tprint(""swap is greater than start"")\n\t\treturn\n\tif start < swap:\n\t\tprint(""swap is less than start"")\n\t\treturn\n\tif start == swap:\n\t\tprint(""swap is the same as start"")\n\t\treturn\n\tif start > swap:\n\t\tprint(""swap is greater than start"")\n\t\treturn\n\tif start < swap:\n\t\tprint']"
95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","['def reverse_digits(x):\n\t#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.\n\tstack = []\n\tnum = str(x)\n\tfor i in range(len(num)):\n\t\tstack.append(num[i])\n\tfor i in range(len(stack)-1, -1, -1):\n\t\tnum = num[i] + num[i+1]\n\t\tstack.pop()\n\treturn int(num)\n\ndef reverse_digits_2(x):\n\treturn int(str(x)[::-1])\n\ndef reverse_digits_3(x):\n\treturn int(str(x)[::-1])', 'def reverse_digits(x):\n\t#For each chracter in ""num"", append the character to ""stack"".\n\tstack = []\n\tfor i in range(len(x)):\n\t\tstack.append(x[i])\n\tfor i in range(len(x)):\n\t\tx[i] = stack.pop()\n\treturn x\n\ndef reverse_digits_2(x):\n\tstack = []\n\tfor i in range(len(x)):\n\t\tstack.append(x[i])\n\tfor i in range(len(x)):\n\t\tx[i] = stack.pop()\n\treturn x\n\ndef reverse_digits_3(x):', 'def reverse_digits(x):\n\t#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.\n\tresult = """"\n\twhile len(stack) > 0:\n\t\tresult = result + stack.pop()\n\treturn result\n\ndef reverse_string(x):\n\treturn x[::-1]\n\ndef reverse_string_2(x):\n\treturn x[::-1]\n\ndef reverse_string_3(x):\n\treturn x[::-1]\n\ndef reverse_string_4(x):\n\treturn x[::-1]\n\ndef reverse_string_5(x):\n\treturn x[::-1]\n\ndef reverse_string_6(x', 'def reverse_digits(x):\n\t#Cast ""result"" as integer and print it out.\n\tresult = int(str(x)[::-1])\n\tprint(result)\n\nreverse_digits(12345)\nreverse_digits(1234567890)\nreverse_digits(12345678901234567890)\nreverse_digits(123456789012345678901234567890)\nreverse_digits(12345678901234']"
96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","['def calculate_arrows(x):\n\t#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".\n\tarrows = x.split("" "")\n\tjoined_arrow = """"\n\tfor i in arrows:\n\t\tjoined_arrow += i + "" -> ""\n\treturn joined_arrow\n\ndef calculate_distances(x):\n\tdistances = x.split("" "")\n\tdistances = [float(i) for i in distances]\n\treturn distances\n\ndef calculate_angles(x):\n\tangles = x.split("" "")\n\tangles = [float(i) for i in angles]\n\treturn angles\n\ndef calculate_angles_and_distances(x):\n\tdistances', 'def calculate_arrows(x):\n\t#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.\n\tleft = 0\n\tright = 0\n\tfor i in range(len(x)):\n\t\tif x[i] == \'L\':\n\t\t\tleft += 1\n\t\telif x[i] == \'R\':\n\t\t\tright += 1\n\treturn left, right\n\ndef calculate_score(x):\n\tscore = 0\n\tfor i in range(len(x)):\n\t\tif x[i] == \'L\':\n\t\t\tscore += 10\n\t\telif x[i] == \'R\':\n\t\t\tscore -= 10\n\treturn', 'def calculate_arrows(x):\n\t#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.\n\tif x > 0:\n\t\tprint(""Right"")\n\telif x < 0:\n\t\tprint(""Left"")\n\telse:\n\t\tprint(""No arrow"")\n\ndef calculate_triangle(x):\n\tif x > 0:\n\t\tprint(""Triangle"")\n\telif x < 0:\n\t\tprint(""Square"")\n\telse:\n\t\tprint(""No triangle"")\n\ndef calculate_square(x):\n\tif x > 0:\n\t\tprint(""Square"")\n\telif x < 0:\n\t\tprint(""Triangle"")\n\telse:', 'def calculate_arrows(x):\n\t#Otherwise, print out the string that consists of (left - right) left-facing arrows.\n\tif x == 0:\n\t\treturn "" ""\n\telif x > 0:\n\t\treturn "" -> ""\n\telse:\n\t\treturn "" <- ""\n\ndef calculate_score(x):\n\tif x == 0:\n\t\treturn 0\n\telif x > 0:\n\t\treturn 100\n\telse:\n\t\treturn -100\n\ndef calculate_score_for_player(x):\n\tif x == 0:\n\t\treturn 0\n\telif x > 0:\n\t\treturn 100']"
97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","['def check_interval_num_(x):\n\t#Initialize an array ""array"" with {x}.\n\tarray = [x]\n\tfor i in range(1, 1000000):\n\t\tif i not in array:\n\t\t\treturn i\n\treturn -1\n\ndef check_interval_num(x):\n\tif x not in range(1, 1000000):\n\t\treturn -1\n\treturn x\n\ndef check_interval_num_2(x):\n\tif x not in range(1, 1000000):\n\t\treturn -1\n\treturn x\n\ndef check_interval', 'def check_interval_num_(x):\n\t#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".\n\tdiff = max(x) - min(x)\n\treturn diff\n\ndef check_interval_num(x):\n\treturn max(x) - min(x)\n\ndef check_interval_num_(x):\n\treturn max(x) - min(x)\n\ndef check_interval_num_(x):\n\treturn max(x) - min(x)\n\ndef check_interval_num_(x):\n\treturn max(x) - min(x)\n\ndef check_interval_num_(x):\n\treturn max(x) -', 'def check_interval_num_(x):\n\t#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\n\tresult = False\n\tif x in array:\n\t\tresult = True\n\treturn result\n\ndef check_interval_num(x):\n\treturn check_interval_num_(x)\n\ndef check_interval_num_list(x):\n\treturn check_interval_num_(x)\n\ndef check_interval_num_list_(x):\n\tresult = False\n\tif x in array:\n\t\tresult = True\n\treturn result\n\ndef check_interval_num_list(x):\n\treturn check_interval_num_list_(x)', 'def check_interval_num_(x):\n\t#Print out ""result""\n\tprint(x)\n\treturn x\n\ndef check_interval_num(x):\n\treturn x\n\ndef check_interval_num_(x):\n\treturn x\n\ndef check_interval_num(x):\n\treturn x\n\ndef check_interval_num_(x):\n\treturn x\n\ndef check_interval_num(x):\n\treturn x\n\ndef check_interval_num_(x):\n\treturn x\n\ndef check_interval_num(x):\n\treturn x\n\ndef check_interval_num_(x):']"
98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","['def length_encoding(x):\n\t#Initialize a variable ""original"" with ""{x}""\n\toriginal = x\n\tlength = 0\n\twhile original!= """":\n\t\tlength += 1\n\t\toriginal = original[1:]\n\treturn length\n\ndef encode_message(message):\n\tencoded_message = """"\n\tfor char in message:\n\t\tencoded_message += chr(ord(char) + length_encoding(char))\n\treturn encoded_message\n\ndef decode_message(encoded_message):\n\tdecoded_message = """"\n\tfor char in encoded_message:\n\t\tdecoded_message += chr(ord(char) - length_encoding(char', 'def length_encoding(x):\n\t#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.\n\tdic = collections.OrderedDict()\n\tfor i in range(len(x)):\n\t\tdic[x[i]] = dic.get(x[i], 0) + 1\n\treturn dic\n\ndef get_most_common(dic):\n\tmost_common = []\n\tfor key, value in dic.items():\n\t\tif value == max(dic.values()):\n\t\t\tmost_common.append(key)\n\treturn most_common\n\ndef get_most_common_length(dic):\n\tmost_common = []\n\tfor key, value', 'def length_encoding(x):\n\t#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.\n\tfor i in range(len(x)):\n\t\tif x[i] in dic:\n\t\t\tdic[x[i]] += 1\n\t\telse:\n\t\t\tdic[x[i]] = 1\n\treturn dic\n\ndef length_encoding_v2(x):\n\tdic = {}\n\tfor i in range(len(x)):\n\t\tif x[i] in dic:\n\t\t\tdic[x[i]] += 1\n\t\telse:\n\t\t\tdic[x[i]] = 1\n\treturn dic\n\ndef length_encoding_v3', 'def length_encoding(x):\n\t#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".\n\tresult = """"\n\tfor key, value in dic.items():\n\t\tresult += key + value\n\treturn result\n\ndef decode_length_encoding(x):\n\tresult = """"\n\tfor i in range(len(x)):\n\t\tresult += dic[x[i]]\n\treturn result\n\ndef encode_length_encoding(x):\n\tresult = """"\n\tfor i in range(len(x)):\n\t\tresult += dic[x[i]] + str(i)\n\treturn result\n\ndef decode_length_encoding_2(x):', 'def length_encoding(x):\n\t#Print out ""result"".\n\tresult = """"\n\tfor i in range(len(x)):\n\t\tresult += chr(x[i] ^ 0x31)\n\treturn result\n\ndef decode_length_encoding(x):\n\tresult = []\n\tfor i in range(len(x)):\n\t\tresult.append(x[i] ^ 0x31)\n\treturn result\n\ndef encode_length_encoding(x):\n\tresult = []\n\tfor i in range(len(x)):\n\t\tresult.append(x[i] ^ 0x31']"
99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","['def convert_email(x):\n\t#Import re and define a regular expression that matches an email address.\n\timport re\n\tregex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)"")\n\tif regex.match(x):\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef convert_phone(x):\n\timport re\n\tregex = re.compile(r""(^[0-9]{10}$)"")\n\tif regex.match(x):\n\t\treturn True\n\telse:\n\t\treturn False', 'def convert_email(x):\n\t#Search for an email address in ""{x}"" and store the first match to a variable ""address"".\n\taddress = re.search(r""[\\w\\.-]+@[\\w\\.-]+"", x)\n\treturn address.group(0)\n\ndef convert_phone(x):\n\tphone = re.search(r""\\d{3}-\\d{3}-\\d{4}"", x)\n\treturn phone.group(0)\n\ndef convert_date(x):\n\tdate = re.search(r""\\d{4}-\\d{2}-\\d{2}"", x)\n\treturn date.group(0)\n\ndef convert_time(x):', 'def convert_email(x):\n\t#Remove the substring starting from the @ symbol from ""address"".\n\treturn x[1:]\n\ndef convert_phone(x):\n\treturn x[1:]\n\ndef convert_date(x):\n\treturn x[1:]\n\ndef convert_time(x):\n\treturn x[1:]\n\ndef convert_datetime(x):\n\treturn x[1:]\n\ndef convert_duration(x):\n\treturn x[1:]\n\ndef convert_decimal(x):\n\treturn x[1:]\n\ndef convert_integer(x):\n\treturn x[1:]\n\ndef convert_string(x):', 'def convert_email(x):\n\t#Replace non-alphabetical symbols with a whitespace in ""address"".\n\tx = re.sub(r\'[^a-zA-Z0-9]\',\'\', x)\n\treturn x\n\ndef convert_phone(x):\n\tx = re.sub(r\'[^0-9]\', \'\', x)\n\treturn x\n\ndef convert_date(x):\n\tx = re.sub(r\'[^0-9]\', \'\', x)\n\treturn x\n\ndef convert_time(x):\n\tx = re.sub(r\'[^0-9]\', \'\', x)\n\treturn x\n\ndef convert_datetime(', 'def convert_email(x):\n\t#Print out ""address"".\n\treturn x.address\n\ndef convert_phone(x):\n\treturn x.phone\n\ndef convert_name(x):\n\treturn x.name\n\ndef convert_email_and_phone(x):\n\treturn x.email, x.phone\n\ndef convert_name_and_email(x):\n\treturn x.name, x.email\n\ndef convert_name_and_phone(x):\n\treturn x.name, x.phone\n\ndef convert_name_and_email_and_phone(x):\n\treturn x.name']"
100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","['def second_largest(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tprint(my_numbers)\n\tprint(len(my_numbers))\n\tprint(my_numbers[0])\n\tprint(my_numbers[-1])\n\tprint(my_numbers[-2])\n\tprint(my_numbers[-3])\n\tprint(my_numbers[-4])\n\tprint(my_numbers[-5])\n\tprint(my_numbers[-6])\n\tprint(my_numbers[-7])\n\tprint(my_numbers[-8])\n\tprint(my_numbers[-9])\n\tprint', 'def second_largest(A):\n\t#Implement a function that returns the distinct elements of a list.\n\treturn max(set(A), key=A.count)\n\nprint(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n', 'def second_largest(A):\n\t#Compute the distinct elements of my_numbers and store as unique_list.\n\tunique_list = []\n\tfor i in A:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tunique_list.sort()\n\treturn unique_list[-2]\n\nprint(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n', 'def second_largest(A):\n\t#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.\n\tunique_list = []\n\tfor i in A:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tif len(unique_list) == 0:\n\t\tprint(""No second largest element"")\n\telse:\n\t\tprint(max(unique_list))\n\ndef third_largest(A):\n\tunique_list = []\n\tfor i in A:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tif len(unique_list) == 0:']"
101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","['def largest_prefix_sum(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tprint(my_numbers)\n\tprint(len(my_numbers))\n\tprint(my_numbers[0])\n\tprint(my_numbers[-1])\n\tprint(my_numbers[0:2])\n\tprint(my_numbers[0:3])\n\tprint(my_numbers[0:4])\n\tprint(my_numbers[0:5])\n\tprint(my_numbers[0:6])\n\tprint(my_numbers[0:7])\n\tprint(my_numbers[0:8', 'def largest_prefix_sum(A):\n\t#Implement a function that returns the prefix sum of a list as an array.\n\tprefix_sum = [0] * len(A)\n\tprefix_sum[0] = A[0]\n\tfor i in range(1, len(A)):\n\t\tprefix_sum[i] = prefix_sum[i-1] + A[i]\n\treturn prefix_sum\n\ndef largest_prefix_sum_2(A):\n\tprefix_sum = [0] * len(A)\n\tprefix_sum[0] = A[0]\n\tfor i in range(1, len(A)):\n\t\tprefix_sum[i', 'def largest_prefix_sum(A):\n\t#Compute the prefix sum of my_numbers and store as prefix_sum_list.\n\tprefix_sum_list = []\n\tfor i in range(len(A)):\n\t\tprefix_sum_list.append(A[i] + prefix_sum(A[:i]))\n\treturn max(prefix_sum_list)\n\ndef largest_prefix_sum_2(A):\n\tprefix_sum_list = []\n\tfor i in range(len(A)):\n\t\tprefix_sum_list.append(A[i] + prefix_sum_2(A[:i]))\n\treturn max(prefix_sum_list)\n\ndef largest_', 'def largest_prefix_sum(A):\n\t#Print out the largest element in prefix_sum_list. \n\t\n\tprefix_sum_list = []\n\tfor i in range(len(A)):\n\t\tprefix_sum_list.append(A[i])\n\tprefix_sum_list.sort()\n\tprint(prefix_sum_list[-1])\n\nlargest_prefix_sum([1, 2, 3, 4, 5])\nlargest_prefix_sum([1, 2, 3, 4, 5, 6])\nlargest_prefix_sum([1, 2, 3, 4, 5, 6, 7']"
102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","['def closest_element_to_zero(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\tmin_distance = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'def closest_element_to_zero(A):\n\t#Count the distances from each element in my_number to 0...\n\tdistances = [abs(A[i] - 0) for i in range(len(A))]\n\treturn distances.index(min(distances))\n\ndef closest_element_to_one(A):\n\tdistances = [abs(A[i] - 1) for i in range(len(A))]\n\treturn distances.index(min(distances))\n\ndef closest_element_to_two(A):\n\tdistances = [abs(A[i] - 2) for i in range(len(A))]\n\treturn distances.index(', 'def closest_element_to_zero(A):\n\t#Find the closest number to 0 in my_number and store as closest_number.\n\tclosest_number = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == 0:\n\t\t\tclosest_number = i\n\t\t\tbreak\n\treturn closest_number\n\ndef find_closest_element(A, target):\n\tclosest_number = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == target:\n\t\t\tclosest_number = i\n\t\t\tbreak\n\treturn closest_number\n\ndef find_closest_element_to_zero(A):\n\tclosest_number = 0', 'def closest_element_to_zero(A):\n\t#Print out the distance from closest_number to 0. 0 is the closest number.\n\tclosest_number = 0\n\tclosest_distance = abs(A[0] - 0)\n\tfor i in range(1, len(A)):\n\t\tdistance = abs(A[i] - 0)\n\t\tif distance < closest_distance:\n\t\t\tclosest_number = A[i]\n\t\t\tclosest_distance = distance\n\treturn closest_number\n\ndef closest_element_to_one(A):\n\tclosest_number = 0\n\tclosest_distance = abs(A[0] - 1)']"
103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","['def consecutive_unique_char(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\tunique_char = """"\n\tfor i in range(len(my_string)):\n\t\tif my_string[i] not in unique_char:\n\t\t\tunique_char += my_string[i]\n\treturn unique_char\n\nprint(consecutive_unique_char(""abc""))\nprint(consecutive_unique_char(""abca""))\nprint(consecutive_unique_char(""abcb""))\nprint(consecutive_unique_char(""abcc""))\nprint(consecutive_unique_char(""abccb""))\nprint', 'def consecutive_unique_char(A):\n\t#Implement a function that checks whether a string only contains unique characters.\n\tunique_char = []\n\tfor i in A:\n\t\tif i not in unique_char:\n\t\t\tunique_char.append(i)\n\treturn unique_char\n\ndef consecutive_unique_char_2(A):\n\tunique_char = []\n\tfor i in A:\n\t\tif i not in unique_char:\n\t\t\tunique_char.append(i)\n\treturn unique_char\n\ndef consecutive_unique_char_3(A):\n\tunique_char = []\n\tfor i in A:\n\t\tif i not in unique_', 'def consecutive_unique_char(A):\n\t#Find the longest substring of my_string that contains only unique characters and store as result_substring.\n\tresult_substring = """"\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] == A[j]:\n\t\t\t\tresult_substring = result_substring + A[j]\n\treturn result_substring\n\ndef consecutive_unique_char_2(A):\n\tresult_substring = """"\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] == A[j]:\n\t\t\t\tresult_substring', 'def consecutive_unique_char(A):\n\t#Print out the length of result_substring.\n\tresult_substring = """"\n\tfor i in range(len(A)):\n\t\tif A[i]!= A[i-1]:\n\t\t\tresult_substring += A[i]\n\tprint(len(result_substring))\n\treturn result_substring\n\nconsecutive_unique_char(A)\n']"
104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","['def highest_frequency_char(A):\n\t#Assign a string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\tmy_string = my_string.lower()\n\tmy_string = my_string.replace("" "", """")\n\tmy_string = my_string.replace(""a"", """")\n\tmy_string = my_string.replace(""e"", """")\n\tmy_string = my_string.replace(""i"", """")\n\tmy_string = my_string.replace(""o"", """")\n\tmy_string = my_string.replace(""u"", """")\n\tmy_string = my_string.replace(""y"", """")\n\tmy_string', 'def highest_frequency_char(A):\n\t#Find the repeated characters in the my_string.\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] == A[j]:\n\t\t\t\treturn A[i]\n\treturn None\n\ndef highest_frequency_char_2(A):\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] == A[j]:\n\t\t\t\treturn A[i]\n\treturn None\n\ndef highest_frequency_char_3(A):\n\tfor i', 'def highest_frequency_char(A):\n\t#Count the frequency of these repeated characters.\n\tchar_count = {}\n\tfor c in A:\n\t\tif c in char_count:\n\t\t\tchar_count[c] += 1\n\t\telse:\n\t\t\tchar_count[c] = 1\n\treturn max(char_count, key=char_count.get)\n\ndef highest_frequency_word(A):\n\tword_count = {}\n\tfor w in A:\n\t\tif w in word_count:\n\t\t\tword_count[w] += 1\n\t\telse:\n\t\t\tword_count[w] = 1', 'def highest_frequency_char(A):\n\t#Print out the length of most frequent character.\n\tchar_count = {}\n\tfor i in A:\n\t\tif i in char_count:\n\t\t\tchar_count[i] += 1\n\t\telse:\n\t\t\tchar_count[i] = 1\n\treturn max(char_count, key=char_count.get)\n\ndef highest_frequency_word(A):\n\tword_count = {}\n\tfor i in A:\n\t\tif i in word_count:\n\t\t\tword_count[i] += 1\n\t\telse:\n\t\t\tword_count[i] = 1']"
105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","['def longest_palindrome(A):\n\t#Assign a string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\tlongest_palindrome = """"\n\tfor i in range(len(my_string)):\n\t\tfor j in range(len(my_string)):\n\t\t\tif i == j:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tif my_string[i] == my_string[j]:\n\t\t\t\t\tlongest_palindrome = my_string[i:j+1]\n\treturn longest_palindrome\n\nprint(longest_palindrome(""abba""))\nprint(longest_palindrome(""abba""))\nprint(longest_palindrome(""abba', 'def longest_palindrome(A):\n\t#Implement a function that checks whether a string is a palindrome.\n\tif len(A) == 0:\n\t\treturn True\n\tif len(A) == 1:\n\t\treturn A[0] == A[0]\n\tif len(A) == 2:\n\t\treturn A[0] == A[1]\n\tif len(A) == 3:\n\t\treturn A[0] == A[1] and A[1] == A[2]\n\tif len(A) == 4:\n\t\treturn A[0] == A[1] and A[1] == A[2] and', 'def longest_palindrome(A):\n\t#Find all substrings of my_string which is a palindrome and store as a list.\n\tsubstrings = []\n\tfor i in range(len(A)):\n\t\tfor j in range(i, len(A)):\n\t\t\tif A[i:j+1] == A[i:j+1][::-1]:\n\t\t\t\tsubstrings.append(A[i:j+1])\n\treturn max(substrings, key=len)\n\nprint(longest_palindrome(""abba""))\nprint(longest_palindrome(""abba""))\nprint(longest_palindrome(""abba""))\nprint(longest_palindrome(""abba""))\nprint(', 'def longest_palindrome(A):\n\t#Print out the length of longest palindrome in the above list.\n\tlongest = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(i, len(A)):\n\t\t\tif A[i:j+1] == A[i:j+1][::-1]:\n\t\t\t\tif len(A[i:j+1]) > longest:\n\t\t\t\t\tlongest = len(A[i:j+1])\n\treturn longest\n\nA = [1,2,3,4,5,6,7,8,9,10]\nprint(longest_palindrome(A))\n']"
106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","['def count_primes(A):\n\t#Assign an integer ""{A}"" to a variable named ""my_integer"".\n\tmy_integer = A\n\tcount = 0\n\tfor i in range(2, my_integer):\n\t\tif is_prime(i):\n\t\t\tcount += 1\n\treturn count\n\nprint(count_primes(1000000))\n', 'def count_primes(A):\n\t#Implement a function that checks whether an integer is a prime number.\n\tprimes = [2]\n\tfor i in range(3, int(math.sqrt(A))+1, 2):\n\t\tif A % i == 0:\n\t\t\tprimes.append(i)\n\tfor i in range(2, int(math.sqrt(A))+1):\n\t\tif A % i == 0:\n\t\t\tprimes.append(i)\n\treturn len(primes)\n\ndef count_primes_recursive(A):\n\tif A == 2:\n\t\treturn 1\n\telif A == 3:\n\t\treturn 2', 'def count_primes(A):\n\t#Find all prime numbers that are less than my_integer and store as prime_result.\n\tprime_result = []\n\tfor i in range(2, A):\n\t\tif is_prime(i):\n\t\t\tprime_result.append(i)\n\treturn prime_result\n\ndef is_prime(n):\n\tif n == 2:\n\t\treturn True\n\telif n == 3:\n\t\treturn True\n\telif n % 2 == 0:\n\t\treturn False\n\telif n % 3 == 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(5, int(n**0.5)+1', 'def count_primes(A):\n\t#Print out the length of prime_result.\n\tprime_result = []\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tprime_result.append(i)\n\tprint(len(prime_result))\n\treturn prime_result\n\ndef count_primes_2(A):\n\tprime_result = []\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tprime_result.append(i)\n\treturn len(prime_result)\n\ndef count_primes_3(A):\n\tprime']"
107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","['def rotate_array(A,K):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\tn = len(A)\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif i == j:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\ttemp = my_array[i]\n\t\t\t\tmy_array[i] = my_array[j]\n\t\t\t\tmy_array[j] = temp\n\treturn my_array\n\ndef rotate_array_2(A,K):\n\tn = len(A)\n\tfor i in range(n):\n\t\tfor j in range(n):', 'def rotate_array(A,K):\n\t#Assign a positive integer ""{K}"" to a variable named ""k"".\n\tk = K\n\tn = len(A)\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif i == j:\n\t\t\t\tcontinue\n\t\t\tif A[i] > A[j]:\n\t\t\t\tA[i], A[j] = A[j], A[i]\n\treturn A\n\nA = [1,2,3,4,5,6,7,8,9,10]\nprint(rotate_array(A,3))\n', 'def rotate_array(A,K):\n\t#Implement a function that rotates one array to the right by 1 step.\n\tn = len(A)\n\tfor i in range(n):\n\t\tA[i] = A[i] + K\n\treturn A\n\ndef rotate_array_2(A,K):\n\tn = len(A)\n\tfor i in range(n):\n\t\tA[i] = A[i] + K\n\treturn A\n\ndef rotate_array_3(A,K):\n\tn = len(A)\n\tfor i in range(n):\n\t\tA[i] = A[i] + K\n\treturn A', 'def rotate_array(A,K):\n\t#Rotate my_array k steps and store as rotated_result.\n\trotated_result = []\n\tfor i in range(len(A)):\n\t\trotated_result.append(A[i])\n\tfor i in range(len(A)):\n\t\tif i+K >= len(A):\n\t\t\trotated_result.append(A[i-K])\n\t\telse:\n\t\t\trotated_result.append(A[i+K])\n\treturn rotated_result\n\ndef rotate_array_2(A,K):\n\trotated_result = []\n\tfor i in range(len(A)):\n\t\trotated_result.append', 'def rotate_array(A,K):\n\t#Print out rotated_result.\n\trotated_result = []\n\tfor i in range(len(A)):\n\t\trotated_result.append(A[i])\n\tfor i in range(len(A)):\n\t\tif i+K >= len(A):\n\t\t\trotated_result[i] = A[i-K]\n\t\telse:\n\t\t\trotated_result[i] = A[i+K]\n\treturn rotated_result\n\ndef rotate_array_2(A,K):\n\trotated_result = []\n\tfor i in range(len(A)):\n\t\trotated_result']"
108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","['def partition_equal_sets(A):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = []\n\tfor i in range(len(A)):\n\t\tmy_array.append(A[i])\n\tprint(my_array)\n\tprint(len(my_array))\n\tprint(len(set(my_array)))\n\tprint(len(set(my_array)))\n\tprint(len(set(my_array)))\n\tprint(len(set(my_array)))\n\tprint(len(set(my_array)))\n\tprint(len(set(my_array)))\n\tprint(len(set(', 'def partition_equal_sets(A):\n\t#Compute the sum of my_array and store as my_sum.\n\tmy_sum = sum(A)\n\tmy_array = [0] * my_sum\n\tfor i in range(len(A)):\n\t\tmy_array[A[i]] += 1\n\treturn my_array\n\ndef partition_equal_sets_2(A):\n\tmy_sum = sum(A)\n\tmy_array = [0] * my_sum\n\tfor i in range(len(A)):\n\t\tmy_array[A[i]] += 1\n\treturn my_array\n\ndef partition_equal_sets_', 'def partition_equal_sets(A):\n\t#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.\n\tmy_sum = sum(A)\n\tif my_sum % 2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef partition_equal_sets_2(A):\n\tmy_sum = sum(A)\n\tif my_sum % 2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef partition_equal_sets_3(A):\n\tmy_sum = sum(A)\n\tif my_sum % 2 == 0:\n\t\treturn False\n\telse:', 'def partition_equal_sets(A):\n\t#Print out the function output when the above array is my_array.\n\tprint(A)\n\tn = len(A)\n\tif n == 1:\n\t\treturn [A]\n\telse:\n\t\tsets = []\n\t\tfor i in range(n):\n\t\t\tsets.append(A[i])\n\t\tsets = partition_equal_sets(sets)\n\t\tsets.append(A[n-1])\n\t\treturn sets\n\ndef partition_equal_sets_2(A):\n\tn = len(A)\n\tif n == 1:\n\t\treturn [A]\n\telse:\n\t\tsets = []']"
109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","['def square_root_integer(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\tprint(""The square root of {A} is {my_number}."".format(A=A, my_number=my_number))\n\treturn my_number\n\nsquare_root_integer(10)\n\ndef square_root_float(A):\n\tmy_number = A\n\tprint(""The square root of {A} is {my_number}."".format(A=A, my_number=my_number))\n\treturn my_number\n\nsquare_root_float(10.0)\n\ndef', 'def square_root_integer(A):\n\t#Compute the square root of my_number and store as root_number.\n\troot_number = math.sqrt(A)\n\treturn root_number\n\ndef square_root_float(A):\n\troot_number = math.sqrt(A)\n\treturn root_number\n\ndef square_root_complex(A):\n\troot_number = math.sqrt(A)\n\treturn root_number\n\ndef square_root_string(A):\n\troot_number = math.sqrt(A)\n\treturn root_number\n\ndef square_root_list(A):\n\troot_number = math.sqrt(A)', 'def square_root_integer(A):\n\t#Implement a function that only returns the integer part of a float number.\n\treturn int(round(math.sqrt(A)))\n\ndef square_root_float(A):\n\treturn math.sqrt(A)\n\ndef square_root_complex(A):\n\treturn complex(math.sqrt(A.real), math.sqrt(A.imag))\n\ndef square_root_complex_list(A):\n\treturn [complex(math.sqrt(A[i].real), math.sqrt(A[i].imag)) for i in range(len(A))]\n\ndef square_root_complex_tuple(A):', 'def square_root_integer(A):\n\t#Print out the integer part of root_number.\n\troot_number = int(sqrt(A))\n\tprint(root_number)\n\nsquare_root_integer(10)\n']"
110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","['def plus_1(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\tmy_number += 1\n\treturn my_number\n\nprint(plus_1(10))\n\ndef plus_2(A):\n\tmy_number = A\n\tmy_number += 1\n\treturn my_number\n\nprint(plus_2(10))\n\ndef plus_3(A):\n\tmy_number = A\n\tmy_number += 1\n\treturn my_number\n\nprint(plus_3(10))\n\ndef plus_4(A):\n\tmy_number', 'def plus_1(A):\n\t#Plus my_number by 1 and store as plus_number.\n\tplus_number = A + 1\n\treturn plus_number\n\ndef minus_1(A):\n\tminus_number = A - 1\n\treturn minus_number\n\ndef multiply_1(A):\n\tmultiply_number = A * 1\n\treturn multiply_number\n\ndef divide_1(A):\n\tdivide_number = A / 1\n\treturn divide_number\n\ndef power_1(A):\n\tpower_number = A ** 1\n\treturn power_number\n\ndef square_root_1(A):', 'def plus_1(A):\n\t#Implement a function that only returns the digits of an integer as a list.\n\treturn [int(i) for i in str(A)]\n\ndef plus_2(A):\n\treturn [int(i) for i in str(A)]\n\ndef plus_3(A):\n\treturn [int(i) for i in str(A)]\n\ndef plus_4(A):\n\treturn [int(i) for i in str(A)]\n\ndef plus_5(A):\n\treturn [int(i) for i in str(A)]\n\ndef plus_6(A):\n\treturn [int(i)', 'def plus_1(A):\n\t#Print out the digits of plus_number.\n\tprint(A)\n\treturn A + 1\n\ndef minus_1(A):\n\tprint(A)\n\treturn A - 1\n\ndef multiply_1(A):\n\tprint(A)\n\treturn A * 1\n\ndef divide_1(A):\n\tprint(A)\n\treturn A / 1\n\ndef power_1(A):\n\tprint(A)\n\treturn A ** 1\n\ndef modulo_1(A):\n\tprint(A)\n\treturn A % 1\n\ndef equal_']"
111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","['def check_square_sum(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\tsum = 0\n\tfor i in range(1, my_number+1):\n\t\tsum += i\n\tif sum == my_number:\n\t\tprint(""The square of the sum of the first {A} numbers is {sum}."".format(A=A, sum=sum))\n\telse:\n\t\tprint(""The square of the sum of the first {A} numbers is {sum}."".format(A=A, sum=sum))\n\ncheck_square_sum(10)\ncheck_square_sum(10', 'def check_square_sum(A):\n\t#Implement a function that computes the square sum of two integers.\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tsum += A[i][j]\n\treturn sum\n\ndef check_square_sum_2(A):\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tsum += A[i][j]\n\treturn sum\n\ndef check_square_sum_3(A):\n\tsum = 0\n\tfor i in range(len(A)):', 'def check_square_sum(A):\n\t#Implement a function that checks one number is the sum of two square numbers.\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i!= j:\n\t\t\t\tsum += A[i] * A[j]\n\treturn sum == 1000\n\ndef check_square_sum_2(A):\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i!= j:\n\t\t\t\tsum += A[i] * A[j]\n\treturn sum == 100', 'def check_square_sum(A):\n\t#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".\n\tif A[0] + A[1] == A[2] + A[3]:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_square_sum_2(A):\n\tif A[0] + A[1] == A[2] + A[3]:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_square_sum_3(A):\n\tif A[0] + A[1] == A[2] + A[3]:\n\t\treturn True\n\telse:\n\t\treturn False']"
112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","['def comare_std._dev.(A):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = [1,2,3,4,5,6,7,8,9,10]\n\tprint(my_array)\n\tprint(type(my_array))\n\tprint(my_array[0])\n\tprint(my_array[-1])\n\tprint(my_array[1:3])\n\tprint(my_array[1:])\n\tprint(my_array[:3])\n\tprint(my_array[3:])\n\tprint(my_array[1:3:2])\n\tprint(my_', 'def comare_std._dev.(A):\n\t#Implement a function that computes standard deviation of an array.\n\tdef std(A):\n\t\treturn np.std(A)\n\treturn std\n\ndef comare_std._mean.(A):\n\tdef mean(A):\n\t\treturn np.mean(A)\n\treturn mean\n\ndef comare_std._median.(A):\n\tdef median(A):\n\t\treturn np.median(A)\n\treturn median\n\ndef comare_std._mode.(A):\n\tdef mode(A):\n\t\treturn np.mode(A)\n\treturn mode\n\ndef comare_std._skew.(A):', 'def comare_std._dev.(A):\n\t#Calculate the standard deviation of my_array and store as result.\n\tresult = np.std(my_array)\n\treturn result\n\ndef comare_std._mean.(A):\n\tresult = np.mean(my_array)\n\treturn result\n\ndef comare_std._median.(A):\n\tresult = np.median(my_array)\n\treturn result\n\ndef comare_std._mode.(A):\n\tresult = np.mode(my_array)\n\treturn result\n\ndef comare_std._skew.(A):\n\tresult = np.skew(my_array)\n\treturn result', 'def comare_std._dev.(A):\n\t#Print out ""True"" if result is less than 1. Otherwise, print ""False"".\n\tif (A < 1):\n\t\tprint(""True"")\n\telse:\n\t\tprint(""False"")\n\ncomare_std._dev.(10)\ncomare_std._dev.(10.0)\ncomare_std._dev.(10.00)\ncomare_std._dev.(10.000)\ncomare_std._dev.(10.0000)\ncomare_std._dev.(10.00000)\ncomare_std._dev.(10.00000']"
113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","['def matrix_size(A):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\n\tprint(""The size of the matrix is: "", my_matrix.shape)\n\ndef matrix_transpose(A):\n\tmy_matrix = A\n\n\tprint(""The transpose of the matrix is: "", my_matrix.T)\n\ndef matrix_multiply(A, B):\n\tmy_matrix = A\n\tmy_matrix_2 = B\n\n\tprint(""The product of the matrix is: "", my_matrix.dot(my_matrix_2))\n\ndef matrix_determinant(A):\n\tmy_matrix = A', 'def matrix_size(A):\n\t#Calculate the number of rows of my_matrix and store as row_number.\n\trow_number = len(A)\n\treturn row_number\n\ndef matrix_size_2(A):\n\trow_number = len(A)\n\tcol_number = len(A[0])\n\treturn row_number, col_number\n\ndef matrix_size_3(A):\n\trow_number = len(A)\n\tcol_number = len(A[0])\n\treturn row_number, col_number, len(A)\n\ndef matrix_size_4(A):\n\trow_number = len(A)', 'def matrix_size(A):\n\t#Calculate the number of columns of my_matrix and store as column_number.\n\tcolumn_number = len(A[0])\n\treturn column_number\n\ndef matrix_multiply(A,B):\n\tcolumn_number = matrix_size(A)\n\trow_number = matrix_size(B)\n\tC = [[0 for x in range(column_number)] for y in range(row_number)]\n\tfor i in range(row_number):\n\t\tfor j in range(column_number):\n\t\t\tfor k in range(len(A)):\n\t\t\t\tC[i][j] += A[k][j] * B[', 'def matrix_size(A):\n\t#Calculate the sum of row_number and column_number and print the result.\n\trow_number = len(A)\n\tcolumn_number = len(A[0])\n\tprint(row_number, column_number)\n\ndef matrix_transpose(A):\n\trow_number = len(A)\n\tcolumn_number = len(A[0])\n\tnew_matrix = []\n\tfor i in range(row_number):\n\t\tnew_matrix.append([])\n\t\tfor j in range(column_number):\n\t\t\tnew_matrix[i].append(A[j][i])\n\treturn new_matrix\n\ndef matrix']"
114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","['def diff_mean_and_median(A):\n\t#Assign the array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\n\tprint(""The mean of the array is: "", np.mean(my_array))\n\tprint(""The median of the array is: "", np.median(my_array))\n\ndef diff_mean_and_median_2(A):\n\tmy_array = A\n\n\tprint(""The mean of the array is: "", np.mean(my_array))\n\tprint(""The median of the array is: "", np.median(my_array))\n\ndef diff_mean_and_median_3(A):\n\tmy_', 'def diff_mean_and_median(A):\n\t#Calculate the mean of my_array and store as mean_number.\n\tmean_number = np.mean(A)\n\tprint(""The mean of my_array is: "", mean_number)\n\tprint(""The median of my_array is: "", np.median(A))\n\treturn mean_number\n\ndef diff_mean_and_median_2(A):\n\tmean_number = np.mean(A)\n\tprint(""The mean of my_array is: "", mean_number)\n\tprint(""The median of my_array is: "", np.median(A))\n\treturn mean_number\n\ndef diff_', 'def diff_mean_and_median(A):\n\t#Calculate the median of my_array and store as median_number.\n\tmedian_number = np.median(A)\n\tprint(""Median is: "", median_number)\n\treturn median_number\n\ndef diff_mean_and_mode(A):\n\tmode_number = np.mode(A)\n\tprint(""Mode is: "", mode_number)\n\treturn mode_number\n\ndef diff_mean_and_variance(A):\n\tvariance_number = np.var(A)\n\tprint(""Variance is: "", variance_number)\n\treturn variance_number\n\ndef diff_mean_and_standard_deviation', 'def diff_mean_and_median(A):\n\t#Calculate the difference between mean_number and median_number and print the result.\n\tmean_number = np.mean(A)\n\tmedian_number = np.median(A)\n\tprint(""The difference between the mean and median is: "", mean_number - median_number)\n\ndef diff_mean_and_median_list(A):\n\tmean_number = np.mean(A)\n\tmedian_number = np.median(A)\n\tprint(""The difference between the mean and median is: "", mean_number - median_number)\n\ndef diff_mean_and_median_array(A):\n\tmean_number =']"
