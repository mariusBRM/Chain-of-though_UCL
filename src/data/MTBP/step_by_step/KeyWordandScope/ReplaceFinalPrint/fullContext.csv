,Unnamed: 0,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code,code_test
0,0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","def sandwich_string(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = ""{A}""
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Lowercase the given string ""my_string"".
	#Assign the distinct characters of the string to a variable named ""chars"".
	chars = my_string.lower()
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string
	#Sort these characters in alphabetical order.
	chars = sorted(chars)
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sand
	#Print the resulting list of characters.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.","def sandwich_string(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = ""{A}""
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Lowercase the given string ""my_string"".
	#Assign the distinct characters of the string to a variable named ""chars"".
	chars = my_string.lower()
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string
	#Sort these characters in alphabetical order.
	chars = sorted(chars)
	#Print the string ""sandwich"" to the screen.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sand
	#Print the resulting list of characters.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
	#Return the string ""sandwich"" to the function.
"
1,1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","def normalize_integer_list(numbers):
	#Define a list of integers named ""numbers"" with the values {numbers}.
	#Return the list of integers.
	#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".
	#Return the total.
	#Calculate the product of the elements in variable ""numbers"" and store the result to variable ""product"".
	#Return the product.
	#Calculate the difference between the product and the total and store the result to variable ""difference"".
	#Return the difference.
	#Calculate the quotient of the difference and the total and store the result to variable ""quotient"".
	#Return the quotient.
	#Calculate the remainder of the quotient and the total and store the result to variable ""remainder"".
	#Return the remainder.
	#
	#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".
	#Return the normalized list.
	#
	#Create a variable named ""total"" and initialize it to 0.
	#Create a variable named ""product"" and initialize it to 1.
	#Create a variable named ""difference"" and initialize it to 0.
	#Create a variable named ""quotient"" and initialize it to 0.
	#Create a variable named ""remainder"" and initialize it to 0.
	#Create a variable named ""normalized"" and initialize it to the list of integers.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".
	#Add the formatted string to the variable ""total"".
	#
	#Return the total.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with two decimal points and store the result into ""formatted"".
	#Add the formatted string to the variable ""product"".
	#
	#Return the product.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with three decimal points and store the result into ""formatted"".
	#Add
	#Print the variable ""formatted"".
	#
	#Return the list of integers.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with four decimal points and store the result into ""formatted"".
	#Add the formatted string to the variable ""difference"".
	#
	#Return the difference.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with five decimal points and store the result into ""formatted"".
	#Add the formatted string to the variable ""quotient"".","def normalize_integer_list(numbers):
	#Define a list of integers named ""numbers"" with the values {numbers}.
	#Return the list of integers.
	#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".
	#Return the total.
	#Calculate the product of the elements in variable ""numbers"" and store the result to variable ""product"".
	#Return the product.
	#Calculate the difference between the product and the total and store the result to variable ""difference"".
	#Return the difference.
	#Calculate the quotient of the difference and the total and store the result to variable ""quotient"".
	#Return the quotient.
	#Calculate the remainder of the quotient and the total and store the result to variable ""remainder"".
	#Return the remainder.
	#
	#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".
	#Return the normalized list.
	#
	#Create a variable named ""total"" and initialize it to 0.
	#Create a variable named ""product"" and initialize it to 1.
	#Create a variable named ""difference"" and initialize it to 0.
	#Create a variable named ""quotient"" and initialize it to 0.
	#Create a variable named ""remainder"" and initialize it to 0.
	#Create a variable named ""normalized"" and initialize it to the list of integers.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".
	#Add the formatted string to the variable ""total"".
	#
	#Return the total.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with two decimal points and store the result into ""formatted"".
	#Add the formatted string to the variable ""product"".
	#
	#Return the product.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with three decimal points and store the result into ""formatted"".
	#Add
	#Print the variable ""formatted"".
	#
	#Return the list of integers.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with four decimal points and store the result into ""formatted"".
	#Add the formatted string to the variable ""difference"".
	#
	#Return the difference.
	#
	#For each element in the list
	#Convert each element in variable ""normalized"" into a formatted string with five decimal points and store the result into ""formatted"".
"
2,2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","def convert_time(a1,a2):
	#Write a function that takes an integer minutes and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Print the total seconds of {a1} hours and {a2} minutes.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds","def convert_time(a1,a2):
	#Write a function that takes an integer minutes and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Print the total seconds of {a1} hours and {a2} minutes.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
	#Write a function that takes an integer hours and converts it to seconds.
	#For example, convert_time(10, 30) should return 600.
	#Hint: Use the modulo operator.
"
3,3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","def squared_fibonacci(a1):
	#Implement a function which returns the n-th Fibonacci number.
	#The Fibonacci sequence is defined as follows:
	#F(0) = 0
	#F(1) = 1
	#F(n) = F(n-1) + F(n-2)
	#For example, F(5) = 5 + 8 = 13.
	#Write a function which takes an integer as input and returns the nth Fibonacci number.
	#For example, nth_fibonacci(5) = 13.
	#Note: The Fibonacci sequence is defined as follows:
	#Implement a function that computes the square of an integer argument.
	#For example, square_of_a_number(2) = 4.
	#Implement a function that computes the cube of an integer argument.
	#For example, cube_of_a_number(2) = 8.
	#Implement a function that computes the sum of two integers.
	#For example, sum_two_numbers(2, 3) = 5.
	#Implement a function that computes the difference of two integers.
	#For example, difference_of_two_numbers(2, 3) = 1.
	#Print out the square of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 13.
	#Print out the cube of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 25.
	#Print out the sum of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 15.
	#Print out the difference of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) =","def squared_fibonacci(a1):
	#Implement a function which returns the n-th Fibonacci number.
	#The Fibonacci sequence is defined as follows:
	#F(0) = 0
	#F(1) = 1
	#F(n) = F(n-1) + F(n-2)
	#For example, F(5) = 5 + 8 = 13.
	#Write a function which takes an integer as input and returns the nth Fibonacci number.
	#For example, nth_fibonacci(5) = 13.
	#Note: The Fibonacci sequence is defined as follows:
	#Implement a function that computes the square of an integer argument.
	#For example, square_of_a_number(2) = 4.
	#Implement a function that computes the cube of an integer argument.
	#For example, cube_of_a_number(2) = 8.
	#Implement a function that computes the sum of two integers.
	#For example, sum_two_numbers(2, 3) = 5.
	#Implement a function that computes the difference of two integers.
	#For example, difference_of_two_numbers(2, 3) = 1.
	#Print out the square of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 13.
	#Print out the cube of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 25.
	#Print out the sum of {a1}-th Fibonacci number.
	#For example, print_nth_fibonacci(5) = 15.
	#Print out the difference of {a1}-th Fibonacci number.
"
4,4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","def count_negative_numbers(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_numbers"" to a variable named ""negative_numbers"".
	negative_numbers = []
	#Iterate over the list of numbers ""{my_numbers}"" and add the number to the list ""{negative_numbers}"".
	for i in my_numbers:
		if i < 0:
			negative_numbers.append(i)
	#Return the list ""{negative_numbers}"".
	#Count the number of negative numbers in the list as ""n_neg"".
	n_neg = len(negative_numbers)
	#Return the number of negative numbers in the list as ""n_neg"".
	#Count the number of positive numbers in the list as ""n_pos"".
	n_pos = len(my_numbers) - n_neg
	#Return the number of positive numbers in the list as ""n_pos"".
	#Return the sum of the two numbers as ""sum"".
	sum = n_neg + n_pos
	#Return the sum of the two numbers as ""sum"".
	#Print out the larger number of those two.
	if n_neg > n_pos:
	else:
	#Print out the larger number of those two.
	if sum > n_neg:
	else:","def count_negative_numbers(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_numbers"" to a variable named ""negative_numbers"".
	negative_numbers = []
	#Iterate over the list of numbers ""{my_numbers}"" and add the number to the list ""{negative_numbers}"".
	for i in my_numbers:
		if i < 0:
			negative_numbers.append(i)
	#Return the list ""{negative_numbers}"".
	#Count the number of negative numbers in the list as ""n_neg"".
	n_neg = len(negative_numbers)
	#Return the number of negative numbers in the list as ""n_neg"".
	#Count the number of positive numbers in the list as ""n_pos"".
	n_pos = len(my_numbers) - n_neg
	#Return the number of positive numbers in the list as ""n_pos"".
	#Return the sum of the two numbers as ""sum"".
	sum = n_neg + n_pos
	#Return the sum of the two numbers as ""sum"".
	#Print out the larger number of those two.
	if n_neg > n_pos:
	else:
	#Print out the larger number of those two.
	if sum > n_neg:
"
5,5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","def pandas_mean(a1,a2,a3,a4):
	#Import the pandas library.
	import pandas as pd
	#Create a dataframe from the lists.
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	#Calculate the mean of the dataframe.
	mean = df.mean()
	#Return the mean.
	#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].
	df_yes = pd.DataFrame({'Yes': [mean['a1'],mean['a2']], 'No': [mean['a3'],mean['a4']]})
	#Return the dataframe.
	#Compute the mean per column and store the value in a variable named means.
	means = df_yes.mean()
	#Return the mean per column.
	#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].
	df_yes = pd.DataFrame({'Yes': [means['Yes'],means['No']], 'No': [means['Yes'],means['No']]})
	#Return the dataframe.
	#Compute the mean per column and store the value in a variable named means.
	means = df_yes.mean
	#Print the variable means.
	return means","def pandas_mean(a1,a2,a3,a4):
	#Import the pandas library.
	import pandas as pd
	#Create a dataframe from the lists.
	df = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})
	#Calculate the mean of the dataframe.
	mean = df.mean()
	#Return the mean.
	#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].
	df_yes = pd.DataFrame({'Yes': [mean['a1'],mean['a2']], 'No': [mean['a3'],mean['a4']]})
	#Return the dataframe.
	#Compute the mean per column and store the value in a variable named means.
	means = df_yes.mean()
	#Return the mean per column.
	#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].
	df_yes = pd.DataFrame({'Yes': [means['Yes'],means['No']], 'No': [means['Yes'],means['No']]})
	#Return the dataframe.
	#Compute the mean per column and store the value in a variable named means.
	means = df_yes.mean
	#Print the variable means.
"
6,6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","def fizz_buzz(a1,a2,a3,a4):
	#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".
	#For numbers which are multiples of {a3} print ""fizz"" for numbers which are multiples of {a4} print ""buzz"" for numbers which are multiples of both {a3} and {a4} ""fizzbuzz"".
	#For numbers which are multiples of both {a1} and {a2} print ""fizzbuzz"" for numbers which are multiples of {a3} and {a4} ""fizzbuzz"".
	#For numbers which are multiples of {a1} and {a2} and {a3} print
	#Create a list of integers ranging from {a3} to {a4}.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
	#If the current number is divisible by {a1} and {a2} and {a3} print ""fizzbuzz""
	#If the current number is not divisible by {a1} or
	#Call the written function for each element in the list and store the result as ""new_list"".
	#Return the new list.
	#Create a variable called new_list and initialize it to an empty list.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
	#If the current number is divisible by {a1} and {a2} and
	#Print out the list ""new_list"".
	#Return the new list.
	#Create a variable called new_list and initialize it to an empty list.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
	#If the current number is divisible by {a1} and {a2} and","def fizz_buzz(a1,a2,a3,a4):
	#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".
	#For numbers which are multiples of {a3} print ""fizz"" for numbers which are multiples of {a4} print ""buzz"" for numbers which are multiples of both {a3} and {a4} ""fizzbuzz"".
	#For numbers which are multiples of both {a1} and {a2} print ""fizzbuzz"" for numbers which are multiples of {a3} and {a4} ""fizzbuzz"".
	#For numbers which are multiples of {a1} and {a2} and {a3} print
	#Create a list of integers ranging from {a3} to {a4}.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
	#If the current number is divisible by {a1} and {a2} and {a3} print ""fizzbuzz""
	#If the current number is not divisible by {a1} or
	#Call the written function for each element in the list and store the result as ""new_list"".
	#Return the new list.
	#Create a variable called new_list and initialize it to an empty list.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
	#If the current number is divisible by {a1} and {a2} and
	#Print out the list ""new_list"".
	#Return the new list.
	#Create a variable called new_list and initialize it to an empty list.
	#Create a for loop that iterates through the list.
	#If the current number is divisible by {a1} or {a2} print ""fizz""
	#If the current number is divisible by {a3} print ""buzz""
	#If the current number is divisible by both {a1} and {a2} print ""fizzbuzz""
"
7,7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","def bi-grams(a1):
	#Write a function that can take a string and return a list of word bigrams as pairs.
	#For example, bi-grams(""apple"") should return [""app"", ""ple""].
	#You may assume that the string will only contain lowercase letters.
	#You may assume that the string will not be empty.
	#You may assume that the string will not be a single word.
	#You may assume that the string will not consist of multiple spaces.
	#You may assume that the string will not consist of multiple words.
	#You may assume that the string will not consist of multiple bigrams.
	#You may assume that the string will not consist of multiple
	#Assign the string ""{a1}"" to a variable named sentence.
	#Assign the string ""{a1}"" to a variable named words.
	#Assign the string ""{a1}"" to a variable named bigrams.
	#Assign the string ""{a1}"" to a variable named bigrams_list.
	#For example, words = ""apple""
	#bigrams_list = [""app"", ""ple""]
	#bigrams = ""app ple""
	#bigrams_list = [""app"", ""ple""]
	#bigrams = ""app ple""
	#bigrams_list = [""app"", ""ple""]
	#Print out the bi-grams for the variable named sentence.
	#Print out the bi-grams for the variable named words.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
	#Print out the bi-grams for the","def bi-grams(a1):
	#Write a function that can take a string and return a list of word bigrams as pairs.
	#For example, bi-grams(""apple"") should return [""app"", ""ple""].
	#You may assume that the string will only contain lowercase letters.
	#You may assume that the string will not be empty.
	#You may assume that the string will not be a single word.
	#You may assume that the string will not consist of multiple spaces.
	#You may assume that the string will not consist of multiple words.
	#You may assume that the string will not consist of multiple bigrams.
	#You may assume that the string will not consist of multiple
	#Assign the string ""{a1}"" to a variable named sentence.
	#Assign the string ""{a1}"" to a variable named words.
	#Assign the string ""{a1}"" to a variable named bigrams.
	#Assign the string ""{a1}"" to a variable named bigrams_list.
	#For example, words = ""apple""
	#bigrams_list = [""app"", ""ple""]
	#bigrams = ""app ple""
	#bigrams_list = [""app"", ""ple""]
	#bigrams = ""app ple""
	#bigrams_list = [""app"", ""ple""]
	#Print out the bi-grams for the variable named sentence.
	#Print out the bi-grams for the variable named words.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
	#Print out the bi-grams for the variable named bigrams.
	#Print out the bi-grams for the variable named bigrams_list.
"
8,8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","def top_note(a1,a2,a3,a4):
	#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".
	my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
	#Print the dictionary ""my_notes"" to the screen.
	#Print the top note of the dictionary ""my_notes"" to the screen.
	#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.
	def top_note(a1,a2,a3,a4):
		#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".
		my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4],
	#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".
		for name in my_notes:
			my_list = []
			for note in my_notes[name]:
				my_list.append([name, note])
			#Sort the list of pairs by the second element of each pair.
			my_list.sort(key=lambda x: x[1])
			#Print the name and the top note of the pair.
	#Call the function ""top_note"" with the values of
	#Find the name with the highest top_note and assign it to ""top_name"".
	top_name = max(my_notes, key=my_notes.get)
	#Print the name with the highest top_note.
	#Find the top note of the name with the highest top_note and assign it to ""top_note"".
	top_note = my_notes[top_name][0]
	#Print the top note of the name with the highest top_note.
	#Return the dictionary ""my_notes"" to the screen.
	#Print the variable top_name.
	#Print the variable top_note.
	return my_notes, top_name, top_note","def top_note(a1,a2,a3,a4):
	#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".
	my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}
	#Print the dictionary ""my_notes"" to the screen.
	#Print the top note of the dictionary ""my_notes"" to the screen.
	#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.
	def top_note(a1,a2,a3,a4):
		#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".
		my_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4],
	#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".
		for name in my_notes:
			my_list = []
			for note in my_notes[name]:
				my_list.append([name, note])
			#Sort the list of pairs by the second element of each pair.
			my_list.sort(key=lambda x: x[1])
			#Print the name and the top note of the pair.
	#Call the function ""top_note"" with the values of
	#Find the name with the highest top_note and assign it to ""top_name"".
	top_name = max(my_notes, key=my_notes.get)
	#Print the name with the highest top_note.
	#Find the top note of the name with the highest top_note and assign it to ""top_note"".
	top_note = my_notes[top_name][0]
	#Print the top note of the name with the highest top_note.
	#Return the dictionary ""my_notes"" to the screen.
	#Print the variable top_name.
	#Print the variable top_note.
"
9,9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","def hex_to_binary(a1):
	#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".
	#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.
	#Create a function that will take the output of the above function and return the binary equivalent (as a string). E.g., to_binary(""11111111"") = ""11111111"".
	#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.
	#Create a function that will take the output of the above function and return the binary equivalent (as a string). E.g., to_
	#Assign the value {a1} to a variable named ""my_hex"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named
	#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".
	#Convert the variable ""my_binary"" into the HEX equivalent as string named ""my_hex"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value
	#Convert ""my_binary"" back to a HEX number named ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the
	#Print the result.
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the","def hex_to_binary(a1):
	#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".
	#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.
	#Create a function that will take the output of the above function and return the binary equivalent (as a string). E.g., to_binary(""11111111"") = ""11111111"".
	#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.
	#Create a function that will take the output of the above function and return the binary equivalent (as a string). E.g., to_
	#Assign the value {a1} to a variable named ""my_hex"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named ""my_binary"".
	#Assign the value {a1} to a variable named
	#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".
	#Convert the variable ""my_binary"" into the HEX equivalent as string named ""my_hex"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value of the variable ""my_binary"".
	#Return the value of the variable ""my_hex"".
	#Return the value
	#Convert ""my_binary"" back to a HEX number named ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the
	#Print the result.
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
	#Return the value of the variable ""result"".
"
10,10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","def invert_dict(a1,a2,a3):
	#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".
	my_dict = {a1:a2}
	#Assign the keys {a3} and values {a1} to a dictionary named ""my_dict"".
	my_dict.update({a3:a1})
	#Return the dictionary ""my_dict"".
	#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.
	#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.
	#Write a function ""is_inverted_dict"" that takes a dict as an argument and returns a boolean which indicates if the dict argument is an inversion of itself.
	#Write a function ""is_inverted_dict_dict"" that takes two dicts as arguments and returns a boolean which indicates if the second dict argument is an inversion of the first dict argument.
	#Write a function ""is_inverted_dict_dict_dict"" that takes three dicts as arguments and returns a boolean which indicates if the second dict argument is an inversion of the first dict argument.
	#Write a
	#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".
	my_dict2 = {a3:my_dict}
	#Create a new variable ""my_dict3"" and initialize it with {a1} ""my_dict"".
	my_dict3 = {a1:my_dict}
	#Create a new variable ""my_dict4"" and initialize it with {a2} ""my_dict"".
	my_dict4 = {a2:my_dict}
	#Create a new variable ""my_dict5"" and initialize it with {a1} ""my_dict2"".
	my_
	#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict3"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict4"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict5"" is the inverted dictionary of ""my_dict2"".
	#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict3"".
	#Print a boolean value indicating if ""my_dict3"" is the inverted dictionary of ""my_dict3"".","def invert_dict(a1,a2,a3):
	#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".
	my_dict = {a1:a2}
	#Assign the keys {a3} and values {a1} to a dictionary named ""my_dict"".
	my_dict.update({a3:a1})
	#Return the dictionary ""my_dict"".
	#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.
	#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.
	#Write a function ""is_inverted_dict"" that takes a dict as an argument and returns a boolean which indicates if the dict argument is an inversion of itself.
	#Write a function ""is_inverted_dict_dict"" that takes two dicts as arguments and returns a boolean which indicates if the second dict argument is an inversion of the first dict argument.
	#Write a function ""is_inverted_dict_dict_dict"" that takes three dicts as arguments and returns a boolean which indicates if the second dict argument is an inversion of the first dict argument.
	#Write a
	#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".
	my_dict2 = {a3:my_dict}
	#Create a new variable ""my_dict3"" and initialize it with {a1} ""my_dict"".
	my_dict3 = {a1:my_dict}
	#Create a new variable ""my_dict4"" and initialize it with {a2} ""my_dict"".
	my_dict4 = {a2:my_dict}
	#Create a new variable ""my_dict5"" and initialize it with {a1} ""my_dict2"".
	my_
	#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict3"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict4"" is the inverted dictionary of ""my_dict"".
	#Print a boolean value indicating if ""my_dict5"" is the inverted dictionary of ""my_dict2"".
	#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict3"".
"
11,11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","def class_definition(a1,a2,a3,a4,a5):
	#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.
	#The class should have a constructor that takes the four arguments and initializes the instance variables.
	#The class should have a method named ""play"" that takes no arguments and returns a string that describes the player's play.
	#The class should have a method named ""get_name"" that returns the name of the player.
	#The class should have a method named ""get_age"" that returns the age of the player.
	#The class should have a method named ""get_height"" that returns the height of the player.
	#The class should have a method named ""
	#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".
	#The class should have a method named ""get_name"" that returns the name of the player.
	#The class should have a method named ""get_age"" that returns the age of the player.
	#The class should have a method named ""get_height"" that returns the height of the player.
	#The class should have a method named ""
	#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}}
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create
	#Call the getter for the {a5} of the player and print the result.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create","def class_definition(a1,a2,a3,a4,a5):
	#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.
	#The class should have a constructor that takes the four arguments and initializes the instance variables.
	#The class should have a method named ""play"" that takes no arguments and returns a string that describes the player's play.
	#The class should have a method named ""get_name"" that returns the name of the player.
	#The class should have a method named ""get_age"" that returns the age of the player.
	#The class should have a method named ""get_height"" that returns the height of the player.
	#The class should have a method named ""
	#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".
	#The class should have a method named ""get_name"" that returns the name of the player.
	#The class should have a method named ""get_age"" that returns the age of the player.
	#The class should have a method named ""get_height"" that returns the height of the player.
	#The class should have a method named ""
	#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}}
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create
	#Call the getter for the {a5} of the player and print the result.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
	#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.
"
12,12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","def longest_number(a1):
	#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.
	def num_len(num):
	#Create a function ""num_len_list"" that takes a list of numbers and returns their length. E.g., number_length_list([1, 2, 3, 4, 5]) = 5.
	def num_len_list(num_list):
	#Create a function ""num_len_dict"" that takes a dictionary of numbers and returns their length. E.g
	#Initialize a last ""my_list"" with the values {a1} and then use the function ""num_len_dict"" to return the length of the list.
		my_list = [a1]
	#Create a function ""num_len_dict_list"" that takes a dictionary of lists and returns their length. E.g., number_length_dict_list({a1: [1, 2, 3, 4, 5]}) = 5.
		def num_len_dict_list(num_dict):
	#Create a function ""num_len_dict_dict"" that takes a dictionary of dictionaries and returns
	#Print the longest number in this list. E.g., number_length_dict_dict({a1: {a2: 1, a3: 2, a4: 3, a5: 4}}) = 5.
		def num_len_dict_dict(num_dict):
	#Create a function ""num_len_dict_dict_list"" that takes a dictionary of dictionaries and returns
	#Print the longest number in this list. E.g., number_length_dict_dict_list({a1: {a2: {a3: 1, a4: 2","def longest_number(a1):
	#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.
	def num_len(num):
	#Create a function ""num_len_list"" that takes a list of numbers and returns their length. E.g., number_length_list([1, 2, 3, 4, 5]) = 5.
	def num_len_list(num_list):
	#Create a function ""num_len_dict"" that takes a dictionary of numbers and returns their length. E.g
	#Initialize a last ""my_list"" with the values {a1} and then use the function ""num_len_dict"" to return the length of the list.
		my_list = [a1]
	#Create a function ""num_len_dict_list"" that takes a dictionary of lists and returns their length. E.g., number_length_dict_list({a1: [1, 2, 3, 4, 5]}) = 5.
		def num_len_dict_list(num_dict):
	#Create a function ""num_len_dict_dict"" that takes a dictionary of dictionaries and returns
	#Print the longest number in this list. E.g., number_length_dict_dict({a1: {a2: 1, a3: 2, a4: 3, a5: 4}}) = 5.
		def num_len_dict_dict(num_dict):
	#Create a function ""num_len_dict_dict_list"" that takes a dictionary of dictionaries and returns
"
13,13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","def linear_regression(a1):
	#Import the class LinearRegression from sklearn.linear_model
	from sklearn.linear_model import LinearRegression
	#Create a LinearRegression object
	regressor = LinearRegression()
	#Fit the model to the training set
	regressor.fit(a1, a1)
	#Predict the response for test dataset
	y_pred = regressor.predict(a1)
	#Return the predicted values
	#Import math.sqrt() from math
	from math import sqrt
	#Return the coefficient of determination R^2
	#Assign integers ranging from 0 to 10 (inclusive) to ""x"".
	#Return the coefficient of determination R^2
	#Define a function ""f"" that multiplies a input argument by 2.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Create a numpy array of numbers ""y"" by applying f to each element of x.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Initialize a linear regression model.
	#Create a numpy array of numbers ""y"" by applying f to each element of x.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^
	#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Apply ceil() to the predicted value and print it as an integer.
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values","def linear_regression(a1):
	#Import the class LinearRegression from sklearn.linear_model
	from sklearn.linear_model import LinearRegression
	#Create a LinearRegression object
	regressor = LinearRegression()
	#Fit the model to the training set
	regressor.fit(a1, a1)
	#Predict the response for test dataset
	y_pred = regressor.predict(a1)
	#Return the predicted values
	#Import math.sqrt() from math
	from math import sqrt
	#Return the coefficient of determination R^2
	#Assign integers ranging from 0 to 10 (inclusive) to ""x"".
	#Return the coefficient of determination R^2
	#Define a function ""f"" that multiplies a input argument by 2.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Create a numpy array of numbers ""y"" by applying f to each element of x.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Initialize a linear regression model.
	#Create a numpy array of numbers ""y"" by applying f to each element of x.
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^
	#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determination R^2
	#Return the coefficient of determin
	#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Apply ceil() to the predicted value and print it as an integer.
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
	#Return the predicted values
"
14,14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","def encrypt_and_decrypt(a1):
	#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.
	#Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: decrypt('jk') returns 'hi', decrypt('cufhijlmn') returns 'asdfghjkl', decrypt('ih') returns 'gf'.
	#Write a function that takes a string as an argument and returns the string encrypted and decrypted.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as
	#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and
	#Assign ""{a1}"" to a variable named ""original_text"".
	#Assign ""{a2}"" to a variable named ""encrypted_text"".
	#Assign ""{a3}"" to a variable named ""decrypted_text"".
	#Assign ""{a4}"" to a variable named ""decrypted_text"".
	#Assign ""{a5}"" to a variable named ""decrypted_text"".
	#Assign ""{a6}"" to a variable named ""decrypted_text"".
	#Assign ""{a7}"" to a variable named ""decrypted_text"".
	#Assign ""{a8}"" to a variable named ""decrypted_text"".
	#Assign ""{a9}"" to
	#Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.
	#Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'decrypted_text'.
	#Return the decrypted_text variable.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the
	#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.
	#Return the restored_text variable.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write
	#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.
	#Create a variable named ""my_result_length"" and assign the value of len(my_result) to it.
	#Create a variable named ""my_result_index"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_2"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_3"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_4"" and assign the value of 0 to
	#Print the list.
	#Print the length of the list.
	#Print the value of my_result_index.
	#Print the value of my_result_index_2.
	#Print the value of my_result_index_3.
	#Print the value of my_result_index_4.
	#Print the value of my_result_length.
	#Create a variable named ""my_result_index_5"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_6"" and assign the value of","def encrypt_and_decrypt(a1):
	#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.
	#Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: decrypt('jk') returns 'hi', decrypt('cufhijlmn') returns 'asdfghjkl', decrypt('ih') returns 'gf'.
	#Write a function that takes a string as an argument and returns the string encrypted and decrypted.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as
	#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and
	#Assign ""{a1}"" to a variable named ""original_text"".
	#Assign ""{a2}"" to a variable named ""encrypted_text"".
	#Assign ""{a3}"" to a variable named ""decrypted_text"".
	#Assign ""{a4}"" to a variable named ""decrypted_text"".
	#Assign ""{a5}"" to a variable named ""decrypted_text"".
	#Assign ""{a6}"" to a variable named ""decrypted_text"".
	#Assign ""{a7}"" to a variable named ""decrypted_text"".
	#Assign ""{a8}"" to a variable named ""decrypted_text"".
	#Assign ""{a9}"" to
	#Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.
	#Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'decrypted_text'.
	#Return the decrypted_text variable.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the
	#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.
	#Return the restored_text variable.
	#Write a function that takes a string as an argument and returns the string encrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write a function that takes a string as an argument and returns the string decrypted.
	#Write
	#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.
	#Create a variable named ""my_result_length"" and assign the value of len(my_result) to it.
	#Create a variable named ""my_result_index"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_2"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_3"" and assign the value of 0 to it.
	#Create a variable named ""my_result_index_4"" and assign the value of 0 to
	#Print the list.
	#Print the length of the list.
	#Print the value of my_result_index.
	#Print the value of my_result_index_2.
	#Print the value of my_result_index_3.
	#Print the value of my_result_index_4.
	#Print the value of my_result_length.
	#Create a variable named ""my_result_index_5"" and assign the value of 0 to it.
"
15,15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","def compare_object_equivalence(a1,a2,a3):
	#Defines a class ""Person"" which takes name and id as constructor arguments.
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
	#Creates a Person object from the arguments.
	p1 = Person(a1,a2)
	p2 = Person(a3,a2)
	#Compares the two objects.
	#Extend the class with a function __hash__ which uses the {a1} property as hash value.
	if p1.__hash__() == p2.__hash__():
	else:
	#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.
		if p1.__eq__(p2):
		else:
	#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.
	persons = [Person(""Person A"",a2),Person(""Person B"",a2),Person(""Person {a3}"",a3)]
	#Create a list ""names"" with names of the persons.
	names = [p.name for p in persons]
	#Create a list ""ids"" with ids of the persons.
	ids = [p.id for p in persons]
	#Create a list ""names_ids"" with names and ids of the persons.
	names_ids = zip(names,ids)
	#Create a list ""names_ids
	#Create a set ""unique_persons"" of this list.
	unique_persons = set(persons)
	#Create a list ""unique_names"" with names of the unique persons.
	unique_names = [p.name for p in unique_persons]
	#Create a list ""unique_ids"" with ids of the unique persons.
	unique_ids = [p.id for p in unique_persons]
	#Create a list ""unique_names_ids"" with names and ids of the unique persons.
	unique_names_ids = zip(unique_names,unique_ids)
	#Create a list ""unique
	#Print the number of elements in the set.
	#Print the number of elements in the list.
	#Print the number of elements in the list.
	#Print the number of elements in the list.
	#Print the names of the unique persons.
	#Print the ids of the unique persons.
	#Print the names and ids of the unique persons
	return len(unique_persons)
	return len(unique_names)
	return len(unique_ids)
	return len(unique_names_ids)
	return unique_names
	return unique_ids","def compare_object_equivalence(a1,a2,a3):
	#Defines a class ""Person"" which takes name and id as constructor arguments.
	class Person:
		def __init__(self,name,id):
			self.name = name
			self.id = id
		def __str__(self):
	#Creates a Person object from the arguments.
	p1 = Person(a1,a2)
	p2 = Person(a3,a2)
	#Compares the two objects.
	#Extend the class with a function __hash__ which uses the {a1} property as hash value.
	if p1.__hash__() == p2.__hash__():
	else:
	#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.
		if p1.__eq__(p2):
		else:
	#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.
	persons = [Person(""Person A"",a2),Person(""Person B"",a2),Person(""Person {a3}"",a3)]
	#Create a list ""names"" with names of the persons.
	names = [p.name for p in persons]
	#Create a list ""ids"" with ids of the persons.
	ids = [p.id for p in persons]
	#Create a list ""names_ids"" with names and ids of the persons.
	names_ids = zip(names,ids)
	#Create a list ""names_ids
	#Create a set ""unique_persons"" of this list.
	unique_persons = set(persons)
	#Create a list ""unique_names"" with names of the unique persons.
	unique_names = [p.name for p in unique_persons]
	#Create a list ""unique_ids"" with ids of the unique persons.
	unique_ids = [p.id for p in unique_persons]
	#Create a list ""unique_names_ids"" with names and ids of the unique persons.
	unique_names_ids = zip(unique_names,unique_ids)
	#Create a list ""unique
	#Print the number of elements in the set.
	#Print the number of elements in the list.
	#Print the number of elements in the list.
	#Print the number of elements in the list.
	#Print the names of the unique persons.
	#Print the ids of the unique persons.
	#Print the names and ids of the unique persons
	return len(unique_persons)
	return len(unique_names)
	return len(unique_ids)
	return len(unique_names_ids)
	return unique_names
"
16,16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","def drunken_python(a1):
	#Python got drunk and the built-in functions str() and int() are acting odd:
	#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".
	#Create a function called str_to_int() that converts strings into integers. E.g., str_to_int(""4"") = 4.
	#Create a function called int_to_str_and_int() that converts integers into strings and integers. E.g., int_to_str_and_int(4) = ""4"" and 4.
	#Create a function called str_to_int_and_str() that converts strings into integers and strings. E.g., str_to_int_and_str(""4"") = 4
	#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.
	#Create a function called str_to_int_and_str() that converts strings into integers and strings. E.g., str_to_int_and_str(""4"") = 4
	#Create a function called str_to_int_and_str_and_int() that converts strings into integers, strings, and integers. E.g., str_to_int_and_str_and_int(""4"") = 4 and ""4"" and 4.
	#Create a function called str_to_int_and_str_and_int()
	#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").
	#Create a function called my_result_and_str() that returns the result of my_result and str_to_int(""{a1}"").
	#Create a function called my_result_and_str_and_int() that returns the result of my_result and str_to_int_and_str(""{a1}"").
	#Create a function called my_result_and_str_and_int() that returns the result of my_result and str_to_int_and_str_and_int(""{a1}"").
	#Create a function called my_
	#Print the list.
	#Print the result of my_result_and_str().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int","def drunken_python(a1):
	#Python got drunk and the built-in functions str() and int() are acting odd:
	#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".
	#Create a function called str_to_int() that converts strings into integers. E.g., str_to_int(""4"") = 4.
	#Create a function called int_to_str_and_int() that converts integers into strings and integers. E.g., int_to_str_and_int(4) = ""4"" and 4.
	#Create a function called str_to_int_and_str() that converts strings into integers and strings. E.g., str_to_int_and_str(""4"") = 4
	#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.
	#Create a function called str_to_int_and_str() that converts strings into integers and strings. E.g., str_to_int_and_str(""4"") = 4
	#Create a function called str_to_int_and_str_and_int() that converts strings into integers, strings, and integers. E.g., str_to_int_and_str_and_int(""4"") = 4 and ""4"" and 4.
	#Create a function called str_to_int_and_str_and_int()
	#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").
	#Create a function called my_result_and_str() that returns the result of my_result and str_to_int(""{a1}"").
	#Create a function called my_result_and_str_and_int() that returns the result of my_result and str_to_int_and_str(""{a1}"").
	#Create a function called my_result_and_str_and_int() that returns the result of my_result and str_to_int_and_str_and_int(""{a1}"").
	#Create a function called my_
	#Print the list.
	#Print the result of my_result_and_str().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
	#Print the result of my_result_and_str_and_int().
"
17,17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","def morse_code(a1):
	#Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..','':'', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', ""'"": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '""': '.-..-.', '?': '..--..', '/': '-..-.']
	chars_to_dots = {'A':'.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W':
	#Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.
	'....', '.....', '---', '----', '---', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '
	#Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '&', ""'"", '@', ')','(', ':', ',', '=', '!', '.', '-', '+', '""
	#Encode '{a1}' to morse code and assign the result to'morse_code'.
	morse_code = ''
	for i in a1:
		if i in chars_to_dots:
			morse_code += chars_to_dots[i]
		else:
			morse_code += i
	#Decode the variable named'morse_code' to a string named 'decoded_text'.
	decoded_text = ''
	for i in morse_code:
		if i in chars_to_dots:
			decoded_text += chars_to_dots[i]
		else:
			decoded_text += i
	#Print the variable named 'decoded_text'.
	return decoded_text","def morse_code(a1):
	#Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..','':'', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', ""'"": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '""': '.-..-.', '?': '..--..', '/': '-..-.']
	chars_to_dots = {'A':'.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W':
	#Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.
	'....', '.....', '---', '----', '---', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '----', '
	#Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '&', ""'"", '@', ')','(', ':', ',', '=', '!', '.', '-', '+', '""
	#Encode '{a1}' to morse code and assign the result to'morse_code'.
	morse_code = ''
	for i in a1:
		if i in chars_to_dots:
			morse_code += chars_to_dots[i]
		else:
			morse_code += i
	#Decode the variable named'morse_code' to a string named 'decoded_text'.
	decoded_text = ''
	for i in morse_code:
		if i in chars_to_dots:
			decoded_text += chars_to_dots[i]
		else:
			decoded_text += i
	#Print the variable named 'decoded_text'.
"
18,18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","def two-sum(a1,a2):
	#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.
	target = a2
	a = []
	#Iterate through the list of integers.
	for i in range(len(a1)):
		#Iterate through the list of integers.
		for j in range(len(a1)):
			#If the current value of {a1} is equal to the current value of {a2} and the current value of {a1} is not equal to the current value of {a2}, add the current value of {a1} to the list of integers.
			if a1[i] + a1[j]
	#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.
	#Return a list of two integers.
	#Run the function and print out the result.
	return a","def two-sum(a1,a2):
	#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.
	target = a2
	a = []
	#Iterate through the list of integers.
	for i in range(len(a1)):
		#Iterate through the list of integers.
		for j in range(len(a1)):
			#If the current value of {a1} is equal to the current value of {a2} and the current value of {a1} is not equal to the current value of {a2}, add the current value of {a1} to the list of integers.
			if a1[i] + a1[j]
	#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.
	#Return a list of two integers.
	#Run the function and print out the result.
"
19,19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","def k-means(a1):
	#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).
	#The function should return a list of n points, where each point is a tuple (x, y).
	#The points should be distributed according to the bivariate normal distribution.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the
	#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points2 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at ({a1}, {
	#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points2 centered
	#Concatenate these data points.
	#Call the function to sample 100 points named points2 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at ({a1}, {
	#Implement the k-means clustering algorithm with n iterations and the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return
	#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return
	#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return","def k-means(a1):
	#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).
	#The function should return a list of n points, where each point is a tuple (x, y).
	#The points should be distributed according to the bivariate normal distribution.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the number of iterations needed to converge.
	#The function should return the
	#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points2 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at ({a1}, {
	#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at (-{a1}, -{a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points2 centered
	#Concatenate these data points.
	#Call the function to sample 100 points named points2 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points3 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points4 centered at ({a1}, {a1}) with standard deviation (1, 1).
	#Call the function to sample 100 points named points5 centered at ({a1}, {
	#Implement the k-means clustering algorithm with n iterations and the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return
	#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return
	#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
	#Return the centroids as return value.
"
20,20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","def even_odd_sum(numbers):
	#Define a list of integers named ""elements"" with values {numbers}.
	elements = [numbers]
	#Define a list named ""even_numbers"" with values {[]}.
	even_numbers = []
	#Define a list named ""odd_numbers"" with values {[]}.
	odd_numbers = []
	#Define a variable named ""even_sum"" with value 0.
	even_sum = 0
	#Define a variable named ""odd_sum"" with value 0.
	odd_sum = 0
	#Loop through the list of integers named ""elements"" and add the values of each element to the corresponding
	#Calculate the sum of the even numbers of the list and store the result to variable ""even"".
	for element in elements:
		for number in element:
			if number % 2 == 0:
				even_sum += number
	#Loop through the list of integers named ""elements"" and add the values of each element to the corresponding
	#Calculate the sum of the odd numbers of the list and store the result to variable ""odd"".
	for element in elements:
		for number in element:
			if number % 2 == 1:
				odd_sum += number
	#Return the sum of the even numbers and the sum of the odd numbers.
	#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".
	#Create a list named ""my_result"" containing the variables even and odd.
	my_result = [even_sum, odd_sum]
	#Return the list named ""my_result"".
	#Print the list.
	return my_result","def even_odd_sum(numbers):
	#Define a list of integers named ""elements"" with values {numbers}.
	elements = [numbers]
	#Define a list named ""even_numbers"" with values {[]}.
	even_numbers = []
	#Define a list named ""odd_numbers"" with values {[]}.
	odd_numbers = []
	#Define a variable named ""even_sum"" with value 0.
	even_sum = 0
	#Define a variable named ""odd_sum"" with value 0.
	odd_sum = 0
	#Loop through the list of integers named ""elements"" and add the values of each element to the corresponding
	#Calculate the sum of the even numbers of the list and store the result to variable ""even"".
	for element in elements:
		for number in element:
			if number % 2 == 0:
				even_sum += number
	#Loop through the list of integers named ""elements"" and add the values of each element to the corresponding
	#Calculate the sum of the odd numbers of the list and store the result to variable ""odd"".
	for element in elements:
		for number in element:
			if number % 2 == 1:
				odd_sum += number
	#Return the sum of the even numbers and the sum of the odd numbers.
	#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".
	#Create a list named ""my_result"" containing the variables even and odd.
	my_result = [even_sum, odd_sum]
	#Return the list named ""my_result"".
	#Print the list.
"
21,21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","def shift_zeros(lst):
	#Define a list named ""elements"" with the values {lst}.
	elements = lst
	#Define a list named ""zeros"" with the values {0}.
	zeros = [0] * len(lst)
	#Define a list named ""new_list"" with the values {zeros} and {elements}.
	new_list = zeros + elements
	#Return the new list.
	#Count the number of zeros in variable elements and store the value into variable ""zero_count"".
	zero_count = 0
	for i in range(len(elements)):
		if elements[i] == 0:
			zero_count += 1
	#Return the new list.
	#If zero_count is greater than 1, then the list {new_list} is returned.
	if zero_count > 1:
	#Otherwise, return the list {lst}.
	else:
	#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".
		non_zero = []
		for i in range(len(new_list)):
			if new_list[i]!= 0:
				non_zero.append(new_list[i])
		#Return the new list.
	#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".
		result = non_zero + [0] * zero_count","def shift_zeros(lst):
	#Define a list named ""elements"" with the values {lst}.
	elements = lst
	#Define a list named ""zeros"" with the values {0}.
	zeros = [0] * len(lst)
	#Define a list named ""new_list"" with the values {zeros} and {elements}.
	new_list = zeros + elements
	#Return the new list.
	#Count the number of zeros in variable elements and store the value into variable ""zero_count"".
	zero_count = 0
	for i in range(len(elements)):
		if elements[i] == 0:
			zero_count += 1
	#Return the new list.
	#If zero_count is greater than 1, then the list {new_list} is returned.
	if zero_count > 1:
	#Otherwise, return the list {lst}.
	else:
	#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".
		non_zero = []
		for i in range(len(new_list)):
			if new_list[i]!= 0:
				non_zero.append(new_list[i])
		#Return the new list.
	#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".
"
22,22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","def bootstrap_95%_ci(array,n):
	#Import numpy and initialize a numpy array named X with values {array}.
	import numpy as np
	X = np.array(array)
	#Initialize a numpy array named Y with values {n}.
	Y = np.array(n)
	#Initialize a numpy array named Z with values {0}.
	Z = np.array(0)
	#Initialize a numpy array named W with values {0}.
	W = np.array(0)
	#Initialize a numpy array named Q with values {0}.
	Q = np.array(0)
	#Initialize a numpy array named R with values {0}.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples without replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples without replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_without_replacement"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_with_replacement"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_with_replacement_95%"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_without_replacement_95%"".
	#Call
	#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".
	#Calculate the standard deviation of each element in variable ""sample"" and store the result to ""std"".
	#Calculate the mean of each element in variable ""sample_without_replacement"" and store the result to ""mean_without_replacement"".
	#Calculate the standard deviation of each element in variable ""sample_without_replacement"" and store the result to ""std_without_replacement"".
	#Calculate the mean of each element in variable ""sample_with_replacement"" and store the result to ""mean_with_replacement"".
	#Calculate the standard deviation of each element in variable ""sample
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_without_replacement"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_with_replacement"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_with_replacement_95%"".
	#Compute the 2.5 and 97.5 percentile
	#Print the variable ""percentile"".
	#Print the variable ""percentile_without_replacement"".
	#Print the variable ""percentile_with_replacement"".
	#Print the variable ""percentile_with_replacement_95%"".
	#Return the variable ""percentile"" and the variable ""percentile_without_replacement"" and the variable ""percentile_with_replacement"" and the variable ""percentile_with_replacement_95%"".
	#Return the variable ""percentile"" and the variable ""percentile_without_replacement"" and the variable ""percentile_with_replacement"" and the variable ""percentile_with_replacement_95%","def bootstrap_95%_ci(array,n):
	#Import numpy and initialize a numpy array named X with values {array}.
	import numpy as np
	X = np.array(array)
	#Initialize a numpy array named Y with values {n}.
	Y = np.array(n)
	#Initialize a numpy array named Z with values {0}.
	Z = np.array(0)
	#Initialize a numpy array named W with values {0}.
	W = np.array(0)
	#Initialize a numpy array named Q with values {0}.
	Q = np.array(0)
	#Initialize a numpy array named R with values {0}.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples without replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples without replacement from the input.
	#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.
	#Write a function that can take a numpy array and return an array
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_without_replacement"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_with_replacement"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_with_replacement_95%"".
	#Call the function {n} times and stack the arrays into a new 2d array named ""samples_without_replacement_95%"".
	#Call
	#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".
	#Calculate the standard deviation of each element in variable ""sample"" and store the result to ""std"".
	#Calculate the mean of each element in variable ""sample_without_replacement"" and store the result to ""mean_without_replacement"".
	#Calculate the standard deviation of each element in variable ""sample_without_replacement"" and store the result to ""std_without_replacement"".
	#Calculate the mean of each element in variable ""sample_with_replacement"" and store the result to ""mean_with_replacement"".
	#Calculate the standard deviation of each element in variable ""sample
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_without_replacement"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_with_replacement"".
	#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile_with_replacement_95%"".
	#Compute the 2.5 and 97.5 percentile
	#Print the variable ""percentile"".
	#Print the variable ""percentile_without_replacement"".
	#Print the variable ""percentile_with_replacement"".
	#Print the variable ""percentile_with_replacement_95%"".
	#Return the variable ""percentile"" and the variable ""percentile_without_replacement"" and the variable ""percentile_with_replacement"" and the variable ""percentile_with_replacement_95%"".
"
23,23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","def sum_even_digits(a,b):
	#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".
	#Return the sum of the even single digits.
	#Note:
	#The input numbers will be in the range [1, 10000].
	#The output will be in the range [1, 10000].
	#Example 1:
	#Input: a = 2, b = 5
	#Output: 7
	#Explanation: 2 + 4 + 6 = 7.
	#Example 2:
	#Input: a = 2, b = 2
	#Output
	#Assign the sum of the even digits to the variable ""result"".
	#Example 3:
	#Input: a = 12345, b = 12345
	#Output: 12345
	#Explanation: 12345 = 2 + 3 + 4 + 5 = 12345.
	#Example 4:
	#Input: a = 12345, b = 12346
	#Output: 12345
	#Explanation: 12345 = 2 + 3
	#Print the resulting number as integer.
	#Example 5:
	#Input: a = 12345, b = 123467
	#Output: 12345
	#Explanation: 12345 = 2 + 3 + 4 + 5 + 6 + 7 = 12345.
	#Example 6:
	#Input: a = 12345, b = 123456
	#Output: 12345
	#Explanation: 123","def sum_even_digits(a,b):
	#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".
	#Return the sum of the even single digits.
	#Note:
	#The input numbers will be in the range [1, 10000].
	#The output will be in the range [1, 10000].
	#Example 1:
	#Input: a = 2, b = 5
	#Output: 7
	#Explanation: 2 + 4 + 6 = 7.
	#Example 2:
	#Input: a = 2, b = 2
	#Output
	#Assign the sum of the even digits to the variable ""result"".
	#Example 3:
	#Input: a = 12345, b = 12345
	#Output: 12345
	#Explanation: 12345 = 2 + 3 + 4 + 5 = 12345.
	#Example 4:
	#Input: a = 12345, b = 12346
	#Output: 12345
	#Explanation: 12345 = 2 + 3
	#Print the resulting number as integer.
	#Example 5:
	#Input: a = 12345, b = 123467
	#Output: 12345
	#Explanation: 12345 = 2 + 3 + 4 + 5 + 6 + 7 = 12345.
	#Example 6:
	#Input: a = 12345, b = 123456
	#Output: 12345
"
24,24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","def min-max_diff(A):
	#Find the maximum element in the list {A} and assign it to variable ""my_max"".
	my_max = max(A)
	#Find the minimum element in the list {A} and assign it to variable ""my_min"".
	my_min = min(A)
	#Find the difference between the maximum and minimum element in the list {A} and assign it to variable ""diff"".
	diff = my_max - my_min
	#Return the difference between the maximum and minimum element in the list {A}.
	#Find the minimum element in the same list.
	#Compute the different between ""my_max"" and the minimum element.
	#Return the difference between ""my_max"" and the minimum element.
	#Print the difference between ""my_max"" and the minimum element.
	return diff","def min-max_diff(A):
	#Find the maximum element in the list {A} and assign it to variable ""my_max"".
	my_max = max(A)
	#Find the minimum element in the list {A} and assign it to variable ""my_min"".
	my_min = min(A)
	#Find the difference between the maximum and minimum element in the list {A} and assign it to variable ""diff"".
	diff = my_max - my_min
	#Return the difference between the maximum and minimum element in the list {A}.
	#Find the minimum element in the same list.
	#Compute the different between ""my_max"" and the minimum element.
	#Return the difference between ""my_max"" and the minimum element.
	#Print the difference between ""my_max"" and the minimum element.
"
25,25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","def distinct_chars(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Create a variable named ""distinct_chars"" and initialize it to an empty list.
	distinct_chars = []
	#For each character in the string ""{A}""...
	for char in my_string:
		#If the character is not already in the list ""{distinct_chars}""...
		if char not in distinct_chars:
			#Add the character to the list ""{distinct_chars}"".
			distinct_chars.append(char)
	#Return the list ""{distinct_chars}"".
	#Lowercase the given string ""my_string"".
	#Assign the distinct characters of the string to a variable named ""chars"".
	chars = my_string.lower()
	#Return the list ""{chars}"".
	#Sort these characters in alphabetical order.
	chars.sort()
	#Return the list ""{chars}"".
	#Print the resulting list of characters.
	return chars","def distinct_chars(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Create a variable named ""distinct_chars"" and initialize it to an empty list.
	distinct_chars = []
	#For each character in the string ""{A}""...
	for char in my_string:
		#If the character is not already in the list ""{distinct_chars}""...
		if char not in distinct_chars:
			#Add the character to the list ""{distinct_chars}"".
			distinct_chars.append(char)
	#Return the list ""{distinct_chars}"".
	#Lowercase the given string ""my_string"".
	#Assign the distinct characters of the string to a variable named ""chars"".
	chars = my_string.lower()
	#Return the list ""{chars}"".
	#Sort these characters in alphabetical order.
	chars.sort()
	#Return the list ""{chars}"".
	#Print the resulting list of characters.
"
26,26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","def longer_string(A,B):
	#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.
	a = A
	b = B
	#Create a variable ""c"" for the string ""{a}{b}"".
	c = a + b
	#Print the string ""{c}"".
	#Define a function ""len_str"" that returns the length of a string.
	def len_str(str):
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Assign the length of each string to a seperate variable.
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
	#Print the length of the string ""{a}{b}{c}{d}{e
	#Assign the longer string to the variable ""result"".
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}{g}"".
	#Print the resulting string.
		result = len(str)
		return result
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
	#Print the length of the string ""{a}{b}{","def longer_string(A,B):
	#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.
	a = A
	b = B
	#Create a variable ""c"" for the string ""{a}{b}"".
	c = a + b
	#Print the string ""{c}"".
	#Define a function ""len_str"" that returns the length of a string.
	def len_str(str):
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Assign the length of each string to a seperate variable.
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
	#Print the length of the string ""{a}{b}{c}{d}{e
	#Assign the longer string to the variable ""result"".
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}{g}"".
	#Print the resulting string.
		result = len(str)
		return result
	#Print the length of the string ""{c}"".
	#Print the length of the string ""{a}{b}"".
	#Print the length of the string ""{a}{b}{c}"".
	#Print the length of the string ""{a}{b}{c}{d}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}"".
	#Print the length of the string ""{a}{b}{c}{d}{e}{f}"".
"
27,27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","def sum_float_digits(A):
	#Assign the positive floating point number {A} to a variable ""f"".
	f = A
	#Assign the negative floating point number {A} to a variable ""f"".
	f = -A
	#Assign the integer part of the floating point number {A} to a variable ""f"".
	f = int(f)
	#Assign the fractional part of the floating point number {A} to a variable ""f"".
	f = float(f)
	#Return the sum of the positive and negative floating point numbers {A} and {f}.
	#Compute the integer part of the number as variable ""a"".
	a = f
	#Compute the fractional part of the number as variable ""b"".
	b = f - int(f)
	#Return the sum of the integer part of {a} and {b}.
	#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".
	b = int(b)
	#Return the sum of the integer part of {a} and {b}.
	#Add them together and print the result.
	return a + b","def sum_float_digits(A):
	#Assign the positive floating point number {A} to a variable ""f"".
	f = A
	#Assign the negative floating point number {A} to a variable ""f"".
	f = -A
	#Assign the integer part of the floating point number {A} to a variable ""f"".
	f = int(f)
	#Assign the fractional part of the floating point number {A} to a variable ""f"".
	f = float(f)
	#Return the sum of the positive and negative floating point numbers {A} and {f}.
	#Compute the integer part of the number as variable ""a"".
	a = f
	#Compute the fractional part of the number as variable ""b"".
	b = f - int(f)
	#Return the sum of the integer part of {a} and {b}.
	#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".
	b = int(b)
	#Return the sum of the integer part of {a} and {b}.
	#Add them together and print the result.
"
28,28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","def count_vowels(s):
	#Assign the string value {s} to a variable ""my_string"".
	my_string = s
	#Assign the variable ""vowels"" to a variable ""vowels_count"".
	vowels_count = 0
	#Assign the variable ""consonants_count"" to a variable ""consonants_count"".
	consonants_count = 0
	#Assign the variable ""other_count"" to a variable ""other_count"".
	other_count = 0
	#Assign the variable ""vowels_count"" to a variable ""vowels_count"".
	for i in my_string:
		if
	#Lowercase the defined string.
	my_string = my_string.lower()
	#Assign the variable ""vowels"" to a variable ""vowels_count"".
	vowels_count = my_string.count('a')
	#Assign the variable ""consonants_count"" to a variable ""consonants_count"".
	consonants_count = my_string.count('b')
	#Assign the variable ""other_count"" to a variable ""other_count"".
	other_count = my_string.count('c')
	#Return the variable ""vowels_
	#Count the number of vowels in the string.
	#Print out the number of vowels.
	#Return the variable ""consonants_count
	#Count the number of consonants in the string.
	#Print out the number of consonants.
	#Return the variable ""other_count
	#Count the number of other characters in the string.
	#Print out the number of other characters.
	return vowels_count
	return consonants_count
	return other_count","def count_vowels(s):
	#Assign the string value {s} to a variable ""my_string"".
	my_string = s
	#Assign the variable ""vowels"" to a variable ""vowels_count"".
	vowels_count = 0
	#Assign the variable ""consonants_count"" to a variable ""consonants_count"".
	consonants_count = 0
	#Assign the variable ""other_count"" to a variable ""other_count"".
	other_count = 0
	#Assign the variable ""vowels_count"" to a variable ""vowels_count"".
	for i in my_string:
		if
	#Lowercase the defined string.
	my_string = my_string.lower()
	#Assign the variable ""vowels"" to a variable ""vowels_count"".
	vowels_count = my_string.count('a')
	#Assign the variable ""consonants_count"" to a variable ""consonants_count"".
	consonants_count = my_string.count('b')
	#Assign the variable ""other_count"" to a variable ""other_count"".
	other_count = my_string.count('c')
	#Return the variable ""vowels_
	#Count the number of vowels in the string.
	#Print out the number of vowels.
	#Return the variable ""consonants_count
	#Count the number of consonants in the string.
	#Print out the number of consonants.
	#Return the variable ""other_count
	#Count the number of other characters in the string.
	#Print out the number of other characters.
	return vowels_count
	return consonants_count
"
29,29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","def factorial(n):
	#Assign the positive integer {n} to a variable ""f"".
	f = 1
	#If {n} is 0 or 1, return 1.
	if n == 0 or n == 1:
	#Otherwise, calculate the factorial of {n}.
	else:
		for i in range(2, n + 1):
			f *= i
	#Create a list from 1 to ""f"" (inclusive).
	l = [i for i in range(1, f + 1)]
	#Return the list.
	#Create and initialize a variable named ""factorial"".
	#Compute the product of all the values in the list and assign the product to ""factorial"".
	#Print out the variable ""factorial"".
	return f","def factorial(n):
	#Assign the positive integer {n} to a variable ""f"".
	f = 1
	#If {n} is 0 or 1, return 1.
	if n == 0 or n == 1:
	#Otherwise, calculate the factorial of {n}.
	else:
		for i in range(2, n + 1):
			f *= i
	#Create a list from 1 to ""f"" (inclusive).
	l = [i for i in range(1, f + 1)]
	#Return the list.
	#Create and initialize a variable named ""factorial"".
	#Compute the product of all the values in the list and assign the product to ""factorial"".
	#Print out the variable ""factorial"".
"
30,30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","def max_edge_triangle(a,b):
	#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".
	two_edges = a + b
	#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".
	maximum_edge = two_edges - 1
	#Return the maximum length of the triangle.
	#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".
	minimum_edge = two_edges - 2
	#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".
	my_tuple = (maximum_edge,minimum_edge)
	#Print the variable ""my_tuple"".
	return my_tuple","def max_edge_triangle(a,b):
	#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".
	two_edges = a + b
	#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".
	maximum_edge = two_edges - 1
	#Return the maximum length of the triangle.
	#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".
	minimum_edge = two_edges - 2
	#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".
	my_tuple = (maximum_edge,minimum_edge)
	#Print the variable ""my_tuple"".
"
31,31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","def factorial_and_remainder(n):
	#Compute factorial and remainder
	fact = 1
	rem = 0
	while n > 0:
		fact *= n
		rem += n
		n -= 1
	#Implement a function to compute the remainder when dividing a number by 10
	#Print out the remainder when dividing the factorial of {n} by 10
	return fact % 10, rem % 10","def factorial_and_remainder(n):
	#Compute factorial and remainder
	fact = 1
	rem = 0
	while n > 0:
		fact *= n
		rem += n
		n -= 1
	#Implement a function to compute the remainder when dividing a number by 10
	#Print out the remainder when dividing the factorial of {n} by 10
"
32,32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","def sum_polygon_angles(n):
	#Given a positive integer {n} and create a variable named ""n"" with this value.
	#Create a variable named ""sum"" with this value.
	#Create a variable named ""i"" with this value.
	#Create a variable named ""j"" with this value.
	#Create a variable named ""k"" with this value.
	#Create a variable named ""l"" with this value.
	#Create a variable named ""m"" with this value.
	#Create a variable named ""n"" with this value.
	#Create a variable named ""sum"" with this value.
	#Create a variable named ""sum"" with this value.
	#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides.
	#Return the sum of the internal angles in degrees of the regular-polygon with ""n"" sides.
	sum = 0
	i = 0
	j = 1
	k = 2
	l = 3
	m = 4
	n = n
	while i <= n:
		sum = sum + (360 / n) * (j + k + l + m)
		i = i + 1
		j = j + 1
		k = k + 1
		l = l + 1
	#Convert the angle from degrees to radians.
	sum = sum * (pi / 180)
	#Return the sum of the internal angles in degrees of the regular-polygon with ""n"" sides.
	#Round the angle to have two decimal digits.
	#Print out the angle in degrees.
	return round(sum, 2)","def sum_polygon_angles(n):
	#Given a positive integer {n} and create a variable named ""n"" with this value.
	#Create a variable named ""sum"" with this value.
	#Create a variable named ""i"" with this value.
	#Create a variable named ""j"" with this value.
	#Create a variable named ""k"" with this value.
	#Create a variable named ""l"" with this value.
	#Create a variable named ""m"" with this value.
	#Create a variable named ""n"" with this value.
	#Create a variable named ""sum"" with this value.
	#Create a variable named ""sum"" with this value.
	#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides.
	#Return the sum of the internal angles in degrees of the regular-polygon with ""n"" sides.
	sum = 0
	i = 0
	j = 1
	k = 2
	l = 3
	m = 4
	n = n
	while i <= n:
		sum = sum + (360 / n) * (j + k + l + m)
		i = i + 1
		j = j + 1
		k = k + 1
		l = l + 1
	#Convert the angle from degrees to radians.
	sum = sum * (pi / 180)
	#Return the sum of the internal angles in degrees of the regular-polygon with ""n"" sides.
	#Round the angle to have two decimal digits.
	#Print out the angle in degrees.
"
33,33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","def sum_string_numbers(s1,s2):
	#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.
	s1 = s1.split()
	s2 = s2.split()
	#Create a variable named sum to store the sum of the two strings.
	sum = 0
	#Iterate through the two strings {s1} and {s2} and add the values of each to the variable named sum.
	for i in range(len(s1)):
		sum += int(s1[i])
	for i in range(len(s2)):
		sum += int(s2[i])
	#Return the sum of the two
	#Convert s1 and s2 to integers
	#Compute the sum of the two integers and store it as the variable s1 and s2 respectively.
	#Print out the variable s1 and s2.
	return sum
	return s1
	return s2","def sum_string_numbers(s1,s2):
	#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.
	s1 = s1.split()
	s2 = s2.split()
	#Create a variable named sum to store the sum of the two strings.
	sum = 0
	#Iterate through the two strings {s1} and {s2} and add the values of each to the variable named sum.
	for i in range(len(s1)):
		sum += int(s1[i])
	for i in range(len(s2)):
		sum += int(s2[i])
	#Return the sum of the two
	#Convert s1 and s2 to integers
	#Compute the sum of the two integers and store it as the variable s1 and s2 respectively.
	#Print out the variable s1 and s2.
	return sum
	return s1
"
34,34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","def min-max_sum(l):
	#Initialize the variable named lst with an integer list {l}.
	lst = [int(i) for i in l]
	#Initialize the variable named min_sum with an integer.
	min_sum = lst[0]
	#Initialize the variable named max_sum with an integer.
	max_sum = lst[0]
	#Initialize the variable named sum with an integer.
	sum = 0
	#Loop through the list {lst}.
	for i in lst:
		#If the current value of {i} is less than the current value of {min_sum}, then update {min_sum}.
	#Find the maximum of the variable lst and assign it to a variable named ma.
		if i < min_sum:
			min_sum = i
		#If the current value of {i} is greater than the current value of {max_sum}, then update {max_sum}.
	#Find the minimum of the variable lst and assign it to a variable named mi.
		if i > max_sum:
			max_sum = i
		#Add the current value of {i} to the variable {sum}.
		sum += i
	#Return the variable {sum}.
	#Find the minimum of the variable lst and assign to a variable named mi.
	#Find the maximum of the variable lst and assign to a variable named ma.
	#Create a list from mi and ma (inclusive).
	#Print the sum of this list.
	return [min_sum, max_sum, sum]","def min-max_sum(l):
	#Initialize the variable named lst with an integer list {l}.
	lst = [int(i) for i in l]
	#Initialize the variable named min_sum with an integer.
	min_sum = lst[0]
	#Initialize the variable named max_sum with an integer.
	max_sum = lst[0]
	#Initialize the variable named sum with an integer.
	sum = 0
	#Loop through the list {lst}.
	for i in lst:
		#If the current value of {i} is less than the current value of {min_sum}, then update {min_sum}.
	#Find the maximum of the variable lst and assign it to a variable named ma.
		if i < min_sum:
			min_sum = i
		#If the current value of {i} is greater than the current value of {max_sum}, then update {max_sum}.
	#Find the minimum of the variable lst and assign it to a variable named mi.
		if i > max_sum:
			max_sum = i
		#Add the current value of {i} to the variable {sum}.
		sum += i
	#Return the variable {sum}.
	#Find the minimum of the variable lst and assign to a variable named mi.
	#Find the maximum of the variable lst and assign to a variable named ma.
	#Create a list from mi and ma (inclusive).
	#Print the sum of this list.
"
35,35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","def vowel_overlap(s1,s2):
	#Implement a function to return the characters shared between two words.
	#For example, given the string ""hello"" and ""hi"", return ""h"".
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use
	#Implement a function to find the number of vowels in a string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.
	#Return the number of vowels in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#
	#Print the number of vowels in the variable s.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string","def vowel_overlap(s1,s2):
	#Implement a function to return the characters shared between two words.
	#For example, given the string ""hello"" and ""hi"", return ""h"".
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use a set to store the characters in the two strings.
	#Hint: Use a dictionary to store the characters in the two strings.
	#Hint: Use
	#Implement a function to find the number of vowels in a string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.
	#Return the number of vowels in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#
	#Print the number of vowels in the variable s.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
	#Hint: Use a dictionary to store the characters in the string.
	#Hint: Use a set to store the characters in the string.
"
36,36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","def sum_neg(l):
	#Given a list of integers {l}, assign the list to a varialbe named lst1.
	lst1 = []
	for i in l:
		if i < 0:
			lst1.append(i)
	#Find the negative numbers of the list and assign it to a new variable named lst2.
	lst2 = []
	for i in lst1:
		if i < 0:
			lst2.append(i)
	#Return the sum of the negative numbers of the list.
	#Compute the sum of numbers in lst2.
	#Print out the sum of the negative numbers of lst2.
	return sum(lst2)","def sum_neg(l):
	#Given a list of integers {l}, assign the list to a varialbe named lst1.
	lst1 = []
	for i in l:
		if i < 0:
			lst1.append(i)
	#Find the negative numbers of the list and assign it to a new variable named lst2.
	lst2 = []
	for i in lst1:
		if i < 0:
			lst2.append(i)
	#Return the sum of the negative numbers of the list.
	#Compute the sum of numbers in lst2.
	#Print out the sum of the negative numbers of lst2.
"
37,37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","def load_dataset(a1):
	#Import the pandas library.
	import pandas as pd
	#Import the dataset.
	dataset = pd.read_csv(a1)
	#Return the dataset.
	#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".
	#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".
	#Return the variable ""my_counts"".
	my_counts = dataset.groupby('gender').count()['age']
	#Return the variable ""my_counts"".
	#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".
	plain_list = my_counts.values
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to a new variable named ""plain_keys"".
	plain_keys = my_counts.keys()
	#Return the variable ""plain_keys"".
	#Assign the attribute ""items"" of this variable and to a new variable named ""plain_items"".
	plain_items = my_counts.items()
	#Return the variable ""plain_items"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the maximum element of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the minimum element of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the mean of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of
	return max(plain_list)
	return min(plain_list)
	return sum(plain_list)/len(plain_list)","def load_dataset(a1):
	#Import the pandas library.
	import pandas as pd
	#Import the dataset.
	dataset = pd.read_csv(a1)
	#Return the dataset.
	#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".
	#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".
	#Return the variable ""my_counts"".
	my_counts = dataset.groupby('gender').count()['age']
	#Return the variable ""my_counts"".
	#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".
	plain_list = my_counts.values
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to a new variable named ""plain_keys"".
	plain_keys = my_counts.keys()
	#Return the variable ""plain_keys"".
	#Assign the attribute ""items"" of this variable and to a new variable named ""plain_items"".
	plain_items = my_counts.items()
	#Return the variable ""plain_items"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the maximum element of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the minimum element of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of this variable and to
	#Print the mean of this list.
	#Return the variable ""plain_list"".
	#Assign the attribute ""keys"" of
	return max(plain_list)
	return min(plain_list)
"
38,38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","def char_length_list(s):
	#Define a string named's' with the value '{s}'.
	#Define a list named 'l' with the value ['{l}'].
	#Define a variable named 'length' with the value 0.
	#For each character in the string s,
	#If the character is a letter,
	#Add 1 to the length variable.
	#If the character is a digit,
	#Add 1 to the length variable.
	#If the character is a space,
	#Add 1 to the length variable.
	#If the character is a punctuation mark,
	#Add 1 to the length
	#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'
	#For each match in the regular expression,
	#If the match is not the last character in the string,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello
	#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'
	#For each match in the regular expression,
	#If the match is not the last character in the string,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello
	#Split the string's2' into a list of words with a space and store the result to variable 'words'
	#For each word in the list 'words',
	#If the word is not the last word in the list,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is '
	#Print a list of integers consisting of the length of each word in 'words'
	#For each word in the list 'words',
	#If the word is not the last word in the list,
	#Print the length of the word
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello,","def char_length_list(s):
	#Define a string named's' with the value '{s}'.
	#Define a list named 'l' with the value ['{l}'].
	#Define a variable named 'length' with the value 0.
	#For each character in the string s,
	#If the character is a letter,
	#Add 1 to the length variable.
	#If the character is a digit,
	#Add 1 to the length variable.
	#If the character is a space,
	#Add 1 to the length variable.
	#If the character is a punctuation mark,
	#Add 1 to the length
	#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'
	#For each match in the regular expression,
	#If the match is not the last character in the string,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello
	#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'
	#For each match in the regular expression,
	#If the match is not the last character in the string,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello
	#Split the string's2' into a list of words with a space and store the result to variable 'words'
	#For each word in the list 'words',
	#If the word is not the last word in the list,
	#Add 1 to the length variable.
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is '
	#Print a list of integers consisting of the length of each word in 'words'
	#For each word in the list 'words',
	#If the word is not the last word in the list,
	#Print the length of the word
	#Return the length variable.
	#For example,
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
	#If s is 'Hello, World!',
	#Then the output should be 10.
"
39,39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","def hex_to_rgb(s):
	#Create a variable named's' with the value '{s}'.
	s = s.lstrip('#')
	#Split the string into a list of characters.
	s = [int(s[i:i+2], 16) for i in range(0, len(s), 2)]
	#Return the list of characters as a tuple.
	#Lowercase the variable's' and store the result to variable's2'.
	s2 = tuple(s)
	#Return the tuple as a string.
	#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.
	pattern3 = re.compile('^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$')
	#Return the compiled regular expression as a string.
	#Lowercase the variable's2' and store the result to variable's3'.
	s3 = pattern3.match(s2).group(1, 2, 3)
	#Return the variable's3' as a tuple.
	#Lowercase the variable's3' and store the result to variable's4'.
	#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.
	pattern6 = re.compile('^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$')
	#Return the compiled regular expression as a string.
	#Lowercase the variable's3' and store the result to variable's5'.
	s5 = pattern6.match(s3).group(1, 2, 3, 4, 5)
	#Return the variable's
	#Print True if the variable's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
	return s2 == s3 or s2 == s5","def hex_to_rgb(s):
	#Create a variable named's' with the value '{s}'.
	s = s.lstrip('#')
	#Split the string into a list of characters.
	s = [int(s[i:i+2], 16) for i in range(0, len(s), 2)]
	#Return the list of characters as a tuple.
	#Lowercase the variable's' and store the result to variable's2'.
	s2 = tuple(s)
	#Return the tuple as a string.
	#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.
	pattern3 = re.compile('^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$')
	#Return the compiled regular expression as a string.
	#Lowercase the variable's2' and store the result to variable's3'.
	s3 = pattern3.match(s2).group(1, 2, 3)
	#Return the variable's3' as a tuple.
	#Lowercase the variable's3' and store the result to variable's4'.
	#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.
	pattern6 = re.compile('^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$')
	#Return the compiled regular expression as a string.
	#Lowercase the variable's3' and store the result to variable's5'.
	s5 = pattern6.match(s3).group(1, 2, 3, 4, 5)
	#Return the variable's
	#Print True if the variable's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
"
40,40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","def majority_vote(lst):
	#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.
	count_values = {}
	for i in lst:
		if i in count_values:
			count_values[i] += 1
		else:
			count_values[i] = 1
	#Create a function called'most_common' that takes a hash map of the number of times each integer appears in the list and returns the key with the highest value.
	most_common = max(count_values, key=count_values.get)
	#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.
	counts = count_values[most_common]
	#Return the value of'most_common' from the function'most_common'.
	#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
	return most_common if counts > len(lst) / 2 else None","def majority_vote(lst):
	#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.
	count_values = {}
	for i in lst:
		if i in count_values:
			count_values[i] += 1
		else:
			count_values[i] = 1
	#Create a function called'most_common' that takes a hash map of the number of times each integer appears in the list and returns the key with the highest value.
	most_common = max(count_values, key=count_values.get)
	#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.
	counts = count_values[most_common]
	#Return the value of'most_common' from the function'most_common'.
	#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
"
41,41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","def week_later(year,month,day):
	#Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).
	today = datetime.datetime(year,month,day)
	#Add one week to the date and return the date.
	#Add 7 days to the variable 'today' and store the result to variable 'week'.
	week = today + datetime.timedelta(days=7)
	#Print 'week' in the format '%m/%d/%Y'.
	return week.strftime('%m/%d/%Y')","def week_later(year,month,day):
	#Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).
	today = datetime.datetime(year,month,day)
	#Add one week to the date and return the date.
	#Add 7 days to the variable 'today' and store the result to variable 'week'.
	week = today + datetime.timedelta(days=7)
	#Print 'week' in the format '%m/%d/%Y'.
"
42,42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","def sorted_word_weights(words):
	#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.
	#The function should return a list of tuples, where each tuple contains the word and its weight.
	#The tuples should be sorted by the second element in the tuple.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#The tuples should be in ascending order of weight.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.
	#Return the value of the variable 'weights'.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise '","def sorted_word_weights(words):
	#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.
	#The function should return a list of tuples, where each tuple contains the word and its weight.
	#The tuples should be sorted by the second element in the tuple.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#The tuples should be in ascending order of weight.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#The tuples should be in alphabetical order.
	#The tuples should be in descending order of weight.
	#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.
	#Return the value of the variable 'weights'.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint: Use the built-in sorted() function.
	#Hint
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
	#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
"
43,43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","def create_palindrome(n):
	#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.
	#If the integer is a palindrome, return True. If the integer is not a palindrome, return False.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer
	#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.
	#If the integer is a palindrome, return the result of the function. If the integer is not a palindrome, return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#
	#Define an integer variable named 'base' with the value {n}.
	#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.
	#If the integer is a palindrome, return True. If the integer is not a palindrome, return False.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if
	#While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.
	#Return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the","def create_palindrome(n):
	#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.
	#If the integer is a palindrome, return True. If the integer is not a palindrome, return False.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer
	#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.
	#If the integer is a palindrome, return the result of the function. If the integer is not a palindrome, return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#
	#Define an integer variable named 'base' with the value {n}.
	#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.
	#If the integer is a palindrome, return True. If the integer is not a palindrome, return False.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.
	#The function should return True if
	#While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.
	#Return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
	#The function should return the result of the function.
"
44,44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","def simulate_backspace(input):
	#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.
	input = '{' + input + '}'
	stack = []
	#Loop through the input string, and add each character to the stack.
	for char in input:
		if char == '{':
			stack.append(char)
		elif char == '}':
			if len(stack) > 0:
				stack.pop()
			else:
	#If the stack is empty, then the input string is valid.
	if len(stack) == 0:
	else:
	#Iterating over variable 'input', if the current character is '@' and'stack' is not empty, pop the last element from'stack', otherwise append the character to'stack'.
		if input[input.index('@') + 1] == '@' and len(stack) > 0:
			stack.pop()
		else:
			stack.append(input[input.index('@') + 1])
	#Return the stack.
	#Print the joined string from'stack'.
	return ''.join(stack)","def simulate_backspace(input):
	#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.
	input = '{' + input + '}'
	stack = []
	#Loop through the input string, and add each character to the stack.
	for char in input:
		if char == '{':
			stack.append(char)
		elif char == '}':
			if len(stack) > 0:
				stack.pop()
			else:
	#If the stack is empty, then the input string is valid.
	if len(stack) == 0:
	else:
	#Iterating over variable 'input', if the current character is '@' and'stack' is not empty, pop the last element from'stack', otherwise append the character to'stack'.
		if input[input.index('@') + 1] == '@' and len(stack) > 0:
			stack.pop()
		else:
			stack.append(input[input.index('@') + 1])
	#Return the stack.
	#Print the joined string from'stack'.
"
45,45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","def pandas_df_manipulation(a1,a2):
	#Import the pandas library.
	import pandas as pd
	#Create a dataframe from the two lists.
	df = pd.DataFrame({'a1':a1,'a2':a2})
	#Print the dataframe.
	#Return the dataframe.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random_state=0)
	#Return the training and testing sets.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model
	#Assign the attribute ""Price"" to the target variable ""y"".
	y = df['Price']
	#Return the target variable.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random_state=0)
	#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".
	melb_predictors = df.drop(['Price'], axis=1)
	#Return the melb_predictors.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test
	#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".
	X = melb_predictors.select_dtypes(include=['object'])
	#Return the X.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0
	#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.
	#Return the x_train, x_valid, y_train, y_valid.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random
	#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".
	format(sum(X_train.iloc[:,0])/len(X_train), sum(y_train)/len(y_train)))
	#Return the x_train, x_valid, y_train, y_valid.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y","def pandas_df_manipulation(a1,a2):
	#Import the pandas library.
	import pandas as pd
	#Create a dataframe from the two lists.
	df = pd.DataFrame({'a1':a1,'a2':a2})
	#Print the dataframe.
	#Return the dataframe.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random_state=0)
	#Return the training and testing sets.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model
	#Assign the attribute ""Price"" to the target variable ""y"".
	y = df['Price']
	#Return the target variable.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random_state=0)
	#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".
	melb_predictors = df.drop(['Price'], axis=1)
	#Return the melb_predictors.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test
	#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".
	X = melb_predictors.select_dtypes(include=['object'])
	#Return the X.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0
	#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.
	#Return the x_train, x_valid, y_train, y_valid.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
	X_train, X_test, y_train, y_test = train_test_split(df['a1'], df['a2'], test_size=0.2, random
	#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".
	format(sum(X_train.iloc[:,0])/len(X_train), sum(y_train)/len(y_train)))
	#Return the x_train, x_valid, y_train, y_valid.
	#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file './datasets/melb_data.csv'.
	from sklearn.model_selection import train_test_split
	#Split the dataframe into training and testing sets.
"
46,46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","def sum_non-overlap_range(l):
	#Create a variable named lst1 with value {l}
	lst1 = l
	#Create a variable named lst2 with value {lst1}
	lst2 = lst1
	#Create a variable named lst3 with value {lst2}
	lst3 = lst2
	#Create a variable named lst4 with value {lst3}
	lst4 = lst3
	#Create a variable named lst5 with value {lst4}
	lst5 = lst4
	#Create a variable named lst6 with value {lst5}
	lst6 = lst5
	#Create a variable named lst7 with value {
	#Find the minimum and maximum of lst1 and assign them to variables a and b respectively
	a = min(lst1)
	b = max(lst1)
	#Create a variable named lst8 with value {a}
	lst8 = a
	#Create a variable named lst9 with value {b}
	lst9 = b
	#Create a variable named lst10 with value {lst8}
	lst10 = lst8
	#Create a variable named lst11 with value {lst9}
	lst11 = lst9
	#Create a variable named lst12 with value {lst10}
	lst12
	#Create a list from a to b (inclusive) and assign it to variable named lst23
	lst23 = range(lst11, lst12)
	#Create a variable named lst24 with value {lst23}
	lst24 = lst23
	#Create a variable named lst25 with value {lst24}
	lst25 = lst24
	#Create a variable named lst26 with value {lst25}
	lst26 = lst25
	#Create a variable named lst27 with value {lst26}
	lst27 = lst26
	#Create a variable named
	#Find the elements that are in lst2 but not in lst1
	lst28 = list(set(lst27) - set(lst1))
	#Create a variable named lst29 with value {lst28}
	lst29 = lst28
	#Create a variable named lst30 with value {lst29}
	lst30 = lst29
	#Create a variable named lst31 with value {lst30}
	lst31 = lst30
	#Create a variable named lst32 with value {lst31}
	lst32 = lst31
	#Create
	#Print the sum of these elements
	return sum(lst32)","def sum_non-overlap_range(l):
	#Create a variable named lst1 with value {l}
	lst1 = l
	#Create a variable named lst2 with value {lst1}
	lst2 = lst1
	#Create a variable named lst3 with value {lst2}
	lst3 = lst2
	#Create a variable named lst4 with value {lst3}
	lst4 = lst3
	#Create a variable named lst5 with value {lst4}
	lst5 = lst4
	#Create a variable named lst6 with value {lst5}
	lst6 = lst5
	#Create a variable named lst7 with value {
	#Find the minimum and maximum of lst1 and assign them to variables a and b respectively
	a = min(lst1)
	b = max(lst1)
	#Create a variable named lst8 with value {a}
	lst8 = a
	#Create a variable named lst9 with value {b}
	lst9 = b
	#Create a variable named lst10 with value {lst8}
	lst10 = lst8
	#Create a variable named lst11 with value {lst9}
	lst11 = lst9
	#Create a variable named lst12 with value {lst10}
	lst12
	#Create a list from a to b (inclusive) and assign it to variable named lst23
	lst23 = range(lst11, lst12)
	#Create a variable named lst24 with value {lst23}
	lst24 = lst23
	#Create a variable named lst25 with value {lst24}
	lst25 = lst24
	#Create a variable named lst26 with value {lst25}
	lst26 = lst25
	#Create a variable named lst27 with value {lst26}
	lst27 = lst26
	#Create a variable named
	#Find the elements that are in lst2 but not in lst1
	lst28 = list(set(lst27) - set(lst1))
	#Create a variable named lst29 with value {lst28}
	lst29 = lst28
	#Create a variable named lst30 with value {lst29}
	lst30 = lst29
	#Create a variable named lst31 with value {lst30}
	lst31 = lst30
	#Create a variable named lst32 with value {lst31}
	lst32 = lst31
	#Create
	#Print the sum of these elements
"
47,47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","def detect_digits(l):
	#Initialize the variable named lst1 with a list {l}.
	lst1 = [l]
	#Initialize the variable named lst2 with a list {lst1}.
	lst2 = [lst1]
	#Initialize the variable named lst3 with a list {lst2}.
	lst3 = [lst2]
	#Initialize the variable named lst4 with a list {lst3}.
	lst4 = [lst3]
	#Initialize the variable named lst5 with a list {lst4}.
	lst5 = [lst4]
	#Initialize the variable named lst6 with a list {lst5}.
	lst6
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
			if i.isdigit():
				#Create a variable named num_in_str_flag with a boolean value {True}.
				num_in_str_flag = True
				#Create a
	#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2.
	lst2 = [num_in_str(i) for i in lst1]
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
	#Print out lst2.
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
			if i.isdigit():
				#Create a variable named
	return lst2","def detect_digits(l):
	#Initialize the variable named lst1 with a list {l}.
	lst1 = [l]
	#Initialize the variable named lst2 with a list {lst1}.
	lst2 = [lst1]
	#Initialize the variable named lst3 with a list {lst2}.
	lst3 = [lst2]
	#Initialize the variable named lst4 with a list {lst3}.
	lst4 = [lst3]
	#Initialize the variable named lst5 with a list {lst4}.
	lst5 = [lst4]
	#Initialize the variable named lst6 with a list {lst5}.
	lst6
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
			if i.isdigit():
				#Create a variable named num_in_str_flag with a boolean value {True}.
				num_in_str_flag = True
				#Create a
	#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2.
	lst2 = [num_in_str(i) for i in lst1]
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
	#Print out lst2.
	#Create a function called num_in_str() to check whether a string contains a number.
	def num_in_str(s):
		#Create a variable named num_in_str_flag with a boolean value {False}.
		num_in_str_flag = False
		#Create a for loop to iterate through the string {s}.
		for i in s:
			#Create a if statement to check whether the character {i} is a number.
			if i.isdigit():
				#Create a variable named
"
48,48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","def cascading_functions(a1,a2,a3,a4):
	#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.
	def a(x):
	#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.
	def b(x):
	#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.
	def c(x):
	#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.
	def d(x):
	#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.
	def e(x):
	#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.
	def f(x):
	#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.
	def g(x):
	#Define a function ""e"" that multiplies an integer argument by {a2} and returns the result.
	def h(x):
	#Define a function ""f"" that multiplies an integer argument by {a3} and returns the result.
	def i(x):
	#Define a function ""g"" that multiplies an integer argument by {a4} and returns the result.
	#Create a list named ""abc"" which contains the three functions in order of definition.
	abc = [a,b,c,d,e,f,g,h,i]
	#Create a list named ""result"" which will contain the results of the three functions.
	result = []
	#Loop through the list ""abc"" and call the function ""a"" with the argument {x}.
	for x in abc:
		result.append(x(x))
	#Return the list ""result""
	#Assign the integer {a4} to a variable ""my_init"".
	my_init = a4
	#Return the list ""result""
	#Apply the first function of the list to ""my_init"" and name the result ""my_result"".
	my_result = a(my_init)
	#Return the list ""result""
	#Apply the second function of the list to ""my_result"" and name the result ""my_result"".
	my_result = b(my_result)
	#Return the list ""result""
	#Apply the third function of the list to ""my_result"" and name the result ""my_result"".
	my_result = c(my_result)
	#Return the list ""result""
	#Apply the fourth function of the list to ""my_result
	#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".
	my_result = d(my_result)
	#Return the list ""result""
	#Apply the fifth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = e(my_result)
	#Return the list ""result""
	#Apply the sixth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = f(my_result)
	#Return the list ""result""
	#Apply the seventh function of the list to
	#Print the variable named ""my_result"".
	#Return the list ""result""
	#Apply the eighth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = g(my_result)
	#Return the list ""result""
	#Apply the ninth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = h(my_result)
	#Return the list ""result""
	#Apply the tenth function of the list to ""my_result
	return my_result","def cascading_functions(a1,a2,a3,a4):
	#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.
	def a(x):
	#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.
	def b(x):
	#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.
	def c(x):
	#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.
	def d(x):
	#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.
	def e(x):
	#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.
	def f(x):
	#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.
	def g(x):
	#Define a function ""e"" that multiplies an integer argument by {a2} and returns the result.
	def h(x):
	#Define a function ""f"" that multiplies an integer argument by {a3} and returns the result.
	def i(x):
	#Define a function ""g"" that multiplies an integer argument by {a4} and returns the result.
	#Create a list named ""abc"" which contains the three functions in order of definition.
	abc = [a,b,c,d,e,f,g,h,i]
	#Create a list named ""result"" which will contain the results of the three functions.
	result = []
	#Loop through the list ""abc"" and call the function ""a"" with the argument {x}.
	for x in abc:
		result.append(x(x))
	#Return the list ""result""
	#Assign the integer {a4} to a variable ""my_init"".
	my_init = a4
	#Return the list ""result""
	#Apply the first function of the list to ""my_init"" and name the result ""my_result"".
	my_result = a(my_init)
	#Return the list ""result""
	#Apply the second function of the list to ""my_result"" and name the result ""my_result"".
	my_result = b(my_result)
	#Return the list ""result""
	#Apply the third function of the list to ""my_result"" and name the result ""my_result"".
	my_result = c(my_result)
	#Return the list ""result""
	#Apply the fourth function of the list to ""my_result
	#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".
	my_result = d(my_result)
	#Return the list ""result""
	#Apply the fifth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = e(my_result)
	#Return the list ""result""
	#Apply the sixth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = f(my_result)
	#Return the list ""result""
	#Apply the seventh function of the list to
	#Print the variable named ""my_result"".
	#Return the list ""result""
	#Apply the eighth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = g(my_result)
	#Return the list ""result""
	#Apply the ninth function of the list to ""my_result"" and name the result ""my_result"".
	my_result = h(my_result)
	#Return the list ""result""
	#Apply the tenth function of the list to ""my_result
"
49,49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","def pluralize_duplicates(a1):
	#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.
	#The function is used to remove words that appear more than once in the list.
	#The function is used to remove words that appear only once in the list.
	#The function is used to remove words that appear in the list more than once in the singular form.
	#The function is used to remove words that appear in the list more than once in the plural form.
	#The function is used to remove words that appear in the list more than once in the singular and plural forms.
	#The function is used to remove words that appear in the list more than once in the
	#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.
	#Create a function ""is_singular"" which returns True if the word passed as argument is in singular form.
	#Create a function ""is_singular_and_plural"" which returns True if the word passed as argument is in singular and plural form.
	#Create a function ""is_singular_and_plural_and_duplicates"" which returns True if the word passed as argument is in singular, plural and duplicates form.
	#Create a function ""is_singular_and_plural_and_duplicates_and_duplicates"" which returns True if the word passed as argument is in singular
	#Assign {a1} to a variable named ""words"".
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".
	#Apply the function that returns singular forms to the variable ""words"" and name the result ""words_singular"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural_duplicates"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural_duplicates_duplicates"".
	#Apply the function that returns singular and
	#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.
	#Define a boolean ""contains_singular"" and apply ""is_singular"" to each element of ""words_singular"" to detect if at least one word is in singular form.
	#Define a boolean ""contains_singular_and_plural"" and apply ""is_singular_and_plural"" to each element of ""words_singular_plural"" to detect if at least one word is in singular and plural form.
	#Define a boolean ""contains_singular_and_plural_and_duplicates"" and apply ""is_singular_and_plural_and_duplicates"" to each element of
	#Print out whether or not ""words_plural"" contains a word in plural as boolean.
	#Print out whether or not ""words_singular"" contains a word in singular as boolean.
	#Print out whether or not ""words_singular_plural"" contains a word in singular and plural form as boolean.
	#Print out whether or not ""words_singular_plural_duplicates"" contains a word in singular and plural form as boolean.
	#Print out whether or not ""words_singular_plural_duplicates_duplicates"" contains a word in singular and plural form as boolean.
	#Print out whether or not ""words_singular_and_plural"" contains a word in singular and","def pluralize_duplicates(a1):
	#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.
	#The function is used to remove words that appear more than once in the list.
	#The function is used to remove words that appear only once in the list.
	#The function is used to remove words that appear in the list more than once in the singular form.
	#The function is used to remove words that appear in the list more than once in the plural form.
	#The function is used to remove words that appear in the list more than once in the singular and plural forms.
	#The function is used to remove words that appear in the list more than once in the
	#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.
	#Create a function ""is_singular"" which returns True if the word passed as argument is in singular form.
	#Create a function ""is_singular_and_plural"" which returns True if the word passed as argument is in singular and plural form.
	#Create a function ""is_singular_and_plural_and_duplicates"" which returns True if the word passed as argument is in singular, plural and duplicates form.
	#Create a function ""is_singular_and_plural_and_duplicates_and_duplicates"" which returns True if the word passed as argument is in singular
	#Assign {a1} to a variable named ""words"".
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Create a for loop that iterates over the words in {a1}.
	#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".
	#Apply the function that returns singular forms to the variable ""words"" and name the result ""words_singular"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural_duplicates"".
	#Apply the function that returns singular and plural forms to the variable ""words"" and name the result ""words_singular_plural_duplicates_duplicates"".
	#Apply the function that returns singular and
	#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.
	#Define a boolean ""contains_singular"" and apply ""is_singular"" to each element of ""words_singular"" to detect if at least one word is in singular form.
	#Define a boolean ""contains_singular_and_plural"" and apply ""is_singular_and_plural"" to each element of ""words_singular_plural"" to detect if at least one word is in singular and plural form.
	#Define a boolean ""contains_singular_and_plural_and_duplicates"" and apply ""is_singular_and_plural_and_duplicates"" to each element of
	#Print out whether or not ""words_plural"" contains a word in plural as boolean.
	#Print out whether or not ""words_singular"" contains a word in singular as boolean.
	#Print out whether or not ""words_singular_plural"" contains a word in singular and plural form as boolean.
	#Print out whether or not ""words_singular_plural_duplicates"" contains a word in singular and plural form as boolean.
	#Print out whether or not ""words_singular_plural_duplicates_duplicates"" contains a word in singular and plural form as boolean.
"
50,50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","def highest_altitude(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".
	my_relative_altitude = []
	#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".
	my_absolute_altitude = []
	#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".
	for i in range(len(A)):
		my_relative_altitude.append(A[i] - A[0])
		my_absolute_altitude.append(A[i])
	#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".
	#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.
	my_net_altitude = []
	for i in range(len(my_absolute_altitude)):
		my_net_altitude.append(my_absolute_altitude[i] + my_relative_altitude[i])
	#Assign the list of numbers ""{A}"" to a variable named ""my_net_altitude"".
	#Compute the highest value in the list ( 0 is the first element ) and store as my_highest_altitude.
	my_highest_altitude = []
	for i in range(len(my_net_altitude)):
		my_
	#Find the larget number in the list my_net_altitude and print it out.
	#Find the smallest number in the list my_net_altitude and print it out.
	#Find the largest number in the list my_net_altitude and print it out.
	#Find the average number in the list my_net_altitude and print it out.
	#Find the median number in the list my_net_altitude and print it out.
	#Find the mode number in the list my_net_altitude and print it out.
	#Find the standard deviation number in the list my_net_altitude and print it out.
	#Find the variance number","def highest_altitude(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".
	my_relative_altitude = []
	#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".
	my_absolute_altitude = []
	#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".
	for i in range(len(A)):
		my_relative_altitude.append(A[i] - A[0])
		my_absolute_altitude.append(A[i])
	#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".
	#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.
	my_net_altitude = []
	for i in range(len(my_absolute_altitude)):
		my_net_altitude.append(my_absolute_altitude[i] + my_relative_altitude[i])
	#Assign the list of numbers ""{A}"" to a variable named ""my_net_altitude"".
	#Compute the highest value in the list ( 0 is the first element ) and store as my_highest_altitude.
	my_highest_altitude = []
	for i in range(len(my_net_altitude)):
		my_
	#Find the larget number in the list my_net_altitude and print it out.
	#Find the smallest number in the list my_net_altitude and print it out.
	#Find the largest number in the list my_net_altitude and print it out.
	#Find the average number in the list my_net_altitude and print it out.
	#Find the median number in the list my_net_altitude and print it out.
	#Find the mode number in the list my_net_altitude and print it out.
	#Find the standard deviation number in the list my_net_altitude and print it out.
"
51,51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","def truncate_words(A,K):
	#Assign the list of words ""{A}"" to a variable named ""my_sentences"".
	my_sentences = A
	#Assign the length of the list of words ""{my_sentences}"" to a variable named ""len_my_sentences"".
	len_my_sentences = len(my_sentences)
	#Assign the list of words ""{my_sentences}"" to a variable named ""my_words"".
	my_words = my_sentences
	#Assign the length of the list of words ""{my_words}"" to a variable named ""len_my_words"".
	len_my_words = len(my_words)
	#Assign the list of words
	#Assign an integer ""{K}"" to a variable named ""k"".
	k = K
	#Assign the list of words
	#Assign an integer ""{len_my_words}"" to a variable named ""len_k"".
	len_k = len(my_words)
	#Assign the list of words
	#Assign an integer ""{len_my_sentences}"" to a variable named ""len_k"".
	len_k = len(my_sentences)
	#Assign the list of words
	#Assign an integer ""{len_my_sentences}"" to a variable named ""len_k"".
	len_k = len(my
	#Truncate the list such that it contains k words and store as truncated_list.
	truncated_list = my_words[0:k]
	#Return the truncated list.
	#Print out the variable truncated_list.
	#Return the truncated list.
	#Print out the variable truncated_list.
	return truncated_list","def truncate_words(A,K):
	#Assign the list of words ""{A}"" to a variable named ""my_sentences"".
	my_sentences = A
	#Assign the length of the list of words ""{my_sentences}"" to a variable named ""len_my_sentences"".
	len_my_sentences = len(my_sentences)
	#Assign the list of words ""{my_sentences}"" to a variable named ""my_words"".
	my_words = my_sentences
	#Assign the length of the list of words ""{my_words}"" to a variable named ""len_my_words"".
	len_my_words = len(my_words)
	#Assign the list of words
	#Assign an integer ""{K}"" to a variable named ""k"".
	k = K
	#Assign the list of words
	#Assign an integer ""{len_my_words}"" to a variable named ""len_k"".
	len_k = len(my_words)
	#Assign the list of words
	#Assign an integer ""{len_my_sentences}"" to a variable named ""len_k"".
	len_k = len(my_sentences)
	#Assign the list of words
	#Assign an integer ""{len_my_sentences}"" to a variable named ""len_k"".
	len_k = len(my
	#Truncate the list such that it contains k words and store as truncated_list.
	truncated_list = my_words[0:k]
	#Return the truncated list.
	#Print out the variable truncated_list.
	#Return the truncated list.
	#Print out the variable truncated_list.
"
52,52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","def single_element(A):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_numbers"" to a variable named ""my_sum"".
	my_sum = 0
	#Iterate over the list of integers ""{my_numbers}"" and add the values of each element to the variable ""{my_sum}"".
	for i in my_numbers:
		my_sum += i
	#Return the value of the variable ""{my_sum}"".
	#Count the frequencies of the integers in my_numbers.
	#Find the integer that the frequency is 1 and store as one_time.
	one_time = my_numbers[my_numbers.count(1)]
	#Return the value of the variable ""{one_time}"".
	#Print out the variable one_time.
	return one_time","def single_element(A):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_numbers"" to a variable named ""my_sum"".
	my_sum = 0
	#Iterate over the list of integers ""{my_numbers}"" and add the values of each element to the variable ""{my_sum}"".
	for i in my_numbers:
		my_sum += i
	#Return the value of the variable ""{my_sum}"".
	#Count the frequencies of the integers in my_numbers.
	#Find the integer that the frequency is 1 and store as one_time.
	one_time = my_numbers[my_numbers.count(1)]
	#Return the value of the variable ""{one_time}"".
	#Print out the variable one_time.
"
53,53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","def remove_elements(A,Val):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the list of integers ""{Val}"" to a variable named ""my_numbers"".
	my_numbers = Val
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to
	#Assign an integer ""{Val}"" to a variable named ""val"".
	val = Val
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers
	#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.
	remove_numbers = [x for x in new_list if x!= val]
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create
	#Print out the variable remove_numbers.
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the
	return remove_numbers","def remove_elements(A,Val):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the list of integers ""{Val}"" to a variable named ""my_numbers"".
	my_numbers = Val
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to
	#Assign an integer ""{Val}"" to a variable named ""val"".
	val = Val
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers
	#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.
	remove_numbers = [x for x in new_list if x!= val]
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create
	#Print out the variable remove_numbers.
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.
	new_list = my_numbers
	#Create a variable named ""new_list"" and assign the
"
54,54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","def check_array_sum(A,Val):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the sum of the integers in ""my_numbers"" to a variable named ""sum"".
	sum = 0
	#Iterate over the list of integers in ""my_numbers"".
	for i in my_numbers:
		#Add the integer in ""i"" to the sum.
		sum += i
	#If the sum of the integers in ""my_numbers"" is equal to the value of ""Val"", return True.
	if sum == Val:
	#Otherwise, return False.
	else
	#Assign an integer ""{Val}"" to a variable named ""val"".
	val = Val
	#Return True if the sum of the integers in ""my_numbers"" is equal to the value of ""val"", otherwise return False.
	#Sum all the number in my_numbers and store as sum_numbers.
	sum_numbers = sum
	#Iterate over the list of integers in ""my_numbers"".
	for i in my_numbers:
		#If the sum of the integers in ""my_numbers"" is equal to the value of ""val"", return True.
		if sum_numbers == val:
		#Otherwise, return False.
		else:
	#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".
		if sum_numbers == val:
			return True
		else:
			return False","def check_array_sum(A,Val):
	#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the sum of the integers in ""my_numbers"" to a variable named ""sum"".
	sum = 0
	#Iterate over the list of integers in ""my_numbers"".
	for i in my_numbers:
		#Add the integer in ""i"" to the sum.
		sum += i
	#If the sum of the integers in ""my_numbers"" is equal to the value of ""Val"", return True.
	if sum == Val:
	#Otherwise, return False.
	else
	#Assign an integer ""{Val}"" to a variable named ""val"".
	val = Val
	#Return True if the sum of the integers in ""my_numbers"" is equal to the value of ""val"", otherwise return False.
	#Sum all the number in my_numbers and store as sum_numbers.
	sum_numbers = sum
	#Iterate over the list of integers in ""my_numbers"".
	for i in my_numbers:
		#If the sum of the integers in ""my_numbers"" is equal to the value of ""val"", return True.
		if sum_numbers == val:
		#Otherwise, return False.
		else:
	#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".
		if sum_numbers == val:
			return True
		else:
"
55,55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","def merge_sorted_lists(A,B):
	#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".
	my_numbers1 = sorted(A)
	#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".
	my_numbers2 = sorted(B)
	#Assign a sorted list ""{my_numbers1}"" and ""{my_numbers2}"" to a variable named ""merged_list"".
	merged_list = my_numbers1 + my_numbers2
	#Return the merged list.
	#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".
	my_numbers2 = sorted(B)
	#Return the merged list.
	#Merge the two sorted lists in a new sorted list and store as new_list.
	new_list = sorted(merged_list + my_numbers2)
	#Return the new sorted list.
	#Print the sorted new_list.
	return new_list","def merge_sorted_lists(A,B):
	#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".
	my_numbers1 = sorted(A)
	#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".
	my_numbers2 = sorted(B)
	#Assign a sorted list ""{my_numbers1}"" and ""{my_numbers2}"" to a variable named ""merged_list"".
	merged_list = my_numbers1 + my_numbers2
	#Return the merged list.
	#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".
	my_numbers2 = sorted(B)
	#Return the merged list.
	#Merge the two sorted lists in a new sorted list and store as new_list.
	new_list = sorted(merged_list + my_numbers2)
	#Return the new sorted list.
	#Print the sorted new_list.
"
56,56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","def maximum_subarray(A):
	#Assign an integer array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign an integer variable named ""max_sum"" to a variable named ""max_sum"".
	max_sum = 0
	#Assign an integer variable named ""max_sum_index"" to a variable named ""max_sum_index"".
	max_sum_index = 0
	#Assign an integer variable named ""current_sum"" to a variable named ""current_sum"".
	current_sum = 0
	#Assign an integer variable named ""current_sum_index"" to a variable named ""current_sum_index
	#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.
	for i in range(len(my_array)):
		#If the current sum is less than the current maximum sum, then update the current maximum sum.
		if current_sum < my_array[i]:
			current_sum = my_array[i]
			#If the current sum is greater than the current maximum sum, then update the current maximum sum.
			if current_sum > max_sum:
				max_sum = current_sum
				#If the current sum is greater than the current maximum sum, then update the current maximum sum.
				max_
	#Compute the sum of max_subarray and store as sum_subarry.
	sum_subarray = max_sum
	#Find the index of the maximum sum and store as max_sum_index.
	for i in range(len(my_array)):
		#If the current sum is less than the current maximum sum, then update the current maximum sum.
		if current_sum < my_array[i]:
			current_sum = my_array[i]
			#If the current sum is greater than the current maximum sum, then update the current maximum sum.
			if current_sum > max_sum:
				max_sum = current
	#Print out the variable sum_subarray.
	#Print out the variable max_sum_index.
	return sum_subarray
	return max_sum_index","def maximum_subarray(A):
	#Assign an integer array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign an integer variable named ""max_sum"" to a variable named ""max_sum"".
	max_sum = 0
	#Assign an integer variable named ""max_sum_index"" to a variable named ""max_sum_index"".
	max_sum_index = 0
	#Assign an integer variable named ""current_sum"" to a variable named ""current_sum"".
	current_sum = 0
	#Assign an integer variable named ""current_sum_index"" to a variable named ""current_sum_index
	#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.
	for i in range(len(my_array)):
		#If the current sum is less than the current maximum sum, then update the current maximum sum.
		if current_sum < my_array[i]:
			current_sum = my_array[i]
			#If the current sum is greater than the current maximum sum, then update the current maximum sum.
			if current_sum > max_sum:
				max_sum = current_sum
				#If the current sum is greater than the current maximum sum, then update the current maximum sum.
				max_
	#Compute the sum of max_subarray and store as sum_subarry.
	sum_subarray = max_sum
	#Find the index of the maximum sum and store as max_sum_index.
	for i in range(len(my_array)):
		#If the current sum is less than the current maximum sum, then update the current maximum sum.
		if current_sum < my_array[i]:
			current_sum = my_array[i]
			#If the current sum is greater than the current maximum sum, then update the current maximum sum.
			if current_sum > max_sum:
				max_sum = current
	#Print out the variable sum_subarray.
	#Print out the variable max_sum_index.
	return sum_subarray
"
57,57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","def max_square_root_integer(A):
	#Assign the positive number ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign the positive number ""{A}"" to a variable named ""square_root"".
	square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".
	square_root_of_my_number = 0
	#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".
	square_root_of_my_number = 0
	#Assign the positive number ""{A}"" to a variable named ""square
	#Compute the squre root of the number and store as square_root.
	#Compute the largest integer but not larger than square_root and store as largest_square_root.
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_
	return largest_square_root
	return largest_square_root
	return largest_square_root
	return largest_square_root
	return largest_square_root
	return largest_square_root","def max_square_root_integer(A):
	#Assign the positive number ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign the positive number ""{A}"" to a variable named ""square_root"".
	square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".
	square_root_of_my_number = 0
	#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".
	square_root_of_my_number = 0
	#Assign the positive number ""{A}"" to a variable named ""square
	#Compute the squre root of the number and store as square_root.
	#Compute the largest integer but not larger than square_root and store as largest_square_root.
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_square_root = 0
	#Assign the positive number ""{A}"" to a variable named ""largest_square_root"".
	largest_
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_square_root.
	#Print the integer largest_
	return largest_square_root
	return largest_square_root
	return largest_square_root
	return largest_square_root
	return largest_square_root
"
58,58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","def longest_word(A):
	#Assign the list of words ""{A}"" to a variable named ""my_words"".
	my_words = A
	#Assign the variable ""longest"" to a variable named ""longest""
	longest = 0
	#Assign the variable ""word"" to a variable named ""word""
	word = """"
	#Assign the variable ""i"" to a variable named ""i""
	i = 0
	#Assign the variable ""j"" to a variable named ""j""
	j = 0
	#Assign the variable ""k"" to a variable named ""k""
	k = 0
	#Assign the variable ""l"" to a variable
	#Count the length of the words in the list and store as a dictionary word_count.
	#Find the element with the largest count in dictionary word_count and store as longest_word.
	for word in my_words:
		word_count = {}
		for letter in word:
			if letter in word_count:
				word_count[letter] += 1
			else:
				word_count[letter] = 1
		if len(word_count) > longest:
			longest = len(word_count)
			longest_word = word
	#Return the longest word.
	#print the variable longest_word.
	return longest_word","def longest_word(A):
	#Assign the list of words ""{A}"" to a variable named ""my_words"".
	my_words = A
	#Assign the variable ""longest"" to a variable named ""longest""
	longest = 0
	#Assign the variable ""word"" to a variable named ""word""
	word = """"
	#Assign the variable ""i"" to a variable named ""i""
	i = 0
	#Assign the variable ""j"" to a variable named ""j""
	j = 0
	#Assign the variable ""k"" to a variable named ""k""
	k = 0
	#Assign the variable ""l"" to a variable
	#Count the length of the words in the list and store as a dictionary word_count.
	#Find the element with the largest count in dictionary word_count and store as longest_word.
	for word in my_words:
		word_count = {}
		for letter in word:
			if letter in word_count:
				word_count[letter] += 1
			else:
				word_count[letter] = 1
		if len(word_count) > longest:
			longest = len(word_count)
			longest_word = word
	#Return the longest word.
	#print the variable longest_word.
"
59,59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","def sum_unique_elements(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Create a variable named ""sum"" and set it equal to 0.
	sum = 0
	#Loop through the list of numbers ""{my_numbers}"" and add each number to the sum variable.
	for i in my_numbers:
		sum += i
	#Return the sum of the list of numbers ""{my_numbers}"".
	#Return the elements that appears exactly once in the above list and store as my_uniques.
	#Compute the sum of the list my_uniques and print it out.
	return sum, my_numbers.count(sum)","def sum_unique_elements(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Create a variable named ""sum"" and set it equal to 0.
	sum = 0
	#Loop through the list of numbers ""{my_numbers}"" and add each number to the sum variable.
	for i in my_numbers:
		sum += i
	#Return the sum of the list of numbers ""{my_numbers}"".
	#Return the elements that appears exactly once in the above list and store as my_uniques.
	#Compute the sum of the list my_uniques and print it out.
"
60,60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","def digonal_sum(A):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the size of the matrix to a variable named ""size"".
	size = len(my_matrix)
	#Assign the sum of the diagonal elements to a variable named ""diagonal_sum"".
	diagonal_sum = 0
	#Iterate over the rows of the matrix.
	for i in range(size):
		#Iterate over the columns of the matrix.
		for j in range(size):
			#If the current element is not the diagonal element, add it to the sum.
			if i!= j:
	#Find the diagonal elements of my matrix and store as diag_elements.
				diag_elements = my_matrix[i][j]
	#Add the diagonal elements to the sum.
				diagonal_sum += diag_elements
	#Return the sum of the diagonal elements.
	#print out the sum of the variable diag_elements.
	return diagonal_sum","def digonal_sum(A):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the size of the matrix to a variable named ""size"".
	size = len(my_matrix)
	#Assign the sum of the diagonal elements to a variable named ""diagonal_sum"".
	diagonal_sum = 0
	#Iterate over the rows of the matrix.
	for i in range(size):
		#Iterate over the columns of the matrix.
		for j in range(size):
			#If the current element is not the diagonal element, add it to the sum.
			if i!= j:
	#Find the diagonal elements of my matrix and store as diag_elements.
				diag_elements = my_matrix[i][j]
	#Add the diagonal elements to the sum.
				diagonal_sum += diag_elements
	#Return the sum of the diagonal elements.
	#print out the sum of the variable diag_elements.
"
61,61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","def matrix_condition_number(A,T):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the matrix ""{T}"" to a variable named ""my_matrix"".
	my_matrix = T
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_
	#Assign the number ""{T}"" to a variable named ""t"".
	t = T
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	#Compute the condition number of my_matrix and store as result.
	result = np.linalg.cond(my_matrix)
	#Return the result.
	#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".
	if result < t:
		return True
	else:
		return False","def matrix_condition_number(A,T):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the matrix ""{T}"" to a variable named ""my_matrix"".
	my_matrix = T
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".
	my_matrix = my_matrix
	#Assign the matrix ""{my_
	#Assign the number ""{T}"" to a variable named ""t"".
	t = T
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	t = t
	#Assign the number ""{t}"" to a variable named ""t"".
	#Compute the condition number of my_matrix and store as result.
	result = np.linalg.cond(my_matrix)
	#Return the result.
	#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".
	if result < t:
		return True
	else:
"
62,62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","def matrix_multiplication_sum(A,B):
	#Assign the matrix ""{A}"" to a variable named ""a"".
	a = A
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{a} * {b}"" to a variable named ""c"".
	c = a * b
	#Print the matrix ""{c}"" to the screen.
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Print the matrix ""{b}"" to the screen.
	#Print the matrix ""{c}"" to the screen.
	#Return the matrix ""{c}"" to the screen.
	#Compute the multiplication of two matrices and store as result.
	result = c
	#Compute the sum of the result and print it out.
	return result","def matrix_multiplication_sum(A,B):
	#Assign the matrix ""{A}"" to a variable named ""a"".
	a = A
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{a} * {b}"" to a variable named ""c"".
	c = a * b
	#Print the matrix ""{c}"" to the screen.
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Print the matrix ""{b}"" to the screen.
	#Print the matrix ""{c}"" to the screen.
	#Return the matrix ""{c}"" to the screen.
	#Compute the multiplication of two matrices and store as result.
	result = c
	#Compute the sum of the result and print it out.
"
63,63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","def matrix_determinant_(A,B):
	#Assign the matrix ""{A}"" to a variable named ""a"".
	a = A
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{a}"" to a variable named ""c"".
	c = a.transpose()
	#Assign the matrix ""{b}"" to a variable named ""d"".
	d = b.transpose()
	#Assign the matrix ""{c}"" to a variable named ""e"".
	e = c.multiply(d)
	#Assign the matrix ""{e}"" to a variable named ""f"".
	f = e.multiply(c)
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{f}"" to a variable named ""g"".
	g = f.multiply(b)
	#Assign the matrix ""{g}"" to a variable named ""h"".
	h = g.multiply(a)
	#Assign the matrix ""{h}"" to a variable named ""i"".
	i = h.multiply(b)
	#Assign the matrix ""{i}"" to a variable named ""j"".
	j = i.multiply(a)
	#Assign the matrix ""{j}"" to a variable named ""k"".
	k
	#Implement a function that computes the determinant of a matrix.
	#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".
	if(abs(i.determinant()) > abs(j.determinant())):
	else:","def matrix_determinant_(A,B):
	#Assign the matrix ""{A}"" to a variable named ""a"".
	a = A
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{a}"" to a variable named ""c"".
	c = a.transpose()
	#Assign the matrix ""{b}"" to a variable named ""d"".
	d = b.transpose()
	#Assign the matrix ""{c}"" to a variable named ""e"".
	e = c.multiply(d)
	#Assign the matrix ""{e}"" to a variable named ""f"".
	f = e.multiply(c)
	#Assign the matrix ""{B}"" to a variable named ""b"".
	b = B
	#Assign the matrix ""{f}"" to a variable named ""g"".
	g = f.multiply(b)
	#Assign the matrix ""{g}"" to a variable named ""h"".
	h = g.multiply(a)
	#Assign the matrix ""{h}"" to a variable named ""i"".
	i = h.multiply(b)
	#Assign the matrix ""{i}"" to a variable named ""j"".
	j = i.multiply(a)
	#Assign the matrix ""{j}"" to a variable named ""k"".
	k
	#Implement a function that computes the determinant of a matrix.
	#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".
	if(abs(i.determinant()) > abs(j.determinant())):
"
64,64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","def log-sum-exp(A):
	#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_sum"" to the sum of the numbers in the list.
	my_sum = 0
	#Assign the variable ""my_exp"" to the exponential of the sum of the numbers in the list.
	my_exp = 0
	#Assign the variable ""my_max"" to the maximum number in the list.
	my_max = 0
	#Assign the variable ""my_min"" to the minimum number in the list.
	my_min = 0
	#Assign the variable
	#Implement a function that computes the exponential output of a list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_exp"" to the exponential of the number in the list.
		my_exp += math.exp(my_numbers[i])
		#If the number in the list is greater than the maximum number in the list, then assign the number in the list to the maximum number in the list.
		if my_numbers[i] > my_max:
			my_max = my_numbers[i]
		#If the number in the list is less than the minimum number in the list
	#Implement a function that computes summation of a list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_sum"" to the summation of the number in the list.
		my_sum += my_numbers[i]
	#Implement a function that computes the logarithm of the sum of the exponentials of the list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_exp"" to the exponential of the number in the list.
		my_exp -= math.exp(my_numbers[i])
	#Implement a function that computes
	#Implement a function that computes log of a number.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a
	#Print out the log of sum exponential my_numbers.
	#Print out the log of the exponential of my_sum.
	#Print out the log of the exponential of my_exp.
	#Print out the log of the maximum number in the list.
	#Print out the log of the minimum number in the list.
	return my_sum
	return math.log(my_sum)
	return math.log(my_exp)
	return my_max
	return my_min","def log-sum-exp(A):
	#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""my_sum"" to the sum of the numbers in the list.
	my_sum = 0
	#Assign the variable ""my_exp"" to the exponential of the sum of the numbers in the list.
	my_exp = 0
	#Assign the variable ""my_max"" to the maximum number in the list.
	my_max = 0
	#Assign the variable ""my_min"" to the minimum number in the list.
	my_min = 0
	#Assign the variable
	#Implement a function that computes the exponential output of a list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_exp"" to the exponential of the number in the list.
		my_exp += math.exp(my_numbers[i])
		#If the number in the list is greater than the maximum number in the list, then assign the number in the list to the maximum number in the list.
		if my_numbers[i] > my_max:
			my_max = my_numbers[i]
		#If the number in the list is less than the minimum number in the list
	#Implement a function that computes summation of a list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_sum"" to the summation of the number in the list.
		my_sum += my_numbers[i]
	#Implement a function that computes the logarithm of the sum of the exponentials of the list.
	for i in range(len(my_numbers)):
		#Assign the variable ""my_exp"" to the exponential of the number in the list.
		my_exp -= math.exp(my_numbers[i])
	#Implement a function that computes
	#Implement a function that computes log of a number.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a list.
	#Implement a function that computes log of a
	#Print out the log of sum exponential my_numbers.
	#Print out the log of the exponential of my_sum.
	#Print out the log of the exponential of my_exp.
	#Print out the log of the maximum number in the list.
	#Print out the log of the minimum number in the list.
	return my_sum
	return math.log(my_sum)
	return math.log(my_exp)
	return my_max
"
65,65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","def k_nearest_points(A,K):
	#Assign the list of points ""{A}"" to a variable named ""my_points"".
	my_points = A
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	my_distances = []
	#Assign the list of points ""{A}"" to a variable named ""my_indices"".
	my_indices = []
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	for i in range(len(my_points)):
		#Assign the distance of the point ""{A}"" to the list of distances.
		my_distances.append(euclidian_distance(my_
	#Assign the integer ""{K}"" to a variable named ""k"".
	k))
	#Assign the integer ""{K}"" to a variable named ""k"".
	k = K
	#Assign the list of points ""{A}"" to a variable named ""my_indices"".
	my_indices = []
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	for i in range(len(my_points)):
		#Assign the index of the point ""{A}"" to the list of indices.
		my_indices.append(i)
	#Return the list of indices.
	#Implement a function that computes the distance between a point and the origin (0,0).
	#Implement a function that computes the k closest points in an array to the origin and store as result.
	#Compute the k closest points in my_points and print them out.
	return my_indices","def k_nearest_points(A,K):
	#Assign the list of points ""{A}"" to a variable named ""my_points"".
	my_points = A
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	my_distances = []
	#Assign the list of points ""{A}"" to a variable named ""my_indices"".
	my_indices = []
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	for i in range(len(my_points)):
		#Assign the distance of the point ""{A}"" to the list of distances.
		my_distances.append(euclidian_distance(my_
	#Assign the integer ""{K}"" to a variable named ""k"".
	k))
	#Assign the integer ""{K}"" to a variable named ""k"".
	k = K
	#Assign the list of points ""{A}"" to a variable named ""my_indices"".
	my_indices = []
	#Assign the list of points ""{A}"" to a variable named ""my_distances"".
	for i in range(len(my_points)):
		#Assign the index of the point ""{A}"" to the list of indices.
		my_indices.append(i)
	#Return the list of indices.
	#Implement a function that computes the distance between a point and the origin (0,0).
	#Implement a function that computes the k closest points in an array to the origin and store as result.
	#Compute the k closest points in my_points and print them out.
"
66,66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","def longest_common_prefix(l1):
	#Implement a function called LCP() to find the longest common prefix of two strings.
	#If there is no common prefix, return an empty string """".
	#If there is a common prefix, return the first character of the common prefix.
	#For example, LCP(""ab"", ""abc"") should return ""a"".
	#For example, LCP(""ab"", ""ab"") should return """".
	#For example, LCP(""ab"", ""abcde"") should return """".
	#For example, LCP(""ab"", ""abcd"") should return ""a"".
	#For example, LCP(""ab"", ""abcd"") should return """".
	#Initialize a variable named lst1 with a list {l1}.
	#Initialize a variable named lst2 with a list {""""}.
	#For each character in lst1, check if it is in lst2.
	#If it is, increment the variable named count by 1.
	#If it is not, return the empty string """".
	#Return the variable named lst1.
	lst1 = list(l1)
	lst2 = list("""")
	count = 0
	for i in lst1:
		if i in lst2:
			count += 1
		else:
	#Apply the function LCP() recusively to lst1 and lst2.
			lst2 = LCP(lst1, lst2)
	#Return the variable named lst1.
	#Print the the longest common prefix of the strings in lst1 and lst2.
	#Return the empty string """".
	return lst2","def longest_common_prefix(l1):
	#Implement a function called LCP() to find the longest common prefix of two strings.
	#If there is no common prefix, return an empty string """".
	#If there is a common prefix, return the first character of the common prefix.
	#For example, LCP(""ab"", ""abc"") should return ""a"".
	#For example, LCP(""ab"", ""ab"") should return """".
	#For example, LCP(""ab"", ""abcde"") should return """".
	#For example, LCP(""ab"", ""abcd"") should return ""a"".
	#For example, LCP(""ab"", ""abcd"") should return """".
	#Initialize a variable named lst1 with a list {l1}.
	#Initialize a variable named lst2 with a list {""""}.
	#For each character in lst1, check if it is in lst2.
	#If it is, increment the variable named count by 1.
	#If it is not, return the empty string """".
	#Return the variable named lst1.
	lst1 = list(l1)
	lst2 = list("""")
	count = 0
	for i in lst1:
		if i in lst2:
			count += 1
		else:
	#Apply the function LCP() recusively to lst1 and lst2.
			lst2 = LCP(lst1, lst2)
	#Return the variable named lst1.
	#Print the the longest common prefix of the strings in lst1 and lst2.
	#Return the empty string """".
"
67,67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","def duplicate_elments(lst1):
	#Assigns a list {lst1} to a variable named lst1_copy
	lst1_copy = lst1[:]
	#Loops through the list {lst1_copy}
	for i in range(len(lst1_copy)):
		#Loops through the list {lst1_copy}
		for j in range(len(lst1_copy)):
			#If the value of the element at index {i} is equal to the value of the element at index {j}
			if lst1_copy[i] == lst1_copy[j]:
				#Adds the value of the element at index {j} to the list
	#Create a frequency table of elements in lst1_copy
	frequency_table = {}
	for i in lst1_copy:
		#If the value of the element at index {i} is not in the frequency table
		if i not in frequency_table:
			#Adds the value of the element at index {i} to the frequency table
			frequency_table[i] = 1
		#If the value of the element at index {i} is in the frequency table
		else:
			#Adds the value of the element at index {i} to the frequency table
			frequency_table[i] +=
	#Find the elements with frequency larger than 1 and assign them to a list lst2
	lst2 = []
	for i in frequency_table:
		#If the value of the element at index {i} is larger than 1
		if frequency_table[i] > 1:
			#Adds the value of the element at index {i} to the list lst2
			lst2.append(i)
	#Return the list lst2
	#Print out lst2
	return lst2","def duplicate_elments(lst1):
	#Assigns a list {lst1} to a variable named lst1_copy
	lst1_copy = lst1[:]
	#Loops through the list {lst1_copy}
	for i in range(len(lst1_copy)):
		#Loops through the list {lst1_copy}
		for j in range(len(lst1_copy)):
			#If the value of the element at index {i} is equal to the value of the element at index {j}
			if lst1_copy[i] == lst1_copy[j]:
				#Adds the value of the element at index {j} to the list
	#Create a frequency table of elements in lst1_copy
	frequency_table = {}
	for i in lst1_copy:
		#If the value of the element at index {i} is not in the frequency table
		if i not in frequency_table:
			#Adds the value of the element at index {i} to the frequency table
			frequency_table[i] = 1
		#If the value of the element at index {i} is in the frequency table
		else:
			#Adds the value of the element at index {i} to the frequency table
			frequency_table[i] +=
	#Find the elements with frequency larger than 1 and assign them to a list lst2
	lst2 = []
	for i in frequency_table:
		#If the value of the element at index {i} is larger than 1
		if frequency_table[i] > 1:
			#Adds the value of the element at index {i} to the list lst2
			lst2.append(i)
	#Return the list lst2
	#Print out lst2
"
68,68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","def first_unique_character(w):
	#Initialize a variable named w1 with a string '{w}'
	w1 = '{w}'
	#Loop through the string w1
	for i in range(len(w1)):
		#If the character at index i of w1 is not a space, then
		#set w1 to be the substring of w1 with the character at index i
		#and break the loop
		if w1[i]!='':
			w1 = w1[i:]
			break
	#Return the first character of w1
	#Get the first non-repeating character in w1
	#Find its corresponding index and assign it to n1
	n1 = w1[0]
	for i in range(len(w1)):
		if w1[i]!= n1:
			n1 = w1[i]
			break
	#Return the index of n1
	#Print out n1
	return n1","def first_unique_character(w):
	#Initialize a variable named w1 with a string '{w}'
	w1 = '{w}'
	#Loop through the string w1
	for i in range(len(w1)):
		#If the character at index i of w1 is not a space, then
		#set w1 to be the substring of w1 with the character at index i
		#and break the loop
		if w1[i]!='':
			w1 = w1[i:]
			break
	#Return the first character of w1
	#Get the first non-repeating character in w1
	#Find its corresponding index and assign it to n1
	n1 = w1[0]
	for i in range(len(w1)):
		if w1[i]!= n1:
			n1 = w1[i]
			break
	#Return the index of n1
	#Print out n1
"
69,69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","def uncommon_words(s1,s2):
	#Assign a sentence '{s1}' to a variable named sentence1.
	sentence1 = s1
	#Assign a sentence '{s2}' to a variable named sentence2.
	sentence2 = s2
	#Create a list named uncommon_words.
	uncommon_words = []
	#Create a for loop to iterate through each word in sentence1.
	for word in sentence1:
		#Create a for loop to iterate through each word in sentence2.
		for word2 in sentence2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s2}' to a variable named sentence2.
				sentence2 = s2
	#Create a for loop to iterate through each word in sentence2.
	for word in sentence2:
		#Add the word to the uncommon_words list.
		uncommon_words.append(word)
	#Return the uncommon_words list.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Split sentence2 into words and assign them to words2.
	words2 = sentence2.split()
	#Create a for loop to iterate through each word in words1.
	for word in words1:
		#Create a for loop to iterate through each word in words2.
		for word2 in words2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s2}' to a variable named sentence2
	#Split sentence2 into words and assign them to words2.
	words2 = sentence2.split()
	#Create a for loop to iterate through each word in words2.
	for word in words2:
		#Add the word to the uncommon_words list.
		uncommon_words.append(word)
	#Return the uncommon_words list.
	#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.
	#Create a for loop to iterate through each word in uncommon_words.
	for word in uncommon_words:
		#Create a for loop to iterate through each word in words1.
		for word2 in words1:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s1}' to a variable named sentence1
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Create a for
	#Print uncommon_words.
	#Return the uncommon_words list.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Create a for loop to iterate through each word in words1.
	for word in words1:
		#Create a for loop to iterate through each word in words2.
		for word2 in words2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence
	return uncommon_words","def uncommon_words(s1,s2):
	#Assign a sentence '{s1}' to a variable named sentence1.
	sentence1 = s1
	#Assign a sentence '{s2}' to a variable named sentence2.
	sentence2 = s2
	#Create a list named uncommon_words.
	uncommon_words = []
	#Create a for loop to iterate through each word in sentence1.
	for word in sentence1:
		#Create a for loop to iterate through each word in sentence2.
		for word2 in sentence2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s2}' to a variable named sentence2.
				sentence2 = s2
	#Create a for loop to iterate through each word in sentence2.
	for word in sentence2:
		#Add the word to the uncommon_words list.
		uncommon_words.append(word)
	#Return the uncommon_words list.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Split sentence2 into words and assign them to words2.
	words2 = sentence2.split()
	#Create a for loop to iterate through each word in words1.
	for word in words1:
		#Create a for loop to iterate through each word in words2.
		for word2 in words2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s2}' to a variable named sentence2
	#Split sentence2 into words and assign them to words2.
	words2 = sentence2.split()
	#Create a for loop to iterate through each word in words2.
	for word in words2:
		#Add the word to the uncommon_words list.
		uncommon_words.append(word)
	#Return the uncommon_words list.
	#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.
	#Create a for loop to iterate through each word in uncommon_words.
	for word in uncommon_words:
		#Create a for loop to iterate through each word in words1.
		for word2 in words1:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence '{s1}' to a variable named sentence1
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Create a for
	#Print uncommon_words.
	#Return the uncommon_words list.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Create a for loop to iterate through each word in words1.
	for word in words1:
		#Create a for loop to iterate through each word in words2.
		for word2 in words2:
			#If the words are equal, add the word to the uncommon_words list.
			if word == word2:
	#Assign a sentence
"
70,70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","def average_words_length(s1):
	#Assign a sentence '{s1}' to a variable named sentence1.
	sentence1 = s1
	#Assign a variable named words_length to the length of the sentence1 variable.
	words_length = len(sentence1.split())
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 = [word.lower() for word in words1 if word.isalpha()]
	#Return the words1 variable.
	#Remove punctuation in words1.
	words1 = [word for word in words1 if word not in string.punctuation]
	#Return the words1 variable.
	#Remove words that are less than 3 characters.
	words1 = [word for word in words1 if len(word) >= 3]
	#Return the words1 variable.
	#Remove words that are more than 10 characters.
	words
	#Compute the average word length in words1 and assign it avg.
	avg = sum(words1)/len(words1)
	#Return the avg variable.
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 =
	#Print avg.
	#Return avg.
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 =
	#Print avg.
	return avg","def average_words_length(s1):
	#Assign a sentence '{s1}' to a variable named sentence1.
	sentence1 = s1
	#Assign a variable named words_length to the length of the sentence1 variable.
	words_length = len(sentence1.split())
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 = [word.lower() for word in words1 if word.isalpha()]
	#Return the words1 variable.
	#Remove punctuation in words1.
	words1 = [word for word in words1 if word not in string.punctuation]
	#Return the words1 variable.
	#Remove words that are less than 3 characters.
	words1 = [word for word in words1 if len(word) >= 3]
	#Return the words1 variable.
	#Remove words that are more than 10 characters.
	words
	#Compute the average word length in words1 and assign it avg.
	avg = sum(words1)/len(words1)
	#Return the avg variable.
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 =
	#Print avg.
	#Return avg.
	#Return the average of the words_length variable.
	#Split sentence1 into words and assign them to words1.
	words1 = sentence1.split()
	#Assign a variable named average_words_length to the average of the words_length variable.
	average_words_length = sum(words_length)/len(words_length)
	#Return the average_words_length variable.
	#Remove punctuation in words1.
	words1 =
	#Print avg.
"
71,71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","def compare_char_freq(w1,w2):
	#Assigns strings {w1} and {w2} to variables w1 and w2 respectively
	w1 = w1.lower()
	w2 = w2.lower()
	#Creates a dictionary {w1} and {w2}
	d1 = {}
	d2 = {}
	#Iterates through each character in {w1} and {w2}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d1
	#Lower-case w1 and w2
	w1 = w1.lower()
	w2 = w2.lower()
	#Iterates through each character in {w1} and {w2}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d2
	#Returns the number of times {w1} and {w2} occur in {w1} and {w2
	#Count the frequency of letters in w1 and w2 and assign them to f1 and f2 respectively
	f1 = 0
	f2 = 0
	for i in range(len(w1)):
		if w1[i] in d1:
			f1 += 1
		if w2[i] in d2:
			f2 += 1
	#Returns the number of times {w1} and {w2} occur in {w1} and {w2}
	#Return the average of f1 and f2
	#Print if f1 is equal to f2
	if f1 == f2:
	else:","def compare_char_freq(w1,w2):
	#Assigns strings {w1} and {w2} to variables w1 and w2 respectively
	w1 = w1.lower()
	w2 = w2.lower()
	#Creates a dictionary {w1} and {w2}
	d1 = {}
	d2 = {}
	#Iterates through each character in {w1} and {w2}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d1
	#Lower-case w1 and w2
	w1 = w1.lower()
	w2 = w2.lower()
	#Iterates through each character in {w1} and {w2}
	for i in range(len(w1)):
		#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character
		if w1[i] == w2[i]:
			d2
	#Returns the number of times {w1} and {w2} occur in {w1} and {w2
	#Count the frequency of letters in w1 and w2 and assign them to f1 and f2 respectively
	f1 = 0
	f2 = 0
	for i in range(len(w1)):
		if w1[i] in d1:
			f1 += 1
		if w2[i] in d2:
			f2 += 1
	#Returns the number of times {w1} and {w2} occur in {w1} and {w2}
	#Return the average of f1 and f2
	#Print if f1 is equal to f2
	if f1 == f2:
"
72,72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","def reverse_string(w):
	#Assign a string {w} to a variable named w1
	w1 = w
	#Assign a string {w1} to a variable named w2
	w2 = w1[::-1]
	#Assign a string {w2} to a variable named w3
	w3 = w2[::-1]
	#Assign a string {w3} to a variable named w4
	w4 = w3[::-1]
	#Assign a string {w4} to a variable named w5
	w5 = w4[::-1]
	#Assign a string {w5} to a variable named w6
	#Concatenate the elements in w1 from end to beginning and assign it to w2
	w2 = w1[::-1]
	#Assign a string {w2} to a variable named w3
	w3 = w2[::-1]
	#Assign a string {w3} to a variable named w4
	w4 = w3[::-1]
	#Assign a string {w4} to a variable named w5
	w5 = w4[::-1]
	#Assign a string {w5} to a variable named w6
	#Concatenate the elements in w1 from end to beginning and assign it to w2
	w2
	#Print w2
	#Print w3
	#Print w4
	#Print w5
	return w2
	return w3
	return w4
	return w5","def reverse_string(w):
	#Assign a string {w} to a variable named w1
	w1 = w
	#Assign a string {w1} to a variable named w2
	w2 = w1[::-1]
	#Assign a string {w2} to a variable named w3
	w3 = w2[::-1]
	#Assign a string {w3} to a variable named w4
	w4 = w3[::-1]
	#Assign a string {w4} to a variable named w5
	w5 = w4[::-1]
	#Assign a string {w5} to a variable named w6
	#Concatenate the elements in w1 from end to beginning and assign it to w2
	w2 = w1[::-1]
	#Assign a string {w2} to a variable named w3
	w3 = w2[::-1]
	#Assign a string {w3} to a variable named w4
	w4 = w3[::-1]
	#Assign a string {w4} to a variable named w5
	w5 = w4[::-1]
	#Assign a string {w5} to a variable named w6
	#Concatenate the elements in w1 from end to beginning and assign it to w2
	w2
	#Print w2
	#Print w3
	#Print w4
	#Print w5
	return w2
	return w3
	return w4
"
73,73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","def square_sum_diff(n):
	#Assign a natural number {n} to named num
	num = n
	#Assign a variable named sum to hold the sum of the squares of the natural number
	sum = 0
	#Loop through the natural number {n}
	for i in range(1, num+1):
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	#Return the sum of the squares of the natural number
	#Create a list from 1 to num and assign it to a variable lst1
	lst1 = [i for i in range(1, num+1)]
	#Loop through the list lst1
	for i in lst1:
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	#Return the sum of the squares of the natural number
	#Compute the sum of squared of the numbers in lst1 and assign n1 to it
	n1 = sum**2
	#Return the sum of the squares of the natural number
	#Compute the sum of the numbers in lst1 and assign its square to n2
	n2 = sum(i**2 for i in lst1)
	#Return the sum of the squares of the natural number
	#Compute the sum of the squares of the numbers in lst1 and assign its square to n3
	n3 = sum(i**2 for i in lst1)**2
	#Return the sum of the squares of the natural number
	#Compute the sum of the squares of the numbers in lst1 and assign its square to n4
	n4 = sum(i**2 for i in lst1)**3
	#Return the sum of the
	#Print out the difference between n1 and n2
	#Print out the difference between n1 and n3
	#Print out the difference between n1 and n4
	return n1 - n2
	return n1 - n3
	return n1 - n4","def square_sum_diff(n):
	#Assign a natural number {n} to named num
	num = n
	#Assign a variable named sum to hold the sum of the squares of the natural number
	sum = 0
	#Loop through the natural number {n}
	for i in range(1, num+1):
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	#Return the sum of the squares of the natural number
	#Create a list from 1 to num and assign it to a variable lst1
	lst1 = [i for i in range(1, num+1)]
	#Loop through the list lst1
	for i in lst1:
		#Assign a variable named square to hold the square of the natural number
		square = i**2
		#Add the square of the natural number to the sum
		sum += square
	#Return the sum of the squares of the natural number
	#Compute the sum of squared of the numbers in lst1 and assign n1 to it
	n1 = sum**2
	#Return the sum of the squares of the natural number
	#Compute the sum of the numbers in lst1 and assign its square to n2
	n2 = sum(i**2 for i in lst1)
	#Return the sum of the squares of the natural number
	#Compute the sum of the squares of the numbers in lst1 and assign its square to n3
	n3 = sum(i**2 for i in lst1)**2
	#Return the sum of the squares of the natural number
	#Compute the sum of the squares of the numbers in lst1 and assign its square to n4
	n4 = sum(i**2 for i in lst1)**3
	#Return the sum of the
	#Print out the difference between n1 and n2
	#Print out the difference between n1 and n3
	#Print out the difference between n1 and n4
	return n1 - n2
	return n1 - n3
"
74,74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","def cosine_sim(lst1,lst2):
	#Assigns a list {lst1} to a variable named vec1
	vec1 = np.array(lst1)
	#Assigns a list {lst2} to a variable named vec2
	vec2 = np.array(lst2)
	#Calculates the cosine similarity between the two vectors
	#Assigns a list {lst2} to a variable named vec2
	cos_sim = np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))
	#Normalize vec1 and vec2
	vec1 = vec1/np.linalg.norm(vec1)
	vec2 = vec2/np.linalg.norm(vec2)
	#Returns the cosine similarity between the two vectors
	#Normalize vec2
	#Compute the dot product of vec1 and vec2
	#Print out the dot product
	return cos_sim","def cosine_sim(lst1,lst2):
	#Assigns a list {lst1} to a variable named vec1
	vec1 = np.array(lst1)
	#Assigns a list {lst2} to a variable named vec2
	vec2 = np.array(lst2)
	#Calculates the cosine similarity between the two vectors
	#Assigns a list {lst2} to a variable named vec2
	cos_sim = np.dot(vec1,vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2))
	#Normalize vec1 and vec2
	vec1 = vec1/np.linalg.norm(vec1)
	vec2 = vec2/np.linalg.norm(vec2)
	#Returns the cosine similarity between the two vectors
	#Normalize vec2
	#Compute the dot product of vec1 and vec2
	#Print out the dot product
"
75,75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","def vector_distance(lst1,lst2,lst3):
	#Assigns a list {lst1} to a variable named vec1
	vec1 = lst1
	#Assigns a list {lst2} to a variable named vec2
	vec2 = lst2
	#Assigns a list {lst3} to a variable named vec3
	vec3 = lst3
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Assigns a list {lst2} to a variable named vec2
	vec2 = lst2
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Assigns a list {lst3} to a variable named vec3
	vec3 = lst3
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec2,vec3)]))
	#Returns the distance
	#Convert vec1, vec2, and vec3 to numpy array
	vec1 = np.array(vec1)
	vec2 = np.array(vec2)
	vec3 = np.array(vec3)
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Calcul
	#Implement a function called dist() to compute the distance between two vectors
	#Assigns a list {vec1} to a variable named vec1
	vec1 = np.array(vec1)
	#Assigns a list {vec2} to a variable named vec2
	vec2 = np.array(vec2)
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for
	#Compute the distance between vec1 and vec2 and assign it to d1
	x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec1 and vec2 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec1 and vec3 and assign it to d3
	d3 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Compute the distance between vec1 and vec3 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec2 and vec3 and assign it to d3
	d3 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec2,vec3)]))
	#Returns the distance
	#Compute the distance between vec2 and vec3 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip
	#Print out whether d1 is larger than d2 or not
	(vec1,vec2)]))
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d","def vector_distance(lst1,lst2,lst3):
	#Assigns a list {lst1} to a variable named vec1
	vec1 = lst1
	#Assigns a list {lst2} to a variable named vec2
	vec2 = lst2
	#Assigns a list {lst3} to a variable named vec3
	vec3 = lst3
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Assigns a list {lst2} to a variable named vec2
	vec2 = lst2
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Assigns a list {lst3} to a variable named vec3
	vec3 = lst3
	#Calculates the distance between the vectors
	distance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec2,vec3)]))
	#Returns the distance
	#Convert vec1, vec2, and vec3 to numpy array
	vec1 = np.array(vec1)
	vec2 = np.array(vec2)
	vec3 = np.array(vec3)
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Calcul
	#Implement a function called dist() to compute the distance between two vectors
	#Assigns a list {vec1} to a variable named vec1
	vec1 = np.array(vec1)
	#Assigns a list {vec2} to a variable named vec2
	vec2 = np.array(vec2)
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Calculates the distance between the vectors
	distance = np.sqrt(sum([(x-y)**2 for
	#Compute the distance between vec1 and vec2 and assign it to d1
	x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec1 and vec2 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec1 and vec3 and assign it to d3
	d3 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec3)]))
	#Returns the distance
	#Compute the distance between vec1 and vec3 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))
	#Returns the distance
	#Compute the distance between vec2 and vec3 and assign it to d3
	d3 = np.sqrt(sum([(x-y)**2 for x,y in zip(vec2,vec3)]))
	#Returns the distance
	#Compute the distance between vec2 and vec3 and assign it to d2
	d2 = np.sqrt(sum([(x-y)**2 for x,y in zip
	#Print out whether d1 is larger than d2 or not
	(vec1,vec2)]))
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
	#Print out whether d1 is larger than d2 or not
"
76,76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","def compare_standard_deviations(l1,l2):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean1 with the mean of lst1.
	mean1 = mean(lst1)
	#Initialize a variable named mean2 with the mean of lst2.
	mean2 = mean(lst2)
	#Initialize a variable named standard_deviation1 with the standard deviation of lst1.
	standard_deviation1 = standard_deviation(lst1)
	#Initialize a variable named standard_
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean1 with the mean of lst1.
	mean1 = mean(lst1)
	#Initialize a variable named mean2 with the mean of lst2.
	mean2 = mean(lst2)
	#Initialize a variable named standard_deviation1 with the standard deviation of lst1.
	standard_deviation1 = standard_deviation(lst1)
	#Initialize a variable named standard_deviation2 with the standard deviation of lst2.
	standard_deviation2 = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst1)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst1)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std =
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst1)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst2)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst1)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst2)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std =
	#Print out the smaller standard deviation.
	#Print out the larger standard deviation.
	#Print out the mean of the two lists.
	#Print out the mean of the two lists.
	#Print out the mean of the two lists.
	return ""The smaller standard deviation is: "", std
	return ""The larger standard deviation is: "", std
	return ""The mean of the two lists is: "", mean(lst1)
	return ""The mean of the two lists is: "", mean(lst2)
	return ""The mean of the two lists is: "", mean(lst1)","def compare_standard_deviations(l1,l2):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean1 with the mean of lst1.
	mean1 = mean(lst1)
	#Initialize a variable named mean2 with the mean of lst2.
	mean2 = mean(lst2)
	#Initialize a variable named standard_deviation1 with the standard deviation of lst1.
	standard_deviation1 = standard_deviation(lst1)
	#Initialize a variable named standard_
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean1 with the mean of lst1.
	mean1 = mean(lst1)
	#Initialize a variable named mean2 with the mean of lst2.
	mean2 = mean(lst2)
	#Initialize a variable named standard_deviation1 with the standard deviation of lst1.
	standard_deviation1 = standard_deviation(lst1)
	#Initialize a variable named standard_deviation2 with the standard deviation of lst2.
	standard_deviation2 = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst1)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst1)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std = standard_deviation(lst2)
	#Create a function called std() to compute the standard deviation given a list of numbers.
	std =
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst1)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst2)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst1)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std = standard_deviation(lst2)
	#Call the function std() to calculate standard deviations for lst1 and lst2.
	std =
	#Print out the smaller standard deviation.
	#Print out the larger standard deviation.
	#Print out the mean of the two lists.
	#Print out the mean of the two lists.
	#Print out the mean of the two lists.
	return ""The smaller standard deviation is: "", std
	return ""The larger standard deviation is: "", std
	return ""The mean of the two lists is: "", mean(lst1)
	return ""The mean of the two lists is: "", mean(lst2)
"
77,77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","def compare_means(l1,l2):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean_lst with a list {lst1} and {lst2}.
	mean_lst = [lst1,lst2]
	#Iterate through the list {mean_lst} and compare the mean of each list.
	for i in range(len(mean_lst)):
		mean_lst[i] = [mean(lst1[i]),mean(lst2[i])]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Iterate through the list {lst2} and compare the mean of each list.
	for i in range(len(lst2)):
		lst2[i] = [mean(lst1[i]),mean(lst2[i])]
	#Return the mean of the two lists.
	#Create a function called mean() to compute the mean given a list of numbers.
	#Call the function mean() to calculate means for lst1 and lst2.
	#Print out the smaller mean.
	return mean(lst1[0])","def compare_means(l1,l2):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Initialize a variable named mean_lst with a list {lst1} and {lst2}.
	mean_lst = [lst1,lst2]
	#Iterate through the list {mean_lst} and compare the mean of each list.
	for i in range(len(mean_lst)):
		mean_lst[i] = [mean(lst1[i]),mean(lst2[i])]
	#Initialize a variable named lst2 with a list {l2}.
	lst2 = [l2]
	#Iterate through the list {lst2} and compare the mean of each list.
	for i in range(len(lst2)):
		lst2[i] = [mean(lst1[i]),mean(lst2[i])]
	#Return the mean of the two lists.
	#Create a function called mean() to compute the mean given a list of numbers.
	#Call the function mean() to calculate means for lst1 and lst2.
	#Print out the smaller mean.
"
78,78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","def coefficient_of_variation(l1):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {lst1}.
	lst2 = [lst1]
	#Initialize a variable named lst3 with a list {lst2}.
	lst3 = [lst2]
	#Initialize a variable named lst4 with a list {lst3}.
	lst4 = [lst3]
	#Initialize a variable named lst5 with a list {lst4}.
	lst5 = [lst4]
	#Initialize a variable named lst6 with a list {lst5}.
	lst
	#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively.
	avg = sum(lst1) / len(lst1)
	sd = 0
	#Compute the sum of squares for lst1 and assign it variable sum_of_squares.
	sum_of_squares = sum([pow(x - avg, 2) for x in lst1])
	#Compute the square root of the sum of squares for lst1 and assign it variable square_root.
	square_root = sqrt(sum_of_squares)
	#Compute the coefficient of variation for lst1 and assign it variable cv.
	cv = square_
	#Compute the coeffeicient of variation for lst2 and assign it variable cv2.
	cv2 = square_root
	#Compute the coeffeicient of variation for lst3 and assign it variable cv3.
	cv3 = square_root
	#Compute the coeffeicient of variation for lst4 and assign it variable cv4.
	cv4 = square_root
	#Compute the coeffeicient of variation for lst5 and assign it variable cv5.
	cv5 = square_root
	#Compute the coeffeicient of variation for lst6 and assign it variable cv6.
	cv6 = square
	#Print out the coefficient of variation for lst1.
	#Print out the coefficient of variation for lst2.
	#Print out the coefficient of variation for lst3.
	#Print out the coefficient of variation for lst4.
	#Print out the
	return ""The coefficient of variation for lst1 is: "" + str(cv)
	return ""The coefficient of variation for lst2 is: "" + str(cv2)
	return ""The coefficient of variation for lst3 is: "" + str(cv3)
	return ""The coefficient of variation for lst4 is: "" + str(cv4)","def coefficient_of_variation(l1):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Initialize a variable named lst2 with a list {lst1}.
	lst2 = [lst1]
	#Initialize a variable named lst3 with a list {lst2}.
	lst3 = [lst2]
	#Initialize a variable named lst4 with a list {lst3}.
	lst4 = [lst3]
	#Initialize a variable named lst5 with a list {lst4}.
	lst5 = [lst4]
	#Initialize a variable named lst6 with a list {lst5}.
	lst
	#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively.
	avg = sum(lst1) / len(lst1)
	sd = 0
	#Compute the sum of squares for lst1 and assign it variable sum_of_squares.
	sum_of_squares = sum([pow(x - avg, 2) for x in lst1])
	#Compute the square root of the sum of squares for lst1 and assign it variable square_root.
	square_root = sqrt(sum_of_squares)
	#Compute the coefficient of variation for lst1 and assign it variable cv.
	cv = square_
	#Compute the coeffeicient of variation for lst2 and assign it variable cv2.
	cv2 = square_root
	#Compute the coeffeicient of variation for lst3 and assign it variable cv3.
	cv3 = square_root
	#Compute the coeffeicient of variation for lst4 and assign it variable cv4.
	cv4 = square_root
	#Compute the coeffeicient of variation for lst5 and assign it variable cv5.
	cv5 = square_root
	#Compute the coeffeicient of variation for lst6 and assign it variable cv6.
	cv6 = square
	#Print out the coefficient of variation for lst1.
	#Print out the coefficient of variation for lst2.
	#Print out the coefficient of variation for lst3.
	#Print out the coefficient of variation for lst4.
	#Print out the
	return ""The coefficient of variation for lst1 is: "" + str(cv)
	return ""The coefficient of variation for lst2 is: "" + str(cv2)
	return ""The coefficient of variation for lst3 is: "" + str(cv3)
"
79,79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","def l1_norm(l1):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Iterate over the list {lst1} and append the value of each element of the list {lst1} to the list {lst2}.
	for i in range(len(lst1)):
		lst2 = []
		for j in range(len(lst1)):
			if i!= j:
				lst2.append(lst1[j])
		lst1 = lst2
	#Return the sum of the elements of the list {lst1}.
	#Get the absolute value of every element in lst1 and assign to a lst2.
	lst2 = [abs(x) for x in lst1]
	#Return the sum of the elements of the list {lst2}.
	#Compute the sum of lst2 and assign to l1.
	l1 = sum(lst2)
	#Print out l1.
	return l1","def l1_norm(l1):
	#Initialize a variable named lst1 with a list {l1}.
	lst1 = [l1]
	#Iterate over the list {lst1} and append the value of each element of the list {lst1} to the list {lst2}.
	for i in range(len(lst1)):
		lst2 = []
		for j in range(len(lst1)):
			if i!= j:
				lst2.append(lst1[j])
		lst1 = lst2
	#Return the sum of the elements of the list {lst1}.
	#Get the absolute value of every element in lst1 and assign to a lst2.
	lst2 = [abs(x) for x in lst1]
	#Return the sum of the elements of the list {lst2}.
	#Compute the sum of lst2 and assign to l1.
	l1 = sum(lst2)
	#Print out l1.
"
80,80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","def z-statistic(lst1):
	#Assigns a list {lst1} to a variable named lst1
	lst1 = sorted(lst1)
	#Assigns a variable named lst2 to a list of the first 10 elements of lst1
	lst2 = lst1[:10]
	#Assigns a variable named lst3 to a list of the last 10 elements of lst1
	lst3 = lst1[-10:]
	#Assigns a variable named lst4 to a list of the first 10 elements of lst3
	lst4 = lst3[:10]
	#Assigns a variable named lst5 to a list of the last
	#Compute the sample mean of lst1
	mean = sum(lst1)/len(lst1)
	#Assigns a variable named lst6 to a list of the first 10 elements of lst4
	lst6 = lst4[:10]
	#Assigns a variable named lst7 to a list of the last 10 elements of lst4
	lst7 = lst4[-10:]
	#Assigns a variable named lst8 to a list of the first 10 elements of lst7
	lst8 = lst7[:10]
	#Assigns a variable named lst9 to a
	#Compute the sample standard deviation of lst1
	std = sqrt(sum([(x-mean)**2 for x in lst1])/len(lst1))
	#Assigns a variable named lst10 to a list of the first 10 elements of lst8
	lst10 = lst8[:10]
	#Assigns a variable named lst11 to a list of the last 10 elements of lst8
	lst11 = lst8[-10:]
	#Assigns a variable named lst12 to a list of the first 10 elements of lst11
	lst12 = lst
	#Compute the z-statistic to test whether its mean is 0
	z = (mean-lst12[0])/(lst12[1]-lst12[0])
	#Assigns a variable named lst13 to a list of the first 10 elements of lst12
	lst13 = lst12[:10]
	#Assigns a variable named lst14 to a list of the last 10 elements of lst12
	lst14 = lst12[-10:]
	#Assigns a variable named lst15 to a list of the first 10 elements of lst14
	#Print out the z-statistic
	#Print out the first 10 elements of lst13
	#Print out the last 10 elements of lst13
	#Print out the first 10 elements of lst15
	#Print out the last
	return ""The z-statistic is: "",z
	return ""The first 10 elements of lst13 are: "",lst13
	return ""The last 10 elements of lst13 are: "",lst14
	return ""The first 10 elements of lst15 are: "",lst15","def z-statistic(lst1):
	#Assigns a list {lst1} to a variable named lst1
	lst1 = sorted(lst1)
	#Assigns a variable named lst2 to a list of the first 10 elements of lst1
	lst2 = lst1[:10]
	#Assigns a variable named lst3 to a list of the last 10 elements of lst1
	lst3 = lst1[-10:]
	#Assigns a variable named lst4 to a list of the first 10 elements of lst3
	lst4 = lst3[:10]
	#Assigns a variable named lst5 to a list of the last
	#Compute the sample mean of lst1
	mean = sum(lst1)/len(lst1)
	#Assigns a variable named lst6 to a list of the first 10 elements of lst4
	lst6 = lst4[:10]
	#Assigns a variable named lst7 to a list of the last 10 elements of lst4
	lst7 = lst4[-10:]
	#Assigns a variable named lst8 to a list of the first 10 elements of lst7
	lst8 = lst7[:10]
	#Assigns a variable named lst9 to a
	#Compute the sample standard deviation of lst1
	std = sqrt(sum([(x-mean)**2 for x in lst1])/len(lst1))
	#Assigns a variable named lst10 to a list of the first 10 elements of lst8
	lst10 = lst8[:10]
	#Assigns a variable named lst11 to a list of the last 10 elements of lst8
	lst11 = lst8[-10:]
	#Assigns a variable named lst12 to a list of the first 10 elements of lst11
	lst12 = lst
	#Compute the z-statistic to test whether its mean is 0
	z = (mean-lst12[0])/(lst12[1]-lst12[0])
	#Assigns a variable named lst13 to a list of the first 10 elements of lst12
	lst13 = lst12[:10]
	#Assigns a variable named lst14 to a list of the last 10 elements of lst12
	lst14 = lst12[-10:]
	#Assigns a variable named lst15 to a list of the first 10 elements of lst14
	#Print out the z-statistic
	#Print out the first 10 elements of lst13
	#Print out the last 10 elements of lst13
	#Print out the first 10 elements of lst15
	#Print out the last
	return ""The z-statistic is: "",z
	return ""The first 10 elements of lst13 are: "",lst13
	return ""The last 10 elements of lst13 are: "",lst14
"
81,81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","def move_all_negative_elements_to_end(lst):
	#Assign a list {lst} to named lst1
	lst1 = lst[:]
	#Assign a list {lst1} to named lst2
	lst2 = lst1[:]
	#Assign a list {lst2} to named lst3
	lst3 = lst2[:]
	#Assign a list {lst3} to named lst4
	lst4 = lst3[:]
	#Assign a list {lst4} to named lst5
	lst5 = lst4[:]
	#Assign a list {lst5} to named lst6
	lst6 = lst5[:]
	#Assign a list {lst6} to
	#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively
	lst_pos = []
	lst_neg = []
	#Iterate over lst1
	for i in lst1:
		#If the element is positive
		if i > 0:
			#Append the element to lst_pos
			lst_pos.append(i)
		#If the element is negative
		else:
			#Append the element to lst_neg
			lst_neg.append(i)
	#Iterate over lst2
	for i in lst2:
		#If the element is positive
		if i > 0:
	#Concatenate lst_pos and lst_neg and assign it lst2
			lst2.extend(lst_pos)
			lst2.extend(lst_neg)
			#Clear lst_pos and lst_neg
			lst_pos = []
			lst_neg = []
	#Return lst2
	#Print out lst2
	return lst2","def move_all_negative_elements_to_end(lst):
	#Assign a list {lst} to named lst1
	lst1 = lst[:]
	#Assign a list {lst1} to named lst2
	lst2 = lst1[:]
	#Assign a list {lst2} to named lst3
	lst3 = lst2[:]
	#Assign a list {lst3} to named lst4
	lst4 = lst3[:]
	#Assign a list {lst4} to named lst5
	lst5 = lst4[:]
	#Assign a list {lst5} to named lst6
	lst6 = lst5[:]
	#Assign a list {lst6} to
	#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively
	lst_pos = []
	lst_neg = []
	#Iterate over lst1
	for i in lst1:
		#If the element is positive
		if i > 0:
			#Append the element to lst_pos
			lst_pos.append(i)
		#If the element is negative
		else:
			#Append the element to lst_neg
			lst_neg.append(i)
	#Iterate over lst2
	for i in lst2:
		#If the element is positive
		if i > 0:
	#Concatenate lst_pos and lst_neg and assign it lst2
			lst2.extend(lst_pos)
			lst2.extend(lst_neg)
			#Clear lst_pos and lst_neg
			lst_pos = []
			lst_neg = []
	#Return lst2
	#Print out lst2
"
82,82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","def remove_alphabetical_characters(w):
	#Initialize a variable named w with a string {w}
	w = str(w)
	#Initialize a variable named new_w with a string {w}
	new_w = """"
	#Initialize a variable named i with a variable equal to 0
	i = 0
	#Initialize a variable named j with a variable equal to the length of w
	j = len(w)
	#While i is less than j
	while i < j:
		#If the character at i is not a letter
		if w[i]!= w[i].lower():
			#Add the character at i to
	#Lower every character in w
	new_w = w.lower()
	#Return the new_w
	#Replace every alphabetical characters in w with ''
	#Print out the new word after substitution
	return new_w","def remove_alphabetical_characters(w):
	#Initialize a variable named w with a string {w}
	w = str(w)
	#Initialize a variable named new_w with a string {w}
	new_w = """"
	#Initialize a variable named i with a variable equal to 0
	i = 0
	#Initialize a variable named j with a variable equal to the length of w
	j = len(w)
	#While i is less than j
	while i < j:
		#If the character at i is not a letter
		if w[i]!= w[i].lower():
			#Add the character at i to
	#Lower every character in w
	new_w = w.lower()
	#Return the new_w
	#Replace every alphabetical characters in w with ''
	#Print out the new word after substitution
"
83,83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","def largest_norm(X):
	#Import and initialize a numpy array ""X"" with the values {X}.
	X = np.array(X)
	#Return the largest norm of the array ""X"".
	#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".
	Xn = np.dot(X, X.T)
	#Return the largest norm of the array ""Xn"".
	#Set the diagonal elements of ""Xn"" to 0.
	np.fill_diagonal(Xn, 0)
	#Return the largest norm of the array ""Xn"".
	#Print out the maximum value (cast as a float) in ""Xn"".
	return np.max(Xn)","def largest_norm(X):
	#Import and initialize a numpy array ""X"" with the values {X}.
	X = np.array(X)
	#Return the largest norm of the array ""X"".
	#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".
	Xn = np.dot(X, X.T)
	#Return the largest norm of the array ""Xn"".
	#Set the diagonal elements of ""Xn"" to 0.
	np.fill_diagonal(Xn, 0)
	#Return the largest norm of the array ""Xn"".
	#Print out the maximum value (cast as a float) in ""Xn"".
"
84,84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","def f1_score(pred,y):
	#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.
	pred = np.array(pred)
	y = np.array(y)
	#Calculate the f1 score.
	#Compare the equivalence of two arrays and store the results as ""match"".
	match = np.equal(pred,y)
	#Calculate the number of true positives, false positives, and false negatives.
	tp = np.sum(match)
	fp = np.sum(np.logical_not(match))
	fn = np.sum(np.logical_not(np.logical_and(match,np.logical_not(y))))
	#Calculate the f1 score.
	f1 = 2*tp/(2*tp+fp+fn)
	#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".
	non_zero = y>0
	#Calculate the recall.
	recall = tp/(tp+fn)
	#Calculate the precision.
	precision = tp/(tp+fp)
	#Calculate the accuracy.
	accuracy = (tp+tn)/(tp+tn+fp+fn)
	#Return the f1 score, recall, precision, and accuracy.
	#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".
	correct = np.logical_and(match,non_zero)
	#Calculate the number of correct predictions.
	correct_predictions = np.sum(correct)
	#Calculate the number of predictions.
	total_predictions = np.sum(match)
	#Calculate the f1 score.
	f1_score = 2*correct_predictions/(2*correct_predictions+total_predictions)
	#Return the f1 score.
	#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".
	prec = correct_predictions/total_predictions
	#Return the precision.
	#Compute the recall by dividing the number of True values in ""correct"" by that in ""y"", and store as ""rec"".
	rec = correct_predictions/total_predictions
	#Return the recall.
	#Compute the accuracy by dividing the number of True values in ""correct"" by that in ""y"", and store as ""acc"".
	acc = correct_predictions/total_predictions
	#Return the accuracy.
	#Return the f1 score, recall, precision, and
	#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".
	#Return the recall.
	#Return the precision.
	#Return the accuracy.
	#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.
	#Return the harmonic mean.
	return f1_score, recall, precision, acc","def f1_score(pred,y):
	#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.
	pred = np.array(pred)
	y = np.array(y)
	#Calculate the f1 score.
	#Compare the equivalence of two arrays and store the results as ""match"".
	match = np.equal(pred,y)
	#Calculate the number of true positives, false positives, and false negatives.
	tp = np.sum(match)
	fp = np.sum(np.logical_not(match))
	fn = np.sum(np.logical_not(np.logical_and(match,np.logical_not(y))))
	#Calculate the f1 score.
	f1 = 2*tp/(2*tp+fp+fn)
	#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".
	non_zero = y>0
	#Calculate the recall.
	recall = tp/(tp+fn)
	#Calculate the precision.
	precision = tp/(tp+fp)
	#Calculate the accuracy.
	accuracy = (tp+tn)/(tp+tn+fp+fn)
	#Return the f1 score, recall, precision, and accuracy.
	#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".
	correct = np.logical_and(match,non_zero)
	#Calculate the number of correct predictions.
	correct_predictions = np.sum(correct)
	#Calculate the number of predictions.
	total_predictions = np.sum(match)
	#Calculate the f1 score.
	f1_score = 2*correct_predictions/(2*correct_predictions+total_predictions)
	#Return the f1 score.
	#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".
	prec = correct_predictions/total_predictions
	#Return the precision.
	#Compute the recall by dividing the number of True values in ""correct"" by that in ""y"", and store as ""rec"".
	rec = correct_predictions/total_predictions
	#Return the recall.
	#Compute the accuracy by dividing the number of True values in ""correct"" by that in ""y"", and store as ""acc"".
	acc = correct_predictions/total_predictions
	#Return the accuracy.
	#Return the f1 score, recall, precision, and
	#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".
	#Return the recall.
	#Return the precision.
	#Return the accuracy.
	#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.
	#Return the harmonic mean.
"
85,85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","def add_space(x):
	#Initialize a string named ""concat"" with {x}.
	concat = ""{x}""
	#Loop through the string ""concat"" and add spaces to the end of each word.
	for i in range(len(concat)):
		if concat[i] == "" "":
			concat = concat[:i] + "" "" + concat[i+1:]
	#Return the string ""concat"".
	#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.
	import re
	pat = re.compile(""[A-Z]"")
	#Loop through the string ""concat"" and replace each group of capital alphabets with a space.
	for i in range(len(concat)):
		concat = concat.replace(pat.search(concat[i]).group(), "" "")
	#Return the string ""concat"".
	#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".
	result = """"
	for i in range(len(concat)):
		if pat.search(concat[i]):
			result += concat[i] + "" ""
	#Print out ""result"".
	return result","def add_space(x):
	#Initialize a string named ""concat"" with {x}.
	concat = ""{x}""
	#Loop through the string ""concat"" and add spaces to the end of each word.
	for i in range(len(concat)):
		if concat[i] == "" "":
			concat = concat[:i] + "" "" + concat[i+1:]
	#Return the string ""concat"".
	#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.
	import re
	pat = re.compile(""[A-Z]"")
	#Loop through the string ""concat"" and replace each group of capital alphabets with a space.
	for i in range(len(concat)):
		concat = concat.replace(pat.search(concat[i]).group(), "" "")
	#Return the string ""concat"".
	#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".
	result = """"
	for i in range(len(concat)):
		if pat.search(concat[i]):
			result += concat[i] + "" ""
	#Print out ""result"".
"
86,86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","def remove_outlier(x):
	#Initialize a list ""x"" with the values {x}.
	x = [x]
	#Iterate through the list ""x"" and remove the values that are outliers.
	for i in range(len(x)):
		if x[i] > 30000000000000000000000000000000000000000000000000000000000000000000000000000000000
	#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".
	mean = np.mean(x)
	std = np.std(x)
	#Iterate through the list ""x"" and remove the values that are outliers.
	for i in range(len(x)):
		if x[i] > mean + 3 * std:
			x.remove(x[i])
	#Return the list ""x"".
	#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".
	results = []
	for i in range(len(x)):
		if x[i] < mean - 2 * std:
			results.append(x[i])
		if x[i] > mean + 2 * std:
			results.append(x[i])
	#Return the list ""results"".
	#Sort ""results"" in ascending order and print it out.
	results.sort()
	#Return the list ""results"".
	return results","def remove_outlier(x):
	#Initialize a list ""x"" with the values {x}.
	x = [x]
	#Iterate through the list ""x"" and remove the values that are outliers.
	for i in range(len(x)):
		if x[i] > 30000000000000000000000000000000000000000000000000000000000000000000000000000000000
	#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".
	mean = np.mean(x)
	std = np.std(x)
	#Iterate through the list ""x"" and remove the values that are outliers.
	for i in range(len(x)):
		if x[i] > mean + 3 * std:
			x.remove(x[i])
	#Return the list ""x"".
	#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".
	results = []
	for i in range(len(x)):
		if x[i] < mean - 2 * std:
			results.append(x[i])
		if x[i] > mean + 2 * std:
			results.append(x[i])
	#Return the list ""results"".
	#Sort ""results"" in ascending order and print it out.
	results.sort()
	#Return the list ""results"".
"
87,87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","def convert_to_categorical(x):
	#Initialize a list ""x"" with the values {x}
	x = np.array(x)
	#Convert the list ""x"" to a categorical variable
	x = to_categorical(x)
	#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".
	vocab = np.unique(x)
	#Initialize a list ""x_new"" with the values {x}
	x_new = []
	#Iterate over the elements of ""vocab""
	for i in vocab:
		#Find the index of the element ""i"" in ""x""
		index = np.where(x == i)
		#Append the element ""i"" to the list ""x_new""
		x_new.append(x[index])
	#Return the list ""x_new""
	#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".
	v2i = dict(zip(vocab, range(len(vocab))))
	#Create a list ""x_new"" with the values {x}
	x_new = np.array(x_new)
	#Convert the list ""x_new"" to a categorical variable
	x_new = to_categorical(x_new)
	#Return the list ""x_new""
	#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.
	features = np.zeros((len(x), len(index)), dtype=int)
	#Iterate over the elements of ""index""
	for i in range(len(index)):
		#Find the index of the element ""i"" in ""x""
		index_i = np.where(x == index[i])
		#Append the element ""i"" to the list ""features""
		features[:, i] = x_new[index_i]
	#Return the numpy array ""features""
	#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".
	for i in range(len(x)):
		for j in range(len(index)):
			features[i, j] = v2i[x[i]]
	#Return the numpy array ""features""
	#Print out ""features"".
	#Return the numpy array ""features""
	return features","def convert_to_categorical(x):
	#Initialize a list ""x"" with the values {x}
	x = np.array(x)
	#Convert the list ""x"" to a categorical variable
	x = to_categorical(x)
	#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".
	vocab = np.unique(x)
	#Initialize a list ""x_new"" with the values {x}
	x_new = []
	#Iterate over the elements of ""vocab""
	for i in vocab:
		#Find the index of the element ""i"" in ""x""
		index = np.where(x == i)
		#Append the element ""i"" to the list ""x_new""
		x_new.append(x[index])
	#Return the list ""x_new""
	#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".
	v2i = dict(zip(vocab, range(len(vocab))))
	#Create a list ""x_new"" with the values {x}
	x_new = np.array(x_new)
	#Convert the list ""x_new"" to a categorical variable
	x_new = to_categorical(x_new)
	#Return the list ""x_new""
	#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.
	features = np.zeros((len(x), len(index)), dtype=int)
	#Iterate over the elements of ""index""
	for i in range(len(index)):
		#Find the index of the element ""i"" in ""x""
		index_i = np.where(x == index[i])
		#Append the element ""i"" to the list ""features""
		features[:, i] = x_new[index_i]
	#Return the numpy array ""features""
	#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".
	for i in range(len(x)):
		for j in range(len(index)):
			features[i, j] = v2i[x[i]]
	#Return the numpy array ""features""
	#Print out ""features"".
	#Return the numpy array ""features""
"
88,88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","def group_by_key(fun,x):
	#Initialize a variable ""x"" with {x}.
	x = {x}
	#Initialize a variable ""y"" with an empty list.
	y = []
	#Iterate over the x variable.
	for i in x:
		#If the value of i is not in the y variable, add it to the y variable.
		if i not in y:
			#Add i to the y variable.
			y.append(i)
		#If the value of i is in the y variable, add the value of fun(i) to the y variable.
		else:
			y.append(fun
	#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".
	mapped = [fun(i) for i in y]
	#Return the mapped variable.
	#Convert each element in ""mapped"" into string.
	#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.
	results = {str(i):[] for i in set(mapped)}
	#Iterate over the mapped variable.
	for i in mapped:
		#If the value of i is in the results dictionary, add the value of fun(i) to the results dictionary.
		if i in results:
			results[i].append(fun(i))
		#If the value of i is not in the results dictionary, add it to the results dictionary.
		else:
			results[i] = [fun(i)]
	#Return the results variable.
	#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.
	#Print out the ""results"".
	for i in zip(mapped,x):
	#Return the results variable.
	return results","def group_by_key(fun,x):
	#Initialize a variable ""x"" with {x}.
	x = {x}
	#Initialize a variable ""y"" with an empty list.
	y = []
	#Iterate over the x variable.
	for i in x:
		#If the value of i is not in the y variable, add it to the y variable.
		if i not in y:
			#Add i to the y variable.
			y.append(i)
		#If the value of i is in the y variable, add the value of fun(i) to the y variable.
		else:
			y.append(fun
	#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".
	mapped = [fun(i) for i in y]
	#Return the mapped variable.
	#Convert each element in ""mapped"" into string.
	#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.
	results = {str(i):[] for i in set(mapped)}
	#Iterate over the mapped variable.
	for i in mapped:
		#If the value of i is in the results dictionary, add the value of fun(i) to the results dictionary.
		if i in results:
			results[i].append(fun(i))
		#If the value of i is not in the results dictionary, add it to the results dictionary.
		else:
			results[i] = [fun(i)]
	#Return the results variable.
	#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.
	#Print out the ""results"".
	for i in zip(mapped,x):
	#Return the results variable.
"
89,89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","def max_stock_profit(array):
	#Initialize a variable ""best"" with -1, ""array"" with {array}
	best = -1
	array = sorted(array)
	#Iterate through the array
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
	#Assign the first element of ""array"" to a variable named ""minimum"".
	minimum = array[0]
	#Iterate through the array
	for i in range(len(array)):
		#If the current element is less than the minimum, update the minimum
		if array[i] < minimum:
			minimum = array[i]
	#Return the best and minimum
	#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".
	#Print out ""best"".
	#Print out ""minimum"".
	return best
	return minimum","def max_stock_profit(array):
	#Initialize a variable ""best"" with -1, ""array"" with {array}
	best = -1
	array = sorted(array)
	#Iterate through the array
	for i in range(len(array)):
		#If the current element is greater than the best, update the best
		if array[i] > best:
			best = array[i]
	#Assign the first element of ""array"" to a variable named ""minimum"".
	minimum = array[0]
	#Iterate through the array
	for i in range(len(array)):
		#If the current element is less than the minimum, update the minimum
		if array[i] < minimum:
			minimum = array[i]
	#Return the best and minimum
	#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".
	#Print out ""best"".
	#Print out ""minimum"".
	return best
"
90,90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","def sum_positions(target,nums):
	#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.
	target = target
	nums = nums
	result = []
	#Loop through the nums list, and add the value of each element to the result list.
	for i in nums:
		result.append(i+target)
	#Return the result list.
	#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.
	#Print out the sum of elements in ""result"".
	return result
	return sum(result)","def sum_positions(target,nums):
	#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.
	target = target
	nums = nums
	result = []
	#Loop through the nums list, and add the value of each element to the result list.
	for i in nums:
		result.append(i+target)
	#Return the result list.
	#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.
	#Print out the sum of elements in ""result"".
	return result
"
91,91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","def find_missing_num(nums,N):
	#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.
	#Create a variable ""missing_num"" with the value 0.
	#Create a variable ""count"" with the value 0.
	#Create a variable ""i"" with the value 0.
	#Create a variable ""j"" with the value 0.
	#Create a variable ""k"" with the value 0.
	#Create a variable ""l"" with the value 0.
	#Create a variable ""m"" with the value 0.
	#Create a variable ""n"" with the value 0.
	#Create a variable
	#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy"" which is a set of
	#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_
	#Pop the only element in ""diff"" print it out.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a","def find_missing_num(nums,N):
	#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.
	#Create a variable ""missing_num"" with the value 0.
	#Create a variable ""count"" with the value 0.
	#Create a variable ""i"" with the value 0.
	#Create a variable ""j"" with the value 0.
	#Create a variable ""k"" with the value 0.
	#Create a variable ""l"" with the value 0.
	#Create a variable ""m"" with the value 0.
	#Create a variable ""n"" with the value 0.
	#Create a variable
	#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy"" which is a set of
	#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_
	#Pop the only element in ""diff"" print it out.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
	#Initialize a variable ""missing_nums_set_copy_copy_copy_copy_copy_copy_copy_copy_copy"" which is a set of numbers between 1 and N.
"
92,92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","def common_num_in_matrix(x):
	#Assign {x} to a variable named ""X"".
	X = x
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a
	#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".
	common = set(X[0])
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign
	#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""
	for i in range(1, len(X)):
		#Assign {common} to a variable named ""common"".
		common = common.intersection(set(X[i]))
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named
	#Cast ""common"" as a list and print it out.
	common = list(common)
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common","def common_num_in_matrix(x):
	#Assign {x} to a variable named ""X"".
	X = x
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a variable named ""X"".
	X = X
	#Assign {X} to a
	#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".
	common = set(X[0])
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign
	#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""
	for i in range(1, len(X)):
		#Assign {common} to a variable named ""common"".
		common = common.intersection(set(X[i]))
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named
	#Cast ""common"" as a list and print it out.
	common = list(common)
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
	#Assign {common} to a variable named ""common"".
	common = common
"
93,93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","def sum_collatz(start):
	#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.
	seq = [start]
	#While the sequence is not empty:
	while len(seq) > 0:
		#Get the first element of the sequence.
		current = seq.pop(0)
		#If the current element is even, add 2 to the sequence.
		if current % 2 == 0:
			seq.append(current + 2)
		#If the current element is odd, add 3 to the sequence.
		else:
			seq.append(current + 3)
	#Return the sequence.
	#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".
	#If ""start"" is an odd number, divide by 3, otherwise multiply by 2 and add 1, then store the number to ""start"" as well as appending to ""seq"".
	#Return the sequence.
	#Store the sum of all numbers in ""seq"" to ""results"".
	results = 0
	for i in seq:
		if i % 2 == 0:
			results += i / 2
		else:
			results += i * 3 + 1
	#Print out the ""results"".
	return results","def sum_collatz(start):
	#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.
	seq = [start]
	#While the sequence is not empty:
	while len(seq) > 0:
		#Get the first element of the sequence.
		current = seq.pop(0)
		#If the current element is even, add 2 to the sequence.
		if current % 2 == 0:
			seq.append(current + 2)
		#If the current element is odd, add 3 to the sequence.
		else:
			seq.append(current + 3)
	#Return the sequence.
	#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".
	#If ""start"" is an odd number, divide by 3, otherwise multiply by 2 and add 1, then store the number to ""start"" as well as appending to ""seq"".
	#Return the sequence.
	#Store the sum of all numbers in ""seq"" to ""results"".
	results = 0
	for i in seq:
		if i % 2 == 0:
			results += i / 2
		else:
			results += i * 3 + 1
	#Print out the ""results"".
"
94,94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","def cup_swap(start,swap):
	#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.
	pos = start
	#Define a variable ""temp"" with ""{pos}"".
	temp = pos
	#Define a variable ""temp2"" with ""{temp}"".
	temp2 = temp
	#Define a variable ""temp3"" with ""{temp2}"".
	temp3 = temp2
	#Define a variable ""temp4"" with ""{temp3}"".
	temp4 = temp3
	#Define a variable ""temp5"" with ""{temp4}"".
	temp5 = temp4
	#Define a variable ""temp6"" with ""{temp5}"".
	temp6
	#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.
	def move(x,y):
		#Write a while loop that runs until the string ""x"" is not found in y.
		while x not in y:
			#Write a if statement that checks if x is in y.
			if x in y:
				#Write a for loop that runs until the string ""x"" is not found in y.
				for i in range(len(y)):
					#Write a if statement that checks if x is in y.
					if x in y:
						#Write a if statement that checks if x is in y
	#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".
	for i in range(len(swap)):
		if swap[i] in pos:
			pos = move(pos,swap[i])
	#Return the result of ""pos"".
	#Print out ""pos"".
	return pos","def cup_swap(start,swap):
	#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.
	pos = start
	#Define a variable ""temp"" with ""{pos}"".
	temp = pos
	#Define a variable ""temp2"" with ""{temp}"".
	temp2 = temp
	#Define a variable ""temp3"" with ""{temp2}"".
	temp3 = temp2
	#Define a variable ""temp4"" with ""{temp3}"".
	temp4 = temp3
	#Define a variable ""temp5"" with ""{temp4}"".
	temp5 = temp4
	#Define a variable ""temp6"" with ""{temp5}"".
	temp6
	#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.
	def move(x,y):
		#Write a while loop that runs until the string ""x"" is not found in y.
		while x not in y:
			#Write a if statement that checks if x is in y.
			if x in y:
				#Write a for loop that runs until the string ""x"" is not found in y.
				for i in range(len(y)):
					#Write a if statement that checks if x is in y.
					if x in y:
						#Write a if statement that checks if x is in y
	#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".
	for i in range(len(swap)):
		if swap[i] in pos:
			pos = move(pos,swap[i])
	#Return the result of ""pos"".
	#Print out ""pos"".
"
95,95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","def reverse_digits(x):
	#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.
	stack = []
	num = str(x)
	#Iterate through the string ""num"" and add each character to the stack.
	for i in num:
		stack.append(i)
	#Iterate through the stack and reverse each character.
	for i in range(len(stack)):
		stack[i] = int(stack[i])
		stack[i] = stack[i] * 10
	#Join the stack back into a string.
	#For each chracter in ""num"", append the character to ""stack"".
	#Then, convert the stack back into a string.
	#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.
	result = """"
	while len(stack) > 0:
		result = result + stack.pop()
	#Cast ""result"" as integer and print it out.
	return int(result)","def reverse_digits(x):
	#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.
	stack = []
	num = str(x)
	#Iterate through the string ""num"" and add each character to the stack.
	for i in num:
		stack.append(i)
	#Iterate through the stack and reverse each character.
	for i in range(len(stack)):
		stack[i] = int(stack[i])
		stack[i] = stack[i] * 10
	#Join the stack back into a string.
	#For each chracter in ""num"", append the character to ""stack"".
	#Then, convert the stack back into a string.
	#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.
	result = """"
	while len(stack) > 0:
		result = result + stack.pop()
	#Cast ""result"" as integer and print it out.
"
96,96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","def calculate_arrows(x):
	#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".
	arrows = x.split("" "")
	joined_arrow = """"
	for i in arrows:
		joined_arrow += i + "" -> ""
	#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.
	left = arrows.count(""left"")
	right = arrows.count(""right"")
	#Return the result of ""joined_arrow"" and ""left"" and ""right"" as a tuple.
	#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.
	#Otherwise, print out the string that consists of (left - right) left-facing arrows.
	if right > left:
	else:","def calculate_arrows(x):
	#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".
	arrows = x.split("" "")
	joined_arrow = """"
	for i in arrows:
		joined_arrow += i + "" -> ""
	#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.
	left = arrows.count(""left"")
	right = arrows.count(""right"")
	#Return the result of ""joined_arrow"" and ""left"" and ""right"" as a tuple.
	#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.
	#Otherwise, print out the string that consists of (left - right) left-facing arrows.
	if right > left:
"
97,97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","def check_interval_num_(x):
	#Initialize an array ""array"" with {x}.
	array = [x]
	#Iterate over the array.
	for i in range(len(array)):
		#If the current element is not the last element.
		if i!= len(array) - 1:
			#Add the current element to the array.
			array.append(array[i] + array[i + 1])
	#Return the array.
	#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".
	diff = max(array) - min(array)
	#Return the difference.
	#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".
	result = diff in array
	#Return the result.
	#Print out ""result"" if ""result"" is True.
	if result:
	else:","def check_interval_num_(x):
	#Initialize an array ""array"" with {x}.
	array = [x]
	#Iterate over the array.
	for i in range(len(array)):
		#If the current element is not the last element.
		if i!= len(array) - 1:
			#Add the current element to the array.
			array.append(array[i] + array[i + 1])
	#Return the array.
	#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".
	diff = max(array) - min(array)
	#Return the difference.
	#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".
	result = diff in array
	#Return the result.
	#Print out ""result"" if ""result"" is True.
	if result:
"
98,98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","def length_encoding(x):
	#Initialize a variable ""original"" with ""{x}""
	original = x
	#Initialize a variable ""encoded"" with ""{x}""
	encoded = """"
	#Loop through each character in the original string
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a capital letter
			if original[i].isupper():
				#Append the character to the encoded string
				encoded += chr(ord(original[i]) + 65)
			#If the character is a lower case letter
			else:
	#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.
	#The OrderedDict is used to sort the letters in the original string.
	#The OrderedDict is used to sort the letters in the encoded string.
				dic = collections.OrderedDict()
				#Loop through each letter in the original string
				for j in range(len(original)):
					#If the character is a letter
					if original[j].isalpha():
						#If the character is a capital letter
						if original[j].isupper():
							#Append the character to the encoded string
							dic[original[j]] = dic.get(original[j],
	#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.
	#If the character is not in the dictionary, then add the character to the dictionary with the value of 1.
					if original[j] not in dic:
						dic[original[j]] = 1
				#Sort the dictionary by the values in the dictionary
				sorted_dic = sorted(dic.items(), key=operator.itemgetter(1), reverse=True)
				#Loop through each letter in the sorted dictionary
				for k in range(len(sorted_dic)):
					#If the character is a capital letter
					if sorted_dic[k][0
	#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".
					result = """"
					#If the character is a capital letter
					if sorted_dic[k][0].isupper():
						#Append the character to the result
						result += sorted_dic[k][0] + "" ""
					#If the character is a lower case letter
					else:
						#Append the character to the result
						result += sorted_dic[k][0].lower() + "" ""
					#Append the value of the dictionary to the result
					result += str(sorted_dic[k][1])
					#Append the result to the
	#Print out ""result"".
				#Append the encoded string to the encoded string
				encoded += result
		#If the character is not a letter
		else:
			#Append the character to the encoded string
			encoded += original[i]
	#Return the encoded string
	return encoded","def length_encoding(x):
	#Initialize a variable ""original"" with ""{x}""
	original = x
	#Initialize a variable ""encoded"" with ""{x}""
	encoded = """"
	#Loop through each character in the original string
	for i in range(len(original)):
		#If the character is a letter
		if original[i].isalpha():
			#If the character is a capital letter
			if original[i].isupper():
				#Append the character to the encoded string
				encoded += chr(ord(original[i]) + 65)
			#If the character is a lower case letter
			else:
	#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.
	#The OrderedDict is used to sort the letters in the original string.
	#The OrderedDict is used to sort the letters in the encoded string.
				dic = collections.OrderedDict()
				#Loop through each letter in the original string
				for j in range(len(original)):
					#If the character is a letter
					if original[j].isalpha():
						#If the character is a capital letter
						if original[j].isupper():
							#Append the character to the encoded string
							dic[original[j]] = dic.get(original[j],
	#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.
	#If the character is not in the dictionary, then add the character to the dictionary with the value of 1.
					if original[j] not in dic:
						dic[original[j]] = 1
				#Sort the dictionary by the values in the dictionary
				sorted_dic = sorted(dic.items(), key=operator.itemgetter(1), reverse=True)
				#Loop through each letter in the sorted dictionary
				for k in range(len(sorted_dic)):
					#If the character is a capital letter
					if sorted_dic[k][0
	#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".
					result = """"
					#If the character is a capital letter
					if sorted_dic[k][0].isupper():
						#Append the character to the result
						result += sorted_dic[k][0] + "" ""
					#If the character is a lower case letter
					else:
						#Append the character to the result
						result += sorted_dic[k][0].lower() + "" ""
					#Append the value of the dictionary to the result
					result += str(sorted_dic[k][1])
					#Append the result to the
	#Print out ""result"".
				#Append the encoded string to the encoded string
				encoded += result
		#If the character is not a letter
		else:
			#Append the character to the encoded string
			encoded += original[i]
	#Return the encoded string
"
99,99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","def convert_email(x):
	#Import re and define a regular expression that matches an email address.
	import re
	regex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"")
	#If the regular expression matches the email address, return the email address.
	if regex.match(x):
	else:
	#Search for an email address in ""{x}"" and store the first match to a variable ""address"".
		address = re.search(r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"", x)
		#If the regular expression matches the email address, return the email address.
		if address:
		else:
	#Remove the substring starting from the @ symbol from ""address"".
		address = address.group(0)[1:]
	#Return the email address.
	#Replace non-alphabetical symbols with a whitespace in ""address"".
	#Print out ""address"".
		return address.replace("" "", """")","def convert_email(x):
	#Import re and define a regular expression that matches an email address.
	import re
	regex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"")
	#If the regular expression matches the email address, return the email address.
	if regex.match(x):
	else:
	#Search for an email address in ""{x}"" and store the first match to a variable ""address"".
		address = re.search(r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"", x)
		#If the regular expression matches the email address, return the email address.
		if address:
		else:
	#Remove the substring starting from the @ symbol from ""address"".
		address = address.group(0)[1:]
	#Return the email address.
	#Replace non-alphabetical symbols with a whitespace in ""address"".
	#Print out ""address"".
"
100,100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","def second_largest(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the largest number to a variable named ""largest"".
	largest = my_numbers[0]
	#Assign the second largest number to a variable named ""second_largest"".
	second_largest = my_numbers[0]
	#Assign the third largest number to a variable named ""third_largest"".
	third_largest = my_numbers[0]
	#Assign the fourth largest number to a variable named ""fourth_largest"".
	fourth_largest = my_numbers[0]
	#Assign the fifth largest number to
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns
	#Compute the distinct elements of my_numbers and store as unique_list.
	#Compute the distinct elements of unique_list and store as unique_list_2.
	#Compute the distinct elements of unique_list_2 and store as unique_list_3.
	#Compute the distinct elements of unique_list_3 and store as unique_list_4.
	#Compute the distinct elements of unique_list_4 and store as unique_list_5.
	#Compute the distinct elements of unique_list_5 and store as unique_list_6.
	#Compute the distinct elements of unique_list_6 and store as unique_list_
	#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_2. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_3. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_4. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_5. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_","def second_largest(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the largest number to a variable named ""largest"".
	largest = my_numbers[0]
	#Assign the second largest number to a variable named ""second_largest"".
	second_largest = my_numbers[0]
	#Assign the third largest number to a variable named ""third_largest"".
	third_largest = my_numbers[0]
	#Assign the fourth largest number to a variable named ""fourth_largest"".
	fourth_largest = my_numbers[0]
	#Assign the fifth largest number to
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns the distinct elements of a list.
	#Implement a function that returns
	#Compute the distinct elements of my_numbers and store as unique_list.
	#Compute the distinct elements of unique_list and store as unique_list_2.
	#Compute the distinct elements of unique_list_2 and store as unique_list_3.
	#Compute the distinct elements of unique_list_3 and store as unique_list_4.
	#Compute the distinct elements of unique_list_4 and store as unique_list_5.
	#Compute the distinct elements of unique_list_5 and store as unique_list_6.
	#Compute the distinct elements of unique_list_6 and store as unique_list_
	#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_2. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_3. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_4. If the second largest does not exit, print out the maximum.
	#Print out the second largest element in unique_list_5. If the second largest does not exit, print out the maximum.
"
101,101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","def largest_prefix_sum(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""max_sum"" to a variable named ""max_sum"".
	max_sum = 0
	#Assign the variable ""max_prefix"" to a variable named ""max_prefix"".
	max_prefix = 0
	#Assign the variable ""max_prefix_sum"" to a variable named ""max_prefix_sum"".
	max_prefix_sum = 0
	#Assign the variable ""max_prefix_sum_index"" to a variable named ""max_prefix_sum_index"".
	max
	#Implement a function that returns the prefix sum of a list as an array.
	#The function should take in a list of numbers and return the prefix sum of the list.
	#The function should return an array of numbers.
	#The function should return an empty array if the list is empty.
	#The function should return an array of numbers if the list is not empty.
	#The function should return the prefix sum of the list if the list is not empty.
	#The function should return the prefix sum of the list if the list is empty.
	#The function should return the prefix sum of the list if the list is empty.
	#
	#Compute the prefix sum of my_numbers and store as prefix_sum_list.
	#Compute the prefix sum of my_numbers and store as prefix_sum_array.
	#Compute the prefix sum of my_numbers and store as prefix_sum_prefix_sum_array.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix
	#Print out the largest element in prefix_sum_list.","def largest_prefix_sum(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""max_sum"" to a variable named ""max_sum"".
	max_sum = 0
	#Assign the variable ""max_prefix"" to a variable named ""max_prefix"".
	max_prefix = 0
	#Assign the variable ""max_prefix_sum"" to a variable named ""max_prefix_sum"".
	max_prefix_sum = 0
	#Assign the variable ""max_prefix_sum_index"" to a variable named ""max_prefix_sum_index"".
	max
	#Implement a function that returns the prefix sum of a list as an array.
	#The function should take in a list of numbers and return the prefix sum of the list.
	#The function should return an array of numbers.
	#The function should return an empty array if the list is empty.
	#The function should return an array of numbers if the list is not empty.
	#The function should return the prefix sum of the list if the list is not empty.
	#The function should return the prefix sum of the list if the list is empty.
	#The function should return the prefix sum of the list if the list is empty.
	#
	#Compute the prefix sum of my_numbers and store as prefix_sum_list.
	#Compute the prefix sum of my_numbers and store as prefix_sum_array.
	#Compute the prefix sum of my_numbers and store as prefix_sum_prefix_sum_array.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix sum of my_numbers.
	#
	#Return the prefix
"
102,102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","def closest_element_to_zero(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""min_diff"" to a variable named ""min_diff"".
	min_diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	#Count the distances from each element in my_number to 0..................................................................................................................................
	#Find the closest number to 0 in my_number and store as closest_number.
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			closest_number = i
			#Find the difference between the closest number and 0.
			min_diff = abs(closest_number - 0)
	#Return the closest number to 0.
	#Print out the distance from closest_number todef closest_element_to_zero(A):
	#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".
	my_numbers = A
	#Assign the variable ""min_diff"" to a variable named ""min_diff"".
	min_diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	#Count the distances from each element in my_number to 0..................................................................................................................................
	#Find the closest number to 0 in my_number and store as closest_number.
	for i in range(len(my_numbers)):
		if my_numbers[i] == 0:
			closest_number = i
			#Find the difference between the closest number and 0.
			min_diff = abs(closest_number - 0)
	#Return the closest number to 0.
"
103,103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","def consecutive_unique_char(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign the length of ""my_string"" to a variable named ""length"".
	length = len(my_string)
	#Assign the variable ""count"" to a variable named ""count"".
	count = 0
	#Assign the variable ""unique_char"" to a variable named ""unique_char"".
	unique_char = """"
	#Assign the variable ""unique_char_count"" to a variable named ""unique_char_count"".
	unique_char_count = 0
	#Assign the variable ""unique_
	#Implement a function that checks whether a string only contains unique characters.
	#If the string only contains unique characters, then print ""YES"".
	#If the string contains more than one unique character, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""
	#Find the longest substring of my_string that contains only unique characters and store as result_substring.
	#If the length of result_substring is greater than 1, then print ""YES"".
	#If the length of result_substring is less than 1, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring
	#Print out the length of result_substring.
	#If the length of result_substring is greater than 1, then print ""YES"".
	#If the length of result_substring is less than 1, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring","def consecutive_unique_char(A):
	#Assign the string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign the length of ""my_string"" to a variable named ""length"".
	length = len(my_string)
	#Assign the variable ""count"" to a variable named ""count"".
	count = 0
	#Assign the variable ""unique_char"" to a variable named ""unique_char"".
	unique_char = """"
	#Assign the variable ""unique_char_count"" to a variable named ""unique_char_count"".
	unique_char_count = 0
	#Assign the variable ""unique_
	#Implement a function that checks whether a string only contains unique characters.
	#If the string only contains unique characters, then print ""YES"".
	#If the string contains more than one unique character, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""NO"".
	#If the string contains no unique characters, then print ""
	#Find the longest substring of my_string that contains only unique characters and store as result_substring.
	#If the length of result_substring is greater than 1, then print ""YES"".
	#If the length of result_substring is less than 1, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring
	#Print out the length of result_substring.
	#If the length of result_substring is greater than 1, then print ""YES"".
	#If the length of result_substring is less than 1, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
	#If the length of result_substring is 0, then print ""NO"".
"
104,104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","def highest_frequency_char(A):
	#Assign a string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign a variable named ""my_string_length"" to a variable named ""my_string_length"".
	my_string_length = len(my_string)
	#Assign a variable named ""my_string_char"" to a variable named ""my_string_char"".
	my_string_char = """"
	#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
	my_string_char_count = 0
	#Assign a variable named
	#Find the repeated characters in the my_string.
	for i in range(my_string_length):
		#Assign a variable named ""my_string_char"" to a variable named ""my_string_char"".
		my_string_char = my_string[i]
		#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
		my_string_char_count = my_string_char_count + 1
		#If the character is repeated more than once, print the character and the number of times it is repeated.
		if
	#Count the frequency of these repeated characters.
	#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
	my_string_char_count
	#Return the character with the highest frequency.
	#Print out the length of most frequent character.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of","def highest_frequency_char(A):
	#Assign a string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign a variable named ""my_string_length"" to a variable named ""my_string_length"".
	my_string_length = len(my_string)
	#Assign a variable named ""my_string_char"" to a variable named ""my_string_char"".
	my_string_char = """"
	#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
	my_string_char_count = 0
	#Assign a variable named
	#Find the repeated characters in the my_string.
	for i in range(my_string_length):
		#Assign a variable named ""my_string_char"" to a variable named ""my_string_char"".
		my_string_char = my_string[i]
		#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
		my_string_char_count = my_string_char_count + 1
		#If the character is repeated more than once, print the character and the number of times it is repeated.
		if
	#Count the frequency of these repeated characters.
	#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".
	my_string_char_count
	#Return the character with the highest frequency.
	#Print out the length of most frequent character.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
	#Print out the frequency of the character with the highest frequency.
	#Print out the character with the highest frequency.
"
105,105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","def longest_palindrome(A):
	#Assign a string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign a variable named ""longest_palindrome"" to a variable named ""longest_palindrome_length""
	longest_palindrome_length = 0
	#Assign a variable named ""longest_palindrome_start"" to a variable named ""longest_palindrome_end""
	longest_palindrome_start = 0
	longest_palindrome_end = 0
	#Assign a variable named ""longest_palindrome_middle"" to a variable named ""longest_palindrome_middle_index""
	longest_palindrome_
	#Implement a function that checks whether a string is a palindrome.
	#If the string is a palindrome, then return True.
	#If the string is not a palindrome, then return False.
	#The function should return the length of the longest palindrome.
	#The function should return the starting index of the longest palindrome.
	#The function should return the ending index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#Find all substrings of my_string which is a palindrome and store as a list.
	#For each substring, check whether the substring is a palindrome.
	#If the substring is a palindrome, then store the starting index of the substring in a variable named ""palindrome_start"".
	#If the substring is not a palindrome, then store the ending index of the substring in a variable named ""palindrome_end"".
	#If the substring is a palindrome, then store the middle index of the substring in a variable named ""palindrome_middle"".
	#If the substring is not a palindrome, then store the middle index of the substring in a variable named
	#Print out the length of longest palindrome in the above list.
	#Print out the starting index of longest palindrome in the above list.
	#Print out the ending index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Return the length of longest palindrome.
	#Return the starting index of longest palindrome.
	#Return the ending index of longest palindrome.
	#Return the middle index of","def longest_palindrome(A):
	#Assign a string ""{A}"" to a variable named ""my_string"".
	my_string = A
	#Assign a variable named ""longest_palindrome"" to a variable named ""longest_palindrome_length""
	longest_palindrome_length = 0
	#Assign a variable named ""longest_palindrome_start"" to a variable named ""longest_palindrome_end""
	longest_palindrome_start = 0
	longest_palindrome_end = 0
	#Assign a variable named ""longest_palindrome_middle"" to a variable named ""longest_palindrome_middle_index""
	longest_palindrome_
	#Implement a function that checks whether a string is a palindrome.
	#If the string is a palindrome, then return True.
	#If the string is not a palindrome, then return False.
	#The function should return the length of the longest palindrome.
	#The function should return the starting index of the longest palindrome.
	#The function should return the ending index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#The function should return the middle index of the longest palindrome.
	#Find all substrings of my_string which is a palindrome and store as a list.
	#For each substring, check whether the substring is a palindrome.
	#If the substring is a palindrome, then store the starting index of the substring in a variable named ""palindrome_start"".
	#If the substring is not a palindrome, then store the ending index of the substring in a variable named ""palindrome_end"".
	#If the substring is a palindrome, then store the middle index of the substring in a variable named ""palindrome_middle"".
	#If the substring is not a palindrome, then store the middle index of the substring in a variable named
	#Print out the length of longest palindrome in the above list.
	#Print out the starting index of longest palindrome in the above list.
	#Print out the ending index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Print out the middle index of longest palindrome in the above list.
	#Return the length of longest palindrome.
	#Return the starting index of longest palindrome.
	#Return the ending index of longest palindrome.
"
106,106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","def count_primes(A):
	#Assign an integer ""{A}"" to a variable named ""my_integer"".
	my_integer = A
	#Assign an integer ""{B}"" to a variable named ""my_prime"".
	my_prime = 0
	#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
	my_prime_count = 0
	#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
	my_prime_list = []
	#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
	my_prime_list_count = 0
	#Implement a function that checks whether an integer is a prime number.
	def is_prime(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
		my_prime = 0
		#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
		my_prime_count = 0
		#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
		my_prime_list = []
		#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count =
	#Find all prime numbers that are less than my_integer and store as prime_result.
	def find_primes(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
		my_prime = 0
		#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
		my_prime_count = 0
		#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
		my_prime_list = []
		#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count =
	#Print out the length of prime_result.
	def print_prime_result(my_prime_list):
		#Assign an integer ""{B}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count = 0
		#Print out the length of prime_result.
	#Implement a function that checks whether an integer is a prime number.
	def is_prime(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
		my_prime = 0","def count_primes(A):
	#Assign an integer ""{A}"" to a variable named ""my_integer"".
	my_integer = A
	#Assign an integer ""{B}"" to a variable named ""my_prime"".
	my_prime = 0
	#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
	my_prime_count = 0
	#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
	my_prime_list = []
	#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
	my_prime_list_count = 0
	#Implement a function that checks whether an integer is a prime number.
	def is_prime(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
		my_prime = 0
		#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
		my_prime_count = 0
		#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
		my_prime_list = []
		#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count =
	#Find all prime numbers that are less than my_integer and store as prime_result.
	def find_primes(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
		my_prime = 0
		#Assign an integer ""{C}"" to a variable named ""my_prime_count"".
		my_prime_count = 0
		#Assign an integer ""{D}"" to a variable named ""my_prime_list"".
		my_prime_list = []
		#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count =
	#Print out the length of prime_result.
	def print_prime_result(my_prime_list):
		#Assign an integer ""{B}"" to a variable named ""my_prime_list_count"".
		my_prime_list_count = 0
		#Print out the length of prime_result.
	#Implement a function that checks whether an integer is a prime number.
	def is_prime(my_integer):
		#Assign an integer ""{B}"" to a variable named ""my_prime"".
"
107,107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","def rotate_array(A,K):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign an integer ""{K}"" to a variable named ""n"".
	n = K
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k = n - 1
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k
	#Implement a function that rotates one array to the right by 1 step.
	#The function should return the rotated array.
	#The function should be able to handle negative numbers.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length
	#Rotate my_array k steps and store as rotated_result.
	rotated_result = []
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k =
	#Print out rotated_result.
	#Return rotated_result.
	return rotated_result","def rotate_array(A,K):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign an integer ""{K}"" to a variable named ""n"".
	n = K
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k = n - 1
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k
	#Implement a function that rotates one array to the right by 1 step.
	#The function should return the rotated array.
	#The function should be able to handle negative numbers.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length.
	#The function should be able to handle arrays of any length
	#Rotate my_array k steps and store as rotated_result.
	rotated_result = []
	#Assign an integer ""{i}"" to a variable named ""j"".
	i = 0
	#Assign an integer ""{j}"" to a variable named ""k"".
	j = 0
	#Assign an integer ""{m}"" to a variable named ""m"".
	m = len(my_array)
	#Assign an integer ""{n}"" to a variable named ""n"".
	n = len(my_array)
	#Assign
	#Assign a positive integer ""{K}"" to a variable named ""k"".
	k =
	#Print out rotated_result.
	#Return rotated_result.
"
108,108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","def partition_equal_sets(A):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{B}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{C}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{D}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{E}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{F}"" to a variable named ""my_array"".
	my
	#Compute the sum of my_array and store as my_sum.
	my_sum = sum(my_array)
	#If my_sum is greater than 0, then assign my_array to a variable named ""my_array_1"".
	if my_sum > 0:
		my_array_1 = []
		#Assign an array ""{A}"" to a variable named ""my_array_1"".
		my_array_1 = []
		#Assign an array ""{B}"" to a variable named ""my_array_1"".
		my_array_1 = []
		#Assign an array ""{C}"" to
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_1 to a variable named ""my_array_2"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_2 to a variable named ""my_array_3"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_3 to a variable named ""my_array_4"".
	#Print out the function output when the above array is my_array.
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_1 to a variable named ""my_array_2"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_2 to a variable named ""my_array_3"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.","def partition_equal_sets(A):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{B}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{C}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{D}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{E}"" to a variable named ""my_array"".
	my_array = []
	#Assign an array ""{F}"" to a variable named ""my_array"".
	my
	#Compute the sum of my_array and store as my_sum.
	my_sum = sum(my_array)
	#If my_sum is greater than 0, then assign my_array to a variable named ""my_array_1"".
	if my_sum > 0:
		my_array_1 = []
		#Assign an array ""{A}"" to a variable named ""my_array_1"".
		my_array_1 = []
		#Assign an array ""{B}"" to a variable named ""my_array_1"".
		my_array_1 = []
		#Assign an array ""{C}"" to
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_1 to a variable named ""my_array_2"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_2 to a variable named ""my_array_3"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_3 to a variable named ""my_array_4"".
	#Print out the function output when the above array is my_array.
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_1 to a variable named ""my_array_2"".
	#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.
	#If it is, then assign my_array_2 to a variable named ""my_array_3"".
"
109,109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","def square_root_integer(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign a variable named ""square_root"" to the square root of the integer ""{my_number}"".
	square_root = math.sqrt(my_number)
	#Return the square root of the integer ""{my_number}"".
	#Compute the square root of my_number and store as root_number.
	#Implement a function that only returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_","def square_root_integer(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign a variable named ""square_root"" to the square root of the integer ""{my_number}"".
	square_root = math.sqrt(my_number)
	#Return the square root of the integer ""{my_number}"".
	#Compute the square root of my_number and store as root_number.
	#Implement a function that only returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns the integer part of a float number.
	#Compute the square root of my_number and store as root_number.
	#Implement a function that returns
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
	#Print out the integer part of root_number.
"
110,110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","def plus_1(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign a non-negative integer ""{my_number}"" to a variable named ""my_number_plus_1"".
	my_number_plus_1 = my_number + 1
	#Return the value of the variable named ""my_number_plus_1"".
	#Plus my_number by 1 and store as plus_number.
	plus_number = my_number_plus_1
	#Return the value of the variable named ""plus_number"".
	#Implement a function that only returns the digits of an integer as a list.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the
	#Print out the digits of plus_number.
	return plus_number","def plus_1(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Assign a non-negative integer ""{my_number}"" to a variable named ""my_number_plus_1"".
	my_number_plus_1 = my_number + 1
	#Return the value of the variable named ""my_number_plus_1"".
	#Plus my_number by 1 and store as plus_number.
	plus_number = my_number_plus_1
	#Return the value of the variable named ""plus_number"".
	#Implement a function that only returns the digits of an integer as a list.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the digits of an integer as a string.
	#Implement a function that returns the
	#Print out the digits of plus_number.
"
111,111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","def check_square_sum(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Check if the number is a square.
	if my_number**0.5 == int(my_number**0.5):
		#If it is, print the number.
	else:
		#If it is not, print ""Not a square.""
	#Implement a function that computes the square sum of two integers.
	#The function should return the square sum of the two integers.
	#The function should accept two integers as arguments.
	#The function should return the square sum of the two integers.
	#The function should raise an exception if the first argument is not a number.
	#The function should raise an exception if the second argument is not a number.
	#The function should raise an exception if the first argument is equal to the second argument.
	#The function should raise an exception if the first argument is negative.
	#The function should raise an exception if the second argument is
	#Implement a function that checks one number is the sum of two square numbers.
	#The function should return True if the number is the sum of two square numbers,
	#False otherwise.
	#The function should accept a number as an argument.
	#The function should raise an exception if the number is negative.
	#The function should raise an exception if the number is equal to zero.
	#The function should raise an exception if the number is greater than 100.
	#The function should raise an exception if the number is not a square.
	#The function should raise an exception if the number is not a perfect square.
	#
	#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".
	#
	#The function should accept a number as an argument.
	#The function should raise an exception if the number is negative.
	#The function should raise an exception if the number is equal to zero.
	#The function should raise an exception if the number is greater than 100.
	#The function should raise an exception if the number is not a square.
	#The function should raise an exception if the number is not a perfect square.
	#The function should raise an exception if the number is not a perfect square.
	#The function should raise","def check_square_sum(A):
	#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".
	my_number = A
	#Check if the number is a square.
	if my_number**0.5 == int(my_number**0.5):
		#If it is, print the number.
	else:
		#If it is not, print ""Not a square.""
	#Implement a function that computes the square sum of two integers.
	#The function should return the square sum of the two integers.
	#The function should accept two integers as arguments.
	#The function should return the square sum of the two integers.
	#The function should raise an exception if the first argument is not a number.
	#The function should raise an exception if the second argument is not a number.
	#The function should raise an exception if the first argument is equal to the second argument.
	#The function should raise an exception if the first argument is negative.
	#The function should raise an exception if the second argument is
	#Implement a function that checks one number is the sum of two square numbers.
	#The function should return True if the number is the sum of two square numbers,
	#False otherwise.
	#The function should accept a number as an argument.
	#The function should raise an exception if the number is negative.
	#The function should raise an exception if the number is equal to zero.
	#The function should raise an exception if the number is greater than 100.
	#The function should raise an exception if the number is not a square.
	#The function should raise an exception if the number is not a perfect square.
	#
	#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".
	#
	#The function should accept a number as an argument.
	#The function should raise an exception if the number is negative.
	#The function should raise an exception if the number is equal to zero.
	#The function should raise an exception if the number is greater than 100.
	#The function should raise an exception if the number is not a square.
	#The function should raise an exception if the number is not a perfect square.
	#The function should raise an exception if the number is not a perfect square.
"
112,112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","def comare_std._dev.(A):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A
	#Implement a function that computes standard deviation of an array.
	#The function should return the standard deviation of the array.
	#The function should return the following:
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation
	#Calculate the standard deviation of my_array and store as result.
	result = comare_std._dev.std(my_array)
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print out ""True"" if result is less than 1. Otherwise, print ""False"".
	if result < 1:
	else:","def comare_std._dev.(A):
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A}"" to a variable named ""my_array"".
	my_array = [1,2,3,4,5,6,7,8,9,10]
	#Assign an array ""{A
	#Implement a function that computes standard deviation of an array.
	#The function should return the standard deviation of the array.
	#The function should return the following:
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation of the array is 3.0
	#	Standard deviation
	#Calculate the standard deviation of my_array and store as result.
	result = comare_std._dev.std(my_array)
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print the result.
	#Print out ""True"" if result is less than 1. Otherwise, print ""False"".
	if result < 1:
"
113,113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","def matrix_size(A):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the size of the matrix ""{my_matrix}"" to a variable named ""size"".
	size = len(my_matrix)
	#Return the size of the matrix ""{my_matrix}"".
	#Calculate the number of rows of my_matrix and store as row_number.
	row_number = len(my_matrix)
	#Calculate the number of columns of my_matrix and store as column_number.
	column_number = len(my_matrix[0])
	#Return the number of rows of my_matrix.
	#Return the number of columns of my_matrix.
	#Calculate the number of columns of my_matrix and store as column_number.
	#Calculate the sum of row_number and column_number and print the result.
	return row_number, column_number, sum(row_number) + sum(column_number)","def matrix_size(A):
	#Assign the matrix ""{A}"" to a variable named ""my_matrix"".
	my_matrix = A
	#Assign the size of the matrix ""{my_matrix}"" to a variable named ""size"".
	size = len(my_matrix)
	#Return the size of the matrix ""{my_matrix}"".
	#Calculate the number of rows of my_matrix and store as row_number.
	row_number = len(my_matrix)
	#Calculate the number of columns of my_matrix and store as column_number.
	column_number = len(my_matrix[0])
	#Return the number of rows of my_matrix.
	#Return the number of columns of my_matrix.
	#Calculate the number of columns of my_matrix and store as column_number.
	#Calculate the sum of row_number and column_number and print the result.
"
114,114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","def diff_mean_and_median(A):
	#Assign the array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign the variable ""my_array"" to a variable named ""my_array_mean"".
	my_array_mean = np.mean(my_array)
	#Assign the variable ""my_array"" to a variable named ""my_array_median"".
	my_array_median = np.median(my_array)
	#Print the variable ""my_array_mean"" to the console.
	#Print the variable ""my_array_median"" to the console.
	#Calculate the mean of my_array and store as mean_number.
	mean_number = np.mean(my_array)
	#Calculate the median of my_array and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number"" to the console.
	#Print the variable ""median_number"" to the console.
	#Calculate the mean of my_array_mean and store as mean_number_mean.
	mean_number_mean = np.mean(my_array_mean)
	#Calculate the median of my_array_mean and store
	#Calculate the median of my_array and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number_mean"" to the console.
	#Print the variable ""median_number"" to the console.
	#Calculate the mean of my_array_median and store as mean_number_median.
	mean_number_median = np.mean(my_array_median)
	#Calculate the median of my_array_median and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number
	#Calculate the difference between mean_number and median_number and print the result.
	difference = mean_number - median_number
	#Calculate the difference between mean_number_mean and median_number_mean and print the result.
	difference = mean_number_mean - median_number_mean
	#Calculate the difference between mean_number_median and median_number_median and print the result.
	difference = mean_number_median - median_number_median","def diff_mean_and_median(A):
	#Assign the array ""{A}"" to a variable named ""my_array"".
	my_array = A
	#Assign the variable ""my_array"" to a variable named ""my_array_mean"".
	my_array_mean = np.mean(my_array)
	#Assign the variable ""my_array"" to a variable named ""my_array_median"".
	my_array_median = np.median(my_array)
	#Print the variable ""my_array_mean"" to the console.
	#Print the variable ""my_array_median"" to the console.
	#Calculate the mean of my_array and store as mean_number.
	mean_number = np.mean(my_array)
	#Calculate the median of my_array and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number"" to the console.
	#Print the variable ""median_number"" to the console.
	#Calculate the mean of my_array_mean and store as mean_number_mean.
	mean_number_mean = np.mean(my_array_mean)
	#Calculate the median of my_array_mean and store
	#Calculate the median of my_array and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number_mean"" to the console.
	#Print the variable ""median_number"" to the console.
	#Calculate the mean of my_array_median and store as mean_number_median.
	mean_number_median = np.mean(my_array_median)
	#Calculate the median of my_array_median and store as median_number.
	median_number = np.median(my_array)
	#Print the variable ""mean_number
	#Calculate the difference between mean_number and median_number and print the result.
	difference = mean_number - median_number
	#Calculate the difference between mean_number_mean and median_number_mean and print the result.
	difference = mean_number_mean - median_number_mean
	#Calculate the difference between mean_number_median and median_number_median and print the result.
"
