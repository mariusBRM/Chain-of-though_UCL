,prompts,inputs,outputs,max_gen_length,category,name,description,id,signature,test_list,gen_code
0,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Sandwich string,Append a string in the middle of another string.,1,def sandwich_string(A):,"[""assert sandwich_string('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert sandwich_string('aaaaAAAAaaaa') == ['a']"", ""assert sandwich_string('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert sandwich_string('ddddc') == ['c', 'd']""]","['def sandwich_string(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = ""{A}""\n\t#Print the string ""sandwich"" to the screen.\n\t#Return the string ""sandwich"" to the function.', 'def sandwich_string(A):\n\t#Lowercase the given string ""my_string"".\n\tA = A.lower()\n\t#Split the string into individual words.\n\tA = A.split()\n\t#Create a new string that is the concatenation of the words in the original string.\n\tsandwich = "" "".join(A)\n\t#Return the sandwich string.', 'def sandwich_string(A):\n\t#Assign the distinct characters of the string to a variable named ""chars"".\n\tchars = set(A)\n\t#Create a variable named ""sandwich"" and assign it to an empty string.\n\tsandwich = """"\n\t#Loop through the characters in the ""chars"" variable.\n\tfor char in chars:\n\t\t#If the character is not in the ""sandwich"" variable, assign it to the ""sandwich"" variable.\n\t\tif char not in sandwich:\n\t\t\tsandwich += char\n\t#Return the ""sandwich"" variable.', 'def sandwich_string(A):\n\t#Sort these characters in alphabetical order.\n\tA.sort()\n\t#Create a string to hold the sandwich.\n\tsandwich = """"\n\t#Loop through the characters in the alphabetical order.\n\tfor i in A:\n\t\t#If the character is a space, add a space to the sandwich.\n\t\tif i == "" "":\n\t\t\tsandwich += "" ""\n\t\t#If the character is a letter, add it to the sandwich.\n\t\telse:\n\t\t\tsandwich += i\n\t#Return the sandwich.', 'def sandwich_string(A):\n\t#Print the resulting list of characters.\n\tfor i in range(len(A)):']"
1,"['Define a list of integers named ""numbers"" with the values {numbers}.', 'Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".', 'Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".', 'Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".', 'Print the variable ""formatted"".']","[{'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'numbers': [56, 97, 19, 57, 69]}, {'numbers': []}, {'numbers': [1]}, {'numbers': [10000, 1]}]","[['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2'], ['18.8', '32.6', '6.4', '19.1', '23.2'], [], ['100.0'], ['100.0', '0.0']]",128.0,math,Normalize integer list,Normalize a list of positive integers and print formatted percentages.,2,def normalize_integer_list(numbers):,"[""assert normalize_integer_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1.8', '3.6', '5.5', '7.3', '9.1', '10.9', '12.7', '14.5', '16.4', '18.2']"", ""assert normalize_integer_list([56, 97, 19, 57, 69]) == ['18.8', '32.6', '6.4', '19.1', '23.2']"", 'assert normalize_integer_list([]) == []', ""assert normalize_integer_list([1]) == ['100.0']"", ""assert normalize_integer_list([10000, 1]) == ['100.0', '0.0']""]","['def normalize_integer_list(numbers):\n\t#Define a list of integers named ""numbers"" with the values {numbers}.\n\t#Return the list of integers.', 'def normalize_integer_list(numbers):\n\t#Calculate the sum of the elements in variable ""numbers"" and store the result to variable ""total"".\n\ttotal = sum(numbers)\n\t#Create a new list that will contain the normalized numbers.\n\tnormalized_numbers = []\n\t#Iterate through the list of numbers and add each element to the normalized list.\n\tfor number in numbers:\n\t\tnormalized_numbers.append(number/total)\n\t#Return the normalized list.', 'def normalize_integer_list(numbers):\n\t#Divide each element of the list by the total and multiply by 100, store the result to variable ""normalized"".\n\tnormalized = []\n\tfor number in numbers:\n\t\tnormalized.append(number/100)', 'def normalize_integer_list(numbers):\n\t#Convert each element in variable ""normalized"" into a formatted string with single decimal point and store the result into ""formatted"".\n\tformatted = []\n\tfor number in numbers:\n\t\tformatted.append(str(number).replace(""."", "",""))', 'def normalize_integer_list(numbers):\n\t#Print the variable ""formatted"".\n\tformatted = []\n\t#Iterate through the list ""numbers"".\n\tfor number in numbers:\n\t\t#Print the variable ""formatted"".\n\t\tformatted.append(str(number))\n\t#Return the variable ""formatted"".\n\treturn formatted']"
2,"['Write a function that takes an integer minutes and converts it to seconds.', 'Write a function that takes an integer hours and converts it to seconds.', 'Print the total seconds of {a1} hours and {a2} minutes.']","[{'a1': 2, 'a2': 13}, {'a1': 1, 'a2': 2}, {'a1': 32, 'a2': 32}, {'a1': 0, 'a2': 32}, {'a1': 1, 'a2': 1}]","[7980, 3720, 117120, 1920, 3660]",128.0,math,Convert time,Convert units of time.,3,"def convert_time(a1,a2):","['assert convert_time(2,13) == 7980', 'assert convert_time(1,2) == 3720', 'assert convert_time(32,32) == 117120', 'assert convert_time(0,32) == 1920', 'assert convert_time(1,1) == 3660']","['def convert_time(a1,a2):\n\t#Write a function that takes an integer minutes and converts it to seconds.\n\t#For example, convert_time(10, 30) should return 600.\n\t#Hint: Use the modulo operator.', 'def convert_time(a1,a2):\n\t#Write a function that takes an integer hours and converts it to seconds.\n\t#For example, if hours is 12, it should return 3600.\n\t#If hours is 24, it should return 86400.\n\t#If hours is 0, it should return 0.\n\t#If hours is negative, it should return -hours.\n\t#If hours is not an integer, it should return 0.\n\t#If hours is not between 0 and 23, it should return 0.\n\t#If hours is not between 0 and 60, it should return 0', 'def convert_time(a1,a2):\n\t#Print the total seconds of {a1} hours and {a2} minutes.\n\treturn a1*3600+a2*60']"
3,"['Implement a function which returns the n-th Fibonacci number.', 'Implement a function that computes the square of an integer argument.', 'Print out the square of {a1}-th Fibonacci number.']","[{'a1': 1}, {'a1': 2}, {'a1': 3}, {'a1': 4}, {'a1': 10}]","[1, 1, 4, 9, 3025]",128.0,math,Squared Fibonacci,Print the squared fibonacci numbers.,4,def squared_fibonacci(a1):,"['assert squared_fibonacci(1) == 1', 'assert squared_fibonacci(2) == 1', 'assert squared_fibonacci(3) == 4', 'assert squared_fibonacci(4) == 9', 'assert squared_fibonacci(10) == 3025']","['def squared_fibonacci(a1):\n\t#Implement a function which returns the n-th Fibonacci number.\n\t#The Fibonacci sequence is defined as follows:\n\t#F(0) = 0\n\t#F(1) = 1\n\t#F(n) = F(n-1) + F(n-2)\n\t#For example, F(5) = 5 + 8 = 13.\n\t#Write a function which takes an integer as input and returns the nth Fibonacci number.\n\t#For example, nth_fibonacci(5) = 13.\n\t#Note: The Fibonacci sequence is defined as follows:', 'def squared_fibonacci(a1):\n\t#Implement a function that computes the square of an integer argument.\n\t#The function should return the square of the argument.\n\t#The function should be able to handle negative integers.\n\t#The function should be able to handle floating point numbers.\n\t#The function should be able to handle negative floating point numbers.\n\t#The function should be able to handle negative integers and floating point numbers.\n\t#The function should be able to handle negative integers and negative floating point numbers.\n\t#The function should be able to handle negative integers and floating point numbers.\n\t#The function should be able to handle negative integers and negative floating point numbers.\n\t#', 'def squared_fibonacci(a1):\n\t#Print out the square of {a1}-th Fibonacci number.\n\ta2 = 0\n\ta3 = 1\n\twhile a2 < a1:\n\t\ta2 = a3\n\t\ta3 = a2 + a1']"
4,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the number of negative numbers in the list as ""n_neg"".', 'Count the number of positive numbers in the list as ""n_pos"".', 'Print out the larger number of those two.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-1, 0.2, 0.3, 0.4]'}]","[4, 3, 4, 2, 3]",128.0,array,Count negative numbers,Count negative numbers in a given list.,5,def count_negative_numbers(A):,"['assert count_negative_numbers([1, 2, 3, 4]) == 4', 'assert count_negative_numbers([-1, 2, 3, 4]) == 3', 'assert count_negative_numbers([-1, -2, -3, -4]) == 4', 'assert count_negative_numbers([-1000000, 1, 2]) == 2', 'assert count_negative_numbers([-1, 0.2, 0.3, 0.4]) == 3']","['def count_negative_numbers(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the variable ""my_numbers"" to a variable named ""negative_numbers"".\n\tnegative_numbers = []\n\t#Iterate over the list of numbers ""{my_numbers}"" and add the number to the list ""{negative_numbers}"".\n\tfor i in my_numbers:\n\t\tif i < 0:\n\t\t\tnegative_numbers.append(i)\n\t#Return the list ""{negative_numbers}"".', 'def count_negative_numbers(A):\n\t#Count the number of negative numbers in the list as ""n_neg"".\n\tn_neg = 0\n\tfor i in range(len(A)):\n\t\tif A[i] < 0:\n\t\t\tn_neg += 1', 'def count_negative_numbers(A):\n\t#Count the number of positive numbers in the list as ""n_pos"".\n\tn_pos = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > 0:\n\t\t\tn_pos += 1', 'def count_negative_numbers(A):\n\t#Print out the larger number of those two.\n\t#If the larger number is negative, print out the smaller number.\n\t#If the larger number is positive, print out the larger number.\n\t#If the larger number is zero, print out the larger number.\n\t#If the larger number is not zero, print out the larger number.\n\t#If the larger number is not zero, print out the larger number.\n\t#If the larger number is not zero, print out the larger number.\n\t#If the larger number is not zero, print out the larger number.\n\t#If the larger number is not zero, print']"
5,"['Import the pandas library.', 'Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].', 'Compute the mean per column and store the value in a variable named means.', 'Print the variable means.']","[{'a1': '50', 'a2': '21', 'a3': '131', 'a4': '2'}, {'a1': '-10', 'a2': '10', 'a3': '-20', 'a4': '20'}, {'a1': '1', 'a2': '2', 'a3': '3', 'a4': '4'}, {'a1': '-1', 'a2': '-2', 'a3': '-3', 'a4': '-4'}, {'a1': '-10', 'a2': '-20', 'a3': '-30', 'a4': '-40'}]","[[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]]",128.0,data science,Pandas mean,Construct and compute the mean of a pandas df.,6,"def pandas_mean(a1,a2,a3,a4):","['assert pandas_mean(50,21,131,2) == [35.5, 66.5]', 'assert pandas_mean(-10,10,-20,20) == [0.0, 0.0]', 'assert pandas_mean(1,2,3,4) == [1.5, 3.5]', 'assert pandas_mean(-1,-2,-3,-4) == [-1.5, -3.5]', 'assert pandas_mean(-10,-20,-30,-40) == [-15.0, -35.0]']","[""def pandas_mean(a1,a2,a3,a4):\n\t#Import the pandas library.\n\timport pandas as pd\n\t#Create a dataframe from the lists.\n\tdf = pd.DataFrame({'a1':a1,'a2':a2,'a3':a3,'a4':a4})\n\t#Calculate the mean of the dataframe.\n\tmean = df.mean()\n\t#Return the mean."", 'def pandas_mean(a1,a2,a3,a4):\n\t#Create a dataframe with a column labeled ""Yes"" with values [{a1}, {a2}] and a column named ""No"" with values [{a3}, {a4}].\n\tdf = pd.DataFrame({\'Yes\': [a1,a2], \'No\': [a3,a4]})\n\t#Calculate the mean of the ""Yes"" and ""No"" columns.\n\tmean = df.mean()\n\t#Return the mean of the ""Yes"" and ""No"" columns.', 'def pandas_mean(a1,a2,a3,a4):\n\t#Compute the mean per column and store the value in a variable named means.\n\tmeans = a1.mean(axis=1)\n\t#Compute the mean per row and store the value in a variable named means.\n\tmeans = a2.mean(axis=0)\n\t#Compute the mean per row and store the value in a variable named means.\n\tmeans = a3.mean(axis=0)\n\t#Compute the mean per row and store the value in a variable named means.\n\tmeans = a4.mean(axis=0)\n\t#Return the mean of the means.', 'def pandas_mean(a1,a2,a3,a4):\n\t#Print the variable means.\n\treturn ""The mean of the variables is: "", a1.mean(), a2.mean(), a3.mean(), a4.mean()']"
6,"['Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".', 'Create a list of integers ranging from {a3} to {a4}.', 'Call the written function for each element in the list and store the result as ""new_list"".', 'Print out the list ""new_list"".']","[{'a1': 3, 'a2': 5, 'a3': 0, 'a4': 4}, {'a1': 5, 'a2': 3, 'a3': 0, 'a4': 9}, {'a1': 9, 'a2': 3, 'a3': 0, 'a4': 2}, {'a1': 2, 'a2': 4, 'a3': 0, 'a4': 7}, {'a1': 2, 'a2': 4, 'a3': 4, 'a4': 7}]","[['fizzbuzz', 1, 2, 'fizz', 4], ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz'], ['fizzbuzz', 1, 2], ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7], ['fizzbuzz', 5, 'fizz', 7]]",128.0,algorithm,Fizz buzz,Solve the fizz buzz problem.,7,"def fizz_buzz(a1,a2,a3,a4):","[""assert fizz_buzz(3,5,0,4) == ['fizzbuzz', 1, 2, 'fizz', 4]"", ""assert fizz_buzz(5,3,0,9) == ['fizzbuzz', 1, 2, 'buzz', 4, 'fizz', 'buzz', 7, 8, 'buzz']"", ""assert fizz_buzz(9,3,0,2) == ['fizzbuzz', 1, 2]"", ""assert fizz_buzz(2,4,0,7) == ['fizzbuzz', 1, 'fizz', 3, 'fizzbuzz', 5, 'fizz', 7]"", ""assert fizz_buzz(2,4,4,7) == ['fizzbuzz', 5, 'fizz', 7]""]","['def fizz_buzz(a1,a2,a3,a4):\n\t#Write a function that returns a number, for numbers multiple of {a1} print ""fizz"" instead of a number, for numbers multiple of {a2} print ""buzz"", for numbers which are multiples of both {a1} and {a2} ""fizzbuzz"".\n\t#For numbers which are multiples of {a3} print ""fizz"" for numbers which are multiples of {a4} print ""buzz"" for numbers which are multiples of both {a3} and {a4} ""fizzbuzz"".\n\t#For numbers which are multiples of both {a1} and {a2} print ""fizzbuzz"" for numbers which are multiples of {a3} and {a4} ""fizzbuzz"".\n\t#For numbers which are multiples of {a1} and {a2} and {a3} print', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Create a list of integers ranging from {a3} to {a4}.\n\tlist_of_numbers = [a3,a4]\n\t#Create a list of strings.\n\tlist_of_strings = [""Fizz"",""Buzz""]\n\t#Create a list of tuples.\n\tlist_of_tuples = [(a1,a2),(a1,a3),(a1,a4),(a2,a3),(a2,a4),(a3,a4)]\n\t#Create a list of lists.\n\tlist_of_lists = [[a1,a2],[a1,a3],[a1,a4],[', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Call the written function for each element in the list and store the result as ""new_list"".\n\tnew_list = [fizz_buzz(a1,a2,a3,a4) for a1 in a1]\n\t#Create a new list that contains the results of the function call.\n\tresult = [a1 + a2 + a3 + a4 for a1,a2,a3,a4 in zip(a1,a2,a3,new_list)]\n\t#Return the new list.', 'def fizz_buzz(a1,a2,a3,a4):\n\t#Print out the list ""new_list"".\n\tnew_list = []\n\tfor i in range(a1,a2+1):\n\t\tif i % 3 == 0 and i % 5 == 0:\n\t\t\tnew_list.append(""FizzBuzz"")\n\t\telif i % 3 == 0:\n\t\t\tnew_list.append(""Fizz"")\n\t\telif i % 5 == 0:\n\t\t\tnew_list.append(""Buzz"")\n\t\telse:\n\t\t\tnew_list.append(i)']"
7,"['Write a function that can take a string and return a list of word bigrams as pairs.', 'Assign the string ""{a1}"" to a variable named sentence.', 'Print out the bi-grams for the variable named sentence.']","[{'a1': 'Have free hours and love children? Drive kids to school, soccer practice and other activities.'}, {'a1': 'Hello World Foo Bar'}, {'a1': 'AA BB CC'}, {'a1': 'abc de'}, {'a1': 'AB CD EF'}]","[[['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']], [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']], [['AA', 'BB'], ['BB', 'CC']], [['abc', 'de']], [['AB', 'CD'], ['CD', 'EF']]]",128.0,string,Bi-grams,Print the bi-grams of a sentence.,8,def bi-grams(a1):,"[""assert bi-grams('Have free hours and love children? Drive kids to school, soccer practice and other activities.') == [['Have', 'free'], ['free', 'hours'], ['hours', 'and'], ['and', 'love'], ['love', 'children?'], ['children?', 'Drive'], ['Drive', 'kids'], ['kids', 'to'], ['to', 'school,'], ['school,', 'soccer'], ['soccer', 'practice'], ['practice', 'and'], ['and', 'other'], ['other', 'activities.']]"", ""assert bi-grams('Hello World Foo Bar') == [['Hello', 'World'], ['World', 'Foo'], ['Foo', 'Bar']]"", ""assert bi-grams('AA BB CC') == [['AA', 'BB'], ['BB', 'CC']]"", ""assert bi-grams('abc de') == [['abc', 'de']]"", ""assert bi-grams('AB CD EF') == [['AB', 'CD'], ['CD', 'EF']]""]","['def bi-grams(a1):\n\t#Write a function that can take a string and return a list of word bigrams as pairs.\n\t#For example, bi-grams(""apple"") should return [""app"", ""ple""].\n\t#You may assume that the string will only contain lowercase letters.\n\t#You may assume that the string will not be empty.\n\t#You may assume that the string will not be a single word.\n\t#You may assume that the string will not consist of multiple spaces.\n\t#You may assume that the string will not consist of multiple words.\n\t#You may assume that the string will not consist of multiple bigrams.\n\t#You may assume that the string will not consist of multiple', 'def bi-grams(a1):\n\t#Assign the string ""{a1}"" to a variable named sentence.\n\tsentence = a1\n\t#Create a list named bigrams.\n\tbigrams = []\n\t#Create a for loop to iterate through the sentence.\n\tfor i in range(len(sentence)-1):\n\t\t#Create a variable named bigram.\n\t\tbigram = sentence[i] + sentence[i+1]\n\t\t#Add the bigram to the list named bigrams.\n\t\tbigrams.append(bigram)\n\t#Return the list named bigrams.', 'def bi-grams(a1):\n\t#Print out the bi-grams for the variable named sentence.\n\tfor i in range(len(a1)-1):']"
8,"['Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".', 'Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.', 'For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".', 'Find the name with the highest top_note and assign it to ""top_name"".', 'Print the variable top_name.']","[{'a1': [3, 5, 4], 'a2': [3, 1, 1], 'a3': [1, 2, 3], 'a4': [0, 4, 4]}, {'a1': [0], 'a2': [1], 'a3': [2], 'a4': [3]}, {'a1': [0, 7], 'a2': [1, 9], 'a3': [2, 7], 'a4': [3, 6]}, {'a1': [-1], 'a2': [-1], 'a3': [1], 'a4': [-1]}, {'a1': [0], 'a2': [10000], 'a3': [1000], 'a4': [9999]}]","['Kevin', 'Mitch', 'Mike', 'Mike', 'John']",128.0,dict,Top note,Print name with top note out of a dict.,9,"def top_note(a1,a2,a3,a4):","[""assert top_note([3, 5, 4],[3, 1, 1],[1, 2, 3],[0, 4, 4]) == 'Kevin'"", ""assert top_note([0],[1],[2],[3]) == 'Mitch'"", ""assert top_note([0, 7],[1, 9],[2, 7],[3, 6]) == 'Mike'"", ""assert top_note([-1],[-1],[1],[-1]) == 'Mike'"", ""assert top_note([0],[10000],[1000],[9999]) == 'John'""]","['def top_note(a1,a2,a3,a4):\n\t#Assign the names [""Kevin"", ""John"", ""Mike"", ""Mitch""] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named ""my_notes"".\n\tmy_notes = {""Kevin"": [a1,a2,a3,a4], ""John"": [a1,a2,a3,a4], ""Mike"": [a1,a2,a3,a4], ""Mitch"": [a1,a2,a3,a4]}\n\t#Print the dictionary ""my_notes"" to the screen.\n\t#Print the top note of the dictionary ""my_notes"" to the screen.', 'def top_note(a1,a2,a3,a4):\n\t#Create a function that takes a dictionary of objects like {{ ""name"": ""John"", ""notes"": [3, 5, 4] }} and returns a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\t#The function should return a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\t#The function should return a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\t#The function should return a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\t#The function should return a dictionary of objects like {{ ""name"": ""John"", ""top_note"": 5 }}.\n\t#The function should return a dictionary of objects like {{ ""name"":', 'def top_note(a1,a2,a3,a4):\n\t#For each name in the dictionary get the top_note and store the pairs of names and top_notes as ""my_list"".\n\tmy_list = []\n\tfor name in a1:\n\t\tif a1[name] > a2[name]:\n\t\t\tif a1[name] > a3[name]:\n\t\t\t\tif a1[name] > a4[name]:\n\t\t\t\t\tmy_list.append([name,a1[name]])', 'def top_note(a1,a2,a3,a4):\n\t#Find the name with the highest top_note and assign it to ""top_name"".\n\ttop_name = """"\n\ttop_note = 0\n\tfor i in range(len(a1)):\n\t\tif a1[i] > top_note:\n\t\t\ttop_note = a1[i]\n\t\t\ttop_name = a2[i]\n\tfor i in range(len(a3)):\n\t\tif a3[i] > top_note:\n\t\t\ttop_note = a3[i]\n\t\t\ttop_name = a4[i]', 'def top_note(a1,a2,a3,a4):\n\t#Print the variable top_name.\n\t#Print the variable top_note.\n\t#Print the variable top_note.\n\t#Print the variable top_note.\n\treturn ""The top note is: "" + a1\n\treturn ""The top note is: "" + a2\n\treturn ""The top note is: "" + a3\n\treturn ""The top note is: "" + a4']"
9,"['Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'Assign the value {a1} to a variable named ""my_hex"".', 'Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".', 'Convert ""my_binary"" back to a HEX number named ""result"".', 'Print the result.']","[{'a1': '0xFF'}, {'a1': '0xAA'}, {'a1': '0xAF'}, {'a1': '0x12'}, {'a1': '0xAA'}]","[255, 170, 175, 18, 170]",128.0,math,Hex to binary,Hex to binary and reverse.,10,def hex_to_binary(a1):,"['assert hex_to_binary(255) == 255', 'assert hex_to_binary(170) == 170', 'assert hex_to_binary(175) == 175', 'assert hex_to_binary(18) == 18', 'assert hex_to_binary(170) == 170']","['def hex_to_binary(a1):\n\t#Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = ""11111111"".', 'def hex_to_binary(a1):\n\t#Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(""11111111"") = 0xFF.', 'def hex_to_binary(a1):\n\t#Assign the value {a1} to a variable named ""my_hex"".\n\tmy_hex = a1\n\t#Convert the value {my_hex} to a binary value.\n\tmy_binary = bin(int(my_hex, 16))[2:]\n\t#Return the value {my_binary}', 'def hex_to_binary(a1):\n\t#Convert the variable ""my_hex"" into the binary equivalent as string named ""my_binary"".\n\tmy_binary = """"\n\tfor i in range(len(a1)):\n\t\tmy_binary += bin(int(a1[i], 16))[2:].zfill(8)', 'def hex_to_binary(a1):\n\t#Convert ""my_binary"" back to a HEX number named ""result"".\n\tresult = 0\n\tfor i in range(len(a1)):\n\t\tresult = result + int(a1[i], 16) * (2 ** (len(a1) - i - 1))', 'def hex_to_binary(a1):\n\t#Print the result.\n\treturn bin(int(a1, 16))']"
10,"['Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".', 'Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.', 'Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.', 'Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".', 'Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".']","[{'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': ''}, {'a1': '[""a"", ""b""]', 'a2': '[1, 2]', 'a3': 'inverted'}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': ''}, {'a1': '[""a"", ""b"", ""c""]', 'a2': '[1, 2, -1]', 'a3': 'inverted'}, {'a1': '[""1""]', 'a2': '[1]', 'a3': ''}]","[False, True, False, True, False]",128.0,dict,Invert dict,Detect inversion of dict.,11,"def invert_dict(a1,a2,a3):","[""assert invert_dict(['a', 'b'],[1, 2],'') == False"", ""assert invert_dict(['a', 'b'],[1, 2],'inverted') == True"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'') == False"", ""assert invert_dict(['a', 'b', 'c'],[1, 2, -1],'inverted') == True"", ""assert invert_dict(['1'],[1],'') == False""]","['def invert_dict(a1,a2,a3):\n\t#Assign the keys {a1} and values {a2} to a dictionary named ""my_dict"".\n\tmy_dict = {a1:a2}\n\t#Assign the keys {a3} and values {a1} to a dictionary named ""my_dict"".\n\tmy_dict.update({a3:a1})\n\t#Return the dictionary ""my_dict"".', 'def invert_dict(a1,a2,a3):\n\t#Write a function ""invert"" that inverts the keys and values of a dictionary. E.g., invert({{ ""z"": ""q"", ""w"": ""f"" }}) = {{ ""q"": ""z"", ""f"": ""w"" }}.\n\t#Hint: Use the built-in dict() function.', 'def invert_dict(a1,a2,a3):\n\t#Write a function ""is_inverted"" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.\n\t#The function should return True if the second dict is an inversion of the first dict argument, and False otherwise.\n\t#The function should not mutate the first dict argument.\n\t#The function should not mutate the second dict argument.\n\t#The function should not mutate the third dict argument.\n\t#The function should return True if the second dict is an inversion of the first dict argument, and False otherwise.\n\t#The function should return False if the second dict is an inversion of the first dict argument, and True otherwise.\n\t#The function should return True if the second', 'def invert_dict(a1,a2,a3):\n\t#Create a new variable ""my_dict2"" and initialize it with {a3} ""my_dict"".\n\tmy_dict2 = {a3:a1}\n\t#Create a new variable ""my_dict3"" and initialize it with {a2} ""my_dict2"".\n\tmy_dict3 = {a2:my_dict2}\n\t#Create a new variable ""my_dict4"" and initialize it with {a1} ""my_dict3"".\n\tmy_dict4 = {a1:my_dict3}\n\t#Create a new variable ""my_dict5"" and initialize it with {a2} ""my_dict4"".', 'def invert_dict(a1,a2,a3):\n\t#Print a boolean value indicating if ""my_dict2"" is the inverted dictionary of ""my_dict"".\n\tif a1 in a2:\n\t\tif a2[a1] in a3:\n\t\t\tif a3[a2[a1]] in a1:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn False']"
11,"['Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.', 'Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".', 'Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'Call the getter for the {a5} of the player and print the result.']","[{'a1': 'David Jones', 'a2': 25, 'a3': 175, 'a4': 75, 'a5': 'age'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'weight'}, {'a1': 'Paul Smith', 'a2': 50, 'a3': 160, 'a4': 60, 'a5': 'height'}, {'a1': 'Herr Schmidth Gold', 'a2': 50, 'a3': 210, 'a4': 60, 'a5': 'height'}, {'a1': 'Paul Smith', 'a2': 5, 'a3': 160, 'a4': 60, 'a5': 'age'}]","['David Jones is age 25', 'Paul Smith weighs 60 kg', 'Paul Smith is 160 cm', 'Herr Schmidth Gold is 210 cm', 'Paul Smith is age 5']",128.0,class,Class definition,Create POJO class.,12,"def class_definition(a1,a2,a3,a4,a5):","[""assert class_definition('David Jones',25,175,75,'age') == 'David Jones is age 25'"", ""assert class_definition('Paul Smith',50,160,60,'weight') == 'Paul Smith weighs 60 kg'"", ""assert class_definition('Paul Smith',50,160,60,'height') == 'Paul Smith is 160 cm'"", ""assert class_definition('Herr Schmidth Gold',50,210,60,'height') == 'Herr Schmidth Gold is 210 cm'"", ""assert class_definition('Paul Smith',5,160,60,'age') == 'Paul Smith is age 5'""]","['def class_definition(a1,a2,a3,a4,a5):\n\t#Defines class named ""Player"" that takes the following four arguments for a particular football player: name, age, height, weight.\n\t#The class should have a constructor that takes the four arguments and initializes the instance variables.\n\t#The class should have a method named ""play"" that takes no arguments and returns a string that describes the player\'s play.\n\t#The class should have a method named ""get_name"" that returns the name of the player.\n\t#The class should have a method named ""get_age"" that returns the age of the player.\n\t#The class should have a method named ""get_height"" that returns the height of the player.\n\t#The class should have a method named ""', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Also, create three functions for the class that returns the following strings: (1) get_age() returns ""{{name}} is age {{age}}"", (2) get_height() returns ""{{name}} is {{height}} cm"", (3) get_weight() returns ""{{name}} weighs {{weight}} kg"".\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in the class definition.\n\t#They are called in', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Create an object named ""player"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.\n\t#Create an object named ""player2"" with name ""{a5}"", age {a6}, height {a7}, weight {a8}.\n\t#Create an object named ""player3"" with name ""{a3}"", age {a4}, height {a5}, weight {a6}.\n\t#Create an object named ""player4"" with name ""{a2}"", age {a1}, height {a7}, weight {a8}.\n\t#Create an object named ""player5"" with name ""{a1}"", age {a2}, height {a3}, weight {a4}.', 'def class_definition(a1,a2,a3,a4,a5):\n\t#Call the getter for the {a5} of the player and print the result.\n\treturn a5.getter()']"
12,"['Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.', 'Initialize a last ""my_list"" with the values {a1}', 'Print the longest number in this list.']","[{'a1': '[1, 2, 3, 12]'}, {'a1': '[-123, 2, 3, 12]'}, {'a1': '[1]'}, {'a1': '[-12, 1]'}, {'a1': '[1, 22, 333, 4444, -55555]'}]","[12, -123, 1, -12, -55555]",128.0,math,Longest number,Print longest number.,13,def longest_number(a1):,"['assert longest_number([1, 2, 3, 12]) == 12', 'assert longest_number([-123, 2, 3, 12]) == -123', 'assert longest_number([1]) == 1', 'assert longest_number([-12, 1]) == -12', 'assert longest_number([1, 22, 333, 4444, -55555]) == -55555']","['def longest_number(a1):\n\t#Create a function ""num_len"" that takes a number num and returns its length. E.g., number_length(5000) = 4.\n\tdef num_len(num):\n\t#Create a function ""num_len_list"" that takes a list of numbers and returns their length. E.g., number_length_list([1, 2, 3, 4, 5]) = 5.\n\tdef num_len_list(num_list):\n\t#Create a function ""num_len_dict"" that takes a dictionary of numbers and returns their length. E.g', 'def longest_number(a1):\n\t#Initialize a last ""my_list"" with the values {a1}\n\tmy_list = [a1]\n\t#Initialize a counter\n\tcounter = 1\n\t#Loop through the list\n\tfor i in range(len(a1)):\n\t\t#If the current value is not the same as the previous value\n\t\tif a1[i]!= a1[i-1]:\n\t\t\t#Add the current value to the list\n\t\t\tmy_list.append(a1[i])\n\t\t\t#Increment the counter\n\t\t\tcounter += 1\n\t#Return the length of the list', 'def longest_number(a1):\n\t#Print the longest number in this list.\n\t#Use a1.sort() to sort the list.\n\t#Use a1.index() to find the index of the longest number.\n\t#Use a1.count() to find the number of times the longest number occurs.\n\t#Use a1.pop() to remove the last number in the list.\n\t#Use a1.append() to add a new number to the end of the list.\n\t#Use a1.insert() to insert a new number at a specific index.\n\t#Use a1.remove() to remove a number from the list.']"
13,"['Import the class LinearRegression from sklearn.', 'Import math.', 'Assign integers ranging from 0 to 10 (inclusive) to ""x"".', 'Define a function ""f"" that multiplies a input argument by 2.', 'Create a numpy array of numbers ""y"" by applying f to each element of x.', 'Initialize a linear regression model.', 'Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).', 'Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.', 'Apply ceil() to the predicted value and print it as an integer.']","[{'a1': '1'}, {'a1': '2'}, {'a1': '3'}, {'a1': '4'}, {'a1': '5'}]","[2, 4, 6, 8, 10]",128.0,data science,Linear regression,Fit linear regression model with specified function and sk-learn.,14,def linear_regression(a1):,"['assert linear_regression(1) == 2', 'assert linear_regression(2) == 4', 'assert linear_regression(3) == 6', 'assert linear_regression(4) == 8', 'assert linear_regression(5) == 10']","['def linear_regression(a1):\n\t#Import the class LinearRegression from sklearn.linear_model\n\tfrom sklearn.linear_model import LinearRegression\n\t#Create a LinearRegression object\n\tregressor = LinearRegression()\n\t#Fit the model to the training set\n\tregressor.fit(a1, a1)\n\t#Predict the response for test dataset\n\ty_pred = regressor.predict(a1)\n\t#Return the predicted values', 'def linear_regression(a1):\n\t#Import math.\n\timport math\n\t#Create a list of the values of a1.\n\ta1_list = list(a1)\n\t#Create a list of the values of a1.\n\ta1_list = [float(i) for i in a1_list]\n\t#Create a list of the values of a1.\n\ta1_list = [i for i in a1_list if i!= 0]\n\t#Create a list of the values of a1.\n\ta1_list = [i for i in a1_list if i', 'def linear_regression(a1):\n\t#Assign integers ranging from 0 to 10 (inclusive) to ""x"".\n\tx = np.arange(0,10)\n\t#Assign integers ranging from 0 to 10 (inclusive) to ""y"".\n\ty = a1\n\t#Calculate the linear regression.\n\tslope, intercept, r_value, p_value, std_err = stats.linregress(x, y)\n\t#Print the results.', 'def linear_regression(a1):\n\t#Define a function ""f"" that multiplies a input argument by 2.\n\tdef f(x):\n\t#Define a function ""g"" that multiplies a input argument by 3.\n\tdef g(x):\n\t#Define a function ""h"" that multiplies a input argument by 4.\n\tdef h(x):\n\t#Define a function ""i"" that multiplies a input argument by 5.\n\tdef i(x):\n\t#', 'def linear_regression(a1):\n\t#Create a numpy array of numbers ""y"" by applying f to each element of x.\n\ty = np.array([f(x) for x in a1])\n\t#Create a numpy array of numbers ""x"" by applying f to each element of y.\n\tx = np.array([f(y) for y in a1])\n\t#Create a numpy array of numbers ""x"" by applying f to each element of x.\n\tx = np.array([f(x) for x in a1])\n\t#Create a numpy array of numbers ""x"" by applying f to each element of y.\n\tx = np.array([f(y', 'def linear_regression(a1):\n\t#Initialize a linear regression model.\n\tmodel = LinearRegression()\n\t#Fit the model to the training data.\n\tmodel.fit(a1, y)\n\t#Predict the output for the test data.\n\ty_pred = model.predict(a1)\n\t#Return the coefficients and intercept of the model.', 'def linear_regression(a1):\n\t#Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a linear regression model.\n\t#The model is a', 'def linear_regression(a1):\n\t#Predict a variable ""x_hat"" at x=[[{a1}]] using the fitted model.\n\tx_hat = a1\n\t#Calculate the residual sum of squares.\n\tresidual_sum_of_squares = 0\n\t#Calculate the number of observations.\n\tn = len(a1)\n\t#Calculate the sum of squares of the residuals.\n\tfor i in range(n):\n\t\tresidual_sum_of_squares += (a1[i] - x_hat[i])**2\n\t#Calculate the mean squared error.\n\tmse = residual_sum_of_squares / n\n\t#Calculate the coefficient of determination.\n\tr', 'def linear_regression(a1):\n\t#Apply ceil() to the predicted value and print it as an integer.\n\treturn int(ceil(a1))']"
14,"[""Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'."", 'Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.', 'Assign ""{a1}"" to a variable named ""original_text"".', ""Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'."", ""Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'."", 'Create a list named ""my_result"" containing restored_text and encrypted_text as elements.', 'Print the list.']","[{'a1': 'hi'}, {'a1': 'asdfghjkl'}, {'a1': 'gf'}, {'a1': 'Hello World'}, {'a1': 'This is a LONG string for our encryption algOrithm.'}]","[['hi', 'jk'], ['asdfghjkl', 'cufhijlmn'], ['gf', 'ih'], ['Hello World', 'Hgnnq Wqtnf'], ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']]",128.0,algorithm,Encrypt and decrypt,Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.,15,def encrypt_and_decrypt(a1):,"[""assert encrypt_and_decrypt('hi') == ['hi', 'jk']"", ""assert encrypt_and_decrypt('asdfghjkl') == ['asdfghjkl', 'cufhijlmn']"", ""assert encrypt_and_decrypt('gf') == ['gf', 'ih']"", ""assert encrypt_and_decrypt('Hello World') == ['Hello World', 'Hgnnq Wqtnf']"", ""assert encrypt_and_decrypt('This is a LONG string for our encryption algOrithm.') == ['This is a LONG string for our encryption algOrithm.', 'Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo.']""]","[""def encrypt_and_decrypt(a1):\n\t#Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.\n\t#Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: decrypt('jk') returns 'hi', decrypt('cufhijlmn') returns 'asdfghjkl', decrypt('ih') returns 'gf'.\n\t#Write a function that takes a string as an argument and returns the string encrypted and decrypted.\n\t#Write a function that takes a string as an argument and returns the string encrypted.\n\t#Write a function that takes a string as"", 'def encrypt_and_decrypt(a1):\n\t#Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.\n\tdef decrypt(a2):\n\t\t#Create a variable to store the decrypted string.\n\t\tdecrypted = """"\n\t\t#Create a for loop to iterate through the encrypted string.\n\t\tfor i in range(len(a2)):\n\t\t\t#Create a variable to store the character at the current index.\n\t\t\tc = a2[i]\n\t\t\t#If the character is a letter, add it to the decrypted string.\n\t\t\tif c.isalpha():\n\t\t\t\tdecrypted += c\n\t\t\t#If the character is a number, add it to the decrypted string.\n\t\t\telif c.isdigit', 'def encrypt_and_decrypt(a1):\n\t#Assign ""{a1}"" to a variable named ""original_text"".\n\toriginal_text = a1\n\t#Assign ""{a2}"" to a variable named ""encrypted_text"".\n\tencrypted_text = """"\n\t#Assign ""{a3}"" to a variable named ""decrypted_text"".\n\tdecrypted_text = """"\n\t#Assign ""{a4}"" to a variable named ""key"".\n\tkey = 0\n\t#Assign ""{a5}"" to a variable named ""shift"".\n\tshift = 0\n\t#Assign ""{a6}"" to a variable named ""encrypted_text_length"".\n\tencrypted_text_length = 0', ""def encrypt_and_decrypt(a1):\n\t#Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.\n\tencrypted_text = encrypt(a1)\n\t#Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'decrypted_text'.\n\tdecrypted_text = decrypt(encrypted_text)\n\t#Print the decrypted_text."", ""def encrypt_and_decrypt(a1):\n\t#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.\n\trestored_text = decrypt(a1)\n\t#Print the decrypted text.\n\t#Call the function encrypt with decrypted_text as argument and assign the result to a variable named 'encrypted_text'.\n\tencrypted_text = encrypt(restored_text)\n\t#Print the encrypted text.\n\t#Call the function decrypt with encrypted_text as argument and assign the result to a variable named'restored_text'.\n\trestored_text = decrypt(encrypted_text)\n\t#Print"", 'def encrypt_and_decrypt(a1):\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []\n\t#Create a list named ""my_result"" containing restored_text and encrypted_text as elements.\n\tmy_result = []', 'def encrypt_and_decrypt(a1):\n\t#Print the list.\n\t#Encrypt the list.\n\ta2 = encrypt(a1)\n\t#Print the encrypted list.\n\t#Decrypt the list.\n\ta3 = decrypt(a2)\n\t#Print the decrypted list.\n\treturn a1\n\treturn a2\n\treturn a3']"
15,"['Defines a class ""Person"" which takes name and id as constructor arguments.', 'Extend the class with a function __hash__ which uses the {a1} property as hash value.', 'Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.', 'Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.', 'Create a set ""unique_persons"" of this list.', 'Print the number of elements in the set.']","[{'a1': 'id', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '2, 2, 2', 'a3': 'C'}, {'a1': 'id', 'a2': '1, 2, 3', 'a3': 'C'}, {'a1': 'name', 'a2': '1, 1, 1', 'a3': 'B'}]","[2, 3, 1, 3, 2]",128.0,class,Compare object equivalence,Implement a class with __hash__ and obtain a count unique objects.,16,"def compare_object_equivalence(a1,a2,a3):","[""assert compare_object_equivalence(<built-in function id>,(1, 2, 2),'C') == 2"", ""assert compare_object_equivalence('name',(1, 2, 2),'C') == 3"", ""assert compare_object_equivalence(<built-in function id>,(2, 2, 2),'C') == 1"", ""assert compare_object_equivalence(<built-in function id>,(1, 2, 3),'C') == 3"", ""assert compare_object_equivalence('name',(1, 1, 1),'B') == 2""]","['def compare_object_equivalence(a1,a2,a3):\n\t#Defines a class ""Person"" which takes name and id as constructor arguments.\n\tclass Person:\n\t\tdef __init__(self,name,id):\n\t\t\tself.name = name\n\t\t\tself.id = id\n\t\tdef __str__(self):\n\t#Creates a Person object from the arguments.\n\tp1 = Person(a1,a2)\n\tp2 = Person(a3,a2)\n\t#Compares the two objects.', 'def compare_object_equivalence(a1,a2,a3):\n\t#Extend the class with a function __hash__ which uses the {a1} property as hash value.\n\t#This function is used to compare objects.\n\t#The function should return True if the objects are equivalent, False otherwise.\n\t#The function should also return a string which is used to identify the objects.\n\t#The function should also return a string which is used to identify the objects.\n\t#The function should also return a string which is used to identify the objects.\n\t#The function should also return a string which is used to identify the objects.\n\t#The function should also return a string which is used to identify the objects.\n\t#The function should also return a string', 'def compare_object_equivalence(a1,a2,a3):\n\t#Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.\n\tif a1.__hash__() == a2.__hash__() and a1.__hash__() == a3.__hash__():\n\telse:', 'def compare_object_equivalence(a1,a2,a3):\n\t#Create a list ""persons"" with instances of Person and names ""Person A"", ""Person B"", ""Person {a3}"" and ids {a2}.\n\tpersons = [Person(a1,a2,a3),Person(a1,a2,a3),Person(a1,a2,a3)]\n\t#Create a list ""places"" with instances of Place and names ""Place A"", ""Place B"", ""Place {a3}"" and ids {a2}.\n\tplaces = [Place(a1,a2,a3),Place(a1,a2,a3),Place(a1,a2,a3)]\n\t#Create a list ""events"" with instances of Event and names ""Event', 'def compare_object_equivalence(a1,a2,a3):\n\t#Create a set ""unique_persons"" of this list.\n\tunique_persons = set()\n\t#Add all the persons to the set.\n\tfor person in a1:\n\t\tunique_persons.add(person)\n\t#Add all the persons to the set.\n\tfor person in a2:\n\t\tunique_persons.add(person)\n\t#Add all the persons to the set.\n\tfor person in a3:\n\t\tunique_persons.add(person)\n\t#Check if the set is empty.\n\tif len(unique_persons) == 0:\n\telse:', 'def compare_object_equivalence(a1,a2,a3):\n\t#Print the number of elements in the set.\n\t#Print the number of elements in the set.\n\t#Print the number of elements in the set.\n\t#Check if the sets are equal.\n\tif a1 == a2 and a2 == a3:\n\telse:']"
16,"['Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(""4"") = 4\n# int(""4"") = ""4""\n# int(4) = ""4"".', 'Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.', 'Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").', 'Print the list.']","[{'a1': '29348'}, {'a1': '1'}, {'a1': '123'}, {'a1': '2344'}, {'a1': '-1'}]","[[29348, '29348'], [1, '1'], [123, '123'], [2344, '2344'], [-1, '-1']]",128.0,string,Drunken python,"Overload built-in functions, and write functions which correct drunken functions.",17,def drunken_python(a1):,"[""assert drunken_python(29348) == [29348, '29348']"", ""assert drunken_python(1) == [1, '1']"", ""assert drunken_python(123) == [123, '123']"", ""assert drunken_python(2344) == [2344, '2344']"", ""assert drunken_python(-1) == [-1, '-1']""]","['def drunken_python(a1):\n\t#Python got drunk and the built-in functions str() and int() are acting odd:', 'def drunken_python(a1):\n\t#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".\n\tdef int_to_str(a2):\n\t\t#Create a function called str_to_int() that converts strings into integers. E.g., str_to_int(""4"") = 4.\n\t\tdef str_to_int(a3):\n\t\t\t#Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = ""4"".', 'def drunken_python(a1):\n\t#Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(""4"") = 4.\n\tdef str_to_int(a2):\n\t#Create a function called str_to_float() that converts floats into strings. E.g., str_to_float(""4.5"") = 4.5.\n\tdef str_to_float(a3):\n\t#Create a function called str_to_bool() that converts booleans into strings. E.g., str_to_bool(""True"") = True.\n\tdef str_to_bool(a4):', 'def drunken_python(a1):\n\t#Create a list named ""my_result"" with elements int_to_str({a1}) and str_to_int(""{a1}"").\n\tmy_result = [int_to_str(a1), str_to_int(a1)]\n\t#Return the list.', 'def drunken_python(a1):\n\t#Print the list.\n\t#Print the length of the list.\n\t#Print the first element of the list.\n\t#Print the last element of the list.\n\t#Print the middle element of the list.\n\t#Print the element at the specified index.\n\t#Print the element at the specified index.\n\treturn a1\n\treturn len(a1)\n\treturn a1[0]\n\treturn a1[-1]\n\treturn a1[len(a1)//2]\n\treturn a1[1]']"
17,"['Initialize dictionary of Morse codes named \'chars_to_dots\' with values [\'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\',\'Y\': \'-.--\', \'Z\': \'--..\', \' \': \' \', \'0\': \'-----\',\'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\',\'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\',\'&\': \'.-...\', ""\'"": \'.----.\', \'@\': \'.--.-.\', \')\': \'-.--.-\', \'(\': \'-.--.\',\':\': \'---...\', \',\': \'--..--\', \'=\': \'-...-\', \'!\': \'-.-.--\', \'.\': \'.-.-.-\',\'-\': \'-....-\', \'+\': \'.-.-.\', \'""\': \'.-..-.\', \'?\': \'..--..\', \'/\': \'-..-.\']', ""Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent."", ""Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string."", ""Encode '{a1}' to morse code and assign the result to 'morse_code'."", ""Decode the variable named 'morse_code' to a string named 'decoded_text'."", ""Print the variable named 'decoded_text'.""]","[{'a1': 'Hello World'}, {'a1': 'Hello Foo'}, {'a1': 'Hello WORLD'}, {'a1': 'foo BAR'}, {'a1': 'This is a long string'}]","['HELLO WORLD', 'HELLO FOO', 'HELLO WORLD', 'FOO BAR', 'THIS IS A LONG STRING']",512.0,algorithm,Morse code,Encode a string into morse code given its conversion rule.,18,def morse_code(a1):,"[""assert morse_code('Hello World') == 'HELLO WORLD'"", ""assert morse_code('Hello Foo') == 'HELLO FOO'"", ""assert morse_code('Hello WORLD') == 'HELLO WORLD'"", ""assert morse_code('foo BAR') == 'FOO BAR'"", ""assert morse_code('This is a long string') == 'THIS IS A LONG STRING'""]","['def morse_code(a1):\n\t#Initialize dictionary of Morse codes named \'chars_to_dots\' with valuesn\tchars_to_dots = {\'A\':\'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\',\'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\',\'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\',\'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\':', ""def morse_code(a1):\n\t#Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.\n\t#The Morse code is a string of 10 characters, each character representing a letter in the alphabet.\n\t#The Morse code is composed of 10 characters, each character representing a letter in the alphabet.\n\t#The Morse code is composed of 10 characters, each character representing a letter in the alphabet.\n\t#The Morse code is composed of 10 characters, each character representing a letter in the alphabet.\n\t#The Morse code is composed of 10 characters, each character representing a letter in the alphabet.\n\t#The Morse code"", ""def morse_code(a1):\n\t#Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.\n\t#The function should return a string.\n\t#The function should be case-insensitive.\n\t#The function should be able to handle any number of spaces.\n\t#The function should be able to handle any number of punctuation.\n\t#The function should be able to handle any number of special characters.\n\t#The function should be able to handle any number of uppercase letters.\n\t#The function should be able to handle any number of lowercase letters.\n\t#The function should be able to handle any number of numbers.\n\t#The function should be able to handle any number of symbols"", ""def morse_code(a1):\n\t#Encode '{a1}' to morse code and assign the result to'morse_code'.\n\tmorse_code = ''\n\tfor i in a1:\n\t\tif i =='':\n\t\t\tmorse_code +=''\n\t\telif i == 'A':\n\t\t\tmorse_code += '.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -.- -"", ""def morse_code(a1):\n\t#Decode the variable named'morse_code' to a string named 'decoded_text'.\n\tdecoded_text = ''\n\tfor i in range(len(a1)):\n\t\tif a1[i] =='':\n\t\t\tdecoded_text +=''\n\t\telif a1[i] == 'A':\n\t\t\tdecoded_text += 'A'\n\t\telif a1[i] == 'B':\n\t\t\tdecoded_text += 'B'\n\t\telif a1[i] == 'C':\n\t\t\tdecoded_text += 'C'\n\t\telif a1[i] == 'D':\n\t\t\tdecoded_text += 'D'\n\t\telif a1["", 'def morse_code(a1):\n\t#Print the variable named \'decoded_text\'.\n\tdecoded_text = """"\n\t#Print the variable named\'morse_code\'.\n\tmorse_code = """"\n\t#Print the variable named\'morse_code_list\'.\n\tmorse_code_list = []\n\t#Print the variable named\'morse_code_list_2\'.\n\tmorse_code_list_2 = []\n\t#Print the variable named\'morse_code_list_3\'.\n\tmorse_code_list_3 = []\n\t#Print the variable named\'morse_code_list_4\'.']"
18,"['Initialize a list of integers with {a1} and a variable named target with a value of {a2}.', 'Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.', 'Run the function and print out the result.']","[{'a1': '[0,1,2,3]', 'a2': '4'}, {'a1': '[1, 11, 111]', 'a2': '122'}, {'a1': '[-1, 0, 2, 4]', 'a2': '3'}, {'a1': '[10, 20, 30, 40]', 'a2': '70'}, {'a1': '[-1, -1, 123, -123]', 'a2': '0'}]","[[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]]",128.0,algorithm,Two-sum,Implement the two-sum problem on a given input pair.,19,"def two-sum(a1,a2):","['assert two-sum([0, 1, 2, 3],4) == [1, 3]', 'assert two-sum([1, 11, 111],122) == [1, 2]', 'assert two-sum([-1, 0, 2, 4],3) == [0, 3]', 'assert two-sum([10, 20, 30, 40],70) == [2, 3]', 'assert two-sum([-1, -1, 123, -123],0) == [2, 3]']","['def two-sum(a1,a2):\n\t#Initialize a list of integers with {a1} and a variable named target with a value of {a2}.\n\ttarget = a2\n\ta = []\n\t#Iterate through the list of integers.\n\tfor i in range(len(a1)):\n\t\t#Iterate through the list of integers.\n\t\tfor j in range(len(a1)):\n\t\t\t#If the current value of {a1} is equal to the current value of {a2} and the current value of {a1} is not equal to the current value of {a2}, add the current value of {a1} to the list of integers.\n\t\t\tif a1[i] + a1[j]', 'def two-sum(a1,a2):\n\t#Implement a function ""two_sum"" solving two sum problem given a list of integers and a target argument.\n\t#Return a list of indices of the two numbers such that they add up to the target.\n\t#If there is no such pair, return an empty list.\n\t#Example:\n\t#two_sum([2,7,11,15],9) -> [0,1]\n\t#two_sum([3,2,4],6) -> [1,2]\n\t#two_sum([3,3],6) -> []\n\t#two_sum([1,1,1,1,1,1,1,1,1,1', 'def two-sum(a1,a2):\n\t#Run the function and print out the result.\n\treturn sum(a1[i] for i in range(len(a1)) if a1[i] + a2[i] == 2020)']"
19,"['Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).', 'Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).', 'Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).', 'Concatenate these data points.', 'Implement the k-means clustering algorithm with n iterations and the centroids as return value.', 'Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".', 'Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".']","[{'a1': 10}, {'a1': 20}, {'a1': 30}, {'a1': 40}, {'a1': 50}]","['(-10, -10), (10, 10)', '(-20, -20), (20, 20)', '(-30, -30), (30, 30)', '(-40, -40), (40, 40)', '(-50, -50), (50, 50)']",256.0,data science,k-means,Implement and run k-means on sampled points.,20,def k-means(a1):,"['assert k-means(10) == ((-10, -10), (10, 10))', 'assert k-means(20) == ((-20, -20), (20, 20))', 'assert k-means(30) == ((-30, -30), (30, 30))', 'assert k-means(40) == ((-40, -40), (40, 40))', 'assert k-means(50) == ((-50, -50), (50, 50))']","['def k-means(a1):\n\t#Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).\n\t#The function should return a list of n points, where each point is a tuple (x, y).\n\t#The points should be distributed according to the bivariate normal distribution.\n\t#The function should return the number of iterations needed to converge.\n\t#The function should return the number of iterations needed to converge.\n\t#The function should return the number of iterations needed to converge.\n\t#The function should return the number of iterations needed to converge.\n\t#The function should return the number of iterations needed to converge.\n\t#The function should return the', 'def k-means(a1):\n\t#Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).\n\tpoints1 = sample(a1, 100)\n\t#Call the function to sample 100 points named points2 centered at ({a1}, {a1}) with standard deviation (1, 1).\n\tpoints2 = sample(a1, 100)\n\t#Call the function to sample 100 points named points3 centered at ({a1}, {a1}) with standard deviation (1, 1).\n\tpoints3 = sample(a1, 100)\n\t#Call the function to sample 100 points', 'def k-means(a1):\n\t#Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).\n\tpoints2 = sample(a1, 100, (-a1, -a1))\n\t#Call the function to compute the distance between each point and the points2.\n\tdistances = distance(points2)\n\t#Call the function to find the cluster centers.\n\tcenters = cluster(distances)\n\t#Call the function to assign each point to the closest cluster center.\n\tassignments = assign(centers, points2)\n\t#Call the function to compute the new centers.\n\tnew_centers = cluster(distances, assignments)\n\t#Call the function to', 'def k-means(a1):\n\t#Concatenate these data points.\n\ta = np.concatenate((a1,a1),axis=0)\n\t#Create a random initial cluster centers.\n\tcenters = np.random.rand(k,2)\n\t#Assign each data point to a cluster.\n\tclusters = np.zeros((a.shape[0],k))\n\tfor i in range(a.shape[0]):\n\t\tclusters[i,:] = np.argmin(np.sum((a[i,:]-centers)**2,axis=1))\n\t#Calculate the new cluster centers.\n\tfor i in range(k):', 'def k-means(a1):\n\t#Implement the k-means clustering algorithm with n iterations and the centroids as return value.\n\t#a1 is the data set.\n\t#Return the centroids.\n\t#a2 is the number of iterations.\n\t#a3 is the number of centroids.\n\t#a4 is the distance function.\n\t#a5 is the random seed.\n\t#a6 is the distance threshold.\n\t#a7 is the distance function.\n\t#a8 is the random seed.\n\t#a9 is the distance threshold.\n\t#a10 is the distance function.\n\t#a11 is the random seed.\n\t#a12 is', 'def k-means(a1):\n\t#Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to ""my_centroids"".\n\tmy_centroids = []\n\tfor i in range(0,100):\n\t\tmy_centroids.append(a1)', 'def k-means(a1):\n\t#Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of ""(x1, y1), (x2, y2)"".\n\tc1 = (-1, -1)\n\tc2 = (-1, -1)\n\tfor i in range(len(a1)):\n\t\tif a1[i][0] < c1[0]:\n\t\t\tc1 = a1[i]\n\t\tif a1[i][0] > c2[0]:\n\t\t\tc2 = a1[i]']"
20,"['Define a list of integers named ""elements"" with values {numbers}.', 'Calculate the sum of the even numbers of the list and store the result to variable ""even"".', 'Calculate the sum of the odd numbers in the same list and store the result to ""odd"".', 'Create a list named ""my_result"" containing the variables even and odd.', 'Print the list.']","[{'numbers': [1]}, {'numbers': [2e+100, 5e+100, -11, 10]}, {'numbers': []}, {'numbers': [-5, 1, 6, -25, -36, 6]}, {'numbers': [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}]","[[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]]",128.0,math,Even odd sum,Print the sum of even and odd numbers in an array.,21,def even_odd_sum(numbers):,"['assert even_odd_sum([1]) == [0, 1]', 'assert even_odd_sum([2e+100, 5e+100, -11, 10]) == [7e+100, -11]', 'assert even_odd_sum([]) == [0, 0]', 'assert even_odd_sum([-5, 1, 6, -25, -36, 6]) == [-24, -29]', 'assert even_odd_sum([73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]) == [270, 813]']","['def even_odd_sum(numbers):\n\t#Define a list of integers named ""elements"" with values {numbers}.\n\telements = [numbers]\n\t#Define a list named ""even_numbers"" with values {[]}.\n\teven_numbers = []\n\t#Define a list named ""odd_numbers"" with values {[]}.\n\todd_numbers = []\n\t#Define a variable named ""even_sum"" with value 0.\n\teven_sum = 0\n\t#Define a variable named ""odd_sum"" with value 0.\n\todd_sum = 0\n\t#Loop through the list of integers named ""elements"" and add the values of each element to the corresponding', 'def even_odd_sum(numbers):\n\t#Calculate the sum of the even numbers of the list and store the result to variable ""even"".\n\teven = 0\n\tfor number in numbers:\n\t\tif number % 2 == 0:\n\t\t\teven += number\n\t#Calculate the sum of the odd numbers of the list and store the result to variable ""odd"".\n\todd = 0\n\tfor number in numbers:\n\t\tif number % 2!= 0:\n\t\t\todd += number\n\t#Return the sum of the even and odd numbers.', 'def even_odd_sum(numbers):\n\t#Calculate the sum of the odd numbers in the same list and store the result to ""odd"".\n\todd = 0\n\tfor i in numbers:\n\t\tif i % 2 == 0:\n\t\t\todd += i\n\t#Calculate the sum of the even numbers in the same list and store the result to ""even"".\n\teven = 0\n\tfor i in numbers:\n\t\tif i % 2!= 0:\n\t\t\teven += i\n\t#Return the sum of the odd and even numbers.', 'def even_odd_sum(numbers):\n\t#Create a list named ""my_result"" containing the variables even and odd.\n\tmy_result = []\n\t#Iterate through the list of numbers.\n\tfor number in numbers:\n\t\t#If the number is even, add it to the list of even numbers.\n\t\tif number % 2 == 0:\n\t\t\tmy_result.append(number)\n\t\t#If the number is odd, add it to the list of odd numbers.\n\t\telse:\n\t\t\tmy_result.append(number)\n\t#Return the list of even numbers.', 'def even_odd_sum(numbers):\n\t#Print the list.\n\t#Create a new list.\n\teven_numbers = []\n\t#Iterate through the list.\n\tfor number in numbers:\n\t\t#If the number is even, add it to the even_numbers list.\n\t\tif number % 2 == 0:\n\t\t\teven_numbers.append(number)\n\t#Print the even_numbers list.\n\t#Create a new list.\n\todd_numbers = []\n\t#Iterate through the list.\n\tfor number in numbers:\n\t\t#If the\n\treturn numbers\n\treturn even_numbers']"
21,"['Define a list named ""elements"" with the values {lst}.', 'Count the number of zeros in variable elements and store the value into variable ""zero_count"".', 'Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".', 'Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".']","[{'lst': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}, {'lst': ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {'lst': [0]}, {'lst': [-1, 0, 1e-05, 0, 1e-30, 0]}, {'lst': [0, 1, None, 2, False, 1, 0]}]","[['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, None, 2, False, 1, 0, 0]]",128.0,array,Shift zeros,Move all the zeroes in a list to the right.,22,def shift_zeros(lst):,"[""assert shift_zeros(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""assert shift_zeros(['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]) == ['a', 'b', 'c', 'd', 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"", 'assert shift_zeros([0]) == [0]', 'assert shift_zeros([-1, 0, 1e-05, 0, 1e-30, 0]) == [-1, 1e-05, 1e-30, 0, 0, 0]', 'assert shift_zeros([0, 1, None, 2, False, 1, 0]) == [1, None, 2, False, 1, 0, 0]']","['def shift_zeros(lst):\n\t#Define a list named ""elements"" with the values {lst}.\n\telements = lst\n\t#Define a list named ""zeros"" with the values {0}.\n\tzeros = [0] * len(lst)\n\t#Define a list named ""new_list"" with the values {zeros} and {elements}.\n\tnew_list = zeros + elements\n\t#Return the new list.', 'def shift_zeros(lst):\n\t#Count the number of zeros in variable elements and store the value into variable ""zero_count"".\n\tzero_count = 0\n\tfor i in lst:\n\t\tif i == 0:\n\t\t\tzero_count += 1\n\t#If the number of zeros is greater than 1, then shift the elements of the list to the right by one.\n\tif zero_count > 1:\n\t\tfor i in range(zero_count - 1):\n\t\t\tlst.append(lst.pop(0))', 'def shift_zeros(lst):\n\t#Scan through the list in order and remove all the zeros, store the result into variable ""non_zero"".\n\tnon_zero = []\n\tfor i in range(len(lst)):\n\t\tif lst[i]!= 0:\n\t\t\tnon_zero.append(lst[i])', 'def shift_zeros(lst):\n\t#Merge the variable non_zero and a new list containing ""zero_count"" 0s and store the result to ""result"". Print the variable ""result"".\n\tnon_zero = []\n\tresult = []\n\tfor i in lst:\n\t\tif i == 0:\n\t\t\tnon_zero.append(i)\n\t\telse:\n\t\t\tresult.append(i)\n\treturn result']"
22,"['Import numpy and initialize a numpy array named X with values {array}.', 'Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.', 'Call the function {n} times and stack the arrays into a new 2d array named ""samples"".', 'Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".', 'Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".', 'Print the variable ""percentile"".']","[{'array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 1000}, {'array': 'consisting of 1000 randomly sampled integers ranging from 0 to 10', 'n': 10000}, {'array': 'consisting of 1000 uniformly sampled floats in [0, 1)', 'n': 1000}, {'array': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'n': 100}]","[[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]]",128.0,data science,Bootstrap 95% CI,"Define an array, sample N times, calculate means, calculate the percentile.",23,"def bootstrap_95%_ci(array,n):","['assert bootstrap_95%_ci([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],1000) == [20.525, 28.575]', ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',1000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 randomly sampled integers ranging from 0 to 10',10000) == [4.8025, 5.1975]"", ""assert bootstrap_95%_ci('consisting of 1000 uniformly sampled floats in [0, 1)',1000) == [0.4825, 0.5175]"", 'assert bootstrap_95%_ci([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],100) == [1, 1]']","['def bootstrap_95%_ci(array,n):\n\t#Import numpy and initialize a numpy array named X with values {array}.\n\timport numpy as np\n\tX = np.array(array)\n\t#Initialize a numpy array named Y with values {n}.\n\tY = np.array(n)\n\t#Initialize a numpy array named Z with values {0}.\n\tZ = np.array(0)\n\t#Initialize a numpy array named W with values {0}.\n\tW = np.array(0)\n\t#Initialize a numpy array named Q with values {0}.\n\tQ = np.array(0)\n\t#Initialize a numpy array named R with values {0}.', 'def bootstrap_95%_ci(array,n):\n\t#Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.\n\t#The function should return the 95% confidence interval of the mean of the input array.\n\t#The function should return the 95% confidence interval of the standard deviation of the input array.\n\t#The function should return the 95% confidence interval of the median of the input array.\n\t#The function should return the 95% confidence interval of the minimum of the input array.\n\t#The function should return the 95% confidence interval of the maximum of the input array.\n\t#The function should return the 95% confidence interval of the sum', 'def bootstrap_95%_ci(array,n):\n\t#Call the function {n} times and stack the arrays into a new 2d array named ""samples"".\n\tsamples = np.zeros((n,len(array)))\n\tfor i in range(n):\n\t\tsamples[i,:] = array\n\t#Calculate the 95% confidence interval for each sample.\n\tlower_95 = np.percentile(samples,2.5,axis=0)\n\tupper_95 = np.percentile(samples,97.5,axis=0)\n\t#Return the 95% confidence interval.', 'def bootstrap_95%_ci(array,n):\n\t#Calculate the mean of each element in variable ""sample"" and store the result to ""mean"".\n\tmean = np.mean(array)\n\t#Calculate the standard deviation of each element in variable ""sample"" and store the result to ""std"".\n\tstd = np.std(array)\n\t#Calculate the 95% confidence interval for each element in variable ""sample"" and store the result to ""ci"".\n\tci = mean + (std/np.sqrt(n))', 'def bootstrap_95%_ci(array,n):\n\t#Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named ""percentile"".\n\tpercentile = []\n\tfor i in range(n):\n\t\tpercentile.append(np.percentile(array,2.5))\n\tfor i in range(n):\n\t\tpercentile.append(np.percentile(array,97.5))', 'def bootstrap_95%_ci(array,n):\n\t#Print the variable ""percentile"".\n\tpercentile = np.percentile(array, 95)\n\t#Print the variable ""array"".\n\t#Print the variable ""percentile"".\n\t#Print the variable ""n"".\n\t#Calculate the 95% confidence interval.\n\tlower_bound = percentile - (1.96 * np.sqrt(n))\n\tupper_bound = percentile + (1.96 * np.sqrt(n))\n\t#Return the 95% confidence interval.\n\treturn lower_']"
23,"['Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".', 'Assign the sum of the even digits to the variable ""result"".', 'Print the resulting number as integer.']","[{'a': 8, 'b': 2}, {'a': 2, 'b': 8}, {'a': 2, 'b': 6}, {'a': 132, 'b': 6}, {'a': 17, 'b': 96}]","[20, 20, 12, 14, 0]",128.0,math,Sum even digits,Sum even digits between two numbers.,24,"def sum_even_digits(a,b):","['assert sum_even_digits(8,2) == 20', 'assert sum_even_digits(2,8) == 20', 'assert sum_even_digits(2,6) == 12', 'assert sum_even_digits(132,6) == 14', 'assert sum_even_digits(17,96) == 0']","['def sum_even_digits(a,b):\n\t#Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as ""my_digits"".\n\t#Return the sum of the even single digits.\n\t#Note:\n\t#The input numbers will be in the range [1, 10000].\n\t#The output will be in the range [1, 10000].\n\t#Example 1:\n\t#Input: a = 2, b = 5\n\t#Output: 7\n\t#Explanation: 2 + 4 + 6 = 7.\n\t#Example 2:\n\t#Input: a = 2, b = 2\n\t#Output', 'def sum_even_digits(a,b):\n\t#Assign the sum of the even digits to the variable ""result"".\n\tresult = 0\n\t#Loop through the digits of the number ""a"" and ""b"".\n\tfor i in range(len(a)):\n\t\t#If the digit at index ""i"" is even, add it to the sum.\n\t\tif a[i] % 2 == 0:\n\t\t\tresult += a[i]\n\t#Loop through the digits of the number ""b"" and add them to the sum.\n\tfor i in range(len(b)):\n\t\tif b[i] % 2 == 0:\n\t\t\tresult += b[i', 'def sum_even_digits(a,b):\n\t#Print the resulting number as integer.\n\treturn a+b']"
24,"['Find the maximum element in the list {A} and assign it to variable ""my_max"".', 'Find the minimum element in the same list.', 'Compute the different between ""my_max"" and the minimum element.', 'Print the difference']","[{'A': [0, 4]}, {'A': [4, 0]}, {'A': [0]}, {'A': [0, 7, 6]}, {'A': [2, 4, 7, 20, 6]}]","[4, 4, 0, 7, 18]",128.0,array,Min-max diff,Compute the difference between maximum and minimum numbers in a list.,25,def min-max_diff(A):,"['assert min-max_diff([0, 4]) == 4', 'assert min-max_diff([4, 0]) == 4', 'assert min-max_diff([0]) == 0', 'assert min-max_diff([0, 7, 6]) == 7', 'assert min-max_diff([2, 4, 7, 20, 6]) == 18']","['def min-max_diff(A):\n\t#Find the maximum element in the list {A} and assign it to variable ""my_max"".\n\tmy_max = max(A)\n\t#Find the minimum element in the list {A} and assign it to variable ""my_min"".\n\tmy_min = min(A)\n\t#Find the difference between the maximum and minimum element in the list {A} and assign it to variable ""diff"".\n\tdiff = my_max - my_min\n\t#Return the difference between the maximum and minimum element in the list {A}.', 'def min-max_diff(A):\n\t#Find the minimum element in the same list.\n\tmin_val = A[0]\n\tfor i in range(1,len(A)):\n\t\tif A[i] < min_val:\n\t\t\tmin_val = A[i]\n\t#Find the maximum element in the same list.\n\tmax_val = A[0]\n\tfor i in range(1,len(A)):\n\t\tif A[i] > max_val:\n\t\t\tmax_val = A[i]\n\t#Find the difference between the minimum and maximum element.\n\tdiff = max_val - min_val', 'def min-max_diff(A):\n\t#Compute the different between ""my_max"" and the minimum element.\n\t#Compute the different between ""my_min"" and the maximum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between the maximum and minimum element.\n\t#Compute the difference between', 'def min-max_diff(A):\n\t#Print the difference between the minimum and maximum values in the array\n\treturn min(A) - max(A)']"
25,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Lowercase the given string ""my_string"".', 'Assign the distinct characters of the string to a variable named ""chars"".', 'Sort these characters in alphabetical order.', 'Print the resulting list of characters.']","[{'A': 'abcde'}, {'A': 'abcdecadeCADE'}, {'A': 'aaaaAAAAaaaa'}, {'A': 'Jerry jERRY JeRRRY'}, {'A': 'ddddc'}]","[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a'], [' ', 'e', 'j', 'r', 'y'], ['c', 'd']]",128.0,string,Distinct chars,"Print the sorted, case-insensitive unique characters of a string.",26,def distinct_chars(A):,"[""assert distinct_chars('abcde') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('abcdecadeCADE') == ['a', 'b', 'c', 'd', 'e']"", ""assert distinct_chars('aaaaAAAAaaaa') == ['a']"", ""assert distinct_chars('Jerry jERRY JeRRRY') == [' ', 'e', 'j', 'r', 'y']"", ""assert distinct_chars('ddddc') == ['c', 'd']""]","['def distinct_chars(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\t#Create a variable named ""distinct_chars"" and initialize it to an empty list.\n\tdistinct_chars = []\n\t#For each character in the string ""{A}""...\n\tfor char in my_string:\n\t\t#If the character is not already in the list ""{distinct_chars}""...\n\t\tif char not in distinct_chars:\n\t\t\t#Add the character to the list ""{distinct_chars}"".\n\t\t\tdistinct_chars.append(char)\n\t#Return the list ""{distinct_chars}"".', 'def distinct_chars(A):\n\t#Lowercase the given string ""my_string"".\n\tA = A.lower()\n\t#Create a list of all the unique characters in the string.\n\tunique_chars = list(set(A))\n\t#Return the list of unique characters.', 'def distinct_chars(A):\n\t#Assign the distinct characters of the string to a variable named ""chars"".\n\tchars = set(A)\n\t#Return the distinct characters of the string.', 'def distinct_chars(A):\n\t#Sort these characters in alphabetical order.\n\tA.sort()\n\t#Create a dictionary to store the frequency of each character.\n\td = {}\n\t#Iterate through the characters in the string.\n\tfor c in A:\n\t\t#If the character is not in the dictionary, add it.\n\t\tif c not in d:\n\t\t\td[c] = 1\n\t\t#If the character is in the dictionary, increment the frequency.\n\t\telse:\n\t\t\td[c] += 1\n\t#Return the dictionary.', 'def distinct_chars(A):\n\t#Print the resulting list of characters.\n\treturn list(set(A))']"
26,"['Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.', 'Define a function ""len_str"" that returns the length of a string.', 'Assign the length of each string to a seperate variable.', 'Assign the longer string to the variable ""result"".', 'Print the resulting string.']","[{'A': 'abcde', 'B': 'ab'}, {'A': 'ab', 'B': 'abcde'}, {'A': 'a', 'B': 'aa'}, {'A': 'aaaaaaaaaa', 'B': 'cdeee'}, {'A': 'f', 'B': 'gg'}]","['abcde', 'abcde', 'aa', 'aaaaaaaaaa', 'gg']",128.0,string,Longer string,Compare and print the longer string given two strings.,27,"def longer_string(A,B):","[""assert longer_string('abcde','ab') == 'abcde'"", ""assert longer_string('ab','abcde') == 'abcde'"", ""assert longer_string('a','aa') == 'aa'"", ""assert longer_string('aaaaaaaaaa','cdeee') == 'aaaaaaaaaa'"", ""assert longer_string('f','gg') == 'gg'""]","['def longer_string(A,B):\n\t#Create two variables ""a"" and ""b"" for the strings ""{A}"" and ""{B}"", respectively.\n\ta = A\n\tb = B\n\t#Create a variable ""c"" for the string ""{a}{b}"".\n\tc = a + b\n\t#Print the string ""{c}"".', 'def longer_string(A,B):\n\t#Define a function ""len_str"" that returns the length of a string.\n\tdef len_str(s):\n\t#Define a function ""longest_string"" that takes two strings as arguments and returns the longest string.\n\tdef longest_string(A,B):\n\t\tif len_str(A) > len_str(B):\n\t\telse:\n\t#Call the function ""longest_string"" with the two strings A and B.', 'def longer_string(A,B):\n\t#Assign the length of each string to a seperate variable.\n\tlength_A = len(A)\n\tlength_B = len(B)\n\t#Create a variable to store the longer string.\n\tlonger_string = """"\n\t#If the length of the longer string is less than the length of the shorter string, then the longer string is the shorter string.\n\tif length_A < length_B:\n\t\tlonger_string = A\n\t#If the length of the longer string is greater than the length of the shorter string, then the longer string is the longer string.\n\telse:\n\t\tlonger_string =', 'def longer_string(A,B):\n\t#Assign the longer string to the variable ""result"".\n\tresult = """"\n\t#Loop through the strings A and B.\n\tfor i in range(len(A)):\n\t\t#If the characters in A are the same, add them to the result.\n\t\tif A[i] == B[i]:\n\t\t\tresult += A[i]\n\t#Return the result.', 'def longer_string(A,B):\n\t#Print the resulting string.\n\treturn A+B']"
27,"['Assign the positive floating point number {A} to a variable ""f"".', 'Compute the integer part of the number as variable ""a"".', 'Assign the digits of the fractional part of the floating point number to an integer variable ""b"".', 'Add them together and print the result.']","[{'A': 17.82}, {'A': 1.1}, {'A': 1000000.0000001}, {'A': 0.0101}, {'A': 100.5}]","[99, 2, 1000001, 101, 105]",128.0,math,Sum float digits,Sum numbers before an after the decimal point of a float.,28,def sum_float_digits(A):,"['assert sum_float_digits(17.82) == 99', 'assert sum_float_digits(1.1) == 2', 'assert sum_float_digits(1000000.0000001) == 1000001', 'assert sum_float_digits(0.0101) == 101', 'assert sum_float_digits(100.5) == 105']","['def sum_float_digits(A):\n\t#Assign the positive floating point number {A} to a variable ""f"".\n\tf = A\n\t#Assign the negative floating point number {A} to a variable ""f"".\n\tf = -A\n\t#Assign the integer part of the floating point number {A} to a variable ""f"".\n\tf = int(f)\n\t#Assign the fractional part of the floating point number {A} to a variable ""f"".\n\tf = float(f)\n\t#Return the sum of the positive and negative floating point numbers {A} and {f}.', 'def sum_float_digits(A):\n\t#Compute the integer part of the number as variable ""a"".\n\ta = int(A)\n\t#Compute the fractional part of the number as variable ""b"".\n\tb = A - a\n\t#Compute the sum of the integer and fractional parts.', 'def sum_float_digits(A):\n\t#Assign the digits of the fractional part of the floating point number to an integer variable ""b"".\n\tb = int(A.split(""."")[1])\n\t#Assign the digits of the fractional part of the floating point number to an integer variable ""a"".\n\ta = int(A.split(""."")[0])\n\t#Add the digits of the fractional part of the floating point number to the integer variable ""c"".\n\tc = a + b\n\t#Return the sum of the integer variables ""a"" and ""c"".', 'def sum_float_digits(A):\n\t#Add them together and print the result.\n\tsum = 0\n\tfor i in range(len(A)):\n\t\tsum += A[i]']"
28,"['Assign the string value {s} to a variable ""my_string"".', 'Lowercase the defined string.', 'Count the number of vowels', 'Print out the number']","[{'s': 'CelebrAtion'}, {'s': 'PaLm'}, {'s': 'PrEdictiOn'}, {'s': ''}, {'s': 'ABC'}]","[5, 1, 4, 0, 1]",128.0,string,Count vowels,Count the number of vowels in a string.,29,def count_vowels(s):,"[""assert count_vowels('CelebrAtion') == 5"", ""assert count_vowels('PaLm') == 1"", ""assert count_vowels('PrEdictiOn') == 4"", ""assert count_vowels('') == 0"", ""assert count_vowels('ABC') == 1""]","['def count_vowels(s):\n\t#Assign the string value {s} to a variable ""my_string"".\n\tmy_string = s\n\t#Assign the variable ""vowels"" to a variable ""vowels_count"".\n\tvowels_count = 0\n\t#Assign the variable ""consonants_count"" to a variable ""consonants_count"".\n\tconsonants_count = 0\n\t#Assign the variable ""other_count"" to a variable ""other_count"".\n\tother_count = 0\n\t#Assign the variable ""vowels_count"" to a variable ""vowels_count"".\n\tfor i in my_string:\n\t\tif', ""def count_vowels(s):\n\t#Lowercase the defined string.\n\ts = s.lower()\n\t#Create a list of vowels.\n\tvowels = ['a','e','i','o','u']\n\t#Create a counter variable.\n\tcount = 0\n\t#Iterate through the string.\n\tfor letter in s:\n\t\t#Check if the letter is in the list of vowels.\n\t\tif letter in vowels:\n\t\t\t#Increment the counter.\n\t\t\tcount += 1\n\t#Return the counter."", ""def count_vowels(s):\n\t#Count the number of vowels in the string\n\tvowels = 0\n\tfor letter in s:\n\t\tif letter in 'aeiou':\n\t\t\tvowels += 1"", ""def count_vowels(s):\n\t#Print out the number of vowels in the string\n\tvowels = 0\n\tfor i in range(len(s)):\n\t\tif s[i] in 'aeiouAEIOU':\n\t\t\tvowels += 1""]"
29,"['Assign the positive integer {n} to a variable ""f"".', 'Create a list from 1 to ""f"" (inclusive).', 'Create and initialize a variable named ""factorial"".', 'Compute the product of all the values in the list and assign the product to ""factorial"".', 'Print out the variable ""factorial"".']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 24, 3628800, 1, 120]",128.0,math,Factorial,Compute the factorial of n.,30,def factorial(n):,"['assert factorial(2) == 2', 'assert factorial(4) == 24', 'assert factorial(10) == 3628800', 'assert factorial(1) == 1', 'assert factorial(5) == 120']","['def factorial(n):\n\t#Assign the positive integer {n} to a variable ""f"".\n\tf = 1\n\t#If {n} is 0 or 1, return 1.\n\tif n == 0 or n == 1:\n\t#Otherwise, calculate the factorial of {n}.\n\telse:\n\t\tfor i in range(2, n + 1):\n\t\t\tf *= i', 'def factorial(n):\n\t#Create a list from 1 to ""f"" (inclusive).\n\tf = [1]\n\t#Loop through the list.\n\tfor i in range(2, n+1):\n\t\t#Add the product of the previous list to the current list.\n\t\tf.append(f[i-1] * i)\n\t#Return the list.', 'def factorial(n):\n\t#Create and initialize a variable named ""factorial"".\n\tfactorial = 1\n\t#Loop through the range of numbers from 1 to n.\n\tfor i in range(1, n+1):\n\t\t#Multiply the previous value by the current value.\n\t\tfactorial = factorial * i\n\t#Return the value of the variable ""factorial"".', 'def factorial(n):\n\t#Compute the product of all the values in the list and assign the product to ""factorial"".\n\tfactorial = 1\n\tfor i in range(1, n+1):\n\t\tfactorial *= i', 'def factorial(n):\n\t#Print out the variable ""factorial"".\n\treturn ""Factorial of"", n, ""is"", factorial_recursive(n)']"
30,"['Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".', 'Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".', 'Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".', 'Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".', 'Print the variable ""my_tuple"".']","[{'a': 8, 'b': 9}, {'a': 5, 'b': 7}, {'a': 9, 'b': 2}, {'a': 1, 'b': 1}, {'a': 1000, 'b': 1000}]","[[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]]",128.0,math,Max edge triangle,Finds the maximum range of a triangle's third edge.,31,"def max_edge_triangle(a,b):","['assert max_edge_triangle(8,9) == [17, 2]', 'assert max_edge_triangle(5,7) == [11, 3]', 'assert max_edge_triangle(9,2) == [10, 8]', 'assert max_edge_triangle(1,1) == [1, 1]', 'assert max_edge_triangle(1000,1000) == [1999, 1]']","['def max_edge_triangle(a,b):\n\t#Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable ""two-edges"".\n\ttwo_edges = a + b', 'def max_edge_triangle(a,b):\n\t#Compute the maximum length of the third edge by substracting 1 from ""two-edges"" and store the value in a variable ""maximum-edge"".\n\tmaximum_edge = 1 - (a + b)', 'def max_edge_triangle(a,b):\n\t#Compute the minimum length of the third edge and store the value in a variable ""minimum-edge"".\n\tminimum_edge = min(a,b)\n\t#Compute the maximum length of the third edge and store the value in a variable ""maximum-edge"".\n\tmaximum_edge = max(a,b)\n\t#Compute the length of the third edge and store the value in a variable ""third-edge"".\n\tthird_edge = maximum_edge - minimum_edge\n\t#Compute the area of the triangle and store the value in a variable ""area"".\n\tarea = (minimum_edge * maximum_edge) / 2\n\t#Return the area of the triangle.', 'def max_edge_triangle(a,b):\n\t#Assign value of maximum-edge and minimum-edge to a tuple named ""my_tuple"".\n\tmy_tuple = (a,b)\n\t#If the maximum-edge is less than the minimum-edge, then the maximum-edge is the minimum-edge.\n\tif a > b:\n\t\tmy_tuple = (b,a)\n\t#Return the maximum-edge.', 'def max_edge_triangle(a,b):\n\t#Print the variable ""my_tuple"".\n\tmy_tuple = (a,b)\n\t#Print the variable ""my_tuple"".\n\t#Print the variable ""my_tuple"".\n\t#Print the variable ""my_tuple"".\n\t#Print the variable ""my_tuple"".\n\t#Print the variable ""my_tuple"".\n\t#Print the variable ""my_tuple"".\n\treturn my_tuple\n\treturn max(my_tuple)\n\treturn min(my_tuple)\n\treturn sum(my_tuple)\n\treturn my_tuple[0]']"
31,"['Compute factorial', 'Implement a function to compute the remainder when dividing a number by 10', 'Print out the remainder when dividing the factorial of {n} by 10']","[{'n': 2}, {'n': 4}, {'n': 10}, {'n': 1}, {'n': 5}]","[2, 4, 0, 1, 0]",128.0,math,Factorial and remainder,Compute the factorial and its remainder when divided.,32,def factorial_and_remainder(n):,"['assert factorial_and_remainder(2) == 2', 'assert factorial_and_remainder(4) == 4', 'assert factorial_and_remainder(10) == 0', 'assert factorial_and_remainder(1) == 1', 'assert factorial_and_remainder(5) == 0']","['def factorial_and_remainder(n):\n\t#Compute factorial and remainder\n\tfact = 1\n\trem = 0\n\twhile n > 0:\n\t\tfact *= n\n\t\trem += n\n\t\tn -= 1', 'def factorial_and_remainder(n):\n\t#Implement a function to compute the remainder when dividing a number by 10 and then multiplying it by 10.\n\t#The function should return the remainder when dividing the number by 10 and then multiplying it by 10.\n\t#The function should return 0 when dividing by 0.\n\t#The function should return the number when dividing by 1.\n\t#The function should return the number when dividing by 100.\n\t#The function should return the number when dividing by 1000.\n\t#The function should return the number when dividing by 10000.', 'def factorial_and_remainder(n):\n\t#Print out the remainder when dividing the factorial of {n} by 10.\n\t#Print out the factorial when dividing the remainder of {n} by 10.\n\t#Print out the factorial when dividing the remainder of {n} by 100.\n\t#Print out the remainder when dividing the factorial of {n} by 100.\n\t#Print out the factorial when dividing the remainder of {n} by 1000.\n\t#Print out the remainder when dividing the factorial of {n} by 1000.\n\t#Print out the factorial when dividing the remainder of {n}']"
32,"['Given a positive integer {n} and create a variable named ""n"" with this value', 'Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides', 'Convert the angle from degrees to radians', 'Round the angle to have two decimal digits', 'Print out the angle']","[{'n': 3}, {'n': 4}, {'n': 1000}, {'n': 10}, {'n': 100}]","[3.14, 6.28, 3135.31, 25.13, 307.88]",128.0,math,Sum polygon angles,Sum the angles in a polygon.,33,def sum_polygon_angles(n):,"['assert sum_polygon_angles(3) == 3.14', 'assert sum_polygon_angles(4) == 6.28', 'assert sum_polygon_angles(1000) == 3135.31', 'assert sum_polygon_angles(10) == 25.13', 'assert sum_polygon_angles(100) == 307.88']","['def sum_polygon_angles(n):\n\t#Given a positive integer {n} and create a variable named ""n"" with this value.\n\t#Create a variable named ""sum"" with this value.\n\t#Create a variable named ""i"" with this value.\n\t#Create a variable named ""j"" with this value.\n\t#Create a variable named ""k"" with this value.\n\t#Create a variable named ""l"" with this value.\n\t#Create a variable named ""m"" with this value.\n\t#Create a variable named ""n"" with this value.\n\t#Create a variable named ""sum"" with this value.\n\t#Create a variable named ""sum"" with this value.', 'def sum_polygon_angles(n):\n\t#Compute the the total sum of internal angles in degrees of a regular-polygon with ""n"" sides\n\t#The polygon is a regular-polygon with n sides, so the total sum of internal angles is the sum of the angles of the sides\n\t#The polygon is a regular-polygon with n sides, so the total sum of internal angles is the sum of the angles of the sides\n\t#The polygon is a regular-polygon with n sides, so the total sum of internal angles is the sum of the angles of the sides\n\t#The polygon is a regular-polygon with n sides, so the total sum of internal angles is the sum of the angles of the sides\n\t#The polygon is a regular', 'def sum_polygon_angles(n):\n\t#Convert the angle from degrees to radians\n\tangle = n * math.pi / 180\n\t#Calculate the sum of the angles of the polygon\n\tsum_angles = 0\n\tfor i in range(n):\n\t\tsum_angles += math.sin(angle)', 'def sum_polygon_angles(n):\n\t#Round the angle to have two decimal digits', 'def sum_polygon_angles(n):\n\t#Print out the angle of the polygon\n\t#n is the number of sides of the polygon\n\t#return the sum of the angles of the polygon\n\tsum = 0\n\tfor i in range(n):\n\t\tsum += math.radians(360/n)\n\treturn sum']"
33,"['Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively', 'Convert s1 and s2 to integers', 'Compute the sum of the two integers and store it as the variable s', 'Print out the variable s']","[{'s1': '111', 's2': '222'}, {'s1': '2', 's2': '4'}, {'s1': '0', 's2': '12'}, {'s1': '50', 's2': '100'}, {'s1': '10000', 's2': '1'}]","[333, 6, 12, 150, 10001]",128.0,string,Sum string numbers,Add together two numbers represented in string.,34,"def sum_string_numbers(s1,s2):","['assert sum_string_numbers(111,222) == 333', 'assert sum_string_numbers(2,4) == 6', 'assert sum_string_numbers(0,12) == 12', 'assert sum_string_numbers(50,100) == 150', 'assert sum_string_numbers(10000,1) == 10001']","['def sum_string_numbers(s1,s2):\n\t#Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively.\n\ts1 = s1.split()\n\ts2 = s2.split()\n\t#Create a variable named sum to store the sum of the two strings.\n\tsum = 0\n\t#Iterate through the two strings {s1} and {s2} and add the values of each to the variable named sum.\n\tfor i in range(len(s1)):\n\t\tsum += int(s1[i])\n\tfor i in range(len(s2)):\n\t\tsum += int(s2[i])\n\t#Return the sum of the two', 'def sum_string_numbers(s1,s2):\n\t#Convert s1 and s2 to integers\n\ts1 = int(s1)\n\ts2 = int(s2)\n\t#Add the two numbers', 'def sum_string_numbers(s1,s2):\n\t#Compute the sum of the two integers and store it as the variable s3\n\ts3 = int(s1) + int(s2)\n\t#Return the sum of the two integers', 'def sum_string_numbers(s1,s2):\n\t#Print out the variable s1 and s2\n\treturn s1+s2']"
34,"['Initialize the variable named lst with an integer list {l}.', 'Find the maximum of the variable lst and assign it to a variable named ma.', 'Find the minimum of the variable lst and assign to a variable named mi.', 'Create a list from mi and ma (inclusive).', 'Print the sum of this list.']","[{'l': [4, 3, 8, 2]}, {'l': [17, 16, 15, 10, 11, 12]}, {'l': [1, 2]}, {'l': [10]}, {'l': [1, 100]}]","[35, 108, 3, 10, 5050]",128.0,array,Min-max sum,Sum the range from the minimum to the maximum of a list.,35,def min-max_sum(l):,"['assert min-max_sum([4, 3, 8, 2]) == 35', 'assert min-max_sum([17, 16, 15, 10, 11, 12]) == 108', 'assert min-max_sum([1, 2]) == 3', 'assert min-max_sum([10]) == 10', 'assert min-max_sum([1, 100]) == 5050']","['def min-max_sum(l):\n\t#Initialize the variable named lst with an integer list {l}.\n\tlst = [int(i) for i in l]\n\t#Initialize the variable named min_sum with an integer.\n\tmin_sum = lst[0]\n\t#Initialize the variable named max_sum with an integer.\n\tmax_sum = lst[0]\n\t#Initialize the variable named sum with an integer.\n\tsum = 0\n\t#Loop through the list {lst}.\n\tfor i in lst:\n\t\t#If the current value of {i} is less than the current value of {min_sum}, then update {min_sum}.', 'def min-max_sum(l):\n\t#Find the maximum of the variable lst and assign it to a variable named ma.\n\tma = max(l)\n\t#Find the minimum of the variable lst and assign it to a variable named mi.\n\tmi = min(l)\n\t#Find the sum of the variable lst and assign it to a variable named sum.\n\tsum = sum(l)\n\t#Return the values of ma, mi, sum.', 'def min-max_sum(l):\n\t#Find the minimum of the variable lst and assign to a variable named mi.\n\tmi = min(l)\n\t#Find the maximum of the variable lst and assign to a variable named ma.\n\tma = max(l)\n\t#Find the sum of the variable lst and assign to a variable named sum.\n\tsum = sum(l)\n\t#Return the minimum and maximum of the variable lst and the sum of the variable lst.', 'def min-max_sum(l):\n\t#Create a list from mi and ma (inclusive).\n\tmi = min(l)\n\tma = max(l)\n\t#Create a list of the sum of the elements in the list.\n\ts = [sum(l)]\n\t#Iterate through the list.\n\tfor i in l:\n\t\t#If the element is less than the mi, add it to the list.\n\t\tif i < mi:\n\t\t\ts.append(i)\n\t\t#If the element is greater than the ma, add it to the list.\n\t\telif i > ma:\n\t\t\ts.append(i)\n\t#Return the list', 'def min-max_sum(l):\n\t#Print the sum of this list.\n\t#Print the minimum value in this list.\n\t#Print the maximum value in this list.\n\treturn sum(l)\n\treturn min(l)\n\treturn max(l)']"
35,"['Implement a function to return the characters shared between two words.', 'Implement a function to find the number of vowels in a string.', 'Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.', 'Print the number of vowels in the variable s']","[{'s1': 'meaty', 's2': 'apple'}, {'s1': 'fan', 's2': 'forsook'}, {'s1': 'spout', 's2': 'shout'}, {'s1': 'happiness', 's2': 'fitness'}, {'s1': 'code', 's2': 'fork'}]","[2, 0, 2, 2, 1]",128.0,string,Vowel overlap,Find the number of overlaped vowels of two words.,36,"def vowel_overlap(s1,s2):","[""assert vowel_overlap('meaty','apple') == 2"", ""assert vowel_overlap('fan','forsook') == 0"", ""assert vowel_overlap('spout','shout') == 2"", ""assert vowel_overlap('happiness','fitness') == 2"", ""assert vowel_overlap('code','fork') == 1""]","['def vowel_overlap(s1,s2):\n\t#Implement a function to return the characters shared between two words.\n\t#For example, given the string ""hello"" and ""hi"", return ""h"".\n\t#Hint: Use a set to store the characters in the two strings.\n\t#Hint: Use a dictionary to store the characters in the two strings.\n\t#Hint: Use a set to store the characters in the two strings.\n\t#Hint: Use a dictionary to store the characters in the two strings.\n\t#Hint: Use a set to store the characters in the two strings.\n\t#Hint: Use a dictionary to store the characters in the two strings.\n\t#Hint: Use', ""def vowel_overlap(s1,s2):\n\t#Implement a function to find the number of vowels in a string.\n\t#The vowels are a, e, i, o, u.\n\tvowels = ['a','e','i','o','u']\n\tcount = 0\n\tfor i in range(len(s1)):\n\t\tif s1[i] in vowels and s2[i] in vowels:\n\t\t\tcount += 1"", ""def vowel_overlap(s1,s2):\n\t#Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.\n\ts = s1 + s2\n\t#Create a list of the characters in s.\n\tl = list(s)\n\t#Create a variable named vowels that will contain the characters in l that are vowels.\n\tvowels = ['a','e','i','o','u']\n\t#Create a variable named vowel_count that will contain the number of vowels in l.\n\tvowel_count = 0\n\t#Iterate through l, checking if each character in l is a vowel. If it is, increment vowel_count.\n\tfor"", ""def vowel_overlap(s1,s2):\n\t#Print the number of vowels in the variable s1\n\tvowels = 0\n\tfor i in range(len(s1)):\n\t\tif s1[i] in 'aeiou':\n\t\t\tvowels += 1\n\t#Print the number of vowels in the variable s2\n\tvowels = 0\n\tfor i in range(len(s2)):\n\t\tif s2[i] in 'aeiou':\n\t\t\tvowels += 1\n\t#Print the number of vowels in the variable s1 and s2\n\treturn vowels""]"
36,"['Given a list of integers {l}, assign the list to a varialbe named lst1.', 'Find the negative numbers of the list and assign it to a new variable named lst2', 'Compute the sum of numbers in lst2', 'Print out the sum']","[{'l': [-1, -2, 0, 1, 5]}, {'l': [5, 2, 0, 5, 10]}, {'l': [-100, -20, -3, 0, 0]}, {'l': [-23, -2, -5, 1000, 23, -10, -100, -10]}, {'l': [5, 1000, 0, 1, 0, 0, 0, 1, 1]}]","[-3, 0, -123, -150, 0]",128.0,math,Sum neg,Sum of negative numbers in a list.,37,def sum_neg(l):,"['assert sum_neg([-1, -2, 0, 1, 5]) == -3', 'assert sum_neg([5, 2, 0, 5, 10]) == 0', 'assert sum_neg([-100, -20, -3, 0, 0]) == -123', 'assert sum_neg([-23, -2, -5, 1000, 23, -10, -100, -10]) == -150', 'assert sum_neg([5, 1000, 0, 1, 0, 0, 0, 1, 1]) == 0']","['def sum_neg(l):\n\t#Given a list of integers {l}, assign the list to a varialbe named lst1.\n\tlst1 = []\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tlst1.append(i)', 'def sum_neg(l):\n\t#Find the negative numbers of the list and assign it to a new variable named lst2\n\tlst2 = [x for x in l if x < 0]\n\t#Return the sum of the negative numbers in lst2', 'def sum_neg(l):\n\t#Compute the sum of numbers in lst2', 'def sum_neg(l):\n\t#Print out the sum of all negative numbers in the list\n\tsum = 0\n\tfor i in l:\n\t\tif i < 0:\n\t\t\tsum += i\n\treturn sum']"
37,"['Import the pandas library.', 'Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".', 'Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".', 'Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".', 'Print the maximum element of this list.']","[{'a1': 'alco'}, {'a1': 'age'}, {'a1': 'smoke'}, {'a1': 'active'}, {'a1': 'weight'}]","[44369, 25, 44717, 36516, 2770]",128.0,data science,Load dataset,Load from a file and print statistics.,38,def load_dataset(a1):,"[""assert load_dataset('alco') == 44369"", ""assert load_dataset('age') == 25"", ""assert load_dataset('smoke') == 44717"", ""assert load_dataset('active') == 36516"", ""assert load_dataset('weight') == 2770""]","['def load_dataset(a1):\n\t#Import the pandas library.\n\timport pandas as pd\n\t#Import the dataset.\n\tdataset = pd.read_csv(a1)\n\t#Return the dataset.', 'def load_dataset(a1):\n\t#Read a dataframe ""df"" from the csv file located in ""./datasets/mlbootcamp5_train.csv"".\n\tdf = pd.read_csv(a1)\n\t#Create a new dataframe ""df_train"" by dropping the first column (the label).\n\tdf_train = df.drop(df.columns[0], axis=1)\n\t#Create a new dataframe ""df_test"" by dropping the first column (the label).\n\tdf_test = df.drop(df.columns[0], axis=1)\n\t#Create a new dataframe ""df_train"" by dropping the first column (the label).\n\tdf_train = df_train', 'def load_dataset(a1):\n\t#Group by the column ""gender"" and assign the value counts for ""{a1}"" to a variable named ""my_counts"".\n\tmy_counts = a1.groupby(""gender"").count()\n\t#Sort the counts by the value and assign the value counts for ""{a1}"" to a variable named ""my_counts_sorted"".\n\tmy_counts_sorted = my_counts.sort_values(by=""count"", ascending=False)\n\t#Return the value counts for ""{a1}"" as a DataFrame.', 'def load_dataset(a1):\n\t#Assign the attribute ""values"" of this variable and to a new variable named ""plain_list"".\n\tplain_list = a1.values\n\t#Assign the attribute ""index"" of this variable and to a new variable named ""index_list"".\n\tindex_list = a1.index\n\t#Assign the attribute ""columns"" of this variable and to a new variable named ""columns_list"".\n\tcolumns_list = a1.columns\n\t#Assign the attribute ""index_col"" of this variable and to a new variable named ""index_col_list"".\n\tindex_col_list = a1.index_col\n\t#Assign the attribute ""columns_order""', 'def load_dataset(a1):\n\t#Print the maximum element of this list.\n\t#Print the minimum element of this list.\n\t#Print the mean of this list.\n\t#Print the standard deviation of this list.\n\t#Print the median of this list.\n\t#Print the mode of this list.\n\treturn max(a1)\n\treturn min(a1)\n\treturn sum(a1)/len(a1)\n\treturn sum((a1-sum(a1))/len(a1))**2\n\treturn sorted(a1)[len(a1)//2]']"
38,"[""Define a string named 's' with the value '{s}'."", ""Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'"", ""Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'"", ""Split the string 's2' into a list of words with a space and store the result to variable 'words'"", ""Print a list of integers consisting of the length of each word in 'words'""]","[{'s': 'Hello, World!'}, {'s': 'Raising Skinny Elephants Is Utterly Boring'}, {'s': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '}, {'s': ',.'}, {'s': 'Wow! Is this a real sentence?'}]","[[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]]",,string,Char length list,Return a list of non-punctuation character lengths of a list of strings.,39,def char_length_list(s):,"[""assert char_length_list('Hello, World!') == [5, 6]"", ""assert char_length_list('Raising Skinny Elephants Is Utterly Boring') == [7, 6, 9, 2, 7, 6]"", ""assert char_length_list('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ') == [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]"", ""assert char_length_list(',.') == []"", ""assert char_length_list('Wow! Is this a real sentence?') == [4, 2, 4, 1, 4, 9]""]","[""def char_length_list(s):\n\t#Define a string named's' with the value '{s}'.\n\t#Define a list named 'l' with the value ['{l}'].\n\t#Define a variable named 'length' with the value 0.\n\t#For each character in the string s,\n\t#If the character is a letter,\n\t#Add 1 to the length variable.\n\t#If the character is a digit,\n\t#Add 1 to the length variable.\n\t#If the character is a space,\n\t#Add 1 to the length variable.\n\t#If the character is a punctuation mark,\n\t#Add 1 to the length"", ""def char_length_list(s):\n\t#Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'\n\tpattern = re.compile(r'[,\\.]')\n\t#Use the pattern to find the length of each character in the string s\n\tchar_length = [len(x) for x in pattern.findall(s)]\n\t#Return the list of character lengths"", ""def char_length_list(s):\n\t#Use the variable 'pattern' to substitute all the commas and periods in the string's' and store the result to variable's2'\n\ts2 = re.sub(r',', r' ', s)\n\ts2 = re.sub(r'\\.', r' ', s2)\n\t#Use the variable 'pattern' to substitute all the commas and periods in the string's2' and store the result to variable's3'\n\ts3 = re.sub(r',', r' ', s2)\n\ts3 = re.sub(r'\\.', r' ', s3)\n\t#Use the variable 'pattern' to substitute all the commas and periods in the string's3' and store the"", ""def char_length_list(s):\n\t#Split the string's2' into a list of words with a space and store the result to variable 'words'\n\twords = s.split()\n\t#Create a list to store the length of each word\n\tlengths = []\n\t#Iterate through the list 'words'\n\tfor word in words:\n\t\t#Append the length of the word to the list 'lengths'\n\t\tlengths.append(len(word))\n\t#Return the list 'lengths'"", ""def char_length_list(s):\n\t#Print a list of integers consisting of the length of each word in 'words'\n\t#s is a string of words\n\t#return a list of integers\n\treturn [len(word) for word in s.split()]""]"
39,"[""Create a variable named 's' with the value '{s}'."", ""Lowercase the variable 's' and store the result to variable 's2'."", ""Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'."", ""Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'."", ""Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.""]","[{'s': '#FFF'}, {'s': '#egacea'}, {'s': '#12'}, {'s': '123456'}, {'s': '#ffb600'}]","[True, False, False, False, True]",,math,Hex to RGB,Convert a six hexadecimal digit string into list of RGB values.,40,def hex_to_rgb(s):,"[""assert hex_to_rgb('#FFF') == True"", ""assert hex_to_rgb('#egacea') == False"", ""assert hex_to_rgb('#12') == False"", 'assert hex_to_rgb(123456) == False', ""assert hex_to_rgb('#ffb600') == True""]","[""def hex_to_rgb(s):\n\t#Create a variable named's' with the value '{s}'.\n\ts = s.lstrip('#')\n\t#Split the string into a list of characters.\n\ts = [int(s[i:i+2], 16) for i in range(0, len(s), 2)]\n\t#Return the list of characters as a tuple."", ""def hex_to_rgb(s):\n\t#Lowercase the variable's' and store the result to variable's2'.\n\ts2 = s.lower()\n\t#If the variable's2' is not empty, then convert the variable's2' to a list.\n\tif s2:\n\t\t#Convert the variable's2' to a list.\n\t\ts2 = s2.split()\n\t\t#If the variable's2' is not empty, then convert the variable's2' to a list.\n\t\tif s2:\n\t\t\t#Convert the variable's2' to a list.\n\t\t\ts2 = [int(s2[i], 16)"", ""def hex_to_rgb(s):\n\t#Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.\n\tpattern3 = re.compile(r'([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})')\n\t#If the string is not empty, then:\n\tif s:\n\t\t#Split the string into a list of substrings by the pattern3 variable.\n\t\ts = s.split(pattern3)\n\t\t#If the list is not empty, then:\n\t\tif s:\n\t\t\t#Return a tuple containing the three substrings."", ""def hex_to_rgb(s):\n\t#Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.\n\tpattern6 = re.compile(r'([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})')\n\t#Compile a regular expression that matches a sharp symbol followed by four hexadecimal digits (0-9, a-f), store the result to variable 'pattern4'.\n\tpattern4 = re.compile(r'([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})"", ""def hex_to_rgb(s):\n\t#Print True if the variable's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.\n\tif re.match(pattern3, s) or re.match(pattern6, s):\n\t\treturn True\n\telse:\n\t\treturn False""]"
40,"[""Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list."", ""Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'."", ""Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.""]","[{'lst': [1, 1, 2, 2, 2, 2]}, {'lst': []}, {'lst': [100, 100, 0]}, {'lst': [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {'lst': [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}]","[2, None, 100, 0, None]",,array,Majority vote,Check if a certain element is the majority of a given list.,41,def majority_vote(lst):,"['assert majority_vote([1, 1, 2, 2, 2, 2]) == 2', 'assert majority_vote([]) == None', 'assert majority_vote([100, 100, 0]) == 100', 'assert majority_vote([0, 0, 0, 0, 0, 1, 1, 1, 1]) == 0', 'assert majority_vote([1, 2, 3, 4, 5, 6, 6, 6, 6, 6]) == None']","[""def majority_vote(lst):\n\t#Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.\n\tcount_values = {}\n\tfor i in lst:\n\t\tif i in count_values:\n\t\t\tcount_values[i] += 1\n\t\telse:\n\t\t\tcount_values[i] = 1\n\t#Create a function called'most_common' that takes a hash map of the number of times each integer appears in the list and returns the key with the highest value.\n\tmost_common = max(count_values, key=count_values.get)"", ""def majority_vote(lst):\n\t#Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.\n\tcounts = count_values(lst)\n\t#Apply the function'max' to the dictionary 'counts' and store the result to variable'max_count'.\n\tmax_count = max(counts.values())\n\t#Apply the function'min' to the dictionary 'counts' and store the result to variable'min_count'.\n\tmin_count = min(counts.values())\n\t#Apply the function'sum' to the dictionary 'counts' and store the result to variable 'total_votes'.\n\ttotal_votes = sum(counts.values())\n\t#Apply"", ""def majority_vote(lst):\n\t#Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.\n\tcounts = {}\n\tfor i in lst:\n\t\tif i in counts:\n\t\t\tcounts[i] += 1\n\t\telse:\n\t\t\tcounts[i] = 1\n\tfor key in counts:\n\t\tif counts[key] > len(lst)/2:\n\t\t\treturn key\n\treturn None""]"
41,"[""Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year)."", ""Add 7 days to the variable 'today' and store the result to variable 'week'."", ""Print 'week' in the format '%m/%d/%Y'.""]","[{'year': 1990, 'month': 1, 'day': 28}, {'year': 2000, 'month': 2, 'day': 26}, {'year': 2022, 'month': 12, 'day': 28}, {'year': 1274, 'month': 11, 'day': 5}, {'year': 1600, 'month': 7, 'day': 30}]","['02/04/1990', '03/04/2000', '01/04/2023', '11/12/1274', '08/06/1600']",,string,Week later,Print the formatted date of a week later given a date.,42,"def week_later(year,month,day):","[""assert week_later(1990,1,28) == '02/04/1990'"", ""assert week_later(2000,2,26) == '03/04/2000'"", ""assert week_later(2022,12,28) == '01/04/2023'"", 'assert week_later(1274,11,5) == 0.0007195185766614338', ""assert week_later(1600,7,30) == '08/06/1600'""]","[""def week_later(year,month,day):\n\t#Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).\n\ttoday = datetime.datetime(year,month,day)\n\t#Add one week to the date and return the date."", ""def week_later(year,month,day):\n\t#Add 7 days to the variable 'today' and store the result to variable 'week'.\n\tweek = datetime.date(year,month,day) + datetime.timedelta(days=7)"", ""def week_later(year,month,day):\n\t#Print 'week' in the format '%m/%d/%Y'.\n\treturn '%s/%s/%s'%(month,day,year)""]"
42,"[""Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string."", ""Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'."", ""Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.""]","[{'words': ['apple', 'banana', 'carrot']}, {'words': [""I'll"", 'see', 'trees.']}, {'words': ['a...', 'b?', 'c!', 'd']}, {'words': ['', 'a', 'A']}, {'words': ['ABC', 'ghijklmno', 'def']}]","[True, True, True, False, False]",,math,Sorted word weights,Calculate the sum of ASCII values of each word and check if the list is sorted.,43,def sorted_word_weights(words):,"[""assert sorted_word_weights(['apple', 'banana', 'carrot']) == True"", 'assert sorted_word_weights([""I\'ll"", \'see\', \'trees.\']) == True', ""assert sorted_word_weights(['a...', 'b?', 'c!', 'd']) == True"", ""assert sorted_word_weights(['', 'a', 'A']) == False"", ""assert sorted_word_weights(['ABC', 'ghijklmno', 'def']) == False""]","[""def sorted_word_weights(words):\n\t#Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.\n\t#The function should return a list of tuples, where each tuple contains the word and its weight.\n\t#The tuples should be sorted by the second element in the tuple.\n\t#The tuples should be in alphabetical order.\n\t#The tuples should be in descending order of weight.\n\t#The tuples should be in ascending order of weight.\n\t#The tuples should be in alphabetical order.\n\t#The tuples should be in descending order of weight.\n\t#The tuples should be in alphabetical order.\n\t#The tuples should be in descending order of weight."", ""def sorted_word_weights(words):\n\t#Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.\n\tweights = []\n\tfor word in words:\n\t\tweights.append(word_weight(word))"", ""def sorted_word_weights(words):\n\t#Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.\n\t#The 'weights' are the weights of the words in the dictionary.\n\t#The 'words' are the words in the dictionary.\n\t#The'sorted_weights' are the sorted weights of the words in the dictionary.\n\t#The'sorted_words' are the sorted words of the dictionary.\n\t#The'sorted_weights' and'sorted_words' are the same if the 'weights' are the same.\n\t#The'sorted_weights' and'sorted_words' are different if the 'weights' are different.\n\t#The'sorted_weights""]"
43,"[""Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string."", ""Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result."", ""Define an integer variable named 'base' with the value {n}."", ""While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'."", ""Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.""]","[{'n': 123456}, {'n': 1234}, {'n': 123212}, {'n': 11211230}, {'n': 1112212124000131}]","[False, False, True, True, True]",,string,Create Palindrome,Sum pairs of adjacent digits until the number is palidrome.,44,def create_palindrome(n):,"['assert create_palindrome(123456) == False', 'assert create_palindrome(1234) == False', 'assert create_palindrome(123212) == True', 'assert create_palindrome(11211230) == True', 'assert create_palindrome(1112212124000131) == True']","[""def create_palindrome(n):\n\t#Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.\n\t#If the integer is a palindrome, return True. If the integer is not a palindrome, return False.\n\t#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.\n\t#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.\n\t#The function should return True if the integer is a palindrome, and False if the integer is not a palindrome.\n\t#The function should return True if the integer is a palindrome, and False if the integer"", ""def create_palindrome(n):\n\t#Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.\n\t#The function should return the largest palindrome that can be formed by adding each pair of adjacent digits.\n\t#For example, if n = 12345, the function should return 123450000000000000000000000000000000000000000000000000000000000000000000000000000000"", ""def create_palindrome(n):\n\t#Define an integer variable named 'base' with the value {n}.\n\tbase = n\n\t#Define an integer variable named 'temp' with the value 0.\n\ttemp = 0\n\t#Define an integer variable named 'i' with the value 0.\n\ti = 0\n\t#Define an integer variable named 'j' with the value 0.\n\tj = 0\n\t#Define an integer variable named 'k' with the value 0.\n\tk = 0\n\t#Define an integer variable named 'l' with the value 0.\n\tl = 0\n\t#Define an integer variable named"", ""def create_palindrome(n):\n\t#While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.\n\tbase = n\n\twhile not is_palindrome(base):\n\t\tbase = descent(base)"", ""def create_palindrome(n):\n\t#Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.\n\tif n < 10:\n\t\treturn False\n\telse:\n\t\t#Create a variable 'base' that is the base of the number 'n'.\n\t\tbase = n\n\t\t#Create a variable 'palindrome' that is the base of the number 'n' multiplied by the base of the number 'n' minus one.\n\t\tpalindrome = base * base - 1\n\t\t#Print 'True' if the variable 'palindrome' is equal to the variable 'base'.\n\t\tif palindrome == base:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False""]"
44,"[""Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'."", ""Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'."", ""Print the joined string from 'stack'.""]","[{'input': 'he@@l@hel@llo'}, {'input': '@@@@'}, {'input': 'si@@@t boy'}, {'input': 'a@b@c@d@e@f@g@h@i@jkl'}, {'input': 'hello   @@world'}]","['hello', '', 't boy', 'jkl', 'hello world']",,string,Simulate Backspace,Apply the backspace characters in a string and print the modified .,45,def simulate_backspace(input):,"[""assert simulate_backspace('he@@l@hel@llo') == 'hello'"", ""assert simulate_backspace('@@@@') == ''"", ""assert simulate_backspace('si@@@t boy') == 't boy'"", ""assert simulate_backspace('a@b@c@d@e@f@g@h@i@jkl') == 'jkl'"", ""assert simulate_backspace('hello   @@world') == 'hello world'""]","[""def simulate_backspace(input):\n\t#Define a string variable named 'input' with the value '{input}', as well as an empty list named'stack'.\n\tinput = '{' + input + '}'\n\tstack = []\n\t#Loop through the input string, and add each character to the stack.\n\tfor char in input:\n\t\tif char == '{':\n\t\t\tstack.append(char)\n\t\telif char == '}':\n\t\t\tif len(stack) > 0:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t#If the stack is empty, then the input string is valid.\n\tif len(stack) == 0:\n\telse:"", ""def simulate_backspace(input):\n\t#Iterating over variable 'input', if the current character is '@' and'stack' is not empty, pop the last element from'stack', otherwise append the character to'stack'.\n\tfor i in range(len(input)):\n\t\tif input[i] == '@' and len(stack) > 0:\n\t\t\tstack.pop()\n\t\telse:\n\t\t\tstack.append(input[i])"", ""def simulate_backspace(input):\n\t#Print the joined string from'stack'.\n\t#Remove the last character from the stack.\n\tstack.pop()""]"
45,"['Import the pandas library.', 'Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.', 'Assign the attribute ""Price"" to the target variable ""y"".', 'Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".', 'From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".', 'Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.', 'Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".']","[{'a1': 80, 'a2': 20}, {'a1': 50, 'a2': 50}, {'a1': 20, 'a2': 80}, {'a1': 10, 'a2': 90}, {'a1': 90, 'a2': 10}]","['31956.0 14607789799.0', '20086.0 14607789799.0', '7995.0 14607789799.0', '3948.0 14607789799.0', '35891.0 14607789799.0']",128.0,data science,Pandas DF manipulation,Manipulate a pandas dataframe and split into train and test set.,46,"def pandas_df_manipulation(a1,a2):","[""assert pandas_df_manipulation(80,20) == '31956.0 14607789799.0'"", ""assert pandas_df_manipulation(50,50) == '20086.0 14607789799.0'"", ""assert pandas_df_manipulation(20,80) == '7995.0 14607789799.0'"", ""assert pandas_df_manipulation(10,90) == '3948.0 14607789799.0'"", ""assert pandas_df_manipulation(90,10) == '35891.0 14607789799.0'""]","[""def pandas_df_manipulation(a1,a2):\n\t#Import the pandas library.\n\timport pandas as pd\n\t#Create a dataframe from the two lists.\n\tdf = pd.DataFrame({'a1':a1,'a2':a2})\n\t#Print the dataframe.\n\t#Return the dataframe."", 'def pandas_df_manipulation(a1,a2):\n\t#Import the function train_test_split from sklearn.model_selection.Read the dataframe ""df"" from the csv file \'./datasets/melb_data.csv\'.\n\tfrom sklearn.model_selection import train_test_split\n\t#Split the dataframe ""df"" into training and testing sets.\n\tX_train, X_test, y_train, y_test = train_test_split(a1,a2,test_size=0.2,random_state=0)\n\t#Print the shape of the training and testing sets.\n\t#Print the shape of the training and testing sets.', 'def pandas_df_manipulation(a1,a2):\n\t#Assign the attribute ""Price"" to the target variable ""y"".\n\ty = a1[\'Price\']\n\t#Assign the attribute ""Date"" to the target variable ""x"".\n\tx = a1[\'Date\']\n\t#Assign the attribute ""Time"" to the target variable ""z"".\n\tz = a1[\'Time\']\n\t#Assign the attribute ""Open"" to the target variable ""o"".\n\to = a1[\'Open\']\n\t#Assign the attribute ""High"" to the target variable ""h"".\n\th = a1[\'High\']\n\t#Assign the attribute ""Low"" to the target variable ""l"".\n\tl', 'def pandas_df_manipulation(a1,a2):\n\t#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_predictors"".\n\tmelb_predictors = a1.drop(""Price"",axis=1)\n\t#Drop the column ""Price"" from the dataframe on axis 1 and assign the result to a variable named ""melb_target"".\n\tmelb_target = a2.drop(""Price"",axis=1)\n\t#Concatenate the two dataframes on axis 0 and assign the result to a variable named ""melb_df"".\n\tmelb_df = pd.concat([melb_predictors,melb_target],axis=0)\n\t#Drop the column ""Price', 'def pandas_df_manipulation(a1,a2):\n\t#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X"".\n\tX = a1.select_dtypes(include=[\'object\']).columns.tolist()\n\t#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""y"".\n\ty = a2.select_dtypes(include=[\'object\']).columns.tolist()\n\t#From ""melb_predictors"" select and exclude columns of dtype ""object"" and name the result ""X_test"".\n\tX_test = a1.select_dtypes(include=[\'object\']).columns.tolist()\n\t#From ""melb_predictors"" select and', ""def pandas_df_manipulation(a1,a2):\n\t#Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.\n\tx_train, x_valid, y_train, y_valid = train_test_split(a1, a2, test_size=0.2, random_state=0)\n\t#Create a dataframe from the training and validation subsets.\n\tdf_train = pd.DataFrame(x_train)\n\tdf_valid = pd.DataFrame(x_valid)\n\t#Create a dataframe from the training and validation subsets.\n\tdf_train['label'] = y_train\n\tdf_valid['label'] = y_valid\n\t#Create a dataframe"", 'def pandas_df_manipulation(a1,a2):\n\t#Print the sum of the first column of x_train and the sum of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\n\t#Print the mean of the first column of x_train and the mean of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\n\t#Print the median of the first column of x_train and the median of y_train. Use the format ""{{:.1f}} {{:.1f}}"".\n\treturn a1.sum()\n\treturn a2.sum()\n\treturn a1.mean()\n\treturn a2.mean()\n\treturn a1.median()\n\treturn a2.median()']"
46,"['Create a variable named lst1 with value {l}', 'Find the minimum and maximum of lst1 and assign them to variables a and b respectively', 'Create a list from a to b (inclusive) and assign it to variable named lst2', 'Find the elements that are in lst2 but not in lst1', 'Print the sum of these elements']","[{'l': [1, 3, 5, 7, 10]}, {'l': [10, 7, 5, 3, 1]}, {'l': [10, 20, 30, 40, 50, 60]}, {'l': [-100, 100]}, {'l': [-5, -10, 0, 10]}]","[29, 29, 1575, 0, 5]",128.0,array,Sum non-overlap range,"Sum the integers in a (min, max) range that don't appear in a list .",47,def sum_non-overlap_range(l):,"['assert sum_non-overlap_range([1, 3, 5, 7, 10]) == 29', 'assert sum_non-overlap_range([10, 7, 5, 3, 1]) == 29', 'assert sum_non-overlap_range([10, 20, 30, 40, 50, 60]) == 1575', 'assert sum_non-overlap_range([-100, 100]) == 0', 'assert sum_non-overlap_range([-5, -10, 0, 10]) == 5']","['def sum_non-overlap_range(l):\n\t#Create a variable named lst1 with value {l}\n\tlst1 = l\n\t#Create a variable named lst2 with value {lst1}\n\tlst2 = lst1\n\t#Create a variable named lst3 with value {lst2}\n\tlst3 = lst2\n\t#Create a variable named lst4 with value {lst3}\n\tlst4 = lst3\n\t#Create a variable named lst5 with value {lst4}\n\tlst5 = lst4\n\t#Create a variable named lst6 with value {lst5}\n\tlst6 = lst5\n\t#Create a variable named lst7 with value {', 'def sum_non-overlap_range(l):\n\t#Find the minimum and maximum of lst1 and assign them to variables a and b respectively\n\ta = min(l)\n\tb = max(l)\n\t#Create a list of the elements in lst1 that are not in lst2\n\tnon_overlap = [i for i in l if i not in range(a,b+1)]\n\t#Return the sum of the elements in lst1 that are not in lst2', 'def sum_non-overlap_range(l):\n\t#Create a list from a to b (inclusive) and assign it to variable named lst2\n\tlst2 = []\n\tfor i in range(l[0],l[1]+1):\n\t\tlst2.append(i)\n\t#Create a list from a to b (inclusive) and assign it to variable named lst3\n\tlst3 = []\n\tfor i in range(l[2],l[3]+1):\n\t\tlst3.append(i)\n\t#Create a list from a to b (inclusive) and assign it to variable named lst4\n\tlst4 = []\n\tfor i in range(l[4],l[5]+1', 'def sum_non-overlap_range(l):\n\t#Find the elements that are in lst2 but not in lst1', 'def sum_non-overlap_range(l):\n\t#Print the sum of these elements in the list\n\tsum = 0\n\tfor i in l:\n\t\tsum += i\n\treturn sum']"
47,"['Initialize the variable named lst1 with a list {l}.', 'Create a function called num_in_str() to check whether a string contains a number.', 'Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2', 'Print out lst2']","[{'l': ['1a', 'a', '2b', 'b']}, {'l': ['abc', 'abc10']}, {'l': ['abc', 'ab10c', 'a10bc', 'bcd']}, {'l': ['this is a test', 'test1']}, {'l': ['t0t', '11', '0']}]","[['1a', '2b'], ['abc10'], ['ab10c', 'a10bc'], ['test1'], ['t0t', '11', '0']]",256.0,array,Detect digits,Find if a string contains digits.,48,def detect_digits(l):,"[""assert detect_digits(['1a', 'a', '2b', 'b']) == ['1a', '2b']"", ""assert detect_digits(['abc', 'abc10']) == ['abc10']"", ""assert detect_digits(['abc', 'ab10c', 'a10bc', 'bcd']) == ['ab10c', 'a10bc']"", ""assert detect_digits(['this is a test', 'test1']) == ['test1']"", ""assert detect_digits(['t0t', '11', '0']) == ['t0t', '11', '0']""]","['def detect_digits(l):\n\t#Initialize the variable named lst1 with a list {l}.\n\tlst1 = [l]\n\t#Initialize the variable named lst2 with a list {lst1}.\n\tlst2 = [lst1]\n\t#Initialize the variable named lst3 with a list {lst2}.\n\tlst3 = [lst2]\n\t#Initialize the variable named lst4 with a list {lst3}.\n\tlst4 = [lst3]\n\t#Initialize the variable named lst5 with a list {lst4}.\n\tlst5 = [lst4]\n\t#Initialize the variable named lst6 with a list {lst5}.\n\tlst6', ""def detect_digits(l):\n\t#Create a function called num_in_str() to check whether a string contains a number.\n\tdef num_in_str(s):\n\t\tfor i in s:\n\t\t\tif i.isdigit():\n\t#Create a function called is_palindrome() to check whether a string is a palindrome.\n\tdef is_palindrome(s):\n\t\ts = s.lower()\n\t\ts = s.replace(' ','')\n\t\ts = s.replace(' ','')\n\t\ts = s.replace(' ','')\n\t\ts = s.replace(' ','')\n\t\ts = s.replace(' ','')\n\t\ts = s"", 'def detect_digits(l):\n\t#Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2\n\tlst2 = num_in_str(l)\n\t#Call the function num_in_str() to find strings in lst2 that have numbers and assign them to a list named lst3\n\tlst3 = num_in_str(lst2)\n\t#Call the function num_in_str() to find strings in lst3 that have numbers and assign them to a list named lst4\n\tlst4 = num_in_str(lst3)\n\t#Call the function num_in_str() to find strings in lst4 that have numbers and assign them to a list', 'def detect_digits(l):\n\t#Print out lst2\n\t#Check if lst2 is empty\n\tif len(l) == 0:\n\t\treturn False\n\t#Check if lst2 is a list\n\tif not isinstance(l, list):\n\t\treturn False\n\t#Check if lst2 is a list of integers\n\tif not all(isinstance(x, int) for x in l):\n\t\treturn False\n\t#Check if lst2 is a list of integers\n\tif not all(x >= 0 for x in l):\n\t\treturn False\n\t#Check if lst2 is a list\n\treturn l']"
48,"['Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.', 'Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.', 'Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.', 'Create a list named ""abc"" which contains the three functions in order of definition.', 'Assign the integer {a4} to a variable ""my_init"".', 'Apply the first function of the list to ""my_init"" and name the result ""my_result"".', 'For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".', 'Print the variable named ""my_result"".']","[{'a1': '2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '1', 'a2': '1', 'a3': '2', 'a4': '1'}, {'a1': '2', 'a2': '2', 'a3': '2', 'a4': '2'}, {'a1': '-2', 'a2': '2', 'a3': '2', 'a4': '1'}, {'a1': '-2', 'a2': '-2', 'a3': '2', 'a4': '1'}]","[8, 2, 16, -8, 8]",128.0,math,Cascading functions,Sequentially invoke function objects in a list.,49,"def cascading_functions(a1,a2,a3,a4):","['assert cascading_functions(2,2,2,1) == 8', 'assert cascading_functions(1,1,2,1) == 2', 'assert cascading_functions(2,2,2,2) == 16', 'assert cascading_functions(-2,2,2,1) == -8', 'assert cascading_functions(-2,-2,2,1) == 8']","['def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""a"" that multiplies an integer argument by {a1} and returns the result.\n\tdef a(x):\n\t#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.\n\tdef b(x):\n\t#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\n\tdef c(x):\n\t#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.\n\tdef d(x):', 'def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""b"" that multiplies an integer argument by {a2} and returns the result.\n\tdef b(x):\n\t#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\n\tdef c(x):\n\t#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.\n\tdef d(x):\n\t#Define a function ""e"" that multiplies an integer argument by {a1} and returns the result.\n\tdef e(x):', 'def cascading_functions(a1,a2,a3,a4):\n\t#Define a function ""c"" that multiplies an integer argument by {a3} and returns the result.\n\tdef c(x):\n\t#Define a function ""d"" that multiplies an integer argument by {a4} and returns the result.\n\tdef d(x):\n\t#Define a function ""e"" that multiplies an integer argument by {a1} and returns the result.\n\tdef e(x):\n\t#Define a function ""f"" that multiplies an integer argument by {a2} and returns the result.\n\tdef f(x):', 'def cascading_functions(a1,a2,a3,a4):\n\t#Create a list named ""abc"" which contains the three functions in order of definition.\n\tabc = [a1,a2,a3,a4]\n\t#Create a list named ""abc_rev"" which contains the three functions in reverse order of definition.\n\tabc_rev = abc[::-1]\n\t#Create a list named ""abc_rev_rev"" which contains the three functions in reverse order of definition.\n\tabc_rev_rev = abc_rev[::-1]\n\t#Create a list named ""abc_rev_rev_rev"" which contains the three functions in reverse order of definition.\n\tabc_rev_rev_rev = abc_', 'def cascading_functions(a1,a2,a3,a4):\n\t#Assign the integer {a4} to a variable ""my_init"".\n\tmy_init = a4\n\t#Assign the integer {a3} to a variable ""my_init"".\n\tmy_init = a3\n\t#Assign the integer {a2} to a variable ""my_init"".\n\tmy_init = a2\n\t#Assign the integer {a1} to a variable ""my_init"".\n\tmy_init = a1\n\t#Return the integer {my_init}', 'def cascading_functions(a1,a2,a3,a4):\n\t#Apply the first function of the list to ""my_init"" and name the result ""my_result"".\n\tmy_result = a1(a2,a3,a4)\n\t#Apply the second function of the list to ""my_result"" and name the result ""my_result2"".\n\tmy_result2 = a2(my_result)\n\t#Apply the third function of the list to ""my_result2"" and name the result ""my_result3"".\n\tmy_result3 = a3(my_result2)\n\t#Apply the fourth function of the list to ""my_result3"" and name the result ""my_result4"".', 'def cascading_functions(a1,a2,a3,a4):\n\t#For each subsequent function in the list, take the result of the previous function as input argument and assign the result to ""my_result"".\n\tmy_result = a1(a2(a3(a4)))\n\t#Return the result of the last function.', 'def cascading_functions(a1,a2,a3,a4):\n\t#Print the variable named ""my_result"".\n\t#Print the variable named ""my_result"".\n\t#Print the variable named ""my_result"".\n\t#Print the variable named ""my_result"".\n\t#Print the variable named ""my_result"".\n\treturn a1,a2,a3,a4\n\treturn a1,a2,a3,a4\n\treturn a1,a2,a3,a4\n\treturn a1,a2,a3,a4\n\treturn a1,a2,a3,a4']"
49,"['This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.', 'Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.', 'Assign {a1} to a variable named ""words"".', 'Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".', 'Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.', 'Print out whether or not ""words_plural"" contains a word in plural as boolean.']","[{'a1': '[""chair"", ""pencil"", ""arm"", ""arm""]'}, {'a1': '[""arm"", ""arm"", ""arm"", ""arm""]'}, {'a1': '[""chair"", ""arm"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""arm""]'}, {'a1': '[""chair"", ""pencil"", ""table""]'}]","[True, True, True, False, False]",128.0,dict,Pluralize duplicates,Pluralize duplicated words in a list.,50,def pluralize_duplicates(a1):,"[""assert pluralize_duplicates(['chair', 'pencil', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['arm', 'arm', 'arm', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'arm', 'pencil', 'arm']) == True"", ""assert pluralize_duplicates(['chair', 'pencil', 'arm']) == False"", ""assert pluralize_duplicates(['chair', 'pencil', 'table']) == False""]","['def pluralize_duplicates(a1):\n\t#This function ""to_plural"" takes list of words in the singular form and returns a set of those words in the plural form adding an ""s"" to the end of the words, if they appear more than once in the list. E.g., pluralize([""cow"", ""pig"", ""cow"", ""cow""]) = {{""cows"", ""pig""}}, pluralize([""table"", ""table"", ""table""]) = {{""tables""}}.\n\t#The function is used to remove words that appear more than once in the list.\n\t#The function is used to remove words that appear only once in the list.\n\t#The function is used to remove words that appear in the list more than once in the singular form.\n\t#The function is used to remove words that appear in the list more than once in the plural form.\n\t#The function is used to remove words that appear in the list more than once in the singular and plural forms.\n\t#The function is used to remove words that appear in the list more than once in the', 'def pluralize_duplicates(a1):\n\t#Create a function ""is_plural"" which returns True if the word passed as argument is in plural form.\n\tdef is_plural(word):\n\t\tif word[-1] ==\'s\':\n\t\telse:\n\t#Create a function ""pluralize"" which returns the plural form of the word passed as argument.\n\tdef pluralize(word):\n\t\tif is_plural(word):\n\t\telse:\n\t#Create a function ""pluralize_duplicates"" which returns the plural form of the word passed as argument, but only if the word passed as argument is not in plural form', 'def pluralize_duplicates(a1):\n\t#Assign {a1} to a variable named ""words"".\n\twords = a1\n\t#Create a variable named ""count"" and set it equal to 0.\n\tcount = 0\n\t#Create a variable named ""new_words"" and set it equal to the empty list.\n\tnew_words = []\n\t#Create a variable named ""new_count"" and set it equal to 0.\n\tnew_count = 0\n\t#Create a variable named ""new_words"" and set it equal to the empty list.\n\tnew_words = []\n\t#Create a variable named ""new_count"" and set', 'def pluralize_duplicates(a1):\n\t#Apply the function that returns plural forms to the variable ""words"" and name the result ""words_plural"".\n\twords_plural = a1.replace(""s"", ""es"")', 'def pluralize_duplicates(a1):\n\t#Define a boolean ""contains_plural"" and apply ""is_plural"" to each element of ""words_plural"" to detect if at least one word is in plural form.\n\tcontains_plural = False\n\tfor word in a1:\n\t\tif word in plural_words:\n\t\t\tcontains_plural = True\n\t#If at least one word is in plural form, return ""plural""\n\tif contains_plural:\n\t#Otherwise, return ""singular""\n\telse:', 'def pluralize_duplicates(a1):\n\t#Print out whether or not ""words_plural"" contains a word in plural as boolean.\n\t#If so, print out the word and the number of times it appears in plural.\n\t#If not, print out the word and the number of times it appears in singular.\n\t#If the word is not in plural, print out the word and the number of times it appears in singular.\n\t#If the word is not in singular, print out the word and the number of times it appears in plural.\n\t#If the word is not in plural and not in singular, print out the word and the number of times it appears in singular.\n\t#If the word is not in']"
50,"['Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".', 'Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.', 'Find the larget number in the list my_net_altitude and print it out.']","[{'A': '[1,2,3,4]'}, {'A': '[-1,2,3,4]'}, {'A': '[-1,-2,-3,-4]'}, {'A': '[-1000000, 1, 2]'}, {'A': '[-5, 1, 5, 0, -10]'}]","[10, 8, 0, 0, 1]",128.0,array,Highest altitude,"Given relative altitudes , find the highest altitude.",51,def highest_altitude(A):,"['assert highest_altitude([1, 2, 3, 4]) == 10', 'assert highest_altitude([-1, 2, 3, 4]) == 8', 'assert highest_altitude([-1, -2, -3, -4]) == 0', 'assert highest_altitude([-1000000, 1, 2]) == 0', 'assert highest_altitude([-5, 1, 5, 0, -10]) == 1']","['def highest_altitude(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".\n\tmy_relative_altitude = []\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".\n\tmy_absolute_altitude = []\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_relative_altitude"".\n\tfor i in range(len(A)):\n\t\tmy_relative_altitude.append(A[i] - A[0])\n\t\tmy_absolute_altitude.append(A[i])\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_absolute_altitude"".', 'def highest_altitude(A):\n\t#Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.\n\tmy_net_altitude = [0]\n\tfor i in range(len(A)):\n\t\tmy_net_altitude.append(my_net_altitude[i] + A[i])\n\t#Find the highest value in the list.\n\thighest_altitude = max(my_net_altitude)', 'def highest_altitude(A):\n\t#Find the larget number in the list my_net_altitude and print it out.\n\thighest_altitude = 0\n\tfor i in range(len(A)):\n\t\tif A[i] > highest_altitude:\n\t\t\thighest_altitude = A[i]']"
51,"['Assign the list of words ""{A}"" to a variable named ""my_sentences"".', 'Assign an integer ""{K}"" to a variable named ""k"".', 'Truncate the list such that it contains k words and store as truncated_list', 'Print out the variable truncated_list .']","[{'A': ['hello', 'world'], 'K': 1}, {'A': ['hello', 'how', 'are', 'you', 'Jim'], 'K': 4}, {'A': ['China', 'is', 'a', 'large', 'country'], 'K': 1}, {'A': ['yes', 'yes', 'yes', 'yes', 'yes'], 'K': 4}, {'A': ['what', 'is', 'your', 'name'], 'K': 1}]","[['hello'], ['hello', 'how', 'are', 'you'], ['China'], ['yes', 'yes', 'yes', 'yes'], ['what']]",128.0,array,Truncate words,Truncate a sentence so that it contains k words.,52,"def truncate_words(A,K):","[""assert truncate_words(['hello', 'world'],1) == ['hello']"", ""assert truncate_words(['hello', 'how', 'are', 'you', 'Jim'],4) == ['hello', 'how', 'are', 'you']"", ""assert truncate_words(['China', 'is', 'a', 'large', 'country'],1) == ['China']"", ""assert truncate_words(['yes', 'yes', 'yes', 'yes', 'yes'],4) == ['yes', 'yes', 'yes', 'yes']"", ""assert truncate_words(['what', 'is', 'your', 'name'],1) == ['what']""]","['def truncate_words(A,K):\n\t#Assign the list of words ""{A}"" to a variable named ""my_sentences"".\n\tmy_sentences = A\n\t#Assign the length of the list of words ""{my_sentences}"" to a variable named ""len_my_sentences"".\n\tlen_my_sentences = len(my_sentences)\n\t#Assign the list of words ""{my_sentences}"" to a variable named ""my_words"".\n\tmy_words = my_sentences\n\t#Assign the length of the list of words ""{my_words}"" to a variable named ""len_my_words"".\n\tlen_my_words = len(my_words)\n\t#Assign the list of words', 'def truncate_words(A,K):\n\t#Assign an integer ""{K}"" to a variable named ""k"".\n\tk = K\n\t#Assign an integer ""{n}"" to a variable named ""n"".\n\tn = len(A)\n\t#Assign an integer ""{i}"" to a variable named ""i"".\n\ti = 0\n\t#Assign an integer ""{j}"" to a variable named ""j"".\n\tj = 0\n\t#Assign an integer ""{temp}"" to a variable named ""temp"".\n\ttemp = 0\n\t#Assign an integer ""{temp2}"" to a variable named ""temp2"".\n\ttemp2 = 0\n\t#Assign an integer ""{temp', 'def truncate_words(A,K):\n\t#Truncate the list such that it contains k words and store as truncated_list\n\ttruncated_list = []\n\tfor i in range(len(A)):\n\t\tif len(A[i]) <= K:\n\t\t\ttruncated_list.append(A[i])\n\t\telse:\n\t\t\ttruncated_list.append(A[i][:K])', 'def truncate_words(A,K):\n\t#Print out the variable truncated_list.\n\ttruncated_list = []\n\t#Print out the variable A.\n\t#Print out the variable K.\n\t#Print out the variable len(A).\n\t#Print out the variable len(A[0]).\n\t#Print out the variable len(A[0][0]).\n\treturn ""A = "",A\n\treturn ""K = "",K\n\treturn ""len(A) = "",len(A)\n\treturn ""len(A[0]) = "",len(A[0])']"
52,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Count the frequencies of the integers in my_numbers.', 'Find the integer that the frequency is 1 and store as one_time.', 'Print out the variable one_time.']","[{'A': [1, 2, 2, 2]}, {'A': [-1, 4, 4, 4, 4, 4]}, {'A': [-1, -4, 8, -4, 8]}, {'A': [-1000000, 1, 1]}, {'A': '[10000, 2, 2, 2,2,2]'}]","[1, -1, -1, -1000000, 10000]",128.0,array,Single element,Find the elements that appear one time in an array.,53,def single_element(A):,"['assert single_element([1, 2, 2, 2]) == 1', 'assert single_element([-1, 4, 4, 4, 4, 4]) == -1', 'assert single_element([-1, -4, 8, -4, 8]) == -1', 'assert single_element([-1000000, 1, 1]) == -1000000', 'assert single_element([10000, 2, 2, 2, 2, 2]) == 10000']","['def single_element(A):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the variable ""my_numbers"" to a variable named ""my_sum"".\n\tmy_sum = 0\n\t#Iterate over the list of integers ""{my_numbers}"" and add the values of each element to the variable ""{my_sum}"".\n\tfor i in my_numbers:\n\t\tmy_sum += i\n\t#Return the value of the variable ""{my_sum}"".', 'def single_element(A):\n\t#Count the frequencies of the integers in my_numbers.\n\t#If there are more than one, return the first one.\n\t#If there is only one, return it.\n\t#If there are no numbers, return None.\n\t#If there are no integers, return None.\n\t#If there are no duplicates, return None.\n\t#If there are no duplicates, return None.\n\t#If there are no duplicates, return None.\n\t#If there are no duplicates, return None.\n\t#If there are no duplicates, return None.\n\t#If there are no duplicates, return None.\n\t#If there', 'def single_element(A):\n\t#Find the integer that the frequency is 1 and store as one_time.\n\tone_time = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tone_time = i\n\t\t\tbreak\n\t#Find the frequency of the one_time element.\n\tfreq = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tfreq += 1\n\t#Return the frequency of the one_time element.', 'def single_element(A):\n\t#Print out the variable one_time.\n\treturn ""The variable one_time is: "", A[0]']"
53,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.', 'Print out the variable remove_numbers.']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 4, 4, 4, 4, 4], 'Val': 4}, {'A': [-1, -4, 8, -4, 8], 'Val': -1}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","[[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]]",128.0,array,Remove elements,Remove all the occurrences of an element in an array.,54,"def remove_elements(A,Val):","['assert remove_elements([1, 2, 2, 2],2) == [1]', 'assert remove_elements([-1, 4, 4, 4, 4, 4],4) == [-1]', 'assert remove_elements([-1, -4, 8, -4, 8],-1) == [-4, 8, -4, 8]', 'assert remove_elements([-1000000, 1, 1],1) == [-1000000]', 'assert remove_elements([10000, 2, 2, 2, 2, 2],2) == [10000]']","['def remove_elements(A,Val):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the list of integers ""{Val}"" to a variable named ""my_numbers"".\n\tmy_numbers = Val\n\t#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.\n\tnew_list = my_numbers\n\t#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to it.\n\tnew_list = my_numbers\n\t#Create a variable named ""new_list"" and assign the list of integers ""{my_numbers}"" to', 'def remove_elements(A,Val):\n\t#Assign an integer ""{Val}"" to a variable named ""val"".\n\tval = Val\n\t#Create a new list named ""new_list"" and assign it to the value of the variable ""val"".\n\tnew_list = []\n\t#Iterate through the list ""A"" and assign each element of the list ""A"" to a variable named ""element"".\n\tfor element in A:\n\t\t#If the element of the list ""A"" is not equal to the value of the variable ""val"", then add the element of the list ""A"" to the list ""new_list"".\n\t\tif element!= val:\n\t\t\tnew_list.append(', 'def remove_elements(A,Val):\n\t#Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.\n\tremove_numbers = []\n\tfor i in range(len(A)):\n\t\tif A[i]!= Val:\n\t\t\tremove_numbers.append(A[i])', 'def remove_elements(A,Val):\n\t#Print out the variable remove_numbers.\n\t#print(""The variable remove_numbers is: "",remove_numbers)\n\t#Print out the variable A.\n\t#print(""The variable A is: "",A)\n\t#Print out the variable Val.\n\t#print(""The variable Val is: "",Val)\n\t#Print out the variable A[0].\n\t#print(""The variable A[0] is: "",A[0])\n\t#Print out the variable A[1].\n\t#print(""The variable A[1] is: "",A[1])\n\t#Print out the variable A[']"
54,"['Assign the list of integers ""{A}"" to a variable named ""my_numbers"".', 'Assign an integer ""{Val}"" to a variable named ""val"".', 'Sum all the number in my_numbers and store as sum_numbers.', 'Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".']","[{'A': [1, 2, 2, 2], 'Val': 2}, {'A': [-1, 5], 'Val': 4}, {'A': [-1, -1, -1, -1, 1], 'Val': -5}, {'A': [-1000000, 1, 1], 'Val': 1}, {'A': '[10000, 2, 2, 2,2,2]', 'Val': 2}]","['False', 'True', 'True', 'False', 'False']",128.0,array,Check array sum,Check whether the sum of an array is equal to a given value.,55,"def check_array_sum(A,Val):","['assert check_array_sum([1, 2, 2, 2],2) == False', 'assert check_array_sum([-1, 5],4) == True', 'assert check_array_sum([-1, -1, -1, -1, 1],-5) == True', 'assert check_array_sum([-1000000, 1, 1],1) == False', 'assert check_array_sum([10000, 2, 2, 2, 2, 2],2) == False']","['def check_array_sum(A,Val):\n\t#Assign the list of integers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the sum of the integers in ""my_numbers"" to a variable named ""sum"".\n\tsum = 0\n\t#Iterate over the list of integers in ""my_numbers"".\n\tfor i in my_numbers:\n\t\t#Add the integer in ""i"" to the sum.\n\t\tsum += i\n\t#If the sum of the integers in ""my_numbers"" is equal to the value of ""Val"", return True.\n\tif sum == Val:\n\t#Otherwise, return False.\n\telse', 'def check_array_sum(A,Val):\n\t#Assign an integer ""{Val}"" to a variable named ""val"".\n\tval = Val\n\t#Assign an integer ""{A}"" to a variable named ""A"".\n\tA = A\n\t#Assign an integer ""{sum}"" to a variable named ""sum"".\n\tsum = 0\n\t#Assign an integer ""{i}"" to a variable named ""i"".\n\ti = 0\n\t#Assign an integer ""{j}"" to a variable named ""j"".\n\tj = 0\n\t#Assign an integer ""{k}"" to a variable named ""k"".\n\tk = 0\n\t#Assign an integer ""{l}"" to a variable named ""', 'def check_array_sum(A,Val):\n\t#Sum all the number in my_numbers and store as sum_numbers.\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\t#Check if sum_numbers is equal to Val.\n\tif sum_numbers == Val:\n\telse:', 'def check_array_sum(A,Val):\n\t#Check whether the sum_numbers is equal to val. If yes, return ""True"", otherwise return ""False"".\n\tsum_numbers = 0\n\tfor i in range(len(A)):\n\t\tsum_numbers += A[i]\n\tif sum_numbers == Val:\n\t\treturn True\n\telse:\n\t\treturn False']"
55,"['Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".', 'Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".', 'Merge the two sorted lists in a new sorted list and store as new_list.', 'Print the sorted new_list.']","[{'A': [1, 2, 2, 2], 'B': [3, 4]}, {'A': [-1, 5], 'B': [1, 2]}, {'A': [-1, -1, -1, -1, 1], 'B': [-1, 8]}, {'A': [-1000000, 1, 1], 'B': [1, 6]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]]",128.0,algorithm,Merge sorted lists,Merge two sorted lists into one.,56,"def merge_sorted_lists(A,B):","['assert merge_sorted_lists([1, 2, 2, 2],[3, 4]) == [1, 2, 2, 2, 3, 4]', 'assert merge_sorted_lists([-1, 5],[1, 2]) == [-1, 1, 2, 5]', 'assert merge_sorted_lists([-1, -1, -1, -1, 1],[-1, 8]) == [-1, -1, -1, -1, -1, 1, 8]', 'assert merge_sorted_lists([-1000000, 1, 1],[1, 6]) == [-1000000, 1, 1, 1, 8]', 'assert merge_sorted_lists([2, 2, 2, 2, 2, 10000],[-2, -1]) == [-2, -1, 2, 2, 2, 2, 2, 10000]']","['def merge_sorted_lists(A,B):\n\t#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".\n\tmy_numbers1 = sorted(A)\n\t#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\n\tmy_numbers2 = sorted(B)\n\t#Assign a sorted list ""{my_numbers1}"" and ""{my_numbers2}"" to a variable named ""merged_list"".\n\tmerged_list = my_numbers1 + my_numbers2\n\t#Return the merged list.', 'def merge_sorted_lists(A,B):\n\t#Assign a sorted list ""{B}"" to a variable named ""my_numbers2"".\n\tmy_numbers2 = B\n\t#Assign a sorted list ""{A}"" to a variable named ""my_numbers1"".\n\tmy_numbers1 = A\n\t#Create a variable named ""my_sum"" and assign the sum of the two lists.\n\tmy_sum = my_numbers1 + my_numbers2\n\t#Return the sum of the two lists.', 'def merge_sorted_lists(A,B):\n\t#Merge the two sorted lists in a new sorted list and store as new_list.\n\tnew_list = []\n\ti = 0\n\tj = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] < B[j]:\n\t\t\tnew_list.append(A[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tnew_list.append(B[j])\n\t\t\tj += 1\n\t#Add the remaining elements of A to the new list.\n\twhile i < len(A):\n\t\tnew_list.append(A[i])\n\t\ti += 1', 'def merge_sorted_lists(A,B):\n\t#Print the sorted new_list.\n\tnew_list = []\n\ti = 0\n\tj = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] < B[j]:\n\t\t\tnew_list.append(A[i])\n\t\t\ti += 1\n\t\telse:\n\t\t\tnew_list.append(B[j])\n\t\t\tj += 1\n\twhile i < len(A):\n\t\tnew_list.append(A[i])\n\t\ti += 1\n\twhile j < len(B):\n\t\tnew_list']"
56,"['Assign an integer array ""{A}"" to a variable named ""my_array"".', 'Find the contiguous subarray of my_array with the largest sum and store as max_subarray.', 'Compute the sum of max_subarray and store as sum_subarry.', 'Print out the variable sum_subarray.']","[{'A': [1]}, {'A': [-1, 5]}, {'A': [-1, -1, -1, -1, 1]}, {'A': [-1000000, 1, 1]}, {'A': '[2, 2,2,2,2, 10000]', 'B': [-2, -1]}]","[1, 5, 1, 2, 10010, -1]",128.0,algorithm,Maximum subarray,Find the max contiguous subarray and return the sum.,57,def maximum_subarray(A):,"['assert maximum_subarray([1]) == 1', 'assert maximum_subarray([-1, 5]) == 5', 'assert maximum_subarray([-1, -1, -1, -1, 1]) == 1', 'assert maximum_subarray([-1000000, 1, 1]) == 2', 'assert maximum_subarray([2, 2, 2, 2, 2, 10000],[-2, -1]) == 10010']","['def maximum_subarray(A):\n\t#Assign an integer array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\t#Assign an integer variable named ""max_sum"" to a variable named ""max_sum"".\n\tmax_sum = 0\n\t#Assign an integer variable named ""max_sum_index"" to a variable named ""max_sum_index"".\n\tmax_sum_index = 0\n\t#Assign an integer variable named ""current_sum"" to a variable named ""current_sum"".\n\tcurrent_sum = 0\n\t#Assign an integer variable named ""current_sum_index"" to a variable named ""current_sum_index', 'def maximum_subarray(A):\n\t#Find the contiguous subarray of my_array with the largest sum and store as max_subarray.\n\tmax_subarray = [0] * len(A)\n\tmax_subarray[0] = A[0]\n\tfor i in range(1, len(A)):\n\t\tmax_subarray[i] = max(max_subarray[i-1] + A[i], A[i])', 'def maximum_subarray(A):\n\t#Compute the sum of max_subarray and store as sum_subarry.\n\tsum_subarray = A[0]\n\t#Compute the max_subarray and store as max_subarray.\n\tmax_subarray = A[0]\n\t#Compute the current sum and max_subarray.\n\tfor i in range(1, len(A)):\n\t\tsum_subarray = max(sum_subarray + A[i], A[i])\n\t\tmax_subarray = max(max_subarray, sum_subarray)', 'def maximum_subarray(A):\n\t#Print out the variable sum_subarray.\n\tsum_subarray = 0\n\t#Initialize the left and right pointers.\n\tleft = 0\n\tright = 0\n\t#Initialize the maximum sum.\n\tmax_sum = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000']"
57,"['Assign the positive number ""{A}"" to a variable named ""my_number"".', 'Compute the squre root of the number and store as square_root. ', 'Compute the largest integer but not larger than square_root and store as largest_square_root.', 'Print the integer largest_square_root.']","[{'A': 1}, {'A': 5}, {'A': 101}, {'A': 30}, {'A': 10000}]","[1, 2, 10, 5, 100]",128.0,algorithm,Max square root integer,Compute the largest integer but not larger than square root of one positive number.,58,def max_square_root_integer(A):,"['assert max_square_root_integer(1) == 1', 'assert max_square_root_integer(5) == 2', 'assert max_square_root_integer(101) == 10', 'assert max_square_root_integer(30) == 5', 'assert max_square_root_integer(10000) == 100']","['def max_square_root_integer(A):\n\t#Assign the positive number ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\t#Assign the positive number ""{A}"" to a variable named ""square_root"".\n\tsquare_root = 0\n\t#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".\n\tsquare_root_of_my_number = 0\n\t#Assign the positive number ""{A}"" to a variable named ""square_root_of_my_number"".\n\tsquare_root_of_my_number = 0\n\t#Assign the positive number ""{A}"" to a variable named ""square', 'def max_square_root_integer(A):\n\t#Compute the squre root of the number and store as square_root. \n\tsquare_root = 0\n\twhile A > 0:\n\t\tsquare_root += A % 10\n\t\tA //= 10', 'def max_square_root_integer(A):\n\t#Compute the largest integer but not larger than square_root and store as largest_square_root.\n\tlargest_square_root = 0\n\tfor i in range(1, int(math.sqrt(A))+1):\n\t\tif A % i == 0:\n\t\t\tlargest_square_root = i\n\t\t\tbreak', 'def max_square_root_integer(A):\n\t#Print the integer largest_square_root.\n\t#The largest square root of a positive integer is the square root of the largest integer less than or equal to the positive integer.\n\t#The largest square root of a negative integer is the square root of the largest integer greater than or equal to the negative integer.\n\t#The largest square root of a zero is the square root of zero.\n\t#The largest square root of a negative zero is the square root of zero.\n\t#The largest square root of a positive infinity is the square root of the largest integer less than or equal to the positive infinity.\n\t#The largest square root of a']"
58,"['Assign the list of words ""{A}"" to a variable named ""my_words"".', 'Count the length of the words in the list and store as a dictionary word_count. ', 'Find the element with the largest count in dictionary word_count and store as longest_word.', 'print the variable longest_word.']","[{'A': ['Hello', 'word']}, {'A': ['a', 'good', 'place']}, {'A': ['the', 'last', 'word', 'in', 'the', 'sentence']}, {'A': ['good']}, {'A': ['There', 'will', 'be', 'a', 'joy']}]","['Hello', 'place', 'sentence', 'good', 'There']",128.0,algorithm,Longest word,Find the longest word in a word list.,59,def longest_word(A):,"[""assert longest_word(['Hello', 'word']) == 'Hello'"", ""assert longest_word(['a', 'good', 'place']) == 'place'"", ""assert longest_word(['the', 'last', 'word', 'in', 'the', 'sentence']) == 'sentence'"", ""assert longest_word(['good']) == 'good'"", ""assert longest_word(['There', 'will', 'be', 'a', 'joy']) == 'There'""]","['def longest_word(A):\n\t#Assign the list of words ""{A}"" to a variable named ""my_words"".\n\tmy_words = A\n\t#Assign the variable ""longest"" to a variable named ""longest""\n\tlongest = 0\n\t#Assign the variable ""word"" to a variable named ""word""\n\tword = """"\n\t#Assign the variable ""i"" to a variable named ""i""\n\ti = 0\n\t#Assign the variable ""j"" to a variable named ""j""\n\tj = 0\n\t#Assign the variable ""k"" to a variable named ""k""\n\tk = 0\n\t#Assign the variable ""l"" to a variable', 'def longest_word(A):\n\t#Count the length of the words in the list and store as a dictionary word_count.', 'def longest_word(A):\n\t#Find the element with the largest count in dictionary word_count and store as longest_word.\n\tlongest_word = """"\n\tlongest_count = 0\n\tfor word in A:\n\t\tif word in word_count:\n\t\t\tif word_count[word] > longest_count:\n\t\t\t\tlongest_word = word\n\t\t\t\tlongest_count = word_count[word]', 'def longest_word(A):\n\t#print the variable longest_word.\n\tlongest_word = """"\n\t#print the variable A.\n\tfor i in A:\n\t\t#print the variable i.\n\t\tif len(i) > len(longest_word):\n\t\t\t#print the variable i.\n\t\t\tlongest_word = i\n\t#print the variable longest_word.\n\treturn longest_word']"
59,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Return the elements that appears exactly once in the above list and store as my_uniques.', 'Compute the sum of the list my_uniques and print it out.']","[{'A': '[1,2,3]'}, {'A': '[1,1,1,1]'}, {'A': '[-1,-2,-3,-3]'}, {'A': '[-1000000, 1, 1, 2,2,3,3,3,3]'}, {'A': '[-5, 1, -5, 0, -10]'}]","[6, 0, -3, -1000000, -9]",128.0,algorithm,Sum unique elements,Sum all the unique numbers in a list.,60,def sum_unique_elements(A):,"['assert sum_unique_elements([1, 2, 3]) == 6', 'assert sum_unique_elements([1, 1, 1, 1]) == 0', 'assert sum_unique_elements([-1, -2, -3, -3]) == -3', 'assert sum_unique_elements([-1000000, 1, 1, 2, 2, 3, 3, 3, 3]) == -1000000', 'assert sum_unique_elements([-5, 1, -5, 0, -10]) == -9']","['def sum_unique_elements(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Create a variable named ""sum"" and set it equal to 0.\n\tsum = 0\n\t#Loop through the list of numbers ""{my_numbers}"" and add each number to the sum variable.\n\tfor i in my_numbers:\n\t\tsum += i\n\t#Return the sum of the list of numbers ""{my_numbers}"".', 'def sum_unique_elements(A):\n\t#Return the elements that appears exactly once in the above list and store as my_uniques.\n\tmy_uniques = []\n\tfor i in A:\n\t\tif i not in my_uniques:\n\t\t\tmy_uniques.append(i)', 'def sum_unique_elements(A):\n\t#Compute the sum of the list my_uniques and print it out.\n\tmy_uniques = []\n\tfor i in A:\n\t\tif i not in my_uniques:\n\t\t\tmy_uniques.append(i)']"
60,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Find the diagonal elements of my matrix and store as diag_elements.', 'print out the sum of the variable diag_elements.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [1]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [5, 5, 5, 5, 5, 0]}]","[6, 6, 1, 60001, 5]",128.0,data science,Digonal sum,Compute the digonal sum of a matrix.,61,def digonal_sum(A):,"['assert digonal_sum([[3, 2], [2, 3]]) == 6', 'assert digonal_sum([[3, 2, 5], [2, 3, 5]]) == 6', 'assert digonal_sum([1]) == 1', 'assert digonal_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 60001', 'assert digonal_sum([5, 5, 5, 5, 5, 0]) == 5']","['def digonal_sum(A):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\t#Assign the size of the matrix to a variable named ""size"".\n\tsize = len(my_matrix)\n\t#Assign the sum of the diagonal elements to a variable named ""diagonal_sum"".\n\tdiagonal_sum = 0\n\t#Iterate over the rows of the matrix.\n\tfor i in range(size):\n\t\t#Iterate over the columns of the matrix.\n\t\tfor j in range(size):\n\t\t\t#If the current element is not the diagonal element, add it to the sum.\n\t\t\tif i!= j:', 'def digonal_sum(A):\n\t#Find the diagonal elements of my matrix and store as diag_elements.\n\tdiag_elements = []\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i == j:\n\t\t\t\tdiag_elements.append(A[i][j])', 'def digonal_sum(A):\n\t#print out the sum of the variable diag_elements.\n\tdiag_elements = 0\n\tfor i in range(len(A)):\n\t\tfor j in range(len(A)):\n\t\t\tif i == j:\n\t\t\t\tdiag_elements += A[i][j]\n\treturn diag_elements']"
61,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Assign the number ""{T}"" to a variable named ""t"".', 'Compute the condition number of my_matrix and store as result.', 'Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".']","[{'A': [[3, 2], [2, 3]], 'T': 1}, {'A': [[3, 2, 5], [2, 3, 5]], 'T': -1}, {'A': [[1, 5]], 'T': 2}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'T': 100}, {'A': [[5, 5, 5, 5, 5, 0]], 'T': 0.5}]","['False', 'False', 'True', 'False', 'False']",128.0,data science,Matrix condition number,Check conditon number of a matrix is less than a threshold.,62,"def matrix_condition_number(A,T):","['assert matrix_condition_number([[3, 2], [2, 3]],1) == False', 'assert matrix_condition_number([[3, 2, 5], [2, 3, 5]],-1) == False', 'assert matrix_condition_number([[1, 5]],2) == True', 'assert matrix_condition_number([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],100) == False', 'assert matrix_condition_number([[5, 5, 5, 5, 5, 0]],0.5) == False']","['def matrix_condition_number(A,T):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\t#Assign the matrix ""{T}"" to a variable named ""my_matrix"".\n\tmy_matrix = T\n\t#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".\n\tmy_matrix = my_matrix\n\t#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".\n\tmy_matrix = my_matrix\n\t#Assign the matrix ""{my_matrix}"" to a variable named ""my_matrix"".\n\tmy_matrix = my_matrix\n\t#Assign the matrix ""{my_', 'def matrix_condition_number(A,T):\n\t#Assign the number ""{T}"" to a variable named ""t"".\n\tt = T\n\t#Assign the number ""{A}"" to a variable named ""a"".\n\ta = A\n\t#Assign the number ""{a^2}"" to a variable named ""aa"".\n\taa = a*a\n\t#Assign the number ""{a^3}"" to a variable named ""aaa"".\n\taaa = aa*a\n\t#Assign the number ""{a^4}"" to a variable named ""aaaa"".\n\taaaa = aaa*a\n\t#Assign the number ""{a^5}"" to a variable named ""aaaaa"".\n\taaaaa = aaaa', 'def matrix_condition_number(A,T):\n\t#Compute the condition number of my_matrix and store as result.\n\t#The result is a float.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the condition number of my_matrix.\n\t#The result is the', 'def matrix_condition_number(A,T):\n\t#Check whether the result is smaller than t. If yes, return ""True"", otherwise return ""False"".\n\tif np.linalg.cond(A) < T:\n\t\treturn ""True""\n\telse:\n\t\treturn ""False""']"
62,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Compute the multiplication of two matrices and store as result.', 'Compute the sum of the result and print it out.']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]], 'B': [[1, 0], [0, 1], [2, -2]]}, {'A': [[1, 5, 67, -1]], 'B': [[-1], [0], [0], [-1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {'A': [[5, 5, 5, 5, 5, 0]], 'B': [[-1], [-1], [-1], [-1], [-1], [1000]]}]","[50, 10, 0, 1170015, -25]",128.0,data science,Matrix multiplication sum,Compute matrix multiplication sum of two matrices.,63,"def matrix_multiplication_sum(A,B):","['assert matrix_multiplication_sum([[3, 2], [2, 3]],[[3, 2], [2, 3]]) == 50', 'assert matrix_multiplication_sum([[3, 2, 5], [2, 3, 5]],[[1, 0], [0, 1], [2, -2]]) == 10', 'assert matrix_multiplication_sum([[1, 5, 67, -1]],[[-1], [0], [0], [-1]]) == 0', 'assert matrix_multiplication_sum([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[1, 0, 6], [0, 1, 5], [0, 1, 4]]) == 1170015', 'assert matrix_multiplication_sum([[5, 5, 5, 5, 5, 0]],[[-1], [-1], [-1], [-1], [-1], [1000]]) == -25']","['def matrix_multiplication_sum(A,B):\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\t#Assign the matrix ""{a} * {b}"" to a variable named ""c"".\n\tc = a * b\n\t#Print the matrix ""{c}"" to the screen.', 'def matrix_multiplication_sum(A,B):\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\t#Assign the sum of the matrix ""{A}"" and ""{B}"" to a variable named ""sum"".\n\tsum = a.sum(axis=1) + b.sum(axis=1)\n\t#Return the sum of the matrix ""{A}"" and ""{B}"".', 'def matrix_multiplication_sum(A,B):\n\t#Compute the multiplication of two matrices and store as result.\n\tresult = np.zeros((A.shape[0],B.shape[1]))\n\tfor i in range(A.shape[0]):\n\t\tfor j in range(B.shape[1]):\n\t\t\tresult[i][j] = A[i][0]*B[0][j] + A[i][1]*B[1][j] + A[i][2]*B[2][j] + A[i][3]*B[3][j] + A[i][4]*B[4][j] + A[i][5]*B[', 'def matrix_multiplication_sum(A,B):\n\t#Compute the sum of the result and print it out.\n\tresult = np.sum(A*B)']"
63,"['Assign the matrix ""{A}"" to a variable named ""a"".', 'Assign the matrix ""{B}"" to a variable named ""b"".', 'Implement a function that computes the determinant of a matrix.', 'Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".']","[{'A': [[3, 2], [2, 3]], 'B': [[3, 2], [2, 2]]}, {'A': [[3, 2, 5], [2, 3, 5], [3, 5, 6]], 'B': [[3, 2], [2, -3]]}, {'A': [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], 'B': [[0, 0], [1, 4]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], 'B': [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {'A': [[1, 0, 6], [0, 1, 5], [0, 1, 4]], 'B': [[1, 0], [0, 1]]}]","['True', 'True', 'False', 'False', 'False']",128.0,data science,Matrix determinant ,Compare two matrix determinants.,64,"def matrix_determinant_(A,B):","['assert matrix_determinant_([[3, 2], [2, 3]],[[3, 2], [2, 2]]) == True', 'assert matrix_determinant_([[3, 2, 5], [2, 3, 5], [3, 5, 6]],[[3, 2], [2, -3]]) == True', 'assert matrix_determinant_([[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]],[[0, 0], [1, 4]]) == False', 'assert matrix_determinant_([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]],[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]) == False', 'assert matrix_determinant_([[1, 0, 6], [0, 1, 5], [0, 1, 4]],[[1, 0], [0, 1]]) == False']","['def matrix_determinant_(A,B):\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\t#Assign the matrix ""{a}"" to a variable named ""c"".\n\tc = a.transpose()\n\t#Assign the matrix ""{b}"" to a variable named ""d"".\n\td = b.transpose()\n\t#Assign the matrix ""{c}"" to a variable named ""e"".\n\te = c.multiply(d)\n\t#Assign the matrix ""{e}"" to a variable named ""f"".\n\tf = e.multiply(c)', 'def matrix_determinant_(A,B):\n\t#Assign the matrix ""{B}"" to a variable named ""b"".\n\tb = B\n\t#Assign the matrix ""{A}"" to a variable named ""a"".\n\ta = A\n\t#Assign the matrix ""{a}"" to a variable named ""aa"".\n\taa = a.transpose()\n\t#Assign the matrix ""{aa}"" to a variable named ""aaa"".\n\taaa = aa.multiply(a)\n\t#Assign the matrix ""{aaa}"" to a variable named ""aaa"".\n\taaa = aaa.multiply(b)\n\t#Assign the matrix ""{aaa}"" to a variable named ""det"".\n\tdet = aaa.determinant', 'def matrix_determinant_(A,B):\n\t#Implement a function that computes the determinant of a matrix.\n\t#The matrix A is assumed to be a square matrix.\n\t#The function should return the determinant of the matrix.\n\t#The determinant of a matrix is the product of the diagonal elements of the matrix.\n\t#The determinant of a matrix is the product of the elements of the upper triangular matrix.\n\t#The determinant of a matrix is the product of the elements of the lower triangular matrix.\n\t#The determinant of a matrix is the product of the elements of the main diagonal matrix.\n\t#The determinant of a matrix is the product of the elements', 'def matrix_determinant_(A,B):\n\t#Check whether the determinant of matrix a is large than matrix b. If yes, print ""True"", otherwise print ""False"".\n\tif A[0][0] == A[1][1] == A[2][2] == 0:\n\t\treturn ""True""\n\telse:\n\t\treturn ""False""']"
64,"['Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that computes the exponential output of a list.', 'Implement a function that computes summation of a list.', 'Implement a function that computes log of a number.', 'Print out the log of sum exponential my_numbers.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [1, 0, 0, 1, 3, 2, 0, 0.2]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366]",128.0,data science,Log-sum-exp,Compute the log of sum exponential input.,65,def log-sum-exp(A):,"['assert log-sum-exp([1, 3, 2, 2]) == 3.6265233750364456', 'assert log-sum-exp([1000, 1000, 1000]) == 1001.0986122886682', 'assert log-sum-exp([0, 0.2, 0.4, -0.2]) == 1.5111541217815447', 'assert log-sum-exp([1, 0, 0, 1, 3, 2, 0, 0.2]) == 3.6144941975988285', 'assert log-sum-exp([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 4.106068918955366']","['def log-sum-exp(A):\n\t#Assign the list of numbesr ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the variable ""my_sum"" to the sum of the numbers in the list.\n\tmy_sum = 0\n\t#Assign the variable ""my_exp"" to the exponential of the sum of the numbers in the list.\n\tmy_exp = 0\n\t#Assign the variable ""my_max"" to the maximum number in the list.\n\tmy_max = 0\n\t#Assign the variable ""my_min"" to the minimum number in the list.\n\tmy_min = 0\n\t#Assign the variable', 'def log-sum-exp(A):\n\t#Implement a function that computes the exponential output of a list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the sum of the exponentials of the elements in the list.\n\t#The exponential output is the', 'def log-sum-exp(A):\n\t#Implement a function that computes summation of a list.\n\t#A is a list of numbers.\n\t#Return the sum of the list.\n\t#The list A is assumed to be sorted.\n\t#The list A is assumed to be non-empty.\n\t#The list A is assumed to be non-negative.\n\t#The list A is assumed to be finite.\n\t#The list A is assumed to be a list of integers.\n\t#The list A is assumed to be a list of non-negative integers.\n\t#The list A is assumed to be a list of non-negative integers.\n\t#The list', 'def log-sum-exp(A):\n\t#Implement a function that computes log of a number.\n\t#A is a list of numbers.\n\t#Return the log of the sum of the exponentials of the numbers in A.\n\t#The exponentials are computed using the formula:\n\t#log(e^x) = log(e) + x\n\t#The log of 0 is -inf.\n\t#The log of -inf is -inf.\n\t#The log of -1 is -inf.\n\t#The log of 1 is 0.\n\t#The log of 2 is 0.\n\t#The log of 3 is 0', 'def log-sum-exp(A):\n\t#Print out the log of sum exponential my_numbers.\n\t#A is a list of numbers.\n\t#Return the log of the sum of exponentials of my_numbers.\n\t#The sum of exponentials of a list is the sum of the exponentials of the list minus the exponential of the last element.\n\t#The exponential of the last element is the exponential of the sum of the exponentials of the list minus the exponential of the last element.\n\t#The exponential of the last element is the exponential of the sum of the exponentials of the list minus the exponential of the last element.\n\t#The exponential of the last element is the exponential']"
65,"['Assign the list of points ""{A}"" to a variable named ""my_points"".', 'Assign the integer ""{K}"" to a variable named ""k"".', 'Implement a function that computes the distance between a point and the origin (0,0).', 'Implement a function that computes the k closest points in an array to the origin and store as result.', 'Compute the k closest points in my_points and print them out.']","[{'A': [[1, 3], [2, 2]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 1}, {'A': [[0, 0], [1, 4], [-4, 6], [7, -1]], 'K': 2}, {'A': [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], 'K': 2}, {'A': [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], 'K': 1}]","[[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]]",128.0,array,K nearest points,Find the k nearest points to the origin.,66,"def k_nearest_points(A,K):","['assert k_nearest_points([[1, 3], [2, 2]],1) == [2, 2]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],1) == [0, 0]', 'assert k_nearest_points([[0, 0], [1, 4], [-4, 6], [7, -1]],2) == [[0, 0], [1, 4]]', 'assert k_nearest_points([[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]],2) == [[0, 0.2], [0.4, -0.2]]', 'assert k_nearest_points([[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]],1) == [-0.2, 0.2]']","['def k_nearest_points(A,K):\n\t#Assign the list of points ""{A}"" to a variable named ""my_points"".\n\tmy_points = A\n\t#Assign the list of points ""{A}"" to a variable named ""my_distances"".\n\tmy_distances = []\n\t#Assign the list of points ""{A}"" to a variable named ""my_indices"".\n\tmy_indices = []\n\t#Assign the list of points ""{A}"" to a variable named ""my_distances"".\n\tfor i in range(len(my_points)):\n\t\t#Assign the distance of the point ""{A}"" to the list of distances.\n\t\tmy_distances.append(euclidian_distance(my_', 'def k_nearest_points(A,K):\n\t#Assign the integer ""{K}"" to a variable named ""k"".\n\tk = K\n\t#Assign the integer ""{A.shape[0]}"" to a variable named ""n"".\n\tn = A.shape[0]\n\t#Assign the integer ""{A.shape[1]}"" to a variable named ""m"".\n\tm = A.shape[1]\n\t#Assign the integer ""{A[0,0]}"" to a variable named ""a"".\n\ta = A[0,0]\n\t#Assign the integer ""{A[0,1]}"" to a variable named ""b"".\n\tb = A[0,1]\n\t#', 'def k_nearest_points(A,K):\n\t#Implement a function that computes the distance between a point and the origin (0,0).\n\t#The function should return the K nearest points to the origin.\n\t#The input is a list of points, and the output is a list of the K nearest points.\n\t#The points are represented as a list of tuples (x,y).\n\t#The points are sorted by their distance from the origin.\n\t#The distance between two points is the Euclidean distance.\n\t#The distance between two points is the square of the distance.\n\t#The distance between two points is the square root of the distance.\n\t#The distance between two points is the absolute value of the', 'def k_nearest_points(A,K):\n\t#Implement a function that computes the k closest points in an array to the origin and store as result.\n\t#The input is an array A of N points and the number of K nearest points you want to find.\n\t#The output is an array of K points, where the ith point is the ith nearest point to the origin.\n\t#The input array A is guaranteed to be non-empty and the output array will have at least K points.\n\t#The input array A will contain at least 3 points.\n\t#The input array A will contain at most 1000 points.\n\t#The input array A will contain at most 10000 points.', 'def k_nearest_points(A,K):\n\t#Compute the k closest points in my_points and print them out.\n\t#A is a list of points\n\t#K is the number of points to return\n\t#Return a list of the K closest points\n\t#The points are sorted by their distance from the origin\n\t#The distance from the origin is the square of the distance\n\t#The distance from the origin is the square of the distance\n\t#The distance from the origin is the square of the distance\n\t#The distance from the origin is the square of the distance\n\t#The distance from the origin is the square of the distance\n\t#The distance from the origin is the square of the distance']"
66,"['Implement a function called LCP() to find the longest common prefix of two strings', 'Initialize a variable named lst1 with a list {l1}.', 'Apply the function LCP() recusively to lst1', 'Print the the longest common prefix of the strings in lst1']","[{'l1': ['apple', 'ape', 'april']}, {'l1': ['crazy', 'car']}, {'l1': ['small', 'smart', 'smile']}, {'l1': ['inbox', 'income', 'input', 'insight']}, {'l1': ['come', 'combine', 'continue', 'compute']}]","['ap', 'c', 'sm', 'in', 'co']",256.0,algorithm,Longest common prefix,Find the longest common prefix of two strings.,67,def longest_common_prefix(l1):,"[""assert longest_common_prefix(['apple', 'ape', 'april']) == 'ap'"", ""assert longest_common_prefix(['crazy', 'car']) == 'c'"", ""assert longest_common_prefix(['small', 'smart', 'smile']) == 'sm'"", ""assert longest_common_prefix(['inbox', 'income', 'input', 'insight']) == 'in'"", ""assert longest_common_prefix(['come', 'combine', 'continue', 'compute']) == 'co'""]","['def longest_common_prefix(l1):\n\t#Implement a function called LCP() to find the longest common prefix of two strings.\n\t#If there is no common prefix, return an empty string """".\n\t#If there is a common prefix, return the first character of the common prefix.\n\t#For example, LCP(""ab"", ""abc"") should return ""a"".\n\t#For example, LCP(""ab"", ""ab"") should return """".\n\t#For example, LCP(""ab"", ""abcde"") should return """".\n\t#For example, LCP(""ab"", ""abcd"") should return ""a"".\n\t#For example, LCP(""ab"", ""abcd"") should return """".', 'def longest_common_prefix(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = l1\n\t#Initialize a variable named lst2 with a list {""""}.\n\tlst2 = []\n\t#Initialize a variable named i with a value of 0.\n\ti = 0\n\t#While i is less than the length of lst1, do:\n\twhile i < len(lst1):\n\t\t#Initialize a variable named j with a value of 0.\n\t\tj = 0\n\t\t#While j is less than the length of lst2, do:\n\t\twhile j < len(lst2):\n\t\t\t#If lst1', 'def longest_common_prefix(l1):\n\t#Apply the function LCP() recusively to lst1 and lst2\n\t#If the length of the longest common prefix is 0, return the empty string\n\t#If the length of the longest common prefix is 1, return the first character of lst1\n\t#If the length of the longest common prefix is 2, return the first character of lst2\n\t#If the length of the longest common prefix is more than 2, return the first character of lst1\n\t#If the length of the longest common prefix is more than 2, return the first character of lst2\n\t#If the length of the longest common prefix is more than', 'def longest_common_prefix(l1):\n\t#Print the the longest common prefix of the strings in lst1\n\t#If there is no common prefix, return an empty string\n\tif len(l1) == 0:\n\t\treturn """"\n\telse:\n\t\treturn l1[0]']"
67,"['Assigns a list {lst1} to a variable named lst1', 'Create a frequency table of elements in lst1', 'Find the elements with frequency larger than 1 and assign them to a list lst2', 'Print out lst2']","[{'lst1': [2, 3, 1, 2, 3]}, {'lst1': ['a', 'c', 'b', 'a']}, {'lst1': [3, 3, 1, 1]}, {'lst1': ['d', 'c', 'd', 'c', 'e', 'a']}, {'lst1': [1, 2, 3]}]","[[2, 3], ['a'], [3, 1], ['d', 'c'], []]",256.0,array,Duplicate elments,Find duplicates in a list.,68,def duplicate_elments(lst1):,"['assert duplicate_elments([2, 3, 1, 2, 3]) == [2, 3]', ""assert duplicate_elments(['a', 'c', 'b', 'a']) == ['a']"", 'assert duplicate_elments([3, 3, 1, 1]) == [3, 1]', ""assert duplicate_elments(['d', 'c', 'd', 'c', 'e', 'a']) == ['d', 'c']"", 'assert duplicate_elments([1, 2, 3]) == []']","['def duplicate_elments(lst1):\n\t#Assigns a list {lst1} to a variable named lst1_copy\n\tlst1_copy = lst1[:]\n\t#Loops through the list {lst1_copy}\n\tfor i in range(len(lst1_copy)):\n\t\t#Loops through the list {lst1_copy}\n\t\tfor j in range(len(lst1_copy)):\n\t\t\t#If the value of the element at index {i} is equal to the value of the element at index {j}\n\t\t\tif lst1_copy[i] == lst1_copy[j]:\n\t\t\t\t#Adds the value of the element at index {j} to the list', 'def duplicate_elments(lst1):\n\t#Create a frequency table of elements in lst1\n\tfreq_table = {}\n\tfor i in lst1:\n\t\tif i in freq_table:\n\t\t\tfreq_table[i] += 1\n\t\telse:\n\t\t\tfreq_table[i] = 1\n\t#Create a list of tuples\n\tlst2 = [(k, freq_table[k]) for k in freq_table]\n\t#Sort the list by frequency\n\tlst2.sort(key=lambda x: x[1], reverse=True)\n\t#Create a new list of tuples\n\tlst3 = []\n\tfor i in lst', 'def duplicate_elments(lst1):\n\t#Find the elements with frequency larger than 1 and assign them to a list lst2\n\tlst2 = []\n\tfor i in lst1:\n\t\tif lst1.count(i) > 1:\n\t\t\tlst2.append(i)', 'def duplicate_elments(lst1):\n\t#Print out lst2\n\tlst2 = []\n\tfor i in lst1:\n\t\tlst2.append(i)\n\treturn lst2']"
68,"[""Initialize a variable named w1 with a string '{w}'"", 'Get the first non-repeating character in w1', 'Find its corresponding index and assign it to n1', 'Print out n1']","[{'w': 'popular'}, {'w': 'crunchy'}, {'w': 'barbados'}, {'w': 'alphabet'}, {'w': 'science'}]","[1, 1, 2, 1, 0]",256.0,algorithm,First unique character,Find the first non-repeating character in a string.,69,def first_unique_character(w):,"[""assert first_unique_character('popular') == 1"", ""assert first_unique_character('crunchy') == 1"", ""assert first_unique_character('barbados') == 2"", ""assert first_unique_character('alphabet') == 1"", ""assert first_unique_character('science') == 0""]","[""def first_unique_character(w):\n\t#Initialize a variable named w1 with a string '{w}'\n\tw1 = '{w}'\n\t#Loop through the string w1\n\tfor i in range(len(w1)):\n\t\t#If the character at index i of w1 is not a space, then\n\t\t#set w1 to be the substring of w1 with the character at index i\n\t\t#and break the loop\n\t\tif w1[i]!='':\n\t\t\tw1 = w1[i:]\n\t\t\tbreak\n\t#Return the first character of w1"", 'def first_unique_character(w):\n\t#Get the first non-repeating character in w1\n\tfor i in range(len(w)):\n\t\tif w[i] not in w[:i]:', 'def first_unique_character(w):\n\t#Find its corresponding index and assign it to n1\n\tn1 = w.find(w[0])\n\t#Loop through the string\n\tfor i in range(1,len(w)):\n\t\t#If the current character is not the same as the previous character\n\t\tif w[i]!= w[i-1]:\n\t\t\t#Find its corresponding index and assign it to n2\n\t\t\tn2 = w.find(w[i])\n\t\t\t#If the current character is the same as the previous character\n\t\t\tif n1!= n2:\n\t\t\t\t#Return the index of the first unique character', 'def first_unique_character(w):\n\t#Print out n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35']"
69,"[""Assign a sentence '{s1}' to a variable named sentence1."", ""Assign a sentence '{s2}' to a variable named sentence2."", 'Split sentence1 into words and assign them to words1.', 'Split sentence2 into words and assign them to words2.', 'Find the words that appear once in both words1 and words2 and assign them to uncommon_words.', 'Print uncommon_words.']","[{'s1': 'Geeks for Geeks', 's2': 'Learning from Geeks for Geeks'}, {'s1': 'apple banana mango', 's2': 'banana fruits mango'}, {'s1': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.', 's2': 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.'}, {'s1': 'Seaborg was the principal or co-discoverer of ten elements.', 's2': 'Seaborg was the principal or co-discoverer of ten elements.'}, {'s1': 'Heavy rainfall began in earnest around 8 April.', 's2': 'rainfall began in earnest around 8 April.'}]","[['Learning', 'from'], ['apple', 'fruits'], ['Berkeley', 'Los', 'Angeles'], [], ['Heavy']]",256.0,algorithm,Uncommon words,Find uncommon words in two sentences.,70,"def uncommon_words(s1,s2):","[""assert uncommon_words('Geeks for Geeks','Learning from Geeks for Geeks') == ['Learning', 'from']"", ""assert uncommon_words('apple banana mango','banana fruits mango') == ['apple', 'fruits']"", ""assert uncommon_words('Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.','Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.') == ['Berkeley', 'Los', 'Angeles']"", ""assert uncommon_words('Seaborg was the principal or co-discoverer of ten elements.','Seaborg was the principal or co-discoverer of ten elements.') == []"", ""assert uncommon_words('Heavy rainfall began in earnest around 8 April.','rainfall began in earnest around 8 April.') == ['Heavy']""]","[""def uncommon_words(s1,s2):\n\t#Assign a sentence '{s1}' to a variable named sentence1.\n\tsentence1 = s1\n\t#Assign a sentence '{s2}' to a variable named sentence2.\n\tsentence2 = s2\n\t#Create a list named uncommon_words.\n\tuncommon_words = []\n\t#Create a for loop to iterate through each word in sentence1.\n\tfor word in sentence1:\n\t\t#Create a for loop to iterate through each word in sentence2.\n\t\tfor word2 in sentence2:\n\t\t\t#If the words are equal, add the word to the uncommon_words list.\n\t\t\tif word == word2:"", ""def uncommon_words(s1,s2):\n\t#Assign a sentence '{s2}' to a variable named sentence2.\n\tsentence2 = s2\n\t#Assign a variable named word1 to the first word in sentence2.\n\tword1 = sentence2.split()[0]\n\t#Assign a variable named word2 to the second word in sentence2.\n\tword2 = sentence2.split()[1]\n\t#Assign a variable named word3 to the third word in sentence2.\n\tword3 = sentence2.split()[2]\n\t#Assign a variable named word4 to the fourth word in sentence2.\n\tword4 = sentence2.split()[3]\n\t#Assign a"", 'def uncommon_words(s1,s2):\n\t#Split sentence1 into words and assign them to words1.\n\twords1 = s1.split()\n\t#Split sentence2 into words and assign them to words2.\n\twords2 = s2.split()\n\t#Create a set of words from words1 and words2.\n\twords = set(words1) & set(words2)\n\t#Return the list of words.', 'def uncommon_words(s1,s2):\n\t#Split sentence2 into words and assign them to words2.\n\twords2 = s2.split()\n\t#Split sentence1 into words and assign them to words1.\n\twords1 = s1.split()\n\t#Create a set of the words in words1 and words2.\n\twords = set(words1) & set(words2)\n\t#Return the set of words.', 'def uncommon_words(s1,s2):\n\t#Find the words that appear once in both words1 and words2 and assign them to uncommon_words.\n\t#If the words appear in only one of the two words, then they are uncommon.\n\t#If the words appear in both words, then they are uncommon.\n\t#If the words appear in only one of the two words, then they are uncommon.\n\t#If the words appear in both words, then they are uncommon.\n\tuncommon_words = []\n\tfor word in s1:\n\t\tif word in s2:\n\t\t\tuncommon_words.append(word)\n\tfor word in s2:\n\t\tif word in s1:', 'def uncommon_words(s1,s2):\n\t#Print uncommon_words.\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""\n\t#s1 = ""apple""\n\t#s2 = ""banana""']"
70,"[""Assign a sentence '{s1}' to a variable named sentence1."", 'Split sentence1 into words and assign them to words1.', 'Remove punctuation in words1.', 'Compute the average word length in words1 and assign it avg.', 'Print avg.']","[{'s1': 'Hi all, my name is Tom...I am originally from Australia.'}, {'s1': 'I need to work very hard to learn more about algorithms in Python!'}, {'s1': 'It received critical acclaim and continues to be praised by commentators.'}, {'s1': 'The Minute Man was intended to be placed on a local boulder by the town of Concord.'}, {'s1': 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.'}]","[4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286]",256.0,algorithm,Average words length,Compute the average word length of a sentence.,71,def average_words_length(s1):,"[""assert average_words_length('Hi all, my name is Tom...I am originally from Australia.') == 4.5"", ""assert average_words_length('I need to work very hard to learn more about algorithms in Python!') == 4.076923076923077"", ""assert average_words_length('It received critical acclaim and continues to be praised by commentators.') == 5.636363636363637"", ""assert average_words_length('The Minute Man was intended to be placed on a local boulder by the town of Concord.') == 3.8823529411764706"", ""assert average_words_length('During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.') == 5.285714285714286""]","[""def average_words_length(s1):\n\t#Assign a sentence '{s1}' to a variable named sentence1.\n\tsentence1 = s1\n\t#Assign a variable named words_length to the length of the sentence1 variable.\n\twords_length = len(sentence1.split())\n\t#Return the average of the words_length variable."", 'def average_words_length(s1):\n\t#Split sentence1 into words and assign them to words1.\n\twords1 = s1.split()\n\t#Create a variable to store the sum of the lengths of words1.\n\tsum_of_lengths = 0\n\t#Iterate through words1 and add the length of each word to sum_of_lengths.\n\tfor word in words1:\n\t\tsum_of_lengths += len(word)\n\t#Return the average of sum_of_lengths.', ""def average_words_length(s1):\n\t#Remove punctuation in words1.\n\ts1 = re.sub(r'[^\\w\\s]', '', s1)\n\t#Split words1 into a list.\n\twords1 = s1.split()\n\t#Count the number of words in words1."", 'def average_words_length(s1):\n\t#Compute the average word length in words1 and assign it avg.\n\tavg_word_length = 0\n\tfor word in s1:\n\t\tavg_word_length += len(word)\n\tavg_word_length = avg_word_length / len(s1)', 'def average_words_length(s1):\n\t#Print avg. word length\n\ts1 = s1.lower()\n\ts1 = s1.split()\n\ts1 = [word for word in s1 if word.isalpha()]\n\ts1 = [word for word in s1 if len(word) > 1]\n\ts1 = [word for word in s1 if len(word) < 10]\n\ts1 = [word for word in s1 if len(word) > 1]\n\ts1 = [word for word in s1 if len(word) < 10]']"
71,"['Assigns strings {w1} and {w2} to variables w1 and w2 respectively', 'Lower-case w1 and w2', 'Count the frequency of letters in w1 and w2 and assign them to f1 and f2', 'Print if f1 is equal to f2']","[{'w1': 'find', 'w2': 'ding'}, {'w1': 'rat', 'w2': 'car'}, {'w1': 'open', 'w2': 'book'}, {'w1': 'fried', 'w2': 'fired'}, {'w1': 'listen', 'w2': 'silent'}]","[False, False, False, True, True]",256.0,string,Compare char freq,Compare the character frequencies in two strings.,72,"def compare_char_freq(w1,w2):","[""assert compare_char_freq('find','ding') == False"", ""assert compare_char_freq('rat','car') == False"", ""assert compare_char_freq(<built-in function open>,'book') == False"", ""assert compare_char_freq('fried','fired') == True"", ""assert compare_char_freq('listen','silent') == True""]","['def compare_char_freq(w1,w2):\n\t#Assigns strings {w1} and {w2} to variables w1 and w2 respectively\n\tw1 = w1.lower()\n\tw2 = w2.lower()\n\t#Creates a dictionary {w1} and {w2}\n\td1 = {}\n\td2 = {}\n\t#Iterates through each character in {w1} and {w2}\n\tfor i in range(len(w1)):\n\t\t#If {w1} and {w2} have the same character, then {d1} and {d2} will have the same character\n\t\tif w1[i] == w2[i]:\n\t\t\td1', 'def compare_char_freq(w1,w2):\n\t#Lower-case w1 and w2\n\tw1 = w1.lower()\n\tw2 = w2.lower()\n\t#Count the number of times each character appears in w1 and w2\n\tcount1 = Counter(w1)\n\tcount2 = Counter(w2)\n\t#Compare the two counts', 'def compare_char_freq(w1,w2):\n\t#Count the frequency of letters in w1 and w2 and assign them to f1 and f2\n\tf1 = 0\n\tf2 = 0\n\tfor i in range(len(w1)):\n\t\tif w1[i] == w2[i]:\n\t\t\tf1 += 1\n\t\telse:\n\t\t\tf2 += 1', 'def compare_char_freq(w1,w2):\n\t#Print if f1 is equal to f2\n\tif w1 == w2:\n\telse:']"
72,"['Assign a string {w} to a variable named w1', 'Concatenate the elements in w1 from end to beginning and assign it to w2', 'Print w2']","[{'w': 'abc'}, {'w': 'ape'}, {'w': 'geeksforgeeks'}, {'w': 'apple'}, {'w': 'april'}]","['cba', 'epa', 'skeegrofskeeg', 'elppa', 'lirpa']",256.0,string,Reverse string,Reverse a string.,73,def reverse_string(w):,"[""assert reverse_string('abc') == 'cba'"", ""assert reverse_string('ape') == 'epa'"", ""assert reverse_string('geeksforgeeks') == 'skeegrofskeeg'"", ""assert reverse_string('apple') == 'elppa'"", ""assert reverse_string('april') == 'lirpa'""]","['def reverse_string(w):\n\t#Assign a string {w} to a variable named w1\n\tw1 = w\n\t#Assign a string {w1} to a variable named w2\n\tw2 = w1[::-1]\n\t#Assign a string {w2} to a variable named w3\n\tw3 = w2[::-1]\n\t#Assign a string {w3} to a variable named w4\n\tw4 = w3[::-1]\n\t#Assign a string {w4} to a variable named w5\n\tw5 = w4[::-1]\n\t#Assign a string {w5} to a variable named w6', 'def reverse_string(w):\n\t#Concatenate the elements in w1 from end to beginning and assign it to w2\n\tw2 = """"\n\tfor i in range(len(w)-1,-1,-1):\n\t\tw2 = w2 + w[i]', 'def reverse_string(w):\n\t#Print w2\n\tw2 = """"\n\tfor i in range(len(w)):\n\t\tw2 += w[len(w)-1-i]\n\treturn w2']"
73,"['Assign a natural number {n} to named num', 'Create a list from 1 to num and assign it to a variable lst1', 'Compute the sum of squared of the numbers in lst1 and assign n1', 'Compute the sum of the numbers in lst1 and assign its square to n2', 'Print out the difference between n1 and n2']","[{'n': 12}, {'n': 2}, {'n': 10}, {'n': 5}, {'n': 100}]","[-5434, -4, -2640, -170, -25164150]",256.0,math,Square Sum diff,Calculate the difference between the squared sum and the sum of squares.,74,def square_sum_diff(n):,"['assert square_sum_diff(12) == -5434', 'assert square_sum_diff(2) == -4', 'assert square_sum_diff(10) == -2640', 'assert square_sum_diff(5) == -170', 'assert square_sum_diff(100) == -25164150']","['def square_sum_diff(n):\n\t#Assign a natural number {n} to named num\n\tnum = n\n\t#Assign a variable named sum to hold the sum of the squares of the natural number\n\tsum = 0\n\t#Loop through the natural number {n}\n\tfor i in range(1, num+1):\n\t\t#Assign a variable named square to hold the square of the natural number\n\t\tsquare = i**2\n\t\t#Add the square of the natural number to the sum\n\t\tsum += square\n\t#Return the sum of the squares of the natural number', 'def square_sum_diff(n):\n\t#Create a list from 1 to num and assign it to a variable lst1\n\tlst1 = [1]\n\t#Create a variable to store the sum of the squares of the list lst1\n\tsum_of_squares = 0\n\t#Create a variable to store the difference of the squares of the list lst1\n\tdiff_of_squares = 0\n\t#Create a variable to store the sum of the squares of the list lst1\n\tsum_of_squares = 0\n\t#Create a variable to store the difference of the squares of the list lst1\n\tdiff_of_squares = 0\n\t#Create a variable to store', 'def square_sum_diff(n):\n\t#Compute the sum of squared of the numbers in lst1 and assign n1 to the variable n1\n\tn1 = 0\n\t#Loop through lst1\n\tfor i in lst1:\n\t\t#Add the square of the number to n1\n\t\tn1 += i**2\n\t#Return n1', 'def square_sum_diff(n):\n\t#Compute the sum of the numbers in lst1 and assign its square to n2\n\tn2 = 0\n\tfor i in lst1:\n\t\tn2 += i**2\n\t#Compute the difference between the sum of the numbers in lst1 and n2', 'def square_sum_diff(n):\n\t#Print out the difference between n1 and n2\n\treturn n1 - n2']"
74,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Normalize vec1', 'Normalize vec2', 'Compute the dot product of vec1 and vec2', 'Print out the dot product']","[{'lst1': [0.3, 1.0, 2.0], 'lst2': [1.0, 2.0, 3.0]}, {'lst1': [10.0, 20.0, 30.0], 'lst2': [0.1, 0.2, 0.3]}, {'lst1': [1.1, 2.1, 3.1], 'lst2': [10.1, 20.2, 30.3]}, {'lst1': [1.0, 2.0], 'lst2': [0.1, 0.2]}, {'lst1': [5.3, 1.1, 2.6, 1.2, 10.2], 'lst2': [1.3, 2.5, 3.7, 4.8, 5.9]}]","[0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769]",256.0,math,Cosine sim,Compute the cosine similarity between two vectors.,75,"def cosine_sim(lst1,lst2):","['assert cosine_sim([0.3, 1.0, 2.0],[1.0, 2.0, 3.0]) == 0.9832301408945487', 'assert cosine_sim([10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == 0.9999999999999999', 'assert cosine_sim([1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == 0.9998592903536574', 'assert cosine_sim([1.0, 2.0],[0.1, 0.2]) == 0.9999999999999999', 'assert cosine_sim([5.3, 1.1, 2.6, 1.2, 10.2],[1.3, 2.5, 3.7, 4.8, 5.9]) == 0.8032876127853769']","['def cosine_sim(lst1,lst2):\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = np.array(lst1)\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = np.array(lst2)\n\t#Calculates the cosine similarity between the two vectors', 'def cosine_sim(lst1,lst2):\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = np.array(lst2)\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = np.array(lst1)\n\t#Calculates the cosine similarity between the two vectors', 'def cosine_sim(lst1,lst2):\n\t#Normalize vec1\n\tvec1 = np.array(lst1)\n\tvec1 = vec1/np.linalg.norm(vec1)\n\t#Normalize vec2\n\tvec2 = np.array(lst2)\n\tvec2 = vec2/np.linalg.norm(vec2)\n\t#Compute cosine similarity', 'def cosine_sim(lst1,lst2):\n\t#Normalize vec2\n\tvec2 = [x/np.linalg.norm(x) for x in lst2]\n\t#Compute cosine similarity', 'def cosine_sim(lst1,lst2):\n\t#Compute the dot product of vec1 and vec2\n\tdot_product = np.dot(lst1,lst2)\n\t#Compute the cosine similarity between vec1 and vec2\n\tcosine_sim = dot_product / (np.linalg.norm(lst1) * np.linalg.norm(lst2))', 'def cosine_sim(lst1,lst2):\n\t#Print out the dot product of the two vectors\n\tdot_product = 0\n\tfor i in range(len(lst1)):\n\t\tdot_product += lst1[i]*lst2[i]\n\treturn dot_product/(math.sqrt(sum([x**2 for x in lst1]))*math.sqrt(sum([x**2 for x in lst2])))']"
75,"['Assigns a list {lst1} to a variable named vec1', 'Assigns a list {lst2} to a variable named vec2', 'Assigns a list {lst3} to a variable named vec3', 'Convert vec1, vec2, and vec3 to numpy array', 'Implement a function called dist() to compute the distance between two vectors', 'Compute the distance between vec1 and vec2 and assign it to d1', 'Compute the distance between vec1 and vec3 and assign it to d2', 'Print out whether d1 is larger than d2']","[{'lst1': [0.0, 0.0, 0.0], 'lst2': [1.0, 2.0, 3.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [10.0, 20.0, 30.0], 'lst3': [0.1, 0.2, 0.3]}, {'lst1': [0.0, 0.0, 0.0], 'lst2': [1.1, 2.1, 3.1], 'lst3': [10.1, 20.2, 30.3]}, {'lst1': [0.0, 0.0, 0.0, 0.0], 'lst2': [-1.0, -2.0, -3.0, -10.0], 'lst3': [0.1, 0.2, 0.3, 0.2]}, {'lst1': [0.0, 0.0], 'lst2': [1.0, 2.0], 'lst3': [0.1, 0.2]}]","[True, True, False, True, True]",256.0,math,Vector distance,Compare vector distances to the origin.,76,"def vector_distance(lst1,lst2,lst3):","['assert vector_distance([0.0, 0.0, 0.0],[1.0, 2.0, 3.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[10.0, 20.0, 30.0],[0.1, 0.2, 0.3]) == True', 'assert vector_distance([0.0, 0.0, 0.0],[1.1, 2.1, 3.1],[10.1, 20.2, 30.3]) == False', 'assert vector_distance([0.0, 0.0, 0.0, 0.0],[-1.0, -2.0, -3.0, -10.0],[0.1, 0.2, 0.3, 0.2]) == True', 'assert vector_distance([0.0, 0.0],[1.0, 2.0],[0.1, 0.2]) == True']","['def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = lst1\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = lst2\n\t#Assigns a list {lst3} to a variable named vec3\n\tvec3 = lst3\n\t#Calculates the distance between the vectors\n\tdistance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))\n\t#Returns the distance', 'def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = lst2\n\t#Assigns a list {lst3} to a variable named vec3\n\tvec3 = lst3\n\t#Assigns a list {vec2} to a variable named vec2\n\tvec2 = [float(x) for x in vec2]\n\t#Assigns a list {vec3} to a variable named vec3\n\tvec3 = [float(x) for x in vec3]\n\t#Assigns a list {vec2} to a variable named vec2\n\tvec2 = np.array(vec2)', 'def vector_distance(lst1,lst2,lst3):\n\t#Assigns a list {lst3} to a variable named vec3\n\tvec3 = lst3\n\t#Assigns a list {lst1} to a variable named vec1\n\tvec1 = lst1\n\t#Assigns a list {lst2} to a variable named vec2\n\tvec2 = lst2\n\t#Calculates the distance between the vectors\n\tdistance = math.sqrt(sum([(x-y)**2 for x,y in zip(vec1,vec2)]))\n\t#Returns the distance', 'def vector_distance(lst1,lst2,lst3):\n\t#Convert vec1, vec2, and vec3 to numpy array\n\tvec1 = np.array(lst1)\n\tvec2 = np.array(lst2)\n\tvec3 = np.array(lst3)\n\t#Calculate the distance between the vectors', 'def vector_distance(lst1,lst2,lst3):\n\t#Implement a function called dist() to compute the distance between two vectors.\n\t#The function should take in two lists of numbers and return the distance between them.\n\t#The distance should be a floating point number.\n\t#The distance should be the square root of the sum of the squares of the differences between the two vectors.\n\t#The distance should be the square root of the sum of the squares of the differences between the two vectors.\n\t#The distance should be the square root of the sum of the squares of the differences between the two vectors.\n\t#The distance should be the square root of the sum of the squares of the differences between the two vectors.', 'def vector_distance(lst1,lst2,lst3):\n\t#Compute the distance between vec1 and vec2 and assign it to d1\n\td1 = np.linalg.norm(np.subtract(lst1,lst2))\n\t#Compute the distance between vec1 and vec3 and assign it to d2\n\td2 = np.linalg.norm(np.subtract(lst1,lst3))\n\t#Compute the distance between vec2 and vec3 and assign it to d3\n\td3 = np.linalg.norm(np.subtract(lst2,lst3))\n\t#Compute the distance between vec1 and vec2 and assign it to d4\n\td4 = np.linalg.norm(', 'def vector_distance(lst1,lst2,lst3):\n\t#Compute the distance between vec1 and vec3 and assign it to d2\n\td2 = np.linalg.norm(np.subtract(lst1,lst3))', 'def vector_distance(lst1,lst2,lst3):\n\t#Print out whether d1 is larger than d2\n\t#Print out whether d2 is larger than d3\n\t#Print out whether d1 is larger than d3\n\t#Print out whether d2 is larger than d3\n\t#Print out whether d1 is larger than d3\n\t#Print out whether d2 is larger than d3\n\t#Print out whether d1 is larger than d3\n\t#Print out whether d2 is larger than d3\n\t#Print out whether d1 is larger than d3\n\t#Print out whether d2 is larger than d3\n\t#Print out whether d1 is larger than']"
76,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called std() to compute the standard deviation given a list of numbers.', 'Call the function std() to calculate standard deviations for lst1 and lst2.', 'Print out the smaller standard deviation.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[0.0, 1.0, 39.57, 0.0, 0.0]",256.0,data science,Compare standard deviations,Find the smaller standard deviation given two lists.,77,"def compare_standard_deviations(l1,l2):","['assert compare_standard_deviations([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 0.0', 'assert compare_standard_deviations([-1, -1, 1, 1],[100, 1, -100]) == 1.0', 'assert compare_standard_deviations([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == 39.57', 'assert compare_standard_deviations([20, 1, 50, 6],[-100]) == 0.0', 'assert compare_standard_deviations([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == 0.0']","['def compare_standard_deviations(l1,l2):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\t#Initialize a variable named mean1 with the mean of lst1.\n\tmean1 = mean(lst1)\n\t#Initialize a variable named mean2 with the mean of lst2.\n\tmean2 = mean(lst2)\n\t#Initialize a variable named standard_deviation1 with the standard deviation of lst1.\n\tstandard_deviation1 = standard_deviation(lst1)\n\t#Initialize a variable named standard_', 'def compare_standard_deviations(l1,l2):\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Initialize a variable named mean1 with the mean of lst1.\n\tmean1 = mean(lst1)\n\t#Initialize a variable named mean2 with the mean of lst2.\n\tmean2 = mean(lst2)\n\t#Initialize a variable named standard_deviation1 with the standard deviation of lst1.\n\tstandard_deviation1 = standard_deviation(lst1)\n\t#Initialize a variable named standard_', 'def compare_standard_deviations(l1,l2):\n\t#Create a function called std() to compute the standard deviation given a list of numbers.\n\t#The function should return the standard deviation of the list.\n\t#The function should raise an exception if the list is empty.\n\t#The function should raise an exception if the list contains non-numeric values.\n\t#The function should raise an exception if the list contains negative values.\n\t#The function should raise an exception if the list contains zero values.\n\t#The function should raise an exception if the list contains values greater than 100.\n\t#The function should raise an exception if the list contains values less than -100.\n\t#The function should raise', 'def compare_standard_deviations(l1,l2):\n\t#Call the function std() to calculate standard deviations for lst1 and lst2.\n\t#The function returns a list of standard deviations.', 'def compare_standard_deviations(l1,l2):\n\t#Print out the smaller standard deviation.\n\tif l1 < l2:\n\telse:']"
77,"['Initialize a variable named lst1 with a list {l1}.', 'Initialize a variable named lst2 with a list {l2}.', 'Create a function called mean() to compute the mean given a list of numbers.', 'Call the function mean() to calculate means for lst1 and lst2.', 'Print out the smaller mean.']","[{'l1': [1, 1, 1, 1, 1], 'l2': [1, 2, 3, 4, 5]}, {'l1': [-1, -1, 1, 1], 'l2': [100, 1, -100]}, {'l1': [-100, -10, 5, 5, -10], 'l2': [100, 50, 20, -100]}, {'l1': [20, 1, 50, 6], 'l2': [-100]}, {'l1': [5, 6, 9, 100], 'l2': [-100, -100, -100, -100, -100]}]","[1.0, 0.0, -22.0, -100.0, -100.0]",256.0,data science,Compare means,Find the smaller mean given two lists.,78,"def compare_means(l1,l2):","['assert compare_means([1, 1, 1, 1, 1],[1, 2, 3, 4, 5]) == 1.0', 'assert compare_means([-1, -1, 1, 1],[100, 1, -100]) == 0.0', 'assert compare_means([-100, -10, 5, 5, -10],[100, 50, 20, -100]) == -22.0', 'assert compare_means([20, 1, 50, 6],[-100]) == -100.0', 'assert compare_means([5, 6, 9, 100],[-100, -100, -100, -100, -100]) == -100.0']","['def compare_means(l1,l2):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\t#Initialize a variable named mean_lst with a list {lst1} and {lst2}.\n\tmean_lst = [lst1,lst2]\n\t#Iterate through the list {mean_lst} and compare the mean of each list.\n\tfor i in range(len(mean_lst)):\n\t\tmean_lst[i] = [mean(lst1[i]),mean(lst2[i])]', 'def compare_means(l1,l2):\n\t#Initialize a variable named lst2 with a list {l2}.\n\tlst2 = [l2]\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Iterate over lst2.\n\tfor i in range(len(lst2)):\n\t\t#Iterate over lst1.\n\t\tfor j in range(len(lst1)):\n\t\t\t#If the difference between the two lists is less than 0.00000000000000000000000000000000000000', 'def compare_means(l1,l2):\n\t#Create a function called mean() to compute the mean given a list of numbers.', 'def compare_means(l1,l2):\n\t#Call the function mean() to calculate means for lst1 and lst2.\n\t#Then compare the two lists.', 'def compare_means(l1,l2):\n\t#Print out the smaller mean.\n\tif l1 < l2:\n\telse:']"
78,"['Initialize a variable named lst1 with a list {l1}.', 'Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively', 'Compute the coeffeicient of variation', 'Print out the coefficient of variation']","[{'l1': [1, 1, 1, 1, 1]}, {'l1': [-100, -10, 5, 5, -10]}, {'l1': [-1, 1, -10, 10, 2, 3, 5]}, {'l1': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'l1': [20, 1, 50, 6]}]","[0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804]",256.0,data science,Coefficient of variation,Compute coefficient of variation given a list.,79,def coefficient_of_variation(l1):,"['assert coefficient_of_variation([1, 1, 1, 1, 1]) == 0.0', 'assert coefficient_of_variation([-100, -10, 5, 5, -10]) == -1.7987599034008526', 'assert coefficient_of_variation([-1, 1, -10, 10, 2, 3, 5]) == 3.9749213828703582', 'assert coefficient_of_variation([-5, 7, -3, -4, 9, 10, -1, 11]) == 2.140872096444188', 'assert coefficient_of_variation([20, 1, 50, 6]) == 0.9906801321840804']","['def coefficient_of_variation(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Initialize a variable named lst2 with a list {lst1}.\n\tlst2 = [lst1]\n\t#Initialize a variable named lst3 with a list {lst2}.\n\tlst3 = [lst2]\n\t#Initialize a variable named lst4 with a list {lst3}.\n\tlst4 = [lst3]\n\t#Initialize a variable named lst5 with a list {lst4}.\n\tlst5 = [lst4]\n\t#Initialize a variable named lst6 with a list {lst5}.\n\tlst', 'def coefficient_of_variation(l1):\n\t#Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively\n\tavg = np.mean(l1)\n\tsd = np.std(l1)\n\t#Compute the coefficient of variation\n\tcv = sd/avg', 'def coefficient_of_variation(l1):\n\t#Compute the coeffeicient of variation of the l1-norm\n\t#l1 = np.linalg.norm(l1)', 'def coefficient_of_variation(l1):\n\t#Print out the coefficient of variation of the data\n\treturn ""The coefficient of variation is: "", np.std(l1)']"
79,"['Initialize a variable named lst1 with a list {l1}.', 'Get the absolute value of every element in lst1 and assign to a lst2', 'Compute the sum of lst2 and assign to l1', 'Print out l1']","[{'l1': [0, 0]}, {'l1': [1, 1]}, {'l1': [-1, 1, -100, 100]}, {'l1': [0, 0, 59, 1, 40]}, {'l1': [-50, -10, 40, 200, 1000]}]","[0, 2, 202, 100, 1300]",256.0,data science,L1 norm,Compute the L1 norm given a list.,80,def l1_norm(l1):,"['assert l1_norm([0, 0]) == 0', 'assert l1_norm([1, 1]) == 2', 'assert l1_norm([-1, 1, -100, 100]) == 202', 'assert l1_norm([0, 0, 59, 1, 40]) == 100', 'assert l1_norm([-50, -10, 40, 200, 1000]) == 1300']","['def l1_norm(l1):\n\t#Initialize a variable named lst1 with a list {l1}.\n\tlst1 = [l1]\n\t#Iterate over the list {lst1} and append the value of each element of the list {lst1} to the list {lst2}.\n\tfor i in range(len(lst1)):\n\t\tlst2 = []\n\t\tfor j in range(len(lst1)):\n\t\t\tif i!= j:\n\t\t\t\tlst2.append(lst1[j])\n\t\tlst1 = lst2\n\t#Return the sum of the elements of the list {lst1}.', 'def l1_norm(l1):\n\t#Get the absolute value of every element in lst1 and assign to a lst2\n\tlst2 = [abs(x) for x in l1]\n\t#Return the sum of lst2', 'def l1_norm(l1):\n\t#Compute the sum of lst2 and assign to l1\n\tl1 = np.sum(l1)', 'def l1_norm(l1):\n\t#Print out l1 norm\n\treturn ""L1 Norm: "", np.linalg.norm(l1)']"
80,"['Assigns a list {lst1} to a variable named lst1', 'Compute the sample mean of lst1', 'Compute the sample standard deviation of lst1', 'Compute the z-statistic to test whether its mean is 0', 'Print out the z-statistic']","[{'lst1': [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {'lst1': [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {'lst1': [1.3, 15.0, 2.9]}, {'lst1': [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {'lst1': [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}]","[0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328]",256.0,data science,Z-statistic,Compute z-statistic given a list.,81,def z-statistic(lst1):,"['assert z-statistic([0.3, 1.0, 2.0, -2.0, 4.0, -5.0]) == 0.017307532290566904', 'assert z-statistic([1.3, 5.0, 2.1, -2.4, 4.1, 5.1]) == 0.9670745372626464', 'assert z-statistic([1.3, 15.0, 2.9]) == 1.046418644730305', 'assert z-statistic([0.3, -1.0, -2.0, 5.0, 1.0, 5.1]) == 0.5092873663524808', 'assert z-statistic([10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]) == 1.8989720877738328']","['def z-statistic(lst1):\n\t#Assigns a list {lst1} to a variable named lst1\n\tlst1 = sorted(lst1)\n\t#Assigns a variable named lst2 to a list of the first 10 elements of lst1\n\tlst2 = lst1[:10]\n\t#Assigns a variable named lst3 to a list of the last 10 elements of lst1\n\tlst3 = lst1[-10:]\n\t#Assigns a variable named lst4 to a list of the first 10 elements of lst3\n\tlst4 = lst3[:10]\n\t#Assigns a variable named lst5 to a list of the last', 'def z-statistic(lst1):\n\t#Compute the sample mean of lst1\n\tmean = sum(lst1)/len(lst1)\n\t#Compute the sample variance of lst1\n\tvar = sum([(x-mean)**2 for x in lst1])/len(lst1)\n\t#Compute the sample standard deviation of lst1\n\tstd = sqrt(var)\n\t#Compute the z-statistic\n\tz = (mean-lst1[0])/std', 'def z-statistic(lst1):\n\t#Compute the sample standard deviation of lst1\n\tlst1_std = np.std(lst1)\n\t#Compute the sample mean of lst1\n\tlst1_mean = np.mean(lst1)\n\t#Compute the z-statistic\n\tz_stat = (lst1_mean - lst1_std) / lst1_std', 'def z-statistic(lst1):\n\t#Compute the z-statistic to test whether its mean is 0\n\t#The z-statistic is defined as the difference between the mean and the median\n\t#The z-statistic is defined as the difference between the mean and the mode\n\t#The z-statistic is defined as the difference between the mean and the median\n\t#The z-statistic is defined as the difference between the mean and the mode\n\t#The z-statistic is defined as the difference between the mean and the median\n\t#The z-statistic is defined as the difference between the mean and the mode\n\t#The z-statistic is defined as the difference between the mean and the median', 'def z-statistic(lst1):\n\t#Print out the z-statistic\n\treturn ""The z-statistic is: "", stats.zscore(lst1)']"
81,"['Assign a list {lst} to named lst1', 'Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively', 'Concatenate lst_pos and lst_neg and assign it lst2', 'Print out lst2']","[{'lst': [3, -3, 2, -2]}, {'lst': [-5, 7, -3, -4, 9, 10, -1, 11]}, {'lst': [-1000, 11]}, {'lst': [9, -10, 8, 2, -77, -50, 11, 6]}, {'lst': [-50, -70, -30, 4, 3, -100, 1]}]","[[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]]",256.0,array,Move all negative elements to end,Move all negative elements in a list to the end.,82,def move_all_negative_elements_to_end(lst):,"['assert move_all_negative_elements_to_end([3, -3, 2, -2]) == [3, 2, -3, -2]', 'assert move_all_negative_elements_to_end([-5, 7, -3, -4, 9, 10, -1, 11]) == [7, 9, 10, 11, -5, -3, -4, -1]', 'assert move_all_negative_elements_to_end([-1000, 11]) == [11, -1000]', 'assert move_all_negative_elements_to_end([9, -10, 8, 2, -77, -50, 11, 6]) == [9, 8, 2, 11, 6, -10, -77, -50]', 'assert move_all_negative_elements_to_end([-50, -70, -30, 4, 3, -100, 1]) == [4, 3, 1, -50, -70, -30, -100]']","['def move_all_negative_elements_to_end(lst):\n\t#Assign a list {lst} to named lst1\n\tlst1 = lst[:]\n\t#Assign a list {lst1} to named lst2\n\tlst2 = lst1[:]\n\t#Assign a list {lst2} to named lst3\n\tlst3 = lst2[:]\n\t#Assign a list {lst3} to named lst4\n\tlst4 = lst3[:]\n\t#Assign a list {lst4} to named lst5\n\tlst5 = lst4[:]\n\t#Assign a list {lst5} to named lst6\n\tlst6 = lst5[:]\n\t#Assign a list {lst6} to', 'def move_all_negative_elements_to_end(lst):\n\t#Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively\n\tlst_pos = []\n\tlst_neg = []\n\tfor i in lst:\n\t\tif i < 0:\n\t\t\tlst_neg.append(i)\n\t\telse:\n\t\t\tlst_pos.append(i)\n\t#Sort the lists\n\tlst_pos.sort()\n\tlst_neg.sort()\n\t#Merge the two lists\n\tlst_pos.extend(lst_neg)', 'def move_all_negative_elements_to_end(lst):\n\t#Concatenate lst_pos and lst_neg and assign it lst2\n\tlst2 = lst + lst_neg\n\t#Sort lst2\n\tlst2.sort()\n\t#Move all negative elements to the end of lst2\n\tfor i in range(len(lst2)):\n\t\tif lst2[i] < 0:\n\t\t\tlst2.insert(i, lst2.pop(i+1))', 'def move_all_negative_elements_to_end(lst):\n\t#Print out lst2\n\t#print(lst)\n\t#print(lst2)\n\t#print(lst3)\n\t#print(lst4)\n\t#print(lst5)\n\t#print(lst6)\n\t#print(lst7)\n\t#print(lst8)\n\t#print(lst9)\n\t#print(lst10)\n\t#print(lst11)\n\t#print(lst12)\n\t#print(lst13)\n\t#print(lst14)\n\t#print(lst15)\n\t#']"
82,"['Initialize a variable named w with a string {w}', 'Lower every character in w', ""Replace every alphabetical characters in w with ''"", 'Print out the new word after substitution']","[{'w': '2a4B'}, {'w': 'br2ace'}, {'w': '100'}, {'w': '3g4lc'}, {'w': '12Apple0'}]","['24', '2', '100', '34', '120']",256.0,string,Remove alphabetical characters,Remove alphabetical characters in a string.,83,def remove_alphabetical_characters(w):,"[""assert remove_alphabetical_characters('2a4B') == 24"", ""assert remove_alphabetical_characters('br2ace') == 2"", 'assert remove_alphabetical_characters(100) == 100', ""assert remove_alphabetical_characters('3g4lc') == 34"", ""assert remove_alphabetical_characters('12Apple0') == 120""]","['def remove_alphabetical_characters(w):\n\t#Initialize a variable named w with a string {w}\n\tw = str(w)\n\t#Initialize a variable named new_w with a string {w}\n\tnew_w = """"\n\t#Initialize a variable named i with a variable equal to 0\n\ti = 0\n\t#Initialize a variable named j with a variable equal to the length of w\n\tj = len(w)\n\t#While i is less than j\n\twhile i < j:\n\t\t#If the character at i is not a letter\n\t\tif w[i]!= w[i].lower():\n\t\t\t#Add the character at i to', ""def remove_alphabetical_characters(w):\n\t#Lower every character in w\n\tw = w.lower()\n\t#Remove all non-alphanumeric characters\n\tw = re.sub(r'[^a-zA-Z0-9]', '', w)\n\t#Remove all non-alphanumeric characters\n\tw = re.sub(r'[^a-zA-Z0-9]', '', w)\n\t#Remove all non-alphanumeric characters\n\tw = re.sub(r'[^a-zA-Z0-9]', '', w)\n\t#Remove all non-alphanumeric characters\n\tw = re.sub(r'[^"", ""def remove_alphabetical_characters(w):\n\t#Replace every alphabetical characters in w with ''"", 'def remove_alphabetical_characters(w):\n\t#Print out the new word after substitution\n\t#Remove all the characters that are not alphabetic\n\tw = w.replace("" "", """")\n\tw = w.replace(""."", """")\n\tw = w.replace("","", """")\n\tw = w.replace(""!"", """")\n\tw = w.replace(""?"", """")\n\tw = w.replace("":"", """")\n\tw = w.replace("";"", """")\n\tw = w.replace(""("", """")\n\tw = w.replace("")"", """")\n\tw = w.replace(""-"", """")\n\tw = w.replace(""+"", """")\n\tw']"
83,"['Import and initialize a numpy array ""X"" with the values {X}.', 'Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".', 'Set the diagonal elements of ""Xn"" to 0.', 'Print out the maximum value (cast as a float) in ""Xn"".']","[{'X': [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {'X': [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {'X': [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {'X': [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {'X': [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}]","[0.6399499999999999, 16, 29, 2.35021, 74]",128.0,data science,Largest norm,Find the largest norm among n-dimensional points.,84,def largest_norm(X):,"['assert largest_norm([[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]) == 0.6399499999999999', 'assert largest_norm([[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]) == 16', 'assert largest_norm([[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]) == 29', 'assert largest_norm([[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]) == 2.35021', 'assert largest_norm([[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]) == 74']","['def largest_norm(X):\n\t#Import and initialize a numpy array ""X"" with the values {X}.\n\tX = np.array(X)\n\t#Return the largest norm of the array ""X"".', 'def largest_norm(X):\n\t#Calculate the dot product between all rows and store the result to ""Xn"", where (i, j) element stores the dot product between i-th and j-th  row of ""X"".\n\tXn = np.zeros((X.shape[0], X.shape[0]))\n\tfor i in range(X.shape[0]):\n\t\tfor j in range(X.shape[0]):\n\t\t\tXn[i, j] = np.dot(X[i, :], X[j, :])\n\t#Find the largest value in ""Xn"" and return it.', 'def largest_norm(X):\n\t#Set the diagonal elements of ""Xn"" to 0.\n\tXn = np.diag(X)\n\t#Compute the norms of the elements of ""Xn""\n\tnorms = np.linalg.norm(Xn, axis=1)\n\t#Return the index of the largest norm', 'def largest_norm(X):\n\t#Print out the maximum value (cast as a float) in ""Xn"".\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.\n\t#The maximum value is the largest value in the array.']"
84,"['Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.', 'Compare the equivalence of two arrays and store the results as ""match"".', 'Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".', 'Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".', 'Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".', 'Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".', 'Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.']","[{'pred': [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {'pred': [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], 'y': [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 0, 0, 0]}, {'pred': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'y': [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {'pred': [0, 1, 0, 0, 0], 'y': [0, 1, 1, 1, 1]}]","[0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4]",128.0,data science,F1 score,"Given two arrays (pred, gold), calculate the F1 score.",85,"def f1_score(pred,y):","['assert f1_score([1, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 1]) == 0.6', 'assert f1_score([0, 1, 1, 1, 1, 0, 1, 0, 0, 0],[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == 0.74999999999', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 0, 0, 0]) == 1.0', 'assert f1_score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.1818181818182', 'assert f1_score([0, 1, 0, 0, 0],[0, 1, 1, 1, 1]) == 0.4']","['def f1_score(pred,y):\n\t#Initialize numpy arrays ""pred"" with the values {pred}, ""y"" with the values {y}.\n\tpred = np.array(pred)\n\ty = np.array(y)\n\t#Calculate the f1 score.', 'def f1_score(pred,y):\n\t#Compare the equivalence of two arrays and store the results as ""match"".\n\tmatch = 0\n\t#If the arrays are of the same length, then compare the elements of the arrays.\n\tif len(pred) == len(y):\n\t\tfor i in range(len(pred)):\n\t\t\tif pred[i] == y[i]:\n\t\t\t\tmatch += 1\n\t#If the arrays are not of the same length, then compare the elements of the arrays.\n\telse:\n\t\tfor i in range(len(pred)):\n\t\t\tif pred[i] == y[i]:\n\t\t\t\tmatch += 1\n\t#Return the f1', 'def f1_score(pred,y):\n\t#Assign the boolean array for whether ""y"" is greater than 0 to a variable ""non_zero"".\n\tnon_zero = (y > 0)\n\t#Assign the boolean array for whether ""pred"" is greater than 0 to a variable ""non_zero"".\n\tnon_zero_pred = (pred > 0)\n\t#Assign the boolean array for whether ""y"" and ""pred"" are equal to 1 to a variable ""equal"".\n\tequal = (y == pred)\n\t#Assign the boolean array for whether ""y"" and ""pred"" are equal to 0 to a variable ""not_equal"".\n\tnot_equal = (y!= pred)', 'def f1_score(pred,y):\n\t#Perform the logical ""AND"" operation between ""match"" and ""non_zero"", store the result as ""correct"".\n\tcorrect = np.logical_and(pred == y, y!= 0)\n\t#Return the number of correct predictions.', 'def f1_score(pred,y):\n\t#Compute the precision by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""prec"".\n\tprec = precision_score(y,pred)\n\t#Compute the recall by dividing the number of True values in ""correct"" by that in ""pred"", and store as ""rec"".\n\trec = recall_score(y,pred)\n\t#Compute the F1 score by dividing the precision by the recall, and store as ""f1"".\n\tf1 = 2*prec*rec/(prec+rec)', 'def f1_score(pred,y):\n\t#Compute the recall by dividing the number of True values in ""correct"" by the number of actual non-zero values in ""y"", and store the result as ""rec"".\n\trec = recall_score(y,pred)\n\t#Compute the precision by dividing the number of True values in ""correct"" by the number of predicted non-zero values in ""y"", and store the result as ""prec"".\n\tprec = precision_score(y,pred)\n\t#Compute the F1 score by computing the harmonic mean of the precision and recall, and store the result as ""f1"".\n\tf1 = 2*prec*rec/(prec+rec)', 'def f1_score(pred,y):\n\t#Calculate the harmonic mean between ""prec"" and ""rec"" and print out the value.\n\treturn f1_score(y,pred,average=\'macro\')']"
85,"['Initialize a string named ""concat"" with {x}.', 'Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.', 'Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".', 'Print out ""result"".']","[{'x': 'ACapitalLetterWords'}, {'x': 'camelCaseMethod'}, {'x': 'ABCDE'}, {'x': 'splitDB'}, {'x': 'donotsplitanything'}]","[' A Capital Letter Words', 'camel Case Method', ' A B C D E', 'split D B', 'donotsplitanything']",128.0,string,Add Space,Add spaces before capital letters.,86,def add_space(x):,"[""assert add_space('ACapitalLetterWords') == ' A Capital Letter Words'"", ""assert add_space('camelCaseMethod') == 'camel Case Method'"", ""assert add_space('ABCDE') == ' A B C D E'"", ""assert add_space('splitDB') == 'split D B'"", ""assert add_space('donotsplitanything') == 'donotsplitanything'""]","['def add_space(x):\n\t#Initialize a string named ""concat"" with {x}.\n\tconcat = ""{x}""\n\t#Loop through the string ""concat"" and add spaces to the end of each word.\n\tfor i in range(len(concat)):\n\t\tif concat[i] == "" "":\n\t\t\tconcat = concat[:i] + "" "" + concat[i+1:]\n\t#Return the string ""concat"".', 'def add_space(x):\n\t#Import the regex module and define a pattern ""pat"" that matches capital alphabets that can be referenced as a group.\n\timport re\n\tpat = re.compile(r\'[A-Z]\')\n\t#If the pattern matches the string, return the string with the first letter of each word capitalized.', 'def add_space(x):\n\t#Find all the matches in ""concat"" with ""pat"", and insert an additional whitespace before the matched character with, then store the result to ""result"".\n\tresult = []\n\tfor i in range(len(x)):\n\t\tif x[i] in concat:\n\t\t\tresult.append(x[i])\n\t\t\tresult.append("" "")', 'def add_space(x):\n\t#Print out ""result"".\n\t#Add a space to the end of the string.\n\treturn x + "" ""']"
86,"['Initialize a list ""x"" with the values {x}.', 'Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".', 'Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".', 'Sort ""results"" in ascending order and print it out.']","[{'x': [0, 0, 0, 0, 100]}, {'x': [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {'x': [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {'x': [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {'x': [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}]","[[100], [-100, 120], [-7], [-7, -7], [-5]]",128.0,data science,Remove outlier,Remove data points in the tail (2sigma) of normal distribution.,87,def remove_outlier(x):,"['assert remove_outlier([0, 0, 0, 0, 100]) == [100]', 'assert remove_outlier([-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]) == [-100, 120]', 'assert remove_outlier([3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]) == [-7]', 'assert remove_outlier([0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]) == [-7, -7]', 'assert remove_outlier([4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]) == [-5]']","['def remove_outlier(x):\n\t#Initialize a list ""x"" with the values {x}.\n\tx = [x]\n\t#Iterate through the list ""x"" and remove the values that are outliers.\n\tfor i in range(len(x)):\n\t\tif x[i] > 30000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'def remove_outlier(x):\n\t#Assuming the normal distribution, calculate mean and standard deviation of ""x"" using numpy, store the results to ""mean"" and ""std"".\n\tmean = np.mean(x)\n\tstd = np.std(x)\n\t#Calculate the absolute difference between the mean and the standard deviation of ""x"" using numpy, store the results to ""abs_diff""\n\tabs_diff = np.abs(x - mean)\n\t#Calculate the index of the maximum absolute difference, store the results to ""max_abs_diff_index""\n\tmax_abs_diff_index = np.argmax(abs_diff)\n\t#Calculate the index of the minimum absolute difference, store the results to ""min_abs_', 'def remove_outlier(x):\n\t#Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to ""results"".\n\tresults = []\n\tfor i in x:\n\t\tif i < mean - 2 * std:\n\t\t\tresults.append(i)\n\t\telif i > mean + 2 * std:\n\t\t\tresults.append(i)', 'def remove_outlier(x):\n\t#Sort ""results"" in ascending order and print it out.\n\tresults = sorted(x)\n\t#If the first element is greater than the second element, then remove the first element.\n\tif results[0] > results[1]:\n\t\tresults.pop(0)\n\t#If the last element is less than the second element, then remove the last element.\n\tif results[-1] < results[-2]:\n\t\tresults.pop(-1)\n\t#Print the sorted list.\n\t#Return the sorted list.\n\treturn results']"
87,"['Initialize a list ""x"" with the values {x}', 'Obtain a list of unique elements in x and sort them, store the results to ""vocab"".', 'Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".', 'Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.', 'For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".', 'Print out ""features"".']","[{'x': [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {'x': [0, 1, 2]}, {'x': [1, 1, 1, 1, 1]}, {'x': [0, 0, 0, 0, 0]}, {'x': [0, 0, 1, 1]}]","[[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]]",128.0,data science,Convert to categorical,Convert values into categorical variables.,88,def convert_to_categorical(x):,"['assert convert_to_categorical([4, 2, 3, 1, 0, 3, 3, 3, 2, 1]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]', 'assert convert_to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]', 'assert convert_to_categorical([1, 1, 1, 1, 1]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 0, 0, 0]) == [[1], [1], [1], [1], [1]]', 'assert convert_to_categorical([0, 0, 1, 1]) == [[1, 0], [1, 0], [0, 1], [0, 1]]']","['def convert_to_categorical(x):\n\t#Initialize a list ""x"" with the values {x}\n\tx = np.array(x)\n\t#Convert the list ""x"" to a categorical variable\n\tx = to_categorical(x)', 'def convert_to_categorical(x):\n\t#Obtain a list of unique elements in x and sort them, store the results to ""vocab"".\n\tvocab = sorted(list(set(x)))\n\t#Convert the list of unique elements in x to a list of integers.\n\tx = np.array(list(map(vocab.index, x)))\n\t#Return the converted list of integers.', 'def convert_to_categorical(x):\n\t#Create a hash map from the values of ""vocab"" to their indices and store the result to ""v2i"".\n\tv2i = {v: i for i, v in enumerate(vocab)}\n\t#Convert the input to a one-hot encoded vector.', 'def convert_to_categorical(x):\n\t#Initialize a numpy array of zeros named ""features"" whose row size is the length of x and column size is the length of ""index"", with a data type of int.\n\tfeatures = np.zeros((len(x), len(index)), dtype=int)\n\t#Iterate through each row in x and set the corresponding value in the corresponding column in features to 1.\n\tfor i in range(len(x)):\n\t\tfeatures[i][x[i]] = 1', 'def convert_to_categorical(x):\n\t#For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using ""v2i"".\n\t#Then, convert the 1-hot encoded array to a categorical array.\n\t#Then, return the categorical array.', 'def convert_to_categorical(x):\n\t#Print out ""features"".\n\t#Convert the data to categorical.\n\tx = x.astype(\'category\')\n\t#Print out the shape of the data.\n\t#Return the converted data.\n\treturn x']"
88,"['Initialize a variable ""x"" with {x}.', 'Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".', 'Convert each element in ""mapped"" into string.', 'Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.', 'Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.', 'Print out the ""results"".']","[{'fun': 'len', 'x': ['a', 'b', 'c']}, {'fun': 'len', 'x': ['apple', 'banana', 'orange', 'peach']}, {'fun': 'type', 'x': [1, 2, 3, 'a', 'b', 'c']}, {'fun': 'len', 'x': [[1, 2, 3], 'a', 'b', 'c']}, {'fun': 'str', 'x': [1, 2, 3, '1', '2', '3']}]","[{'1': ['a', 'b', 'c']}, {'5': ['apple', 'peach'], '6': ['banana', 'orange']}, {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}, {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}, {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}]",128.0,array,Group by key,Group items in an array using a provided function.,89,"def group_by_key(fun,x):","[""assert group_by_key(<built-in function len>,['a', 'b', 'c']) == {'1': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,['apple', 'banana', 'orange', 'peach']) == {'5': ['apple', 'peach'], '6': ['banana', 'orange']}"", ""assert group_by_key(<class 'type'>,[1, 2, 3, 'a', 'b', 'c']) == {'int': [1, 2, 3], 'str': ['a', 'b', 'c']}"", ""assert group_by_key(<built-in function len>,[[1, 2, 3], 'a', 'b', 'c']) == {'1': ['a', 'b', 'c'], '3': [[1, 2, 3]]}"", ""assert group_by_key(<class 'str'>,[1, 2, 3, '1', '2', '3']) == {'2': [2, '2'], '3': [3, '3'], '1': [1, '1']}""]","['def group_by_key(fun,x):\n\t#Initialize a variable ""x"" with {x}.\n\tx = {x}\n\t#Initialize a variable ""y"" with an empty list.\n\ty = []\n\t#Iterate over the x variable.\n\tfor i in x:\n\t\t#If the value of i is not in the y variable, add it to the y variable.\n\t\tif i not in y:\n\t\t\t#Add i to the y variable.\n\t\t\ty.append(i)\n\t\t#If the value of i is in the y variable, add the value of fun(i) to the y variable.\n\t\telse:\n\t\t\ty.append(fun', 'def group_by_key(fun,x):\n\t#Apply the function ""{fun}"" to each element in the list and store the results to ""mapped"".\n\tmapped = [fun(x[i]) for i in range(len(x))]\n\t#Return the list of mapped values.', 'def group_by_key(fun,x):\n\t#Convert each element in ""mapped"" into string.\n\tmapped = map(str,x)\n\t#Group the elements by the string.\n\tgrouped = itertools.groupby(mapped)\n\t#Return the key and the list of values.', 'def group_by_key(fun,x):\n\t#Define ""results"" with a dictionary whose keys are the unique values in ""mapped"" and values are empty lists.\n\tresults = {}\n\t#Iterate over the list of mapped values.\n\tfor mapped in x:\n\t\t#If the key is not in the dictionary, add it to the dictionary.\n\t\tif mapped not in results:\n\t\t\tresults[mapped] = []\n\t\t#Add the value to the list of values for the key.\n\t\tresults[mapped].append(fun(mapped))\n\t#Return the dictionary of results.', 'def group_by_key(fun,x):\n\t#Looping over the zip of ""mapped"" and ""x"", append the value in ""x"" to the value of ""results"" using the value in ""mapped"" as the key.\n\tresults = []\n\tfor mapped,x in zip(fun(x),x):\n\t\tresults.append(mapped)', 'def group_by_key(fun,x):\n\t#Print out the ""results"".\n\t#Return the ""results"".\n\treturn fun(x)']"
89,"['Initialize a variable ""best"" with -1, ""array"" with {array}', 'Assign the first element of ""array"" to a variable named ""minimum"".', 'In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".', 'Print out ""best"".']","[{'array': [1, 2, 3, 4, 5]}, {'array': [5, 2, 3, 4, 0]}, {'array': [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {'array': [1, 10, 1, 10, 0]}, {'array': [1, 2, 3, 2, 1]}]","[4, 2, 9, 9, 2]",128.0,array,Max stock profit,"Given an array of ""prices"", find the max profit.",90,def max_stock_profit(array):,"['assert max_stock_profit([1, 2, 3, 4, 5]) == 4', 'assert max_stock_profit([5, 2, 3, 4, 0]) == 2', 'assert max_stock_profit([12, 7, 8, 5, 9, 5, 14, 9, 8, 9]) == 9', 'assert max_stock_profit([1, 10, 1, 10, 0]) == 9', 'assert max_stock_profit([1, 2, 3, 2, 1]) == 2']","['def max_stock_profit(array):\n\t#Initialize a variable ""best"" with -1, ""array"" with {array}\n\tbest = -1\n\tarray = sorted(array)\n\t#Iterate through the array\n\tfor i in range(len(array)):\n\t\t#If the current element is greater than the best, update the best\n\t\tif array[i] > best:\n\t\t\tbest = array[i]', 'def max_stock_profit(array):\n\t#Assign the first element of ""array"" to a variable named ""minimum"".\n\tminimum = array[0]\n\t#Assign the second element of ""array"" to a variable named ""maximum"".\n\tmaximum = array[0]\n\t#Assign the third element of ""array"" to a variable named ""sum"".\n\tsum = array[0]\n\t#Assign the fourth element of ""array"" to a variable named ""profit"".\n\tprofit = 0\n\t#Loop through the array.\n\tfor i in range(1, len(array)):\n\t\t#If the current element of ""array"" is less than the ""minimum"" variable, then assign the', 'def max_stock_profit(array):\n\t#In a for loop over ""array"" starting from the second element, do 1) update ""best"" when the element minus ""minimum"" is larger than ""best"", and 2) update ""minimum"" with the value of element if it is smaller than ""minimum"".\n\t#Return the maximum profit.\n\tbest = array[1]\n\tminimum = array[1]\n\tfor i in range(2, len(array)):\n\t\tif array[i] - minimum > best:\n\t\t\tbest = array[i] - minimum\n\t\tif array[i] < minimum:\n\t\t\tminimum = array[i]', 'def max_stock_profit(array):\n\t#Print out ""best"".\n\tbest = array[0]\n\t#Print out ""worst"".\n\tworst = array[0]\n\t#Print out ""average"".\n\taverage = 0\n\t#Print out ""total"".\n\ttotal = 0\n\t#Print out ""number of items"".\n\tnumber_of_items = 0\n\t#Print out ""number of items with a positive profit"".\n\tnumber_of_items_with_positive_profit = 0\n\t#Print out ""number of items with a negative profit"".\n\tnumber_of_items_with_']"
90,"['Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.', 'Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.', 'Print out the sum of elements in ""result"".']","[{'target': 1, 'nums': [1, 2, 1, 2, 1]}, {'target': 1, 'nums': [0, 0, 0]}, {'target': 1, 'nums': [1.1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, 2, 3, 2, 1]}, {'target': '1', 'nums': [1, '1', 2, '1']}]","[6, 0, 4, 0, 4]",128.0,array,Sum positions,Sum of all position indices where a value appear.,91,"def sum_positions(target,nums):","['assert sum_positions(1,[1, 2, 1, 2, 1]) == 6', 'assert sum_positions(1,[0, 0, 0]) == 0', 'assert sum_positions(1,[1.1, 2, 3, 2, 1]) == 4', 'assert sum_positions(1,[1, 2, 3, 2, 1]) == 0', ""assert sum_positions(1,[1, '1', 2, '1']) == 4""]","['def sum_positions(target,nums):\n\t#Initialize a variable ""target"" with {target}, a variable ""nums"" with {nums}, and ""result"" with an empty list.\n\ttarget = target\n\tnums = nums\n\tresult = []\n\t#Loop through the nums list, and add the value of each element to the result list.\n\tfor i in nums:\n\t\tresult.append(i+target)\n\t#Return the result list.', 'def sum_positions(target,nums):\n\t#Enumerating over ""nums"", compare each element with ""target"" and add its index position  to "" result"" if they are equivalent.\n\tresult = []\n\tfor i in range(len(nums)):\n\t\tif nums[i] == target:\n\t\t\tresult.append(i)', 'def sum_positions(target,nums):\n\t#Print out the sum of elements in ""result"".\n\tresult = 0\n\tfor i in range(len(nums)):\n\t\tresult += nums[i]']"
91,"['Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.', 'Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.', 'Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""', 'Pop the only element in ""diff"" print it out.']","[{'nums': [1, 3, 4], 'N': 4}, {'nums': [1, 2, 3, 4], 'N': 5}, {'nums': [4, 3, 9, 7, 8, 5, 2, 1, 10], 'N': 10}, {'nums': [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], 'N': 20}, {'nums': [], 'N': 1}]","[2, 5, 6, 18, 1]",128.0,array,Find missing num,Find a missing number given a list and a max number.,92,"def find_missing_num(nums,N):","['assert find_missing_num([1, 3, 4],4) == 2', 'assert find_missing_num([1, 2, 3, 4],5) == 5', 'assert find_missing_num([4, 3, 9, 7, 8, 5, 2, 1, 10],10) == 6', 'assert find_missing_num([6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19],20) == 18', 'assert find_missing_num([],1) == 1']","['def find_missing_num(nums,N):\n\t#Initialize a variable ""nums"" with {nums} and a variable ""N"" with {N}.\n\t#Create a variable ""missing_num"" with the value 0.\n\t#Create a variable ""count"" with the value 0.\n\t#Create a variable ""i"" with the value 0.\n\t#Create a variable ""j"" with the value 0.\n\t#Create a variable ""k"" with the value 0.\n\t#Create a variable ""l"" with the value 0.\n\t#Create a variable ""m"" with the value 0.\n\t#Create a variable ""n"" with the value 0.\n\t#Create a variable', 'def find_missing_num(nums,N):\n\t#Initialize a variable ""all_nums"" which is a set of numbers between 1 and N.\n\tall_nums = set(range(1,N+1))\n\t#Iterate over the list of numbers.\n\tfor num in nums:\n\t\t#If the number is not in the set of all numbers, add it to the set.\n\t\tif num not in all_nums:\n\t\t\tall_nums.add(num)\n\t#Return the set of all numbers that are not in the set of all numbers.', 'def find_missing_num(nums,N):\n\t#Subtract the set of numbers in ""nums"" from ""all_nums"", and store the result to ""diff""\n\tdiff = set(nums) - set(all_nums)\n\t#If there are no missing numbers, return 0\n\tif len(diff) == 0:\n\t#If there are missing numbers, return the smallest missing number\n\telse:', 'def find_missing_num(nums,N):\n\t#Pop the only element in ""diff"" print it out.\n\tdiff = []\n\tfor i in range(N):\n\t\tdiff.append(nums[i])\n\tdiff.pop()\n\t#print(diff)\n\t#print(nums)\n\t#print(N)\n\t#print(len(diff))\n\t#print(len(nums))\n\t#print(len(N))\n\t#print(len(diff))\n\t#print(len(nums))\n\t#print(len(N))\n\t#print(len(diff))\n\t#print(len(nums))\n\t#print(']"
92,"['Assign {x} to a variable named ""X"".', 'Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".', 'Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""', 'Cast ""common"" as a list and print it out.']","[{'x': [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {'x': [[1, 1], [1, 1]]}, {'x': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {'x': [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {'x': [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}]","[[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]]",128.0,array,Common num in matrix,Common numbers among rows in a matrix.,93,def common_num_in_matrix(x):,"['assert common_num_in_matrix([[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]) == [3, 5]', 'assert common_num_in_matrix([[1, 1], [1, 1]]) == [1]', 'assert common_num_in_matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]', 'assert common_num_in_matrix([[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]) == [21]', 'assert common_num_in_matrix([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]']","['def common_num_in_matrix(x):\n\t#Assign {x} to a variable named ""X"".\n\tX = x\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a variable named ""X"".\n\tX = X\n\t#Assign {X} to a', 'def common_num_in_matrix(x):\n\t#Initialize a variable named ""common"" with a set of unique elements in the first index of ""X"".\n\tcommon = set(x[0])\n\t#Iterate over the second index of ""X"" and add each element to the set ""common"".\n\tfor i in range(1, len(x)):\n\t\tcommon.update(x[i])\n\t#Return the number of unique elements in ""common"".', 'def common_num_in_matrix(x):\n\t#Iterating over ""X"", update ""common"" with an intersection of ""common"" and the set of unique elements in the current index of ""X""\n\tcommon = set()\n\tfor i in range(len(x)):\n\t\tif x[i] in common:\n\t\t\tcontinue\n\t\telse:\n\t\t\tcommon.add(x[i])', 'def common_num_in_matrix(x):\n\t#Cast ""common"" as a list and print it out.\n\tcommon = [i for i in x if i == ""common""]']"
93,"['Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.', 'While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".', 'Store the sum of all numbers in ""seq"" to ""results"".', 'Print out the ""results"".']","[{'start': 1}, {'start': 9}, {'start': 27}, {'start': 28}, {'start': 123456789}]","[1, 55, 101440, 330, 1266590663]",128.0,algorithm,Sum Collatz,Obtain the sum of Collatz sequence starting from given number.,94,def sum_collatz(start):,"['assert sum_collatz(1) == 1', 'assert sum_collatz(9) == 55', 'assert sum_collatz(27) == 101440', 'assert sum_collatz(28) == 330', 'assert sum_collatz(123456789) == 1266590663']","['def sum_collatz(start):\n\t#Initialize a variable ""start"" with {start}, and ""seq"" with a list containing {start}.\n\tseq = [start]\n\t#While the sequence is not empty:\n\twhile len(seq) > 0:\n\t\t#Get the first element of the sequence.\n\t\tcurrent = seq.pop(0)\n\t\t#If the current element is even, add 2 to the sequence.\n\t\tif current % 2 == 0:\n\t\t\tseq.append(current + 2)\n\t\t#If the current element is odd, add 3 to the sequence.\n\t\telse:\n\t\t\tseq.append(current + 3)\n\t#Return the sequence.', 'def sum_collatz(start):\n\t#While the value is not 1, perform the following: if ""start"" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".\n\t#If ""start"" is an odd number, multiply by 3 and add 1, then store the number to ""start"" as well as appending to ""seq"".\n\t#If ""start"" is 1, then store the number to ""start"" as well as appending to ""seq"".\n\tseq = []\n\twhile start!= 1:\n\t\tif start % 2 == 0:\n\t\t\tstart = start / 2\n\t\telse:\n\t\t\tstart = start * 3 + 1\n\t\tseq.append(start)\n\tseq.append(start)', 'def sum_collatz(start):\n\t#Store the sum of all numbers in ""seq"" to ""results"".\n\tresults = 0\n\t#Store the number of iterations in ""i"" to ""count"".\n\tcount = 0\n\t#Store the number of times the number is evenly divisible by 2.\n\teven = 0\n\t#Store the number of times the number is evenly divisible by 3.\n\todd = 0\n\t#Store the number of times the number is evenly divisible by 5.\n\tfive = 0\n\t#Store the number of times the number is evenly divisible by 7.\n\tseven = 0\n\t#Store', 'def sum_collatz(start):\n\t#Print out the ""results"".\n\t#If the number is even, divide by 2.\n\tif start % 2 == 0:\n\t\tstart = start / 2\n\t#If the number is odd, multiply by 3 and add one.\n\telse:\n\t\tstart = start * 3 + 1\n\t#Return the sum of the numbers.\n\treturn start']"
94,"['Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.', 'Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.', 'For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".', 'Print out ""pos"".']","[{'start': 'A', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC']}, {'start': 'B', 'swap': ['AC', 'CA']}, {'start': 'C', 'swap': ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']}, {'start': 'C', 'swap': ['AB', 'AC']}, {'start': 'A', 'swap': []}]","['C', 'B', 'B', 'A', 'A']",128.0,algorithm,Cup swap,"Name the location of a ""ball"" after cup swapping.",95,"def cup_swap(start,swap):","[""assert cup_swap('A',['AB', 'BC', 'CA', 'BC', 'AC']) == 'C'"", ""assert cup_swap('B',['AC', 'CA']) == 'B'"", ""assert cup_swap('C',['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA']) == 'B'"", ""assert cup_swap('C',['AB', 'AC']) == 'A'"", ""assert cup_swap('A',[]) == 'A'""]","['def cup_swap(start,swap):\n\t#Define a variable ""pos"" with ""{start}"", ""swap"" with {swap}.\n\tpos = start\n\t#Define a variable ""temp"" with ""{pos}"".\n\ttemp = pos\n\t#Define a variable ""temp2"" with ""{temp}"".\n\ttemp2 = temp\n\t#Define a variable ""temp3"" with ""{temp2}"".\n\ttemp3 = temp2\n\t#Define a variable ""temp4"" with ""{temp3}"".\n\ttemp4 = temp3\n\t#Define a variable ""temp5"" with ""{temp4}"".\n\ttemp5 = temp4\n\t#Define a variable ""temp6"" with ""{temp5}"".\n\ttemp6', 'def cup_swap(start,swap):\n\t#Write a function ""move"" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.\n\t#For example, if x = ""abc"" and y = ""ab"", then move(x,y) should return ""ac"".\n\t#If x = ""abc"" and y = ""abz"", then move(x,y) should return ""acz"".\n\t#If x = ""abc"" and y = ""abz"", then move(x,y) should return ""acbz"".\n\t#If x = ""abc"" and y = ""abz"", then move(x,y) should return ""acbz"".\n\t#If x = ""abc"" and y', 'def cup_swap(start,swap):\n\t#For each element in ""swap"", if it contains ""pos"", call ""move"" on ""pos"" and the current element and store the result to ""pos"".\n\tfor i in range(len(swap)):\n\t\tif swap[i] in pos:\n\t\t\tmove(pos[swap[i]],start)\n\t\t\tpos[swap[i]] = start\n\t#Return the current element.', 'def cup_swap(start,swap):\n\t#Print out ""pos"".\n\t#Swap the two cups.\n\tcups[start],cups[swap] = cups[swap],cups[start]\n\t#Print out ""pos"".\n\t#Return the new position.\n\treturn start']"
95,"['Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.', 'For each chracter in ""num"", append the character to ""stack"".', 'Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.', 'Cast ""result"" as integer and print it out.']","[{'x': 123}, {'x': 123456789}, {'x': 100}, {'x': 0}, {'x': 1230}]","[321, 987654321, 1, 0, 321]",128.0,algorithm,Reverse digits,Reverse digits in a number with a stack.,96,def reverse_digits(x):,"['assert reverse_digits(123) == 321', 'assert reverse_digits(123456789) == 987654321', 'assert reverse_digits(100) == 1', 'assert reverse_digits(0) == 0', 'assert reverse_digits(1230) == 321']","['def reverse_digits(x):\n\t#Initialize a variable ""stack"" with an empty list, and ""num"" with {x} as a string.\n\tstack = []\n\tnum = str(x)\n\t#Iterate through the string ""num"" and add each character to the stack.\n\tfor i in num:\n\t\tstack.append(i)\n\t#Iterate through the stack and reverse each character.\n\tfor i in range(len(stack)):\n\t\tstack[i] = int(stack[i])\n\t\tstack[i] = stack[i] * 10\n\t#Join the stack back into a string.', 'def reverse_digits(x):\n\t#For each chracter in ""num"", append the character to ""stack"".\n\t#If the stack is empty, return the number.\n\t#If the stack is not empty, pop the top element from the stack and append it to ""num"".\n\t#Repeat the process until the stack is empty.\n\t#Return the number.\n\tstack = []\n\tnum = """"\n\twhile x:\n\t\tstack.append(x % 10)\n\t\tx = x // 10\n\twhile stack:\n\t\tnum = str(stack.pop()) + num', 'def reverse_digits(x):\n\t#Assign an empty string to a variable ""result"", and concatenate characters popped from the last element of ""stack"" to ""result"" until ""stack"" is empty.\n\tresult = """"\n\twhile len(stack) > 0:\n\t\tresult = result + stack.pop()\n\t#Return the result.', 'def reverse_digits(x):\n\t#Cast ""result"" as integer and print it out.\n\tresult = int(str(x)[::-1])']"
96,"['Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".', 'Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.', 'If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.', 'Otherwise, print out the string that consists of (left - right) left-facing arrows.']","[{'x': ['<<', '>>>']}, {'x': ['<<<', '>>']}, {'x': ['<<', '>>', '<<', '>>>', '>>>']}, {'x': ['<<', '>>']}, {'x': ['<<<<<<<<<<<<', '>']}]","['>', '<', '>>>>', '', '<<<<<<<<<<<']",128.0,algorithm,Calculate arrows,Calculate arrowheads left and right.,97,def calculate_arrows(x):,"[""assert calculate_arrows(['<<', '>>>']) == '>'"", ""assert calculate_arrows(['<<<', '>>']) == '<'"", ""assert calculate_arrows(['<<', '>>', '<<', '>>>', '>>>']) == '>>>>'"", ""assert calculate_arrows(['<<', '>>']) == ''"", ""assert calculate_arrows(['<<<<<<<<<<<<', '>']) == '<<<<<<<<<<<'""]","['def calculate_arrows(x):\n\t#Assign {x} to a variable ""arrows"", then concatenate all the strings in ""arrows"" and store the result to ""joined_arrow"".\n\tarrows = x.split("" "")\n\tjoined_arrow = """"\n\tfor i in arrows:\n\t\tjoined_arrow += i + "" -> ""', 'def calculate_arrows(x):\n\t#Count the numbers of left-facing arrow and right-facing arrow and store the results to ""left"" and ""right"", respectively.\n\tleft = 0\n\tright = 0\n\tfor i in range(len(x)):\n\t\tif x[i] == \'L\':\n\t\t\tleft += 1\n\t\telif x[i] == \'R\':\n\t\t\tright += 1', 'def calculate_arrows(x):\n\t#If ""right"" is larger than ""left"", print out the string that consists of (right - left) right-facing arrows.\n\tif x > 0:\n\t#If ""left"" is larger than ""right"", print out the string that consists of (left - right) left-facing arrows.\n\telif x < 0:\n\t#If ""left"" and ""right"" are equal, print out the string that consists of 1 arrow.\n\telse:', 'def calculate_arrows(x):\n\t#Otherwise, print out the string that consists of (left - right) left-facing arrows.\n\tif x == 0:\n\t\treturn "" ""\n\telif x > 0:\n\t\treturn "" -> ""\n\telse:\n\t\treturn "" <- ""']"
97,"['Initialize an array ""array"" with {x}.', 'Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".', 'Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".', 'Print out ""result""']","[{'x': [1, 2, 3, 4, 5, 6, 8]}, {'x': [1, 7, 8]}, {'x': [10]}, {'x': [0, 1]}, {'x': [1000, 2, 3, 4, 5, 6, 1000000]}]","[False, True, False, True, False]",128.0,algorithm,Check interval num ,Check if the interval (max-min) is included in a list.,98,def check_interval_num_(x):,"['assert check_interval_num_([1, 2, 3, 4, 5, 6, 8]) == False', 'assert check_interval_num_([1, 7, 8]) == True', 'assert check_interval_num_([10]) == False', 'assert check_interval_num_([0, 1]) == True', 'assert check_interval_num_([1000, 2, 3, 4, 5, 6, 1000000]) == False']","['def check_interval_num_(x):\n\t#Initialize an array ""array"" with {x}.\n\tarray = [x]\n\t#Iterate over the array.\n\tfor i in range(len(array)):\n\t\t#If the current element is not the last element.\n\t\tif i!= len(array) - 1:\n\t\t\t#Add the current element to the array.\n\t\t\tarray.append(array[i] + array[i + 1])\n\t#Return the array.', 'def check_interval_num_(x):\n\t#Calculate the difference of maximum and minimum values in ""array"" and store the value to ""diff"".\n\tdiff = max(x) - min(x)\n\t#If the difference is less than 1, then the interval is not continuous.\n\tif diff < 1:\n\telse:', 'def check_interval_num_(x):\n\t#Check if ""diff"" is included in ""array"" and store the boolean value to ""result"".\n\tresult = False\n\tif x in array:\n\t\tresult = True', 'def check_interval_num_(x):\n\t#Print out ""result""\n\t#Check if the number is a number\n\tif type(x) == int or type(x) == float:\n\t\treturn True\n\telse:\n\t\treturn False']"
98,"['Initialize a variable ""original"" with ""{x}""', 'Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.', 'Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.', 'Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".', 'Print out ""result"".']","[{'x': 'aabbddcc'}, {'x': 'abc'}, {'x': 'zzzzzyyyyyxxxxxa'}, {'x': 'aaa'}, {'x': ''}]","['a2b2d2c2', 'a1b1c1', 'z5y5x5a1', 'a3', '']",128.0,string,Length encoding,Encode a string by converting repeated chars with counts.,99,def length_encoding(x):,"[""assert length_encoding('aabbddcc') == 'a2b2d2c2'"", ""assert length_encoding('abc') == 'a1b1c1'"", ""assert length_encoding('zzzzzyyyyyxxxxxa') == 'z5y5x5a1'"", ""assert length_encoding('aaa') == 'a3'"", ""assert length_encoding('') == ''""]","['def length_encoding(x):\n\t#Initialize a variable ""original"" with ""{x}""\n\toriginal = x\n\t#Initialize a variable ""encoded"" with ""{x}""\n\tencoded = """"\n\t#Loop through each character in the original string\n\tfor i in range(len(original)):\n\t\t#If the character is a letter\n\t\tif original[i].isalpha():\n\t\t\t#If the character is a capital letter\n\t\t\tif original[i].isupper():\n\t\t\t\t#Append the character to the encoded string\n\t\t\t\tencoded += chr(ord(original[i]) + 65)\n\t\t\t#If the character is a lower case letter\n\t\t\telse:', 'def length_encoding(x):\n\t#Import OrderedDict from collections module, then initalize a variable ""dic"" with an OrderedDict with letters in ""original"" as keys and 0 as the value for each key.\n\tdic = collections.OrderedDict()\n\t#Iterate through the string ""x"" and add each letter to the dictionary ""dic"" if it is not already in the dictionary.\n\tfor i in x:\n\t\tif i not in dic:\n\t\t\tdic[i] = 0\n\t\tdic[i] += 1\n\t#Return the dictionary ""dic"" with the letters in ""original"" as keys and their respective counts as values.', 'def length_encoding(x):\n\t#Iterating over each character in ""original"", increment the value in ""dic"" whose key is the character.\n\t#If the key is not in ""dic"", then it is added to ""dic"" with the value 1.\n\t#Then, the value of ""dic"" is the length of the string.\n\t#The length of the string is the number of characters in ""original"".\n\t#The length of the string is the length of the dictionary.\n\t#The length of the dictionary is the number of characters in ""original"".\n\t#The length of the dictionary is the length of the string.\n\t#The length of the string is the length of the dictionary.\n\t#The length', 'def length_encoding(x):\n\t#Initialize an empty string to a variable ""result"", then iterate over items in ""dic"" and append the key and the value as strings to ""result"".\n\tresult = """"\n\tfor key, value in dic.items():\n\t\t#If the key is equal to the value, then append the key and the value to ""result"".\n\t\tif key == value:\n\t\t\tresult += key\n\t#Return the result.', 'def length_encoding(x):\n\t#Print out ""result"".\n\tresult = """"\n\t#For each character in the string.\n\tfor i in range(len(x)):\n\t\t#If the character is a space.\n\t\tif x[i] == "" "":\n\t\t\t#Add a space to the result.\n\t\t\tresult += "" ""\n\t\t#If the character is a number.\n\t\telif x[i].isdigit():\n\t\t\t#Add the character to the result.\n\t\t\tresult += x[i]\n\t\t#If the character is a letter.\n\t\telse:\n\t\t\t#Add the character to the result.\n\t\t\tresult += chr']"
99,"['Import re and define a regular expression that matches an email address.', 'Search for an email address in ""{x}"" and store the first match to a variable ""address"".', 'Remove the substring starting from the @ symbol from ""address"".', 'Replace non-alphabetical symbols with a whitespace in ""address"".', 'Print out ""address"".']","[{'x': 'abc@example.com.'}, {'x': 'a.b.c@example.com test.'}, {'x': 'a1b2c3.d4e_f6@example.com.'}, {'x': 'abc@example.com test. def@abc.def.'}, {'x': 'example@@example.com test, example_email@abc.io .'}]","['abc', 'a b c', 'a b c  d e f ', 'abc', 'example email']",128.0,string,Convert email,Use regex to match email addresses and remove special chars.,100,def convert_email(x):,"[""assert convert_email('abc@example.com.') == 'abc'"", ""assert convert_email('a.b.c@example.com test.') == 'a b c'"", ""assert convert_email('a1b2c3.d4e_f6@example.com.') == 'a b c  d e f '"", ""assert convert_email('abc@example.com test. def@abc.def.') == 'abc'"", ""assert convert_email('example@@example.com test, example_email@abc.io .') == 'example email'""]","['def convert_email(x):\n\t#Import re and define a regular expression that matches an email address.\n\timport re\n\tregex = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)"")\n\t#If the regular expression matches the email address, return the email address.\n\tif regex.match(x):\n\telse:', 'def convert_email(x):\n\t#Search for an email address in ""{x}"" and store the first match to a variable ""address"".\n\taddress = re.search(r""[\\w\\.-]+@[\\w\\.-]+"", x)\n\t#If the address is found, return the first match.\n\tif address:\n\t#Otherwise, return the original string.\n\telse:', 'def convert_email(x):\n\t#Remove the substring starting from the @ symbol from ""address"".', 'def convert_email(x):\n\t#Replace non-alphabetical symbols with a whitespace in ""address"".\n\tx = re.sub(r\'[^a-zA-Z0-9]\',\'\', x)\n\t#Replace all whitespace with a single space.\n\tx = re.sub(r\'\\s+\',\'\', x)\n\t#Remove any leading or trailing whitespace.\n\tx = x.strip()\n\t#Remove any leading or trailing periods.\n\tx = x.strip(\'.\')\n\t#Remove any leading or trailing commas.\n\tx = x.strip(\',\')\n\t#Remove any leading or trailing semicolons.\n\tx = x.strip(\';\')', 'def convert_email(x):\n\t#Print out ""address"".\n\treturn x.address']"
100,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the distinct elements of a list.', 'Compute the distinct elements of my_numbers and store as unique_list.', 'Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.']","[{'A': [1, 3, 2, 2]}, {'A': [1000, 1000, 1000]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, 2, 2, 1]}, {'A': [0, 3, 1, 3, 2, 2, -0.2, 0.2]}]","[2, 1000, 0.2, 2, 2]",128.0,array,Second largest,Print out the second largest element in an array.,101,def second_largest(A):,"['assert second_largest([1, 3, 2, 2]) == 2', 'assert second_largest([1000, 1000, 1000]) == 1000', 'assert second_largest([0, 0.2, 0.4, -0.2]) == 0.2', 'assert second_largest([3, 3, 3, 2, 2, 1]) == 2', 'assert second_largest([0, 3, 1, 3, 2, 2, -0.2, 0.2]) == 2']","['def second_largest(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the largest number to a variable named ""largest"".\n\tlargest = my_numbers[0]\n\t#Assign the second largest number to a variable named ""second_largest"".\n\tsecond_largest = my_numbers[0]\n\t#Assign the third largest number to a variable named ""third_largest"".\n\tthird_largest = my_numbers[0]\n\t#Assign the fourth largest number to a variable named ""fourth_largest"".\n\tfourth_largest = my_numbers[0]\n\t#Assign the fifth largest number to', 'def second_largest(A):\n\t#Implement a function that returns the distinct elements of a list.\n\t#The function should return the second largest element in the list.\n\t#If there are multiple second largest elements, return the first one.\n\t#If there are no second largest elements, return None.\n\t#The list will contain at least one element.\n\t#The list will contain no duplicate elements.\n\t#The list will contain no elements with a negative value.\n\t#The list will contain no elements with a value of zero.\n\t#The list will contain no elements with a value greater than 1000.\n\t#The list will contain no elements with a', 'def second_largest(A):\n\t#Compute the distinct elements of my_numbers and store as unique_list.\n\tunique_list = []\n\tfor i in A:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\t#Sort the unique_list in descending order.\n\tunique_list.sort(reverse=True)\n\t#Return the second largest element.', 'def second_largest(A):\n\t#Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.\n\t#If the second largest exists, print out the second largest element.\n\t#If the second largest does not exist, print out the maximum.\n\tunique_list = []\n\tfor i in A:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\tif len(unique_list) == 0:\n\telse:']"
101,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Implement a function that returns the prefix sum of a list as an array.', 'Compute the prefix sum of my_numbers and store as prefix_sum_list.', 'Print out the largest element in prefix_sum_list. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[8, 3, 0.6, 10, 4.8]",128.0,array,Largest prefix sum,Return the largest prefix sum in an array.,102,def largest_prefix_sum(A):,"['assert largest_prefix_sum([1, 3, 2, 2]) == 8', 'assert largest_prefix_sum([3, -3, -3]) == 3', 'assert largest_prefix_sum([0, 0.2, 0.4, -0.2]) == 0.6', 'assert largest_prefix_sum([3, 3, 3, -2, 2, 1]) == 10', 'assert largest_prefix_sum([-0.2, 5, -0.2]) == 4.8']","['def largest_prefix_sum(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the variable ""max_sum"" to a variable named ""max_sum"".\n\tmax_sum = 0\n\t#Assign the variable ""max_prefix"" to a variable named ""max_prefix"".\n\tmax_prefix = 0\n\t#Assign the variable ""max_prefix_sum"" to a variable named ""max_prefix_sum"".\n\tmax_prefix_sum = 0\n\t#Assign the variable ""max_prefix_sum_index"" to a variable named ""max_prefix_sum_index"".\n\tmax', 'def largest_prefix_sum(A):\n\t#Implement a function that returns the prefix sum of a list as an array.\n\t#For example, given the list [1, 2, 3, 4, 5], the function should return [1, 3, 6, 10, 15].\n\t#Hint: Use a prefix sum array.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.\n\t#Hint: Use a stack.', 'def largest_prefix_sum(A):\n\t#Compute the prefix sum of my_numbers and store as prefix_sum_list.\n\tprefix_sum_list = []\n\tfor i in range(len(A)):\n\t\tprefix_sum_list.append(A[i] + prefix_sum(A[:i]))\n\t#Find the largest prefix sum.', 'def largest_prefix_sum(A):\n\t#Print out the largest element in prefix_sum_list. \n\t#Initialize prefix_sum_list to 0.\n\tprefix_sum_list = [0] * len(A)\n\t#Initialize largest_prefix_sum to 0.\n\tlargest_prefix_sum = 0\n\t#Initialize largest_prefix_sum_index to 0.\n\tlargest_prefix_sum_index = 0\n\t#Iterate through the list.\n\tfor i in range(len(A)):\n\t\t#If the current element is 0, then set prefix_sum_list[i] to 0.\n\t\tif A[']"
102,"['Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".', 'Count the distances from each element in my_number to 0. .', 'Find the closest number to 0 in my_number and store as closest_number.', 'Print out the distance from closest_number to 0. ']","[{'A': [1, 3, 2, 2]}, {'A': [3, -3, -3]}, {'A': [0, 0.2, 0.4, -0.2]}, {'A': [3, 3, 3, -2, 2, 1]}, {'A': [-0.2, 5, -0.2]}]","[1, 3, 0, 1, 0.2]",128.0,array,Closest element to zero,Find the element which is the cloest to 0 and print the distance.,103,def closest_element_to_zero(A):,"['assert closest_element_to_zero([1, 3, 2, 2]) == 1', 'assert closest_element_to_zero([3, -3, -3]) == 3', 'assert closest_element_to_zero([0, 0.2, 0.4, -0.2]) == 0', 'assert closest_element_to_zero([3, 3, 3, -2, 2, 1]) == 1', 'assert closest_element_to_zero([-0.2, 5, -0.2]) == 0.2']","['def closest_element_to_zero(A):\n\t#Assign the list of numbers ""{A}"" to a variable named ""my_numbers"".\n\tmy_numbers = A\n\t#Assign the variable ""min_diff"" to a variable named ""min_diff"".\n\tmin_diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'def closest_element_to_zero(A):\n\t#Count the distances from each element in my_number to 0...\n\tdistances = [abs(A[i] - 0) for i in range(len(A))]\n\t#Return the index of the element with the smallest distance', 'def closest_element_to_zero(A):\n\t#Find the closest number to 0 in my_number and store as closest_number.\n\tclosest_number = 0\n\tfor i in range(len(A)):\n\t\tif A[i] == 0:\n\t\t\tclosest_number = i\n\t\t\tbreak', 'def closest_element_to_zero(A):\n\t#Print out the distance from closest_number to 0. 0 is the closest number.\n\t#The distance from 0 to 1 is 1.\n\t#The distance from 0 to 2 is 2.\n\t#The distance from 0 to 3 is 3.\n\t#The distance from 0 to 4 is 4.\n\t#The distance from 0 to 5 is 5.\n\t#The distance from 0 to 6 is 6.\n\t#The distance from 0 to 7 is 7.\n\t#The distance from 0 to 8 is 8.']"
103,"['Assign the string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string only contains unique characters.', 'Find the longest substring of my_string that contains only unique characters and store as result_substring.', 'Print out the length of result_substring.']","[{'A': 'acc'}, {'A': 'accccccccccccccccccccc'}, {'A': 'abcdef'}, {'A': 'acdeffce'}, {'A': 'aaaaaaaaaaaaa'}]","[2, 2, 6, 5, 1]",128.0,string,Consecutive unique char,Find the max length contiguous subarray with unique characters.,104,def consecutive_unique_char(A):,"[""assert consecutive_unique_char('acc') == 2"", ""assert consecutive_unique_char('accccccccccccccccccccc') == 2"", ""assert consecutive_unique_char('abcdef') == 6"", ""assert consecutive_unique_char('acdeffce') == 5"", ""assert consecutive_unique_char('aaaaaaaaaaaaa') == 1""]","['def consecutive_unique_char(A):\n\t#Assign the string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\t#Assign the length of ""my_string"" to a variable named ""length"".\n\tlength = len(my_string)\n\t#Assign the variable ""count"" to a variable named ""count"".\n\tcount = 0\n\t#Assign the variable ""unique_char"" to a variable named ""unique_char"".\n\tunique_char = """"\n\t#Assign the variable ""unique_char_count"" to a variable named ""unique_char_count"".\n\tunique_char_count = 0\n\t#Assign the variable ""unique_', 'def consecutive_unique_char(A):\n\t#Implement a function that checks whether a string only contains unique characters.\n\t#A string is considered unique if it contains no repeating characters.\n\t#For example, the string ""abc"" is unique because it contains no repeating characters.\n\t#The string ""aab"" is not unique because it contains two repeating characters: ""a"" and ""a"".\n\t#The string ""aaa"" is not unique because it contains three repeating characters: ""a"", ""a"", and ""a"".\n\t#Write a function that takes a string as input and returns True if the string only contains unique characters, and False otherwise.\n\t#Note: The string will only', 'def consecutive_unique_char(A):\n\t#Find the longest substring of my_string that contains only unique characters and store as result_substring.\n\tresult_substring = """"\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tif A[i] == A[j]:\n\t\t\t\tresult_substring = result_substring + A[j]', 'def consecutive_unique_char(A):\n\t#Print out the length of result_substring.\n\tresult_substring = """"\n\tfor i in range(len(A)):\n\t\tif A[i]!= A[i-1]:\n\t\t\tresult_substring += A[i]\n\treturn result_substring']"
104,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Find the repeated characters in the my_string.', 'Count the frequency of these repeated characters.', 'Print out the length of most frequent character.']","[{'A': 'abadb'}, {'A': 'aaaaaaaa'}, {'A': 'caaaaaaaaaaaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[2, 8, 12, 5, 0]",128.0,string,Highest frequency char,Obtain the frequency of the most frequent character.,105,def highest_frequency_char(A):,"[""assert highest_frequency_char('abadb') == 2"", ""assert highest_frequency_char('aaaaaaaa') == 8"", ""assert highest_frequency_char('caaaaaaaaaaaa') == 12"", ""assert highest_frequency_char('cccccaaaaa') == 5"", ""assert highest_frequency_char('abcde') == 0""]","['def highest_frequency_char(A):\n\t#Assign a string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\t#Assign a variable named ""my_string_length"" to a variable named ""my_string_length"".\n\tmy_string_length = len(my_string)\n\t#Assign a variable named ""my_string_char"" to a variable named ""my_string_char"".\n\tmy_string_char = """"\n\t#Assign a variable named ""my_string_char_count"" to a variable named ""my_string_char_count"".\n\tmy_string_char_count = 0\n\t#Assign a variable named', 'def highest_frequency_char(A):\n\t#Find the repeated characters in the my_string.\n\t#If there are more than one, return the first one.\n\t#If there is only one, return it.\n\t#If there are no repeated characters, return the empty string.\n\t#If there are no characters, return the empty string.\n\t#If there are no repeated characters, return the empty string.\n\t#If there are no characters, return the empty string.\n\t#If there are no repeated characters, return the empty string.\n\t#If there are no characters, return the empty string.\n\t#If there are no repeated characters, return the empty string', 'def highest_frequency_char(A):\n\t#Count the frequency of these repeated characters.\n\t#Return the character with the highest frequency.\n\t#If there are multiple characters with the same frequency, return the first one.\n\t#If there are no characters with the same frequency, return an empty string.\n\t#If there are no characters, return an empty string.\n\t#If there are no characters, return an empty string.\n\t#If there are no characters, return an empty string.\n\t#If there are no characters, return an empty string.\n\t#If there are no characters, return an empty string.\n\t#If there are no characters, return an', 'def highest_frequency_char(A):\n\t#Print out the length of most frequent character.\n\t#A is a string of characters.\n\t#Return the length of the most frequent character.\n\t#If there is no character with the highest frequency, return -1.\n\t#If there are multiple characters with the highest frequency, return the length of the longest one.\n\t#If there are multiple characters with the same frequency, return the length of the longest one.\n\t#If there are multiple characters with the same frequency, return the length of the longest one.\n\t#If there are multiple characters with the same frequency, return the length of the longest one.\n\t#If there']"
105,"['Assign a string ""{A}"" to a variable named ""my_string"".', 'Implement a function that checks whether a string is a palindrome.', 'Find all substrings of my_string which is a palindrome and store as a list.', 'Print out the length of longest palindrome in the above list.']","[{'A': 'a'}, {'A': 'abcba'}, {'A': 'caaa'}, {'A': 'cccccaaaaa'}, {'A': 'abcde'}]","[1, 5, 3, 5, 1]",128.0,string,Longest palindrome,Find the length of longest palindrome substring.,106,def longest_palindrome(A):,"[""assert longest_palindrome('a') == 1"", ""assert longest_palindrome('abcba') == 5"", ""assert longest_palindrome('caaa') == 3"", ""assert longest_palindrome('cccccaaaaa') == 5"", ""assert longest_palindrome('abcde') == 1""]","['def longest_palindrome(A):\n\t#Assign a string ""{A}"" to a variable named ""my_string"".\n\tmy_string = A\n\t#Assign a variable named ""longest_palindrome"" to a variable named ""longest_palindrome_length""\n\tlongest_palindrome_length = 0\n\t#Assign a variable named ""longest_palindrome_start"" to a variable named ""longest_palindrome_end""\n\tlongest_palindrome_start = 0\n\tlongest_palindrome_end = 0\n\t#Assign a variable named ""longest_palindrome_middle"" to a variable named ""longest_palindrome_middle_index""\n\tlongest_palindrome_', 'def longest_palindrome(A):\n\t#Implement a function that checks whether a string is a palindrome.\n\t#A string is a palindrome if it reads the same backward as forward.\n\t#For example, the palindrome ""racecar"" reads ""racecar"" backward.\n\t#Write your code here.\n\t#A string is a palindrome if it reads the same backward as forward.\n\t#For example, the palindrome ""racecar"" reads ""racecar"" backward.\n\t#Write your code here.\n\t#A string is a palindrome if it reads the same backward as forward.\n\t#For example, the palindrome ""racecar"" reads ""racecar""', 'def longest_palindrome(A):\n\t#Find all substrings of my_string which is a palindrome and store as a list.\n\t#If the list is empty, return the string itself.\n\t#If the list is not empty, find the longest palindrome in the list.\n\t#If the list is empty, return the empty string.\n\t#If the list is not empty, find the longest palindrome in the list.\n\t#If the list is empty, return the empty string.\n\t#If the list is not empty, find the longest palindrome in the list.\n\t#If the list is empty, return the empty string.\n\t#If the list is not empty, find the longest palindrome', 'def longest_palindrome(A):\n\t#Print out the length of longest palindrome in the above list.\n\t#If there is no palindrome, return -1.\n\t#If there is a palindrome, return the length of the longest palindrome.\n\t#If there are multiple palindromes, return the length of the longest palindrome.\n\t#If there are multiple palindromes, return the length of the longest palindrome.\n\t#If there are multiple palindromes, return the length of the longest palindrome.\n\t#If there are multiple palindromes, return the length of the longest palindrome.\n\t#If there are multiple palindromes']"
106,"['Assign an integer ""{A}"" to a variable named ""my_integer"".', 'Implement a function that checks whether an integer is a prime number.', 'Find all prime numbers that are less than my_integer and store as prime_result.', 'Print out the length of prime_result.']","[{'A': 10}, {'A': 0}, {'A': 1}, {'A': 100}, {'A': 17}]","[4, 0, 0, 25, 6]",128.0,algorithm,Count primes,Calcuate prime numbers in a range.,107,def count_primes(A):,"['assert count_primes(10) == 4', 'assert count_primes(0) == 0', 'assert count_primes(1) == 0', 'assert count_primes(100) == 25', 'assert count_primes(17) == 6']","['def count_primes(A):\n\t#Assign an integer ""{A}"" to a variable named ""my_integer"".\n\tmy_integer = A\n\t#Assign an integer ""{B}"" to a variable named ""my_prime"".\n\tmy_prime = 0\n\t#Assign an integer ""{C}"" to a variable named ""my_prime_count"".\n\tmy_prime_count = 0\n\t#Assign an integer ""{D}"" to a variable named ""my_prime_list"".\n\tmy_prime_list = []\n\t#Assign an integer ""{E}"" to a variable named ""my_prime_list_count"".\n\tmy_prime_list_count = 0', 'def count_primes(A):\n\t#Implement a function that checks whether an integer is a prime number.\n\t#A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\t#For example, 6 is a prime number because 6 = 2 + 3 + 5 + 7 = 11.\n\t#Write a function that returns the number of prime numbers in an array.\n\t#For example, count_primes([2, 3, 5, 7, 11]) should return 4 because 2, 3, 5, and 7 are prime numbers.\n\t#Write a', 'def count_primes(A):\n\t#Find all prime numbers that are less than my_integer and store as prime_result.\n\tprime_result = []\n\tfor i in range(2, A):\n\t\tif is_prime(i):\n\t\t\tprime_result.append(i)', 'def count_primes(A):\n\t#Print out the length of prime_result.\n\tprime_result = []\n\tfor i in range(len(A)):\n\t\tif A[i] == 1:\n\t\t\tprime_result.append(i)\n\t#Print out the prime_result.\n\tfor i in range(len(prime_result)):']"
107,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Assign a positive integer ""{K}"" to a variable named ""k"".', 'Implement a function that rotates one array to the right by 1 step.', 'Rotate my_array k steps and store as rotated_result.', 'Print out rotated_result.']","[{'A': [1, 2, 3, 4, 5], 'K': 3}, {'A': [-1, 30, 50, 3], 'K': 2}, {'A': [2, 3, 5, -30], 'K': 1}, {'A': [1, 2, 0, 4], 'K': 0}, {'A': [2, 3, 4], 'K': 8}]","[[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]]",128.0,algorithm,Rotate array,Rotate an array to the right k steps.,108,"def rotate_array(A,K):","['assert rotate_array([1, 2, 3, 4, 5],3) == [3, 4, 5, 1, 2]', 'assert rotate_array([-1, 30, 50, 3],2) == [50, 3, -1, 30]', 'assert rotate_array([2, 3, 5, -30],1) == [-30, 2, 3, 5]', 'assert rotate_array([1, 2, 0, 4],0) == [1, 2, 0, 4]', 'assert rotate_array([2, 3, 4],8) == [3, 4, 2]']","['def rotate_array(A,K):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\t#Assign an integer ""{K}"" to a variable named ""n"".\n\tn = K\n\t#Assign an integer ""{i}"" to a variable named ""j"".\n\ti = 0\n\t#Assign an integer ""{j}"" to a variable named ""k"".\n\tj = 0\n\t#Assign an integer ""{m}"" to a variable named ""m"".\n\tm = len(my_array)\n\t#Assign an integer ""{n}"" to a variable named ""n"".\n\tn = len(my_array)\n\t#Assign', 'def rotate_array(A,K):\n\t#Assign a positive integer ""{K}"" to a variable named ""k"".\n\tk = K\n\t#Assign a new array named ""B"" to a variable named ""B"".\n\tB = []\n\t#Assign a new array named ""C"" to a variable named ""C"".\n\tC = []\n\t#Assign a new array named ""D"" to a variable named ""D"".\n\tD = []\n\t#Assign a new array named ""E"" to a variable named ""E"".\n\tE = []\n\t#Assign a new array named ""F"" to a variable named ""F"".\n\tF = []\n\t#Assign a new array named', 'def rotate_array(A,K):\n\t#Implement a function that rotates one array to the right by 1 step.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.\n\t#The rotation is K steps, where K is non-negative.', 'def rotate_array(A,K):\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.\n\t#Rotate my_array k steps and store as rotated_result.', 'def rotate_array(A,K):\n\t#Print out rotated_result.\n\t#Your code here\n\tn = len(A)\n\trotated_result = []\n\tfor i in range(n):\n\t\trotated_result.append(A[n-1-i])\n\treturn rotated_result']"
108,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Compute the sum of my_array and store as my_sum.', 'Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.', 'Print out the function output when the above array is my_array.']","[{'A': [1, 2, 3, 4, 5]}, {'A': [1, 5, 11, 5]}, {'A': [1, 2, 3, 5]}, {'A': [1, 2, 0, 4]}, {'A': [2, 3, 4, 3]}]","['False', 'True', 'False', 'False', 'True']",128.0,algorithm,Partition equal sets,Check whether one array can be divided into two subsets which have equal sums.,109,def partition_equal_sets(A):,"['assert partition_equal_sets([1, 2, 3, 4, 5]) == False', 'assert partition_equal_sets([1, 5, 11, 5]) == True', 'assert partition_equal_sets([1, 2, 3, 5]) == False', 'assert partition_equal_sets([1, 2, 0, 4]) == False', 'assert partition_equal_sets([2, 3, 4, 3]) == True']","['def partition_equal_sets(A):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = []\n\t#Assign an array ""{B}"" to a variable named ""my_array"".\n\tmy_array = []\n\t#Assign an array ""{C}"" to a variable named ""my_array"".\n\tmy_array = []\n\t#Assign an array ""{D}"" to a variable named ""my_array"".\n\tmy_array = []\n\t#Assign an array ""{E}"" to a variable named ""my_array"".\n\tmy_array = []\n\t#Assign an array ""{F}"" to a variable named ""my_array"".\n\tmy', 'def partition_equal_sets(A):\n\t#Compute the sum of my_array and store as my_sum.\n\tmy_sum = sum(A)\n\t#Create a list to store the partitions.\n\tpartitions = []\n\t#Create a list to store the indices of the elements in the partitions.\n\tpartition_indices = []\n\t#Create a list to store the elements in the partitions.\n\tpartition_elements = []\n\t#Create a list to store the indices of the elements in the partitions.\n\tpartition_indices_elements = []\n\t#Create a list to store the elements in the partitions.\n\tpartition_elements_elements = []\n\t#Create a list to store', 'def partition_equal_sets(A):\n\t#Implement a function that checks whether one subset of an array ""{A}"" is equal to my_sum/2.\n\t#If it is, return the indices of the two subsets.\n\t#If it is not, return None.\n\t#For example, if my_sum is 10, and A is [1, 2, 3, 4, 5, 6, 7, 8, 9], then the function should return [0, 2].\n\t#If my_sum is 15, and A is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,', 'def partition_equal_sets(A):\n\t#Print out the function output when the above array is my_array.\n\t#The function should return a list of lists.\n\t#The inner list should contain the elements of the original array.\n\t#The outer list should contain the elements of the original array.\n\t#The inner list should contain the elements of the original array.\n\t#The outer list should contain the elements of the original array.\n\t#The inner list should contain the elements of the original array.\n\t#The outer list should contain the elements of the original array.\n\t#The inner list should contain the elements of the original array.\n\t#The outer list should contain the elements of']"
109,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Compute the square root of my_number and store as root_number.', 'Implement a function that only returns the integer part of a float number.', 'Print out the integer part of root_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 8}, {'A': 226}]","[1, 2, 10, 2, 15]",128.0,math,Square root integer,Compute the integer part of square root.,110,def square_root_integer(A):,"['assert square_root_integer(2) == 1', 'assert square_root_integer(5) == 2', 'assert square_root_integer(101) == 10', 'assert square_root_integer(8) == 2', 'assert square_root_integer(226) == 15']","['def square_root_integer(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\t#Assign a variable named ""square_root"" to the square root of the integer ""{my_number}"".\n\tsquare_root = math.sqrt(my_number)\n\t#Return the square root of the integer ""{my_number}"".', 'def square_root_integer(A):\n\t#Compute the square root of my_number and store as root_number.\n\troot_number = math.sqrt(A)', 'def square_root_integer(A):\n\t#Implement a function that only returns the integer part of a float number.\n\t#If the float number is not an integer, then return the float number itself.\n\t#If the float number is an integer, then return the integer part of the float number.\n\t#For example, square_root_integer(1.5) should return 1.\n\t#square_root_integer(1.25) should return 1.\n\t#square_root_integer(1.75) should return 2.\n\t#square_root_integer(2.25) should return 2.\n\t#square_root_integer(2', 'def square_root_integer(A):\n\t#Print out the integer part of root_number.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_number is the square root of A.\n\t#The integer part of root_']"
110,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Plus my_number by 1 and store as plus_number.', 'Implement a function that only returns the digits of an integer as a list.', 'Print out the digits of plus_number.']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 2345}, {'A': 229}]","[[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]]",128.0,math,Plus 1,Return the digits after an interger is plused by 1.,111,def plus_1(A):,"['assert plus_1(2) == [3]', 'assert plus_1(5) == [6]', 'assert plus_1(101) == [1, 0, 2]', 'assert plus_1(2345) == [2, 3, 4, 6]', 'assert plus_1(229) == [2, 3, 0]']","['def plus_1(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\t#Assign a non-negative integer ""{my_number}"" to a variable named ""my_number_plus_1"".\n\tmy_number_plus_1 = my_number + 1\n\t#Return the value of the variable named ""my_number_plus_1"".', 'def plus_1(A):\n\t#Plus my_number by 1 and store as plus_number.\n\tplus_number = A + 1', 'def plus_1(A):\n\t#Implement a function that only returns the digits of an integer as a list.\n\t#For example, if the integer is 12345, the function should return [1, 2, 3, 4, 5].\n\t#If the integer is 1234, the function should return [1, 2, 3, 4].\n\t#If the integer is 123, the function should return [1, 2, 3].\n\t#If the integer is 12, the function should return [1, 2].\n\t#If the integer is 1, the function should return [1].', 'def plus_1(A):\n\t#Print out the digits of plus_number.\n\t#A is a list of digits.\n\t#Return the sum of the digits of plus_number.\n\t#For example, if plus_number is 12345, then the sum is 12346.\n\t#If plus_number is 1234, then the sum is 1235.\n\t#If plus_number is 123, then the sum is 124.\n\t#If plus_number is 12, then the sum is 13.\n\t#If plus_number is']"
111,"['Assign a non-negative integer ""{A}"" to a variable named ""my_number"".', 'Implement a function that computes the square sum of two integers.', 'Implement a function that checks one number is the sum of two square numbers.', 'Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".']","[{'A': 2}, {'A': 5}, {'A': 101}, {'A': 3}, {'A': 7}]","['True', 'True', 'True', 'False', 'False']",128.0,math,Check square sum,Check whether one integer is a sum of  two square numbers.,112,def check_square_sum(A):,"['assert check_square_sum(2) == True', 'assert check_square_sum(5) == True', 'assert check_square_sum(101) == True', 'assert check_square_sum(3) == False', 'assert check_square_sum(7) == False']","['def check_square_sum(A):\n\t#Assign a non-negative integer ""{A}"" to a variable named ""my_number"".\n\tmy_number = A\n\t#Check if the number is a square.\n\tif my_number**0.5 == int(my_number**0.5):\n\t\t#If it is, print the number.\n\telse:\n\t\t#If it is not, print ""Not a square.""', 'def check_square_sum(A):\n\t#Implement a function that computes the square sum of two integers.\n\t#The function should return the sum of the squares of the integers in the array A.\n\t#The function accepts an array of integers.\n\t#The function should return the sum of the squares of the integers in the array A.\n\t#The function accepts an array of integers.\n\t#The function should return the sum of the squares of the integers in the array A.\n\t#The function accepts an array of integers.\n\t#The function should return the sum of the squares of the integers in the array A.\n\t#The function accepts an array of integers.\n\t#The', 'def check_square_sum(A):\n\t#Implement a function that checks one number is the sum of two square numbers.\n\t#For example, check_square_sum(12) should return True, but check_square_sum(13) should return False.\n\t#Hint: Use the % operator to find the remainder of the division.\n\t#Hint: Use the sum function to find the sum of two numbers.\n\t#Hint: Use the square function to find the square of a number.\n\t#Hint: Use the divmod function to find the quotient and remainder of the division.\n\t#Hint: Use the operator * to multiply two numbers.\n\t#Hint: Use the operator + to', 'def check_square_sum(A):\n\t#Print out ""True"" if my_number is the sum of two square numbers. Otherwise, print ""False"".\n\t#The sum of two square numbers is the sum of the squares of the first two numbers.\n\t#The first two numbers are 1 and 4.\n\t#The sum of the squares of the first two numbers is 1 + 4 + 4 + 4.\n\t#The sum of the squares of the first two numbers is 1 + 4 + 9 + 4 + 4.\n\t#The sum of the squares of the first two numbers is 1 + 4 + 9 + 16 + 4 + 4.\n\t#The sum']"
112,"['Assign an array ""{A}"" to a variable named ""my_array"".', 'Implement a function that computes standard deviation of an array.', 'Calculate the standard deviation of my_array and store as result.', 'Print out ""True"" if result is less than 1. Otherwise, print ""False"".']","[{'A': [14, 8, 11, 10]}, {'A': [3, 3, 3, 4]}, {'A': [1, 1, 1, 1, 1, 101]}, {'A': [1, 2, 3, 4, 5, 6, 7]}, {'A': [1, 0, 1, 0]}]","['False', 'True', 'False', 'False', 'True']",128.0,data science,Comare std. dev.,Determine whether standard deviation is less than 1.,113,def comare_std._dev.(A):,"['assert comare_std._dev.([14, 8, 11, 10]) == False', 'assert comare_std._dev.([3, 3, 3, 4]) == True', 'assert comare_std._dev.([1, 1, 1, 1, 1, 101]) == False', 'assert comare_std._dev.([1, 2, 3, 4, 5, 6, 7]) == False', 'assert comare_std._dev.([1, 0, 1, 0]) == True']","['def comare_std._dev.(A):\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = [1,2,3,4,5,6,7,8,9,10]\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = [1,2,3,4,5,6,7,8,9,10]\n\t#Assign an array ""{A}"" to a variable named ""my_array"".\n\tmy_array = [1,2,3,4,5,6,7,8,9,10]\n\t#Assign an array ""{A', 'def comare_std._dev.(A):\n\t#Implement a function that computes standard deviation of an array.\n\t#The function should return the standard deviation of the array.\n\t#The input array will have a length of at least 1.\n\t#The standard deviation is computed by taking the square root of the sum of the squares of the elements in the array.\n\t#The standard deviation is computed for the entire array by dividing the sum of the squares by the number of elements in the array.\n\t#The standard deviation is computed for each element by dividing the square root of the sum of the squares by the number of elements in the array.\n\t#The standard deviation is computed for each element', 'def comare_std._dev.(A):\n\t#Calculate the standard deviation of my_array and store as result.\n\tresult = np.std(my_array)\n\t#Return the result.', 'def comare_std._dev.(A):\n\t#Print out ""True"" if result is less than 1. Otherwise, print ""False"".\n\tif (A < 1):\n\telse:']"
113,"['Assign the matrix ""{A}"" to a variable named ""my_matrix"".', 'Calculate the number of rows of my_matrix and store as row_number.', 'Calculate the number of columns of my_matrix and store as column_number.', 'Calculate the sum of row_number and column_number and print the result.']","[{'A': [[3, 2], [2, 3]]}, {'A': [[3, 2, 5], [2, 3, 5]]}, {'A': [[1]]}, {'A': [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {'A': [[5, 5, 5, 5, 5, 0]]}]","[4, 5, 2, 6, 7]",128.0,data science,Matrix size,Calculate the sum of row and column numbers.,114,def matrix_size(A):,"['assert matrix_size([[3, 2], [2, 3]]) == 4', 'assert matrix_size([[3, 2, 5], [2, 3, 5]]) == 5', 'assert matrix_size([[1]]) == 2', 'assert matrix_size([[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]) == 6', 'assert matrix_size([[5, 5, 5, 5, 5, 0]]) == 7']","['def matrix_size(A):\n\t#Assign the matrix ""{A}"" to a variable named ""my_matrix"".\n\tmy_matrix = A\n\t#Assign the size of the matrix ""{my_matrix}"" to a variable named ""size"".\n\tsize = len(my_matrix)\n\t#Return the size of the matrix ""{my_matrix}"".', 'def matrix_size(A):\n\t#Calculate the number of rows of my_matrix and store as row_number.\n\trow_number = len(A)\n\t#Calculate the number of columns of my_matrix and store as column_number.\n\tcolumn_number = len(A[0])', 'def matrix_size(A):\n\t#Calculate the number of columns of my_matrix and store as column_number.\n\tcolumn_number = len(A[0])', 'def matrix_size(A):\n\t#Calculate the sum of row_number and column_number and print the result.\n\trow_number = len(A)\n\tcolumn_number = len(A[0])']"
114,"['Assign the array ""{A}"" to a variable named ""my_array"".', 'Calculate the mean of my_array and store as mean_number.', 'Calculate the median of my_array and store as median_number.', 'Calculate the difference between mean_number and median_number and print the result.']","[{'A': [3, 2, 2, 3]}, {'A': [3, 2, 5, 2, 3, 5]}, {'A': [1]}, {'A': [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {'A': [5, 5, 5, 5, 5, 0]}]","[0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333]",128.0,data science,Diff mean and median,Calculate the difference between mean and median for an array.,115,def diff_mean_and_median(A):,"['assert diff_mean_and_median([3, 2, 2, 3]) == 0', 'assert diff_mean_and_median([3, 2, 5, 2, 3, 5]) == 0.3333333333333335', 'assert diff_mean_and_median([1]) == 0', 'assert diff_mean_and_median([30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]) == -9999.666666666668', 'assert diff_mean_and_median([5, 5, 5, 5, 5, 0]) == -0.833333333333333']","['def diff_mean_and_median(A):\n\t#Assign the array ""{A}"" to a variable named ""my_array"".\n\tmy_array = A\n\t#Assign the variable ""my_array"" to a variable named ""my_array_mean"".\n\tmy_array_mean = np.mean(my_array)\n\t#Assign the variable ""my_array"" to a variable named ""my_array_median"".\n\tmy_array_median = np.median(my_array)\n\t#Print the variable ""my_array_mean"" to the console.\n\t#Print the variable ""my_array_median"" to the console.', 'def diff_mean_and_median(A):\n\t#Calculate the mean of my_array and store as mean_number.\n\tmean_number = np.mean(A)\n\t#Calculate the median of my_array and store as median_number.\n\tmedian_number = np.median(A)\n\t#Return the mean and median of my_array.', 'def diff_mean_and_median(A):\n\t#Calculate the median of my_array and store as median_number.\n\tmedian_number = np.median(A)\n\t#Calculate the mean of my_array and store as mean_number.\n\tmean_number = np.mean(A)\n\t#Calculate the standard deviation of my_array and store as standard_deviation_number.\n\tstandard_deviation_number = np.std(A)\n\t#Calculate the variance of my_array and store as variance_number.\n\tvariance_number = np.var(A)\n\t#Calculate the skewness of my_array and store as skewness_number.\n\tskewness_', 'def diff_mean_and_median(A):\n\t#Calculate the difference between mean_number and median_number and print the result.\n\tmean_number = np.mean(A)\n\tmedian_number = np.median(A)']"
