,Unnamed: 0.1,Unnamed: 0,task_id,text,code,test_list,test_setup_code,challenge_test_list,instruction,generated_code,tests
0,0,499,510,Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]","['assert no_of_subsequences([1,2,3,4], 10) == 11'
 'assert no_of_subsequences([4,8,7,2], 50) == 9'
 'assert no_of_subsequences([5,6,7,8], 15) == 4']",,[],"def no_of_subsequences(arr, k):
	""""""Write a function to find the number of subsequences having product smaller than k for the given non negative array.""""""","['def no_of_subsequences(arr, k):\n\t""""""Write a function to find the number of subsequences having product smaller than k for the given non negative array.""""""\n\tn = len(arr)\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tdp[i][i] = 1\n\tfor i in range(n):\n\t\tfor j in range(i):\n\t\t\tif arr[i] * arr[j] < k:\n\t\t\t\tdp[i][j] = dp[i][j - 1]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j -']","['assert no_of_subsequences([1,2,3,4], 10) == 11', 'assert no_of_subsequences([4,8,7,2], 50) == 9', 'assert no_of_subsequences([5,6,7,8], 15) == 4']"
1,1,42,53,Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","['assert check_Equality(""abcda"") == ""Equal""'
 'assert check_Equality(""ab"") == ""Not Equal""'
 'assert check_Equality(""mad"") == ""Not Equal""']",,[],"def check_Equality(str):
	""""""Write a python function to check whether the first and last characters of a given string are equal or not.""""""","['def check_Equality(str):\n\t""""""Write a python function to check whether the first and last characters of a given string are equal or not.""""""\n\tif str[0] == str[-1]:\n\t\treturn True\n\telse:\n\t\treturn False']","['assert check_Equality(""abcda"") == ""Equal""', 'assert check_Equality(""ab"") == ""Not Equal""', 'assert check_Equality(""mad"") == ""Not Equal""']"
2,2,270,281,Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","['assert all_unique([1,2,3]) == True'
 'assert all_unique([1,2,1,2]) == False'
 'assert all_unique([1,2,3,4,5]) == True']",,[],"def all_unique(test_list):
	""""""Write a python function to check if the elements of a given list are unique or not.""""""","['def all_unique(test_list):\n\t""""""Write a python function to check if the elements of a given list are unique or not.""""""\n\treturn len(set(test_list)) == len(test_list)']","['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']"
3,3,292,303,Write a python function to check whether the count of inversion of two types are same or not.,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","['assert solve([1,0,2],3) == True' 'assert solve([1,2,0],3) == False'
 'assert solve([1,2,1],3) == True']",,[],"def solve(a,n):
	""""""Write a python function to check whether the count of inversion of two types are same or not.""""""","['def solve(a,n):\n\t""""""Write a python function to check whether the count of inversion of two types are same or not.""""""\n\tif n==1:\n\t\treturn True\n\tif n==2:\n\t\treturn a==1\n\tif n%2==0:\n\t\treturn solve(a+1,n-1) or solve(a,n-1)\n\telse:\n\t\treturn solve(a,n-1) or solve(a+1,n-1)']","['assert solve([1,0,2],3) == True', 'assert solve([1,2,0],3) == False', 'assert solve([1,2,1],3) == True']"
4,4,493,504,Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum","['assert sum_Of_Series(5) == 225' 'assert sum_Of_Series(2) == 9'
 'assert sum_Of_Series(3) == 36']",,[],"def sum_Of_Series(n):
	""""""Write a python function to find the cube sum of first n natural numbers.""""""","['def sum_Of_Series(n):\n\t""""""Write a python function to find the cube sum of first n natural numbers.""""""\n\treturn sum(range(1, n+1))**3']","['assert sum_Of_Series(5) == 225', 'assert sum_Of_Series(2) == 9', 'assert sum_Of_Series(3) == 36']"
5,5,273,284,Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False'
 'assert check_element([1,2,3,4],7)==False'
 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']",,[],"def check_element(list,element):
	""""""Write a function to check whether all items of a list are equal to a given string.""""""","['def check_element(list,element):\n\t""""""Write a function to check whether all items of a list are equal to a given string.""""""\n\tfor i in list:\n\t\tif i!= element:\n\t\t\treturn False\n\treturn True']","['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']"
6,6,64,75,Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'""
 ""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'""
 ""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'""]",,[],"def find_tuples(test_list, K):
	""""""Write a function to find tuples which have all elements divisible by k from the given list of tuples.""""""","['def find_tuples(test_list, K):\n\t""""""Write a function to find tuples which have all elements divisible by k from the given list of tuples.""""""\n\treturn [x for x in test_list if all(x[i] % K == 0 for i in range(len(x)))]']","[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"", ""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'"", ""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]""]"
7,7,321,332,Write a function to count character frequency of a given string.,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","[""assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}""
 ""assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}""
 ""assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}""]",,[],"def char_frequency(str1):
	""""""Write a function to count character frequency of a given string.""""""","['def char_frequency(str1):\n\t""""""Write a function to count character frequency of a given string.""""""\n\tchar_dict = {}\n\tfor char in str1:\n\t\tif char in char_dict:\n\t\t\tchar_dict[char] += 1\n\t\telse:\n\t\t\tchar_dict[char] = 1\n\treturn char_dict']","[""assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}"", ""assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}"", ""assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}""]"
8,8,416,427,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","['assert change_date_format(""2026-01-02"") == \'02-01-2026\''
 'assert change_date_format(""2020-11-13"") == \'13-11-2020\''
 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']",,[],"def change_date_format(dt):
	""""""Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.""""""","['def change_date_format(dt):\n\t""""""Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.""""""\n\treturn dt.strftime(""%d-%m-%Y"")']","['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021']"
9,9,46,57,Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","['assert find_Max_Num([1,2,3],3) == 321'
 'assert find_Max_Num([4,5,6,1],4) == 6541'
 'assert find_Max_Num([1,2,3,9],4) == 9321']",,[],"def find_Max_Num(arr,n):
	""""""Write a python function to find the largest number that can be formed with the given digits.""""""","['def find_Max_Num(arr,n):\n\t""""""Write a python function to find the largest number that can be formed with the given digits.""""""\n\tmax_num = 0\n\tfor i in range(n):\n\t\tmax_num = max(max_num,arr[i])\n\treturn max_num']","['assert find_Max_Num([1,2,3],3) == 321', 'assert find_Max_Num([4,5,6,1],4) == 6541', 'assert find_Max_Num([1,2,3,9],4) == 9321']"
10,10,29,40,Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})'
 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})'
 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']",,[],"def freq_element(nums):
	""""""Write a function to find frequency of the elements in a given list of lists using collections module.""""""","['def freq_element(nums):\n\t""""""Write a function to find frequency of the elements in a given list of lists using collections module.""""""\n\tfreq = {}\n\tfor i in nums:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\telse:\n\t\t\tfreq[i] = 1\n\treturn freq']","['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']"
11,11,459,470,Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)'
 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)'
 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']",,[],"def add_pairwise(test_tup):
	""""""Write a function to find the pairwise addition of the elements of the given tuples.""""""","['def add_pairwise(test_tup):\n\t""""""Write a function to find the pairwise addition of the elements of the given tuples.""""""\n\treturn tuple(map(lambda x, y: x + y, test_tup[0], test_tup[1]))']","['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']"
12,12,260,271,Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","['assert even_Power_Sum(2) == 1056' 'assert even_Power_Sum(3) == 8832'
 'assert even_Power_Sum(1) == 32']",,[],"def even_Power_Sum(n):
	""""""Write a python function to find the sum of fifth power of first n even natural numbers.""""""","['def even_Power_Sum(n):\n\t""""""Write a python function to find the sum of fifth power of first n even natural numbers.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 == 0:\n\t\t\tsum += i**5\n\treturn sum']","['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']"
13,13,69,80,Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","['assert tetrahedral_number(5) == 35.0'
 'assert tetrahedral_number(6) == 56.0'
 'assert tetrahedral_number(7) == 84.0']",,[],"def tetrahedral_number(n):
	""""""Write a function to find the nth tetrahedral number.""""""","['def tetrahedral_number(n):\n\t""""""Write a function to find the nth tetrahedral number.""""""\n\treturn 12*n + 1']","['assert tetrahedral_number(5) == 35.0', 'assert tetrahedral_number(6) == 56.0', 'assert tetrahedral_number(7) == 84.0']"
14,14,181,192,Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","[""assert check_String('thishasboth29') == True""
 ""assert check_String('python') == False""
 ""assert check_String ('string') == False""]",,[],"def check_String(str):
	""""""Write a python function to check whether a string has atleast one letter and one number.""""""","['def check_String(str):\n\t""""""Write a python function to check whether a string has atleast one letter and one number.""""""\n\tif len(str) < 1:\n\t\treturn False\n\tif str.isalpha() == False:\n\t\treturn False\n\tif str.isdigit() == False:\n\t\treturn False\n\treturn True']","[""assert check_String('thishasboth29') == True"", ""assert check_String('python') == False"", ""assert check_String ('string') == False""]"
15,15,371,382,Write a function to find the number of rotations in a circularly sorted array.,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","['assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3'
 'assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3'
 'assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0']",,[],"def find_rotation_count(A):
	""""""Write a function to find the number of rotations in a circularly sorted array.""""""","['def find_rotation_count(A):\n\t""""""Write a function to find the number of rotations in a circularly sorted array.""""""\n\tn = len(A)\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\tif n == 3:\n\t\treturn 2\n\tif n == 4:\n\t\treturn 3\n\tif n == 5:\n\t\treturn 4\n\tif n == 6:\n\t\treturn 5\n\tif n == 7:\n\t\treturn 6\n\tif n == 8:\n\t\treturn 7\n\tif n == 9:\n\t\treturn 8\n\tif']","['assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3', 'assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3', 'assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0']"
16,16,498,509,Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","['assert average_Odd(9) == 5' 'assert average_Odd(5) == 3'
 'assert average_Odd(11) == 6']",,[],"def average_Odd(n):
	""""""Write a python function to find the average of odd numbers till a given odd number.""""""","['def average_Odd(n):\n\t""""""Write a python function to find the average of odd numbers till a given odd number.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 == 1:\n\t\t\tsum += i\n\treturn sum / 2']","['assert average_Odd(9) == 5', 'assert average_Odd(5) == 3', 'assert average_Odd(11) == 6']"
17,17,275,286,Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far","['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30'
 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59'
 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']",,[],"def max_sub_array_sum_repeated(a, n, k):
	""""""Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.""""""","['def max_sub_array_sum_repeated(a, n, k):\n\t""""""Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.""""""\n\tif n == 0:\n\t\treturn 0\n\tif k == 0:\n\t\treturn a[0]\n\tif k == 1:\n\t\treturn max(a[0], a[1])\n\tif k == 2:\n\t\treturn max(a[0], a[1], a[2])\n\tif k == 3:\n\t\treturn max(a[0], a[1], a[2], a[3])\n\tif k == 4:\n\t\treturn max(a[0], a[1], a[2],']","['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']"
18,18,477,488,Write a function to find the area of a pentagon.,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","['assert area_pentagon(5)==43.01193501472417'
 'assert area_pentagon(10)==172.0477400588967'
 'assert area_pentagon(15)==387.10741513251753']",,[],"def area_pentagon(a):
	""""""Write a function to find the area of a pentagon.""""""","['def area_pentagon(a):\n\t""""""Write a function to find the area of a pentagon.""""""\n\treturn a * (3/2)']","['assert area_pentagon(5)==43.01193501472417', 'assert area_pentagon(10)==172.0477400588967', 'assert area_pentagon(15)==387.10741513251753']"
19,19,470,481,Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True'
 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False'
 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True']",,[],"def is_subset_sum(set, n, sum):
	""""""Write a function to determine if there is a subset of the given set with sum equal to the given sum.""""""","['def is_subset_sum(set, n, sum):\n\t""""""Write a function to determine if there is a subset of the given set with sum equal to the given sum.""""""\n\tif len(set) == 0:\n\t\treturn False\n\tif sum == 0:\n\t\treturn True\n\tif sum < 0:\n\t\treturn False\n\tif sum == 0:\n\t\treturn True\n\tif sum > 0:\n\t\treturn is_subset_sum(set[1:], n, sum - set[0])']","['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True']"
20,20,481,492,Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","['assert binary_search([1,2,3,5,8], 6) == False'
 'assert binary_search([7, 8, 9, 10, 13], 10) == True'
 'assert binary_search([11, 13, 14, 19, 22, 36], 23) == False']",,[],"def binary_search(item_list,item):
	""""""Write a function to search an element in the given array by using binary search.""""""","['def binary_search(item_list,item):\n\t""""""Write a function to search an element in the given array by using binary search.""""""\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1']","['assert binary_search([1,2,3,5,8], 6) == False', 'assert binary_search([7, 8, 9, 10, 13], 10) == True', 'assert binary_search([11, 13, 14, 19, 22, 36], 23) == False']"
21,21,128,139,Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","['assert circle_circumference(10)==62.830000000000005'
 'assert circle_circumference(5)==31.415000000000003'
 'assert circle_circumference(4)==25.132']",,[],"def circle_circumference(r):
	""""""Write a function to find the circumference of a circle.""""""","['def circle_circumference(r):\n\t""""""Write a function to find the circumference of a circle.""""""\n\treturn 2 * math.pi * r']","['assert circle_circumference(10)==62.830000000000005', 'assert circle_circumference(5)==31.415000000000003', 'assert circle_circumference(4)==25.132']"
22,22,447,458,Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area","['assert rectangle_area(10,20)==200' 'assert rectangle_area(10,5)==50'
 'assert rectangle_area(4,2)==8']",,[],"def rectangle_area(l,b):
	""""""Write a function to find the area of a rectangle.""""""","['def rectangle_area(l,b):\n\t""""""Write a function to find the area of a rectangle.""""""\n\treturn l*b']","['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']"
23,23,496,507,Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ","[""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']""
 ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']""
 ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']""]",,[],"def remove_words(list1, removewords):
	""""""Write a function to remove specific words from a given list.""""""","['def remove_words(list1, removewords):\n\t""""""Write a function to remove specific words from a given list.""""""\n\tnewlist = []\n\tfor word in list1:\n\t\tif word not in removewords:\n\t\t\tnewlist.append(word)\n\treturn newlist']","[""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']"", ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']"", ""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']""]"
24,24,294,305,Write a function to match two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')'
 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')'
 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']",,[],"def start_withp(words):
	""""""Write a function to match two words from a list of words starting with letter 'p'.""""""","['def start_withp(words):\n\t""""""Write a function to match two words from a list of words starting with letter \'p\'.""""""\n\tfor word in words:\n\t\tif word.startswith(\'p\'):\n\t\t\treturn word\n\treturn None']","['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']"
25,25,405,416,Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]","['assert breakSum(12) == 13' 'assert breakSum(24) == 27'
 'assert breakSum(23) == 23']",,[],"def breakSum(n):
	""""""Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.""""""","['def breakSum(n):\n\t""""""Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.""""""\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 2\n\telse:\n\t\treturn max(breakSum(n-1), breakSum(n-2), breakSum(n-3)) + n']","['assert breakSum(12) == 13', 'assert breakSum(24) == 27', 'assert breakSum(23) == 23']"
26,26,268,279,Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ","['assert is_num_decagonal(3) == 27' 'assert is_num_decagonal(7) == 175'
 'assert is_num_decagonal(10) == 370']",,[],"def is_num_decagonal(n):
	""""""Write a function to find the nth decagonal number.""""""","['def is_num_decagonal(n):\n\t""""""Write a function to find the nth decagonal number.""""""\n\treturn n * (n + 1) // 2']","['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']"
27,27,372,383,Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","['assert even_bit_toggle_number(10) == 15'
 'assert even_bit_toggle_number(20) == 1'
 'assert even_bit_toggle_number(30) == 11']",,[],"def even_bit_toggle_number(n):
	""""""Write a python function to toggle all odd bits of a given number.""""""","['def even_bit_toggle_number(n):\n\t""""""Write a python function to toggle all odd bits of a given number.""""""\n\treturn n ^ (n >> 1)']","['assert even_bit_toggle_number(10) == 15', 'assert even_bit_toggle_number(20) == 1', 'assert even_bit_toggle_number(30) == 11']"
28,28,323,334,Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","['assert check_Validity(1,2,3) == False'
 'assert check_Validity(2,3,5) == False'
 'assert check_Validity(7,10,5) == True']",,[],"def check_Validity(a,b,c):
	""""""Write a python function to check whether the triangle is valid or not if sides are given.""""""","['def check_Validity(a,b,c):\n\t""""""Write a python function to check whether the triangle is valid or not if sides are given.""""""\n\tif a+b>c and a+c>b and b+c>a:\n\t\treturn True\n\telse:\n\t\treturn False']","['assert check_Validity(1,2,3) == False', 'assert check_Validity(2,3,5) == False', 'assert check_Validity(7,10,5) == True']"
29,29,281,292,Write a python function to find quotient of two numbers.,"def find(n,m):  
    q = n//m 
    return (q)","['assert find(10,3) == 3' 'assert find(4,2) == 2' 'assert find(20,5) == 4']",,[],"def find(n,m):
	""""""Write a python function to find quotient of two numbers.""""""","['def find(n,m):\n\t""""""Write a python function to find quotient of two numbers.""""""\n\tif n == 0:\n\t\treturn 0\n\tif m == 0:\n\t\treturn 1\n\tif n < m:\n\t\treturn find(n,m-1) + find(n-m,m)\n\telse:\n\t\treturn find(n-m,m) + find(n,m-1)']","['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']"
30,30,400,411,Write a function to convert the given snake case string to camel case string by using regex.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","[""assert snake_to_camel('android_tv') == 'AndroidTv'""
 ""assert snake_to_camel('google_pixel') == 'GooglePixel'""
 ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]",,[],"def snake_to_camel(word):
	""""""Write a function to convert the given snake case string to camel case string by using regex.""""""","['def snake_to_camel(word):\n\t""""""Write a function to convert the given snake case string to camel case string by using regex.""""""\n\treturn re.sub(r\'_([a-z])\', lambda m: m.group(1).upper(), word)']","[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch""]"
31,31,332,343,Write a function to calculate the number of digits and letters in a string.,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","['assert dig_let(""python"")==(6,0)' 'assert dig_let(""program"")==(7,0)'
 'assert dig_let(""python3.0"")==(6,2)']",,[],"def dig_let(s):
	""""""Write a function to calculate the number of digits and letters in a string.""""""","['def dig_let(s):\n\t""""""Write a function to calculate the number of digits and letters in a string.""""""\n\treturn len(s), len(set(s))']","['assert dig_let(""python"")==(6,0)', 'assert dig_let(""program"")==(7,0)', 'assert dig_let(""python3.0"")==(6,2)']"
32,32,90,101,Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","['assert kth_element([12,3,5,7,19], 5, 2) == 3'
 'assert kth_element([17,24,8,23], 4, 3) == 8'
 'assert kth_element([16,21,25,36,4], 5, 4) == 36']",,[],"def kth_element(arr, n, k):
	""""""Write a function to find the kth element in the given array.""""""","['def kth_element(arr, n, k):\n\t""""""Write a function to find the kth element in the given array.""""""\n\tif k < 0 or k >= n:\n\t\traise ValueError(\'k is out of range\')\n\tif k == 0:\n\t\treturn arr[0]\n\tif k == n - 1:\n\t\treturn arr[-1]\n\tleft = 0\n\tright = n - 1\n\twhile left < right:\n\t\tmid = (left + right) // 2\n\t\tif arr[mid] < arr[k]:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid\n\treturn arr[left]']","['assert kth_element([12,3,5,7,19], 5, 2) == 3', 'assert kth_element([17,24,8,23], 4, 3) == 8', 'assert kth_element([16,21,25,36,4], 5, 4) == 36']"
33,33,486,497,Write a function to find the surface area of a cone.,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","['assert surfacearea_cone(5,12)==282.7433388230814'
 'assert surfacearea_cone(10,15)==880.5179353159282'
 'assert surfacearea_cone(19,17)==2655.923961165254']",,[],"def surfacearea_cone(r,h):
	""""""Write a function to find the surface area of a cone.""""""","['def surfacearea_cone(r,h):\n\t""""""Write a function to find the surface area of a cone.""""""\n\treturn 2*np.pi*r*h']","['assert surfacearea_cone(5,12)==282.7433388230814', 'assert surfacearea_cone(10,15)==880.5179353159282', 'assert surfacearea_cone(19,17)==2655.923961165254']"
34,34,487,498,Write a python function to find gcd of two positive integers.,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd","['assert gcd(12, 17) == 1' 'assert gcd(4,6) == 2' 'assert gcd(2,9) == 1']",,[],"def gcd(x, y):
	""""""Write a python function to find gcd of two positive integers.""""""","['def gcd(x, y):\n\t""""""Write a python function to find gcd of two positive integers.""""""\n\tif x == 0:\n\t\treturn y\n\telse:\n\t\treturn gcd(y % x, x)']","['assert gcd(12, 17) == 1', 'assert gcd(4,6) == 2', 'assert gcd(2,9) == 1']"
35,35,119,130,Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)'
 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)'
 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']",,[],"def max_occurrences(nums):
	""""""Write a function to find the item with maximum frequency in a given list.""""""","['def max_occurrences(nums):\n\t""""""Write a function to find the item with maximum frequency in a given list.""""""\n\tmax_freq = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tif nums.count(item) > max_freq:\n\t\t\tmax_freq = nums.count(item)\n\t\t\tmax_item = item\n\treturn max_item']","['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']"
36,36,73,84,Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","['assert sequence(10) == 6' 'assert sequence(2) == 1'
 'assert sequence(3) == 2']",,[],"def sequence(n):
	""""""Write a function to find the n-th number in newman conway sequence.""""""","['def sequence(n):\n\t""""""Write a function to find the n-th number in newman conway sequence.""""""\n\treturn n*(n+1)/2']","['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']"
37,37,148,159,Write a function to print the season for the given month and day.,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","[""assert month_season('January',4)==('winter')""
 ""assert month_season('October',28)==('autumn')""
 ""assert month_season('June',6)==('spring')""]",,[],"def month_season(month,days):
	""""""Write a function to print the season for the given month and day.""""""","['def month_season(month,days):\n\t""""""Write a function to print the season for the given month and day.""""""\n\tif month == 1:\n\t\tif days == 31:\n\t\t\tprint(""Winter"")\n\t\telif days == 28:\n\t\t\tprint(""Spring"")\n\t\telif days == 31:\n\t\t\tprint(""Summer"")\n\t\telif days == 30:\n\t\t\tprint(""Autumn"")\n\t\telif days == 31:\n\t\t\tprint(""Winter"")\n\t\telif days == 30:\n\t\t\tprint(""Spring"")\n\t\telif days == 31:\n\t\t\tprint(""Summer"")\n\t\telif days == 31:']","[""assert month_season('January',4)==('winter')"", ""assert month_season('October',28)==('autumn')"", ""assert month_season('June',6)==('spring')""]"
38,38,456,467,Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","['assert decimal_to_Octal(10) == 12' 'assert decimal_to_Octal(2) == 2'
 'assert decimal_to_Octal(33) == 41']",,[],"def decimal_to_Octal(deciNum):
	""""""Write a python function to convert decimal number to octal number.""""""","['def decimal_to_Octal(deciNum):\n\t""""""Write a python function to convert decimal number to octal number.""""""\n\treturn oct(int(deciNum))']","['assert decimal_to_Octal(10) == 12', 'assert decimal_to_Octal(2) == 2', 'assert decimal_to_Octal(33) == 41']"
39,39,188,199,Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","['assert highest_Power_of_2(10) == 8'
 'assert highest_Power_of_2(19) == 16'
 'assert highest_Power_of_2(32) == 32']",,[],"def highest_Power_of_2(n):
	""""""Write a python function to find highest power of 2 less than or equal to given number.""""""","['def highest_Power_of_2(n):\n\t""""""Write a python function to find highest power of 2 less than or equal to given number.""""""\n\twhile n > 1:\n\t\tn = n >> 1\n\treturn n']","['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']"
40,40,6,17,Write a function to find the perimeter of a square.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter","['assert square_perimeter(10)==40' 'assert square_perimeter(5)==20'
 'assert square_perimeter(4)==16']",,[],"def square_perimeter(a):
	""""""Write a function to find the perimeter of a square.""""""","['def square_perimeter(a):\n\t""""""Write a function to find the perimeter of a square.""""""\n\treturn a * 4']","['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']"
41,41,123,134,Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ","['assert check_last([5,7,10],3,1) == ""ODD""'
 'assert check_last([2,3],2,3) == ""EVEN""'
 'assert check_last([1,2,3],3,1) == ""ODD""']",,[],"def check_last(arr,n,p):
	""""""Write a python function to check whether the last element of given array is even or odd after performing an operation p times.""""""","['def check_last(arr,n,p):\n\t""""""Write a python function to check whether the last element of given array is even or odd after performing an operation p times.""""""\n\tfor i in range(n-1):\n\t\tif arr[i]%2==p:\n\t\t\treturn False\n\treturn True']","['assert check_last([5,7,10],3,1) == ""ODD""', 'assert check_last([2,3],2,3) == ""EVEN""', 'assert check_last([1,2,3],3,1) == ""ODD""']"
42,42,320,331,Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","['assert count_unset_bits(2) == 1' 'assert count_unset_bits(4) == 2'
 'assert count_unset_bits(6) == 1']",,[],"def count_unset_bits(n):
	""""""Write a python function to count unset bits of a given number.""""""","['def count_unset_bits(n):\n\t""""""Write a python function to count unset bits of a given number.""""""\n\tunset_bits = 0\n\twhile n:\n\t\tn &= n - 1\n\t\tunset_bits += 1\n\treturn unset_bits']","['assert count_unset_bits(2) == 1', 'assert count_unset_bits(4) == 2', 'assert count_unset_bits(6) == 1']"
43,43,298,309,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","['assert maximum(5,10) == 10' 'assert maximum(-1,-2) == -1'
 'assert maximum(9,7) == 9']",,[],"def maximum(a,b):
	""""""Write a python function to find the maximum of two numbers.""""""","['def maximum(a,b):\n\t""""""Write a python function to find the maximum of two numbers.""""""\n\treturn max(a,b)']","['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']"
44,44,66,77,Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n): 
    return (n % 11 == 0) ","['assert is_Diff (12345) == False' 'assert is_Diff(1212112) == True'
 'assert is_Diff(1212) == False']",,[],"def is_Diff(n):
	""""""Write a python function to find the difference between sum of even and odd digits.""""""","['def is_Diff(n):\n\t""""""Write a python function to find the difference between sum of even and odd digits.""""""\n\treturn sum(int(i) for i in str(n))']","['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']"
45,45,122,133,Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32'
 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52'
 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']",,[],"def sum_negativenum(nums):
	""""""Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.""""""","['def sum_negativenum(nums):\n\t""""""Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.""""""\n\treturn sum(filter(lambda x: x < 0, nums))']","['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']"
46,46,36,47,Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","['assert compute_Last_Digit(2,4) == 2'
 'assert compute_Last_Digit(6,8) == 6'
 'assert compute_Last_Digit(1,2) == 2']",,"['assert compute_Last_Digit(3,7) == 0'
 'assert compute_Last_Digit(20,23) == 6'
 'assert compute_Last_Digit(1021,1024) == 4']","def compute_Last_Digit(A,B):
	""""""Write a python function to find the last digit when factorial of a divides factorial of b.""""""","['def compute_Last_Digit(A,B):\n\t""""""Write a python function to find the last digit when factorial of a divides factorial of b.""""""\n\tif A == 0:\n\t\treturn B\n\telif B == 0:\n\t\treturn A\n\telse:\n\t\treturn compute_Last_Digit(A-1,B)']","['assert compute_Last_Digit(2,4) == 2', 'assert compute_Last_Digit(6,8) == 6', 'assert compute_Last_Digit(1,2) == 2']"
47,47,296,307,Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True) '
 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))'
 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']",,[],"def colon_tuplex(tuplex,m,n):
	""""""Write a function to get a colon of a tuple.""""""","['def colon_tuplex(tuplex,m,n):\n\t""""""Write a function to get a colon of a tuple.""""""\n\treturn tuplex[m:n]']","['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True) ', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']"
48,48,473,484,Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","[""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]""
 ""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]""
 ""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]""]",,[],"def remove_matching_tuple(test_list1, test_list2):
	""""""Write a function to remove the matching tuples from the given two tuples.""""""","['def remove_matching_tuple(test_list1, test_list2):\n\t""""""Write a function to remove the matching tuples from the given two tuples.""""""\n\treturn [x for x in test_list1 if x not in test_list2]']","[""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]"", ""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]"", ""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]""]"
49,49,97,108,Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]'
 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]'
 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']",,[],"def merge_sorted_list(num1,num2,num3):
	""""""Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.""""""","['def merge_sorted_list(num1,num2,num3):\n\t""""""Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.""""""\n\tif num1 is None:\n\t\treturn num2\n\tif num2 is None:\n\t\treturn num1\n\tif num3 is None:\n\t\treturn num1\n\tif num1[0] > num2[0]:\n\t\tnum1,num2 = num2,num1\n\tif num1[0] > num3[0]:\n\t\tnum1,num3 = num3,num1\n\tif num2[0] > num3[0]:\n\t\tnum2,num3 = num3,num2\n\tif num1[0]']","['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']"
50,50,344,355,Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","['assert count_Rectangles(2) == 8' 'assert count_Rectangles(1) == 1'
 'assert count_Rectangles(0) == 0']",,[],"def count_Rectangles(radius):
	""""""Write a python function to count the number of rectangles in a circle of radius r.""""""","['def count_Rectangles(radius):\n\t""""""Write a python function to count the number of rectangles in a circle of radius r.""""""\n\tcount = 0\n\tfor i in range(1, radius + 1):\n\t\tfor j in range(1, radius + 1):\n\t\t\tif i * i + j * j == radius * radius:\n\t\t\t\tcount += 1\n\treturn count']","['assert count_Rectangles(2) == 8', 'assert count_Rectangles(1) == 1', 'assert count_Rectangles(0) == 0']"
51,51,491,502,Write a python function to find remainder of two numbers.,"def find(n,m):
  r = n%m
  return (r)","['assert find(3,3) == 0' 'assert find(10,3) == 1' 'assert find(16,5) == 1']",,[],"def find(n,m):
	""""""Write a python function to find remainder of two numbers.""""""","['def find(n,m):\n\t""""""Write a python function to find remainder of two numbers.""""""\n\treturn n%m']","['assert find(3,3) == 0', 'assert find(10,3) == 1', 'assert find(16,5) == 1']"
52,52,360,371,Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","['assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7'
 'assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3'
 'assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0']",,[],"def smallest_missing(A, left_element, right_element):
	""""""Write a function to find the smallest missing element in a sorted array.""""""","['def smallest_missing(A, left_element, right_element):\n\t""""""Write a function to find the smallest missing element in a sorted array.""""""\n\tif left_element > right_element:\n\t\treturn left_element\n\telse:\n\t\treturn right_element']","['assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7', 'assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3', 'assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0']"
53,53,462,473,Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}'
 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}'
 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']",,[],"def tuple_intersection(test_list1, test_list2):
	""""""Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.""""""","['def tuple_intersection(test_list1, test_list2):\n\t""""""Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.""""""\n\treturn list(set(test_list1).intersection(set(test_list2)))']","['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']"
54,54,351,362,Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","['assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2'
 'assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0'
 'assert max_occurrences([1,2,3,1,2,4,1]) == 1']",,[],"def max_occurrences(nums):
	""""""Write a python function to find the item with maximum occurrences in a given list.""""""","['def max_occurrences(nums):\n\t""""""Write a python function to find the item with maximum occurrences in a given list.""""""\n\tmax_occur = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tif nums.count(item) > max_occur:\n\t\t\tmax_occur = nums.count(item)\n\t\t\tmax_item = item\n\treturn max_item']","['assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2', 'assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0', 'assert max_occurrences([1,2,3,1,2,4,1]) == 1']"
55,55,84,95,Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","['assert Find_Min_Length([[1],[1,2]]) == 1'
 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2'
 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']",,[],"def Find_Min_Length(lst):
	""""""Write a python function to find the minimum length of sublist.""""""","['def Find_Min_Length(lst):\n\t""""""Write a python function to find the minimum length of sublist.""""""\n\tmin_len = 0\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1, len(lst)):\n\t\t\tif lst[i] + lst[j] < min_len:\n\t\t\t\tmin_len = lst[i] + lst[j]\n\treturn min_len']","['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']"
56,56,203,214,Write a function to convert radians to degrees.,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","['assert degree_radian(90)==5156.620156177409'
 'assert degree_radian(60)==3437.746770784939'
 'assert degree_radian(120)==6875.493541569878']",,[],"def degree_radian(radian):
	""""""Write a function to convert radians to degrees.""""""","['def degree_radian(radian):\n\t""""""Write a function to convert radians to degrees.""""""\n\treturn radian * 180 / math.pi']","['assert degree_radian(90)==5156.620156177409', 'assert degree_radian(60)==3437.746770784939', 'assert degree_radian(120)==6875.493541569878']"
57,57,391,402,Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","['assert ncr_modp(10,2,13)==6' 'assert ncr_modp(15,12,43)==25'
 'assert ncr_modp(17,9,18)==10']",,[],"def ncr_modp(n, r, p):
	""""""Write a function to compute the value of ncr%p.""""""","['def ncr_modp(n, r, p):\n\t""""""Write a function to compute the value of ncr%p.""""""\n\treturn binomial(n, r) % p']","['assert ncr_modp(10,2,13)==6', 'assert ncr_modp(15,12,43)==25', 'assert ncr_modp(17,9,18)==10']"
58,58,476,487,Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","['assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]'
 'assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]'
 'assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]']",,[],"def sort_tuple(tup):
	""""""Write a function to sort a list of tuples in increasing order by the last element in each tuple.""""""","['def sort_tuple(tup):\n\t""""""Write a function to sort a list of tuples in increasing order by the last element in each tuple.""""""\n\treturn tuple(sorted(tup, key=lambda x: x[-1]))']","['assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]', 'assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]', 'assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]']"
59,59,429,440,Write a function to find all adverbs and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')'
 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')'
 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']",,[],"def find_adverb_position(text):
	""""""Write a function to find all adverbs and their positions in a given sentence.""""""","['def find_adverb_position(text):\n\t""""""Write a function to find all adverbs and their positions in a given sentence.""""""\n\tadverbs = [\'is\', \'are\', \'was\', \'were\', \'be\', \'been\', \'being\', \'have\', \'has\', \'had\', \'having\', \'do\', \'does\', \'did\', \'doing\', \'a\', \'an\', \'the\', \'and\', \'but\', \'if\', \'or\', \'because\', \'as\', \'until\', \'while\', \'of\', \'at\', \'by\', \'for\', \'with\', \'about\', \'against\', \'between\', \'into\', \'through\', \'during\', \'before\', \'after\', \'']","['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']"
60,60,235,246,Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","['assert babylonian_squareroot(10)==3.162277660168379'
 'assert babylonian_squareroot(2)==1.414213562373095'
 'assert babylonian_squareroot(9)==3.0']",,[],"def babylonian_squareroot(number):
	""""""Write a function for computing square roots using the babylonian method.""""""","['def babylonian_squareroot(number):\n\t""""""Write a function for computing square roots using the babylonian method.""""""\n\treturn math.sqrt(number)']","['assert babylonian_squareroot(10)==3.162277660168379', 'assert babylonian_squareroot(2)==1.414213562373095', 'assert babylonian_squareroot(9)==3.0']"
61,61,478,489,Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","['assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2'
 'assert frequency_Of_Largest(3,[5,6,5]) == 1'
 'assert frequency_Of_Largest(4,[2,7,7,7]) == 3']",,[],"def frequency_Of_Largest(n,arr):
	""""""Write a python function to find the frequency of the largest value in a given array.""""""","['def frequency_Of_Largest(n,arr):\n\t""""""Write a python function to find the frequency of the largest value in a given array.""""""\n\tfreq = {}\n\tfor i in arr:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\telse:\n\t\t\tfreq[i] = 1\n\treturn max(freq, key=freq.get)']","['assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2', 'assert frequency_Of_Largest(3,[5,6,5]) == 1', 'assert frequency_Of_Largest(4,[2,7,7,7]) == 3']"
62,62,425,436,Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","['assert neg_nos([-1,4,5,-6]) == -1,-6'
 'assert neg_nos([-1,-2,3,4]) == -1,-2'
 'assert neg_nos([-7,-6,8,9]) == -7,-6']",,[],"def neg_nos(list1):
	""""""Write a python function to print negative numbers in a list.""""""","['def neg_nos(list1):\n\t""""""Write a python function to print negative numbers in a list.""""""\n\tfor i in list1:\n\t\tif i < 0:\n\t\t\tprint(i)']","['assert neg_nos([-1,4,5,-6]) == -1,-6', 'assert neg_nos([-1,-2,3,4]) == -1,-2', 'assert neg_nos([-7,-6,8,9]) == -7,-6']"
63,63,420,431,Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True'
 'assert common_element([1,2,3,4,5], [6,7,8,9])==None'
 ""assert common_element(['a','b','c'], ['d','b','e'])==True""]",,[],"def common_element(list1, list2):
	""""""Write a function that takes two lists and returns true if they have at least one common element.""""""","['def common_element(list1, list2):\n\t""""""Write a function that takes two lists and returns true if they have at least one common element.""""""\n\tfor i in list1:\n\t\tif i in list2:\n\t\t\treturn True\n\treturn False']","['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]"
64,64,346,357,Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","['assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10'
 'assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11'
 'assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12']",,[],"def find_max(test_list):
	""""""Write a function to find the maximum element of all the given tuple records.""""""","['def find_max(test_list):\n\t""""""Write a function to find the maximum element of all the given tuple records.""""""\n\tmax_value = 0\n\tfor i in test_list:\n\t\tif i[1] > max_value:\n\t\t\tmax_value = i[1]\n\treturn max_value']","['assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10', 'assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11', 'assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12']"
65,65,398,409,Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8'
 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30'
 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']",,[],"def min_product_tuple(list1):
	""""""Write a function to find the minimum product from the pairs of tuples within a given list.""""""","['def min_product_tuple(list1):\n\t""""""Write a function to find the minimum product from the pairs of tuples within a given list.""""""\n\tmin_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[j][0]\n\t\t\tif product > min_product:\n\t\t\t\tmin_product = product\n\treturn min_product']","['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']"
66,66,243,254,Write a function to find all words starting with 'a' or 'e' in a given string.,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","['assert words_ae(""python programe"")==[\'ame\']'
 'assert words_ae(""python programe language"")==[\'ame\',\'anguage\']'
 'assert words_ae(""assert statement"")==[\'assert\', \'atement\']']",,[],"def words_ae(text):
	""""""Write a function to find all words starting with 'a' or 'e' in a given string.""""""","['def words_ae(text):\n\t""""""Write a function to find all words starting with \'a\' or \'e\' in a given string.""""""\n\treturn [word for word in text.split() if word.startswith(\'a\') or word.startswith(\'e\')]']","['assert words_ae(""python programe"")==[\'ame\']', 'assert words_ae(""python programe language"")==[\'ame\',\'anguage\']', 'assert words_ae(""', 'assert statement"")==[\'', ""assert', 'atement']""]"
67,67,442,453,Write a python function to find the sum of even factors of a number.,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","['assert sumofFactors(18) == 26' 'assert sumofFactors(30) == 48'
 'assert sumofFactors(6) == 8']",,[],"def sumofFactors(n):
	""""""Write a python function to find the sum of even factors of a number.""""""","['def sumofFactors(n):\n\t""""""Write a python function to find the sum of even factors of a number.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum']","['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']"
68,68,179,190,Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","['assert count_Intgral_Points(1,1,4,4) == 4'
 'assert count_Intgral_Points(1,2,1,2) == 1'
 'assert count_Intgral_Points(4,2,6,4) == 1']",,[],"def count_Intgral_Points(x1,y1,x2,y2):
	""""""Write a python function to count the number of integral co-ordinates that lie inside a square.""""""","['def count_Intgral_Points(x1,y1,x2,y2):\n\t""""""Write a python function to count the number of integral co-ordinates that lie inside a square.""""""\n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i**2 + j**2 == 1:\n\t\t\t\tcount += 1\n\treturn count']","['assert count_Intgral_Points(1,1,4,4) == 4', 'assert count_Intgral_Points(1,2,1,2) == 1', 'assert count_Intgral_Points(4,2,6,4) == 1']"
69,69,41,52,Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):
  area=b*h
  return area","['assert parallelogram_area(10,20)==200'
 'assert parallelogram_area(15,20)==300'
 'assert parallelogram_area(8,9)==72']",,[],"def parallelogram_area(b,h):
	""""""Write a function to caluclate area of a parallelogram.""""""","['def parallelogram_area(b,h):\n\t""""""Write a function to caluclate area of a parallelogram.""""""\n\treturn (b*h)/2']","['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']"
70,70,361,372,Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","['assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]'
 'assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]'
 'assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]']",,[],"def heap_assending(nums):
	""""""Write a function to sort a given list of elements in ascending order using heap queue algorithm.""""""","['def heap_assending(nums):\n\t""""""Write a function to sort a given list of elements in ascending order using heap queue algorithm.""""""\n\tn = len(nums)\n\tfor i in range(n//2, -1, -1):\n\t\theapify(nums, n, i)\n\tfor i in range(n-1, 0, -1):\n\t\tnums[0], nums[i] = nums[i], nums[0]\n\t\theapify(nums, i, 0)']","['assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]', 'assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]', 'assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]']"
71,71,210,221,Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","['assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4'
 'assert first_even([2, 3, 4]) == 2' 'assert first_even([5, 6, 7]) == 6']",,[],"def first_even(nums):
	""""""Write a python function to find the first even number in a given list of numbers.""""""","['def first_even(nums):\n\t""""""Write a python function to find the first even number in a given list of numbers.""""""\n\tfor i in range(len(nums)):\n\t\tif nums[i] % 2 == 0:\n\t\t\treturn nums[i]']","['assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4', 'assert first_even([2, 3, 4]) == 2', 'assert first_even([5, 6, 7]) == 6']"
72,72,440,451,Write a function to remove all whitespaces from the given string using regex.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'""
 ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'""
 ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]",,[],"def remove_whitespaces(text1):
	""""""Write a function to remove all whitespaces from the given string using regex.""""""","['def remove_whitespaces(text1):\n\t""""""Write a function to remove all whitespaces from the given string using regex.""""""\n\treturn re.sub(r\'\\s+\', \'\', text1)']","[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift""]"
73,73,202,213,Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","['assert concatenate_strings((""Manjeet"", ""Nikhil"", ""Akshat""), ("" Singh"", "" Meherwal"", "" Garg"")) == (\'Manjeet Singh\', \'Nikhil Meherwal\', \'Akshat Garg\')'
 'assert concatenate_strings((""Shaik"", ""Ayesha"", ""Sanya""), ("" Dawood"", "" Begum"", "" Singh"")) == (\'Shaik Dawood\', \'Ayesha Begum\', \'Sanya Singh\')'
 'assert concatenate_strings((""Harpreet"", ""Priyanka"", ""Muskan""), (""Kour"", "" Agarwal"", ""Sethi"")) == (\'HarpreetKour\', \'Priyanka Agarwal\', \'MuskanSethi\')']",,[],"def concatenate_strings(test_tup1, test_tup2):
	""""""Write a function to perform the concatenation of two string tuples.""""""","['def concatenate_strings(test_tup1, test_tup2):\n\t""""""Write a function to perform the concatenation of two string tuples.""""""\n\treturn test_tup1 + test_tup2']","['assert concatenate_strings((""Manjeet"", ""Nikhil"", ""Akshat""), ("" Singh"", "" Meherwal"", "" Garg"")) == (\'Manjeet Singh\', \'Nikhil Meherwal\', \'Akshat Garg\')', 'assert concatenate_strings((""Shaik"", ""Ayesha"", ""Sanya""), ("" Dawood"", "" Begum"", "" Singh"")) == (\'Shaik Dawood\', \'Ayesha Begum\', \'Sanya Singh\')', 'assert concatenate_strings((""Harpreet"", ""Priyanka"", ""Muskan""), (""Kour"", "" Agarwal"", ""Sethi"")) == (\'HarpreetKour\', \'Priyanka Agarwal\', \'MuskanSethi\')']"
74,74,28,39,Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","['assert rearange_string(""aab"")==(\'aba\')'
 'assert rearange_string(""aabb"")==(\'abab\')'
 'assert rearange_string(""abccdd"")==(\'cdabcd\')']",,[],"def rearange_string(S):
	""""""Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.""""""","['def rearange_string(S):\n\t""""""Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.""""""\n\tif len(S) == 0:\n\t\treturn True\n\tif len(S) == 1:\n\t\treturn False\n\tif S[0] == S[1]:\n\t\treturn rearange_string(S[2:])\n\telse:\n\t\treturn rearange_string(S[1:]) or rearange_string(S[2:])']","['assert rearange_string(""aab"")==(\'aba\')', 'assert rearange_string(""aabb"")==(\'abab\')', 'assert rearange_string(""abccdd"")==(\'cdabcd\')']"
75,75,362,373,Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","['assert volume_cuboid(1,2,3)==6' 'assert volume_cuboid(5,7,9)==315'
 'assert volume_cuboid(10,15,21)==3150']",,[],"def volume_cuboid(l,w,h):
	""""""Write a function to find the volume of a cuboid.""""""","['def volume_cuboid(l,w,h):\n\t""""""Write a function to find the volume of a cuboid.""""""\n\treturn l*w*h']","['assert volume_cuboid(1,2,3)==6', 'assert volume_cuboid(5,7,9)==315', 'assert volume_cuboid(10,15,21)==3150']"
76,76,463,474,Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")'
 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")'
 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']",,[],"def replace_char(str1,ch,newch):
	""""""Write a function to replace characters in a string.""""""","['def replace_char(str1,ch,newch):\n\t""""""Write a function to replace characters in a string.""""""\n\treturn str1.replace(ch,newch)']","['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']"
77,77,311,322,Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","['assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]'
 'assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]'
 'assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]']",,[],"def position_min(list1):
	""""""Write a function to find all index positions of the minimum values in a given list.""""""","['def position_min(list1):\n\t""""""Write a function to find all index positions of the minimum values in a given list.""""""\n\tmin_pos = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min(list1):\n\t\t\tmin_pos.append(i)\n\treturn min_pos']","['assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]', 'assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]', 'assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]']"
78,78,314,325,Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","['assert get_Min_Squares(6) == 3' 'assert get_Min_Squares(2) == 2'
 'assert get_Min_Squares(4) == 1']",,[],"def get_Min_Squares(n):
	""""""Write a python function to find the minimum number of squares whose sum is equal to a given number.""""""","['def get_Min_Squares(n):\n\t""""""Write a python function to find the minimum number of squares whose sum is equal to a given number.""""""\n\tmin_squares = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, n+1):\n\t\t\tif i+j == n:\n\t\t\t\tmin_squares += 1\n\treturn min_squares']","['assert get_Min_Squares(6) == 3', 'assert get_Min_Squares(2) == 2', 'assert get_Min_Squares(4) == 1']"
79,79,385,396,Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","['assert check_char(""abba"") == ""Valid""'
 'assert check_char(""a"") == ""Valid""'
 'assert check_char(""abcd"") == ""Invalid""']",,[],"def check_char(string):
	""""""Write a function to check whether the given string starts and ends with the same character or not using regex.""""""","['def check_char(string):\n\t""""""Write a function to check whether the given string starts and ends with the same character or not using regex.""""""\n\tif string[0] == string[-1]:\n\t\treturn True\n\telse:\n\t\treturn False']","['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']"
80,80,352,363,Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]'
 'assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]'
 'assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']",,[],"def add_K_element(test_list, K):
	""""""Write a function to add the k elements to each element in the tuple.""""""","['def add_K_element(test_list, K):\n\t""""""Write a function to add the k elements to each element in the tuple.""""""\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i] + K\n\treturn test_list']","['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]', 'assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]', 'assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']"
81,81,443,454,Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","['assert text_match_wordz(""pythonz."")==(\'Found a match!\')'
 'assert text_match_wordz(""xyz."")==(\'Found a match!\')'
 'assert text_match_wordz(""  lang  ."")==(\'Not matched!\')']",,[],"def text_match_wordz(text):
	""""""Write a function that matches a word containing 'z'.""""""","['def text_match_wordz(text):\n\t""""""Write a function that matches a word containing \'z\'.""""""\n\treturn re.findall(r\'\\b[a-z]\\b\', text)']","['assert text_match_wordz(""pythonz."")==(\'Found a match!\')', 'assert text_match_wordz(""xyz."")==(\'Found a match!\')', 'assert text_match_wordz(""  lang  ."")==(\'Not matched!\')']"
82,82,286,297,Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]'
 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]'
 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']",,[],"def flatten_list(list1):
	""""""Write a function to flatten a given nested list structure.""""""","['def flatten_list(list1):\n\t""""""Write a function to flatten a given nested list structure.""""""\n\treturn [item for sublist in list1 for item in sublist]']","['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']"
83,83,228,239,Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]","['assert get_total_number_of_sequences(10, 4) == 4'
 'assert get_total_number_of_sequences(5, 2) == 6'
 'assert get_total_number_of_sequences(16, 3) == 84']",,[],"def get_total_number_of_sequences(m,n):
	""""""Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.""""""","['def get_total_number_of_sequences(m,n):\n\t""""""Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.""""""\n\treturn (m*(n+1))/2']","['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']"
84,84,79,90,Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","['assert len_log([""python"",""PHP"",""bigdata""]) == 7'
 'assert len_log([""a"",""ab"",""abc""]) == 3'
 'assert len_log([""small"",""big"",""tall""]) == 5']",,[],"def len_log(list1):
	""""""Write a python function to find the length of the longest word.""""""","['def len_log(list1):\n\t""""""Write a python function to find the length of the longest word.""""""\n\treturn max(len(word) for word in list1)']","['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']"
85,85,176,187,Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","['assert longest_common_subsequence(""AGGTAB"" , ""GXTXAYB"", 6, 7) == 4'
 'assert longest_common_subsequence(""ABCDGH"" , ""AEDFHR"", 6, 6) == 3'
 'assert longest_common_subsequence(""AXYT"" , ""AYZX"", 4, 4) == 2']",,[],"def longest_common_subsequence(X, Y, m, n):
	""""""Write a function to find the longest common subsequence for the given two sequences.""""""","['def longest_common_subsequence(X, Y, m, n):\n\t""""""Write a function to find the longest common subsequence for the given two sequences.""""""\n\tdp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tdp[i][j] = 0\n\t\t\telif X[i - 1] == Y[j - 1]:\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j]']","['assert longest_common_subsequence(""AGGTAB"" , ""GXTXAYB"", 6, 7) == 4', 'assert longest_common_subsequence(""ABCDGH"" , ""AEDFHR"", 6, 6) == 3', 'assert longest_common_subsequence(""AXYT"" , ""AYZX"", 4, 4) == 2']"
86,86,469,480,Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","['assert get_max_occuring_char(""data"") == ""a""'
 'assert get_max_occuring_char(""create"") == ""e""'
 'assert get_max_occuring_char(""brilliant girl"") == ""i""']",,[],"def get_max_occuring_char(str1):
	""""""Write a python function to find the maximum occurring character in a given string.""""""","['def get_max_occuring_char(str1):\n\t""""""Write a python function to find the maximum occurring character in a given string.""""""\n\tmax_occuring_char = 0\n\tfor char in str1:\n\t\tif char in str1:\n\t\t\tif char > max_occuring_char:\n\t\t\t\tmax_occuring_char = char\n\treturn max_occuring_char']","['assert get_max_occuring_char(""data"") == ""a""', 'assert get_max_occuring_char(""create"") == ""e""', 'assert get_max_occuring_char(""brilliant girl"") == ""i""']"
87,87,165,176,Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","['assert perimeter_triangle(10,20,30)==60'
 'assert perimeter_triangle(3,4,5)==12'
 'assert perimeter_triangle(25,35,45)==105']",,[],"def perimeter_triangle(a,b,c):
	""""""Write a function to find the perimeter of a triangle.""""""","['def perimeter_triangle(a,b,c):\n\t""""""Write a function to find the perimeter of a triangle.""""""\n\treturn (a+b+c)/2']","['assert perimeter_triangle(10,20,30)==60', 'assert perimeter_triangle(3,4,5)==12', 'assert perimeter_triangle(25,35,45)==105']"
88,88,299,310,Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')'
 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')'
 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']",,[],"def string_to_tuple(str1):
	""""""Write a function to convert a given string to a tuple.""""""","['def string_to_tuple(str1):\n\t""""""Write a function to convert a given string to a tuple.""""""\n\treturn tuple(map(int, str1.split(\',\')))']","['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']"
89,89,449,460,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]'
 'assert Extract([[1,2,3],[4, 5]]) == [1,4]'
 'assert Extract([[9,8,1],[1,2]]) == [9,1]']",,[],"def Extract(lst):
	""""""Write a python function to get the first element of each sublist.""""""","['def Extract(lst):\n\t""""""Write a python function to get the first element of each sublist.""""""\n\treturn [x[0] for x in lst]']","['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']"
90,90,454,465,Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}""
 ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}""
 ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]",,[],"def drop_empty(dict1):
	""""""Write a function to drop empty items from a given dictionary.""""""","['def drop_empty(dict1):\n\t""""""Write a function to drop empty items from a given dictionary.""""""\n\treturn {k: v for k, v in dict1.items() if v}']","[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]"
91,91,130,141,Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]'
 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]'
 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']",,[],"def pancake_sort(nums):
	""""""Write a function to sort a list of elements using pancake sort.""""""","['def pancake_sort(nums):\n\t""""""Write a function to sort a list of elements using pancake sort.""""""\n\tn = len(nums)\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif nums[i] > nums[j]:\n\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\treturn nums']","['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']"
92,92,204,215,Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","['assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]'
 ""assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']""
 ""assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']""]",,[],"def decode_list(alist):
	""""""Write a function to decode a run-length encoded given list.""""""","['def decode_list(alist):\n\t""""""Write a function to decode a run-length encoded given list.""""""\n\tresult = []\n\tfor i in alist:\n\t\tif i == 0:\n\t\t\tresult.append(0)\n\t\telse:\n\t\t\tresult.append(result[-1] + 1)\n\treturn result']","['assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]', ""assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']"", ""assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']""]"
93,93,177,188,Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","['assert prod_Square(25) == False' 'assert prod_Square(30) == False'
 'assert prod_Square(16) == True']",,[],"def prod_Square(n):
	""""""Write a python function to check whether the given number can be represented by product of two squares or not.""""""","['def prod_Square(n):\n\t""""""Write a python function to check whether the given number can be represented by product of two squares or not.""""""\n\tif n == 0:\n\t\treturn True\n\telif n == 1:\n\t\treturn False\n\telif n % 2 == 0:\n\t\treturn prod_Square(n // 2) * n\n\telse:\n\t\treturn prod_Square(n // 2) * n + n']","['assert prod_Square(25) == False', 'assert prod_Square(30) == False', 'assert prod_Square(16) == True']"
94,94,390,401,Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))'
 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))'
 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']",,[],"def add_nested_tuples(test_tup1, test_tup2):
	""""""Write a function to perform index wise addition of tuple elements in the given two nested tuples.""""""","['def add_nested_tuples(test_tup1, test_tup2):\n\t""""""Write a function to perform index wise addition of tuple elements in the given two nested tuples.""""""\n\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))']","['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']"
95,95,301,312,Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","['assert volume_cone(5,12)==314.15926535897927'
 'assert volume_cone(10,15)==1570.7963267948965'
 'assert volume_cone(19,17)==6426.651371693521']",,[],"def volume_cone(r,h):
	""""""Write a function to find the volume of a cone.""""""","['def volume_cone(r,h):\n\t""""""Write a function to find the volume of a cone.""""""\n\treturn 4/3*pi*r**3*h']","['assert volume_cone(5,12)==314.15926535897927', 'assert volume_cone(10,15)==1570.7963267948965', 'assert volume_cone(19,17)==6426.651371693521']"
96,96,249,260,Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","['assert newman_prime(3) == 7 ' 'assert newman_prime(4) == 17'
 'assert newman_prime(5) == 41']",,[],"def newman_prime(n):
	""""""Write a function to find the nth newman–shanks–williams prime number.""""""","['def newman_prime(n):\n\t""""""Write a function to find the nth newman–shanks–williams prime number.""""""\n\tif n == 1:\n\t\treturn 2\n\telif n == 2:\n\t\treturn 3\n\telif n == 3:\n\t\treturn 5\n\telif n == 4:\n\t\treturn 7\n\telif n == 5:\n\t\treturn 11\n\telif n == 6:\n\t\treturn 13\n\telif n == 7:\n\t\treturn 17\n\telif n == 8:\n\t\treturn 19\n\telif n == 9:\n\t\treturn 23\n\telif n == ']","['assert newman_prime(3) == 7 ', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']"
97,97,380,391,Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]'
 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]'
 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']",,[],"def convert_list_dictionary(l1, l2, l3):
	""""""Write a function to convert more than one list to nested dictionary.""""""","['def convert_list_dictionary(l1, l2, l3):\n\t""""""Write a function to convert more than one list to nested dictionary.""""""\n\td = {}\n\tfor i in range(len(l1)):\n\t\td[l1[i]] = l2[i]\n\tfor i in range(len(l3)):\n\t\td[l3[i]] = l3[i]\n\treturn d']","['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']"
98,98,238,249,Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result","['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]'
 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]'
 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']",,[],"def intersection_array(array_nums1,array_nums2):
	""""""Write a function to find the intersection of two arrays using lambda function.""""""","['def intersection_array(array_nums1,array_nums2):\n\t""""""Write a function to find the intersection of two arrays using lambda function.""""""\n\treturn list(filter(lambda x: x in array_nums2, array_nums1))']","['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']"
99,99,138,149,Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result","['assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6'
 'assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3'
 'assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7']",,[],"def longest_subseq_with_diff_one(arr, n):
	""""""Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.""""""","['def longest_subseq_with_diff_one(arr, n):\n\t""""""Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.""""""\n\tlongest_subseq = []\n\tlongest_subseq_len = 0\n\tfor i in range(n):\n\t\tlongest_subseq.append([])\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif arr[i] == arr[j]:\n\t\t\t\tlongest_subseq[i].append(arr[j])\n\t\t\t\tlongest_subseq_len = max(longest_subseq_len, len(longest_subseq[i]))\n\treturn longest_subseq, longest_subseq_len']","['assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6', 'assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3', 'assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7']"
