reference,codeBleu,nGramMatch,weightednGramMatch,syntaxScore,dataflowMatchScore
"['def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]']",[0.36143877247203926],[0.25663152789454874],[0.2794901434087831],[0.43137254901960786],[0.4782608695652174]
"['def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (""Equal"") \r\n  else:  \r\n    return (""Not Equal"") ']",[0.3763206782788889],[0.11651778275759282],[0.12560703562112063],[0.2631578947368421],[1.0]
['def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True'],[0.39270517650067205],[0.05271202712688637],[0.05144201220913522],[0.4666666666666667],[1.0]
"['import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True']",[0.1272227992730106],[0.02382720022625512],[0.027921139722930265],[0.10714285714285714],[0.35]
"['def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum']",[0.11075664095746353],[0.009339408018887359],[0.029841001964812916],[0.25],[0.15384615384615385]
"['def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element']",[0.1827122547317392],[0.04131551591106297],[0.0632708767532676],[0.18181818181818182],[0.4444444444444444]
"['def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ']",[0.36973983484069806],[0.2828674270903844],[0.30292951911001464],[0.2777777777777778],[0.6153846153846154]
['def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict'],[0.3173214807012209],[0.10441124091813243],[0.1119900665021357],[0.6153846153846154],[0.4375]
"[""import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)""]",[0.257083806971234],[0.14628187563941414],[0.151284121476291],[0.23076923076923078],[0.5]
"['def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ']",[0.20114391358929673],[0.04593898223830126],[0.059773035755249365],[0.13636363636363635],[0.5625]
['from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result'],[0.18074165889288074],[0.021847844937497602],[0.03445212396735862],[0.1111111111111111],[0.5555555555555556]
"['def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ']",[0.15093876208644688],[0.03295402268196149],[0.03648730017362995],[0.11764705882352941],[0.4166666666666667]
"['def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ']",[0.32036947275467503],[0.1797645142876138],[0.2184181822230771],[0.30434782608695654],[0.5789473684210527]
['def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6'],[0.18086199522923962],[0.05723182071766699],[0.0892930832762146],[0.07692307692307693],[0.5]
['def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n '],[0.10831192947337093],[0.021662245360858933],[0.024707644478326136],[0.2692307692307692],[0.11764705882352941]
"['def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1']",[0.0763716644494172],[0.009586724479356643],[0.011618996863462674],[0.13043478260869565],[0.15384615384615385]
"['def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (""Invalid Input"") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ']",[0.1782926197113675],[0.009023412957381419],[0.011132360005735626],[0.28125],[0.4117647058823529]
"['def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far']",[0.12539741002095064],[0.056621705833762526],[0.09080126758337335],[0.0625],[0.2916666666666667]
"['import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area']",[0.0827213142057672],[0.0808764862779457],[0.08334210387845642],[0.041666666666666664],[0.125]
"['def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])']",[0.2925846012136213],[0.16645458435655658],[0.1951881683240154],[0.2],[0.6086956521739131]
"['def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found']",[0.3724424841901419],[0.16078367502327606],[0.15743200953787792],[0.5909090909090909],[0.5806451612903226]
['def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter'],[0.16161961033620892],[0.06500593260343691],[0.1370280642969544],[0.1111111111111111],[0.3333333333333333]
"['def rectangle_area(l,b):\r\n  area=l*b\r\n  return area']",[0.30003319066236067],[0.14643803168582153],[0.1370280642969544],[0.25],[0.6666666666666666]
"['def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ']",[0.4224669218057474],[0.11578713706192673],[0.15930782288833562],[0.6875],[0.7272727272727273]
"['import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(""(P\\w+)\\W(P\\w+)"", w)\r\n        if m:\r\n            return m.groups()']",[0.1771893076358324],[0.08262013232705506],[0.09280376488294115],[0.2],[0.3333333333333333]
"['MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]']",[0.08462285017994525],[0.018040383286838185],[0.01994596692789231],[0.2727272727272727],[0.027777777777777776]
['def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n '],[0.27177884472543956],[0.10753659580649468],[0.11846767198415246],[0.1111111111111111],[0.75]
['def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res '],[0.06921151561964195],[0.001859545537241799],[0.028212323392938873],[0.0967741935483871],[0.15]
"['def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ']",[0.4090327988580719],[0.04545599776764631],[0.0668656738551176],[0.5238095238095238],[1.0]
"['def find(n,m):  \r\n    q = n//m \r\n    return (q)']",[0.24493807588825417],[0.01633647013102316],[0.08841583342199358],[0.125],[0.75]
"[""import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))""]",[0.23943320296267065],[0.08338026118731375],[0.08863826494908314],[0.2857142857142857],[0.5]
"['def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)']",[0.0601530953311376],[0.01140717871385223],[0.029205202610698183],[0.03333333333333333],[0.16666666666666666]
"['def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]']",[0.2662575991360553],[0.03947461188342995],[0.11984858863101458],[0.2903225806451613],[0.6153846153846154]
"['import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA']",[0.09902039344769392],[0.0012669372162906496],[0.023156882563789883],[0.13636363636363635],[0.23529411764705882]
"['def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd']",[0.1808120786441656],[0.05266307182265215],[0.1039185760873435],[0.23333333333333334],[0.3333333333333333]
"['from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result']",[0.10316844145447741],[0.02814392937863503],[0.031146377792658105],[0.14285714285714285],[0.21052631578947367]
['def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))'],[0.10767198315953773],[0.007290720295197423],[0.030669939615680774],[0.12],[0.2727272727272727]
"[""def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season""]",[0.14940158958610042],[0.02135771807952878],[0.03751974254888481],[0.3018867924528302],[0.23684210526315788]
['def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)'],[0.041235933701125216],[0.0005984587653985115],[0.020620579682827066],[0.038461538461538464],[0.10526315789473684]
"['def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ']",[0.09959375730520839],[0.015523815155606331],[0.021647200687300833],[0.13043478260869565],[0.23076923076923078]
['def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter'],[0.18939308587934778],[0.09554427922043669],[0.1370280642969544],[0.125],[0.4]
"['def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return ""ODD""\r\n        else: \r\n            return ""EVEN""\r\n    return ""EVEN""\r\n      ']",[0.1666654305409002],[0.01967903337397229],[0.043534412927559496],[0.10344827586206896],[0.5]
['def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  '],[0.2637608367785731],[0.024735333188257623],[0.030308013926034667],[0.4],[0.6]
"['def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ']",[0.20975572417523344],[0.0326747414618782],[0.04877239766329801],[0.09090909090909091],[0.6666666666666666]
['def is_Diff(n): \r\n    return (n % 11 == 0) '],[0.3556085732099845],[0.1374708101760565],[0.1599634826638816],[0.125],[1.0]
"['def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)']",[0.241274404328634],[0.056122223243057295],[0.07564206073814551],[0.5],[0.3333333333333333]
"['def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10']",[0.12952735753726005],[0.008634594683345154],[0.016617692608552243],[0.14285714285714285],[0.35]
"['from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon']",[0.16858938762050246],[0.025447114237166446],[0.044632361378533277],[0.058823529411764705],[0.5454545454545454]
"['def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ']",[0.33414370768329826],[0.13675457510298147],[0.14678995259990846],[0.4166666666666667],[0.6363636363636364]
"['import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)']",[0.12416193149578626],[0.0107801449228252],[0.04740604259878136],[0.038461538461538464],[0.4]
"['def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ']",[0.18537203931825066],[0.03818304286467582],[0.04419181391571597],[0.3142857142857143],[0.3448275862068966]
"['def find(n,m):\r\n  r = n%m\r\n  return (r)']",[0.26867287090506503],[0.09544239437038682],[0.09036020036098448],[0.2222222222222222],[0.6666666666666666]
"['def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)']",[0.2103351134774588],[0.13484841218895469],[0.2856166208454597],[0.14814814814814814],[0.2727272727272727]
"['def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)']",[0.18434960986349097],[0.021223232524803362],[0.061175206929160446],[0.28],[0.375]
['def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result'],[0.2964339757133985],[0.031033737205713518],[0.034088130560161245],[0.5416666666666666],[0.5789473684210527]
['def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength '],[0.257709475389475],[0.019427446513842185],[0.05307712171072445],[0.3333333333333333],[0.625]
['import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree'],[0.1310124219044382],[0.057367534172156044],[0.06283599959944292],[0.15384615384615385],[0.25]
"['def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ']",[0.09052928292342474],[0.020524522247468757],[0.08404094012985504],[0.08108108108108109],[0.17647058823529413]
"['def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup']",[0.04413876647385386],[0.0016333326115658998],[0.015257867737631062],[0.07142857142857142],[0.08823529411764706]
"['import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r""\\w+ly"", text):\r\n    return (m.start(), m.end(), m.group(0))']",[0.2825165916308573],[0.00885154189240778],[0.03425830289189105],[0.08695652173913043],[0.0]
['def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;'],[0.037738390632756094],[0.0001714613070097007],[0.017448767890681335],[0.03333333333333333],[0.1]
"['def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ']",[0.11379034713348839],[0.059666946740390976],[0.06646218372904644],[0.12903225806451613],[0.2]
['def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num '],[0.3821717959473531],[0.1627833136472153],[0.16590387014219715],[0.2],[1.0]
"['def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result']",[0.14516036310134856],[0.0682461436016866],[0.07970300111139984],[0.125],[0.3076923076923077]
['def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) '],[0.15985635788391048],[0.07312597280946921],[0.09487088729760121],[0.07142857142857142],[0.4]
"['def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min']",[0.19892312715639474],[0.019427446513842185],[0.042931728778403434],[0.13333333333333333],[0.6]
"['import re\r\ndef words_ae(text):\r\n list = re.findall(""[ae]\\w+"", text)\r\n return list']",[0.23793875632374206],[0.03986357128268015],[0.056122223243057295],[0.23076923076923078],[0.625]
"['import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ']",[0.09901179432882022],[0.003479515023213546],[0.0242670086972961],[0.27941176470588236],[0.08888888888888889]
"['def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ']",[0.28418958496823393],[0.01851974703879588],[0.04131551591106297],[0.07692307692307693],[1.0]
"['def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area']",[0.30003319066236067],[0.14643803168582153],[0.1370280642969544],[0.25],[0.6666666666666666]
['import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result'],[0.22086465625309337],[0.043748114312246435],[0.08385766789076256],[0.21739130434782608],[0.5384615384615384]
"['def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even']",[0.10714383780730054],[0.03975360176263952],[0.04942781007262327],[0.06666666666666667],[0.2727272727272727]
"[""import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))""]",[0.327204624461667],[0.17103294495668978],[0.17624709135151645],[0.46153846153846156],[0.5]
"['def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ']",[0.14796974499444654],[0.05135131375181345],[0.07386099955930606],[0.13333333333333333],[0.3333333333333333]
"['import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return """"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return """".join(ans) + (heap[0][1] if heap else """")']",[0.08091118950796217],[0.003908638449944918],[0.010799949369137755],[0.14893617021276595],[0.16]
"['def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume']",[0.3416998573290273],[0.14643803168582153],[0.1370280642969544],[0.3333333333333333],[0.75]
"['def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2']",[0.3028702889056058],[0.069172428217611],[0.07564206073814551],[0.4],[0.6666666666666666]
"['def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result']",[0.23427289725681774],[0.030498018530820886],[0.03479869870157833],[0.3333333333333333],[0.5384615384615384]
"['def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;']",[0.18301736233542343],[0.013768428989882077],[0.01754344459423597],[0.24242424242424243],[0.4583333333333333]
"['import re  \r\nregex = r\'^[a-z]$|^([a-z]).*\\1$\'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn ""Valid"" \r\n\telse: \r\n\t\treturn ""Invalid"" ']",[0.1073522045816666],[0.04538107245336854],[0.05069441253996453],[0.047619047619047616],[0.2857142857142857]
"['def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ']",[0.1915450601366085],[0.0720401219183158],[0.07725700174500132],[0.07142857142857142],[0.5454545454545454]
"[""import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')""]",[0.14169413697862637],[0.01140717871385223],[0.03155984539112946],[0.23809523809523808],[0.2857142857142857]
"['def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ']",[0.04171317303399554],[0.005863790513350369],[0.014412783908992872],[0.017543859649122806],[0.12903225806451613]
"['def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]']",[0.049333021965816556],[0.00010399653965578416],[0.013900523008148662],[0.1016949152542373],[0.08163265306122448]
['def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max'],[0.13698021393475476],[0.04479896078974043],[0.050740942568326286],[0.23809523809523808],[0.21428571428571427]
"['def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))']",[0.26765899257313924],[0.09494585882149242],[0.17026024721767094],[0.38235294117647056],[0.4230769230769231]
"[""def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch""]",[0.11096889278166469],[0.035780540939149154],[0.04735232461721785],[0.15384615384615385],[0.20689655172413793]
"['def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter']",[0.3416998573290273],[0.14643803168582153],[0.1370280642969544],[0.3333333333333333],[0.75]
['def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result'],[0.10309495214030226],[0.020785234793924575],[0.03603901821172891],[0.13333333333333333],[0.2222222222222222]
['def Extract(lst): \r\n    return [item[0] for item in lst] '],[0.5927878681341838],[0.18092176081223305],[0.19022971172450243],[1.0],[1.0]
"['def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1']",[0.27236285631379564],[0.07601419128344258],[0.08555261858712451],[0.3125],[0.6153846153846154]
['def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums'],[0.20221094249191718],[0.027525410850504667],[0.029803207602012494],[0.26666666666666666],[0.48484848484848486]
"['def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]']",[0.1322537083329409],[0.042977785875199695],[0.048537047456563856],[0.0625],[0.375]
"['def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;']",[0.12219770236340641],[0.015362849996515139],[0.022770064720268424],[0.1875],[0.2631578947368421]
"['def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ']",[0.145062339564412],[0.04356915459721819],[0.052553219533445696],[0.09523809523809523],[0.3888888888888889]
"['import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume']",[0.10893000483838874],[0.007290720295197423],[0.03259596572502422],[0.0625],[0.3333333333333333]
['def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)'],[0.2641417899657168],[0.10484742305708127],[0.3135618420689439],[0.2631578947368421],[0.375]
"['def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result']",[0.2544629367010588],[0.12259149958656422],[0.1702602472176709],[0.125],[0.6]
"['def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result']",[0.40464140023058054],[0.2643240821037295],[0.2828129473900212],[0.5714285714285714],[0.5]
"['def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result']",[0.31785749057386975],[0.21126395056197428],[0.23311501395079964],[0.36363636363636365],[0.4634146341463415]
