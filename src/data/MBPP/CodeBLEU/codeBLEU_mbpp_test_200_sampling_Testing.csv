reference,codeBleu,nGramMatch,weightednGramMatch,syntaxScore,dataflowMatchScore
"['def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]']",[0.17696255002691344],[0.06307028476080047],[0.07930676956680242],[0.22264705882352953],[0.32782608695652177]
"['def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (""Equal"") \r\n  else:  \r\n    return (""Not Equal"") ']",[0.3545822742238638],[0.07887141711331039],[0.09612434644881226],[0.2500000000000002],[0.9933333333333333]
['def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True'],[0.3648023660021175],[0.08193003974854657],[0.1426127575932588],[0.4276666666666671],[0.8069999999999995]
"['import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True']",[0.15132860919387808],[0.031651808863430275],[0.04084119934065357],[0.12232142857142858],[0.40550000000000025]
"['def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum']",[0.3215980175039926],[0.179849038089147],[0.20296130115759278],[0.3478125],[0.5457692307692319]
"['def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element']",[0.2088843357444393],[0.04626647989992958],[0.06512944893641373],[0.2213636363636361],[0.5027777777777769]
"['def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ']",[0.26733418410717746],[0.11400735947371282],[0.13853450516012455],[0.2433333333333332],[0.5184615384615381]
['def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict'],[0.255990858140509],[0.08357617648985854],[0.09221417914909867],[0.44442307692307614],[0.40375]
"[""import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)""]",[0.27881619255275353],[0.0709805455332408],[0.09678422467777394],[0.23000000000000043],[0.7175]
"['def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ']",[0.21909247123217337],[0.04789419679455127],[0.06648705177050471],[0.18636363636363648],[0.575625]
['from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result'],[0.20011931124206853],[0.04400548627097928],[0.05758286980840622],[0.22888888888888906],[0.4700000000000005]
"['def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ']",[0.1456212029743659],[0.031154177632260856],[0.04564435975539864],[0.08735294117647037],[0.4183333333333333]
"['def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ']",[0.2285308466139815],[0.10396127238966255],[0.12639781200676653],[0.25586956521739096],[0.41789473684210554]
['def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6'],[0.3153403627188364],[0.058357213316996316],[0.0925234683275794],[0.2542307692307701],[0.83625]
['def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n '],[0.11452815739188064],[0.03139878921110374],[0.04275456433831933],[0.19307692307692328],[0.1908823529411761]
"['def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1']",[0.18945222037410672],[0.02297135709558922],[0.030013109685118257],[0.3584782608695651],[0.25134615384615383]
"['def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (""Invalid Input"") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ']",[0.1917209390267039],[0.008685326332713806],[0.011847326832924911],[0.32046875],[0.4258823529411763]
"['def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far']",[0.24151136667176373],[0.12341507426702464],[0.16028664242003038],[0.20171875],[0.47562499999999985]
"['import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area']",[0.08811246448254362],[0.07577122372170073],[0.08397030087514017],[0.04958333333333334],[0.143125]
"['def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])']",[0.22208268881681595],[0.1081884877006936],[0.13850251601377564],[0.1768571428571428],[0.4647826086956517]
"['def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found']",[0.3279855862160926],[0.10496113936044367],[0.10660363952152259],[0.5460227272727282],[0.5543548387096764]
['def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter'],[0.18427722348704342],[0.08406605700812943],[0.13693172582893273],[0.1544444444444441],[0.3616666666666668]
"['def rectangle_area(l,b):\r\n  area=l*b\r\n  return area']",[0.32823611199528735],[0.12780062841532844],[0.1416021528991527],[0.331875],[0.7116666666666673]
"['def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ']",[0.38639640979091083],[0.18934295596167555],[0.21948131956560246],[0.483125],[0.6536363636363647]
"['import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(""(P\\w+)\\W(P\\w+)"", w)\r\n        if m:\r\n            return m.groups()']",[0.16270630448927226],[0.05095045695474325],[0.06379142766901254],[0.1327500000000001],[0.35333333333333355]
"['MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]']",[0.07693814787299517],[0.014874285515952221],[0.021375780723503098],[0.21761363636363673],[0.05388888888888894]
['def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n '],[0.24256533228145222],[0.04560091837651799],[0.07452152186040265],[0.14388888888888857],[0.69125]
['def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res '],[0.09261532495787],[0.008293506012334605],[0.01874037446430659],[0.12467741935483886],[0.21375000000000008]
"['def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ']",[0.3903384341641285],[0.07595700588843834],[0.08789673076807483],[0.4483333333333327],[0.9491666666666667]
"['def find(n,m):  \r\n    q = n//m \r\n    return (q)']",[0.2655987591313881],[0.0680347078712146],[0.11123532865433702],[0.169375],[0.70875]
"[""import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))""]",[0.273836001101104],[0.07379922366532941],[0.08559239978670574],[0.3676190476190475],[0.568333333333333]
"['def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)']",[0.13930401751536878],[0.05700451404511862],[0.08287822268302297],[0.16733333333333344],[0.24999999999999986]
"['def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]']",[0.22196375154943118],[0.08737713212053123],[0.14147663338240377],[0.25419354838709673],[0.4048076923076923]
"['import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA']",[0.1046711742234994],[0.005475276549796676],[0.024907281306767257],[0.11477272727272757],[0.2735294117647054]
"['def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd']",[0.16436121573060725],[0.04382564869064375],[0.07309540470797496],[0.21100000000000013],[0.3295238095238096]
"['from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result']",[0.13186767974423044],[0.03719923886840349],[0.050656818454383225],[0.20803571428571413],[0.23157894736842097]
['def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))'],[0.18676721820969186],[0.06087555921566139],[0.09208422271401552],[0.1631999999999999],[0.40090909090909066]
"[""def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season""]",[0.1494390058334656],[0.01114337556840836],[0.022630522641322693],[0.2992452830188686],[0.2647368421052632]
['def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)'],[0.09164287132830759],[0.01496372707278771],[0.031324357430726125],[0.08923076923076931],[0.22605263157894748]
"['def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ']",[0.1251019715250635],[0.019130071654745655],[0.025525306084304426],[0.16652173913043464],[0.2892307692307695]
['def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter'],[0.20185071355149617],[0.10724978990903127],[0.1370280642969551],[0.163125],[0.4000000000000003]
"['def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return ""ODD""\r\n        else: \r\n            return ""EVEN""\r\n    return ""EVEN""\r\n      ']",[0.2016931805741504],[0.04954093186138441],[0.06652981999186725],[0.17534482758620704],[0.5153571428571428]
['def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  '],[0.23023081267069326],[0.05784436481283409],[0.07021221920327164],[0.32819999999999927],[0.4646666666666664]
"['def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ']",[0.43831714669680233],[0.23581017419578082],[0.2473068974399082],[0.4168181818181826],[0.8533333333333326]
['def is_Diff(n): \r\n    return (n % 11 == 0) '],[0.3537418569631113],[0.04286603102802856],[0.10147639682441606],[0.270625],[1.0]
"['def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)']",[0.17685755467483358],[0.05190260050256782],[0.07893039597454433],[0.274375],[0.3022222222222227]
"['def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10']",[0.125263198837051],[0.008394478705231453],[0.019158316642972205],[0.11999999999999973],[0.3435]
"['from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon']",[0.2025920058745323],[0.02947624535835463],[0.044340976000736256],[0.1438235294117644],[0.5927272727272738]
"['def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ']",[0.23631397438843557],[0.07190477846176009],[0.09066172515258702],[0.17541666666666678],[0.5672727272727279]
"['import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)']",[0.23737960950312276],[0.018692777026001167],[0.04476796867879756],[0.2923076923076929],[0.5887499999999996]
"['def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ']",[0.12509954211035235],[0.017328108620640038],[0.027922276569538104],[0.15428571428571394],[0.2358620689655174]
"['def find(n,m):\r\n  r = n%m\r\n  return (r)']",[0.3140949342563886],[0.0970557443594741],[0.12126843711052632],[0.2822222222222215],[0.7558333333333335]
"['def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)']",[0.2763999451560724],[0.14109842827003674],[0.1712606116135122],[0.26574074074074094],[0.5274999999999997]
"['def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)']",[0.19435123911002125],[0.04951198420264744],[0.06926797223743723],[0.19800000000000012],[0.460625]
['def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result'],[0.15969841995487322],[0.03710827570000505],[0.051422246224750896],[0.23500000000000004],[0.31526315789473647]
['def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength '],[0.23951677385822862],[0.030792687727874038],[0.058107741038374225],[0.31291666666666734],[0.55625]
['import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree'],[0.17226818001567132],[0.08989008047763136],[0.10519225496966947],[0.17961538461538443],[0.314375]
"['def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ']",[0.11722221221588863],[0.05552991855360458],[0.08682872363268451],[0.0793243243243243],[0.24720588235294155]
"['def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup']",[0.05360586287656907],[0.003831458310614449],[0.01819703521246889],[0.08107142857142838],[0.1113235294117647]
"['import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r""\\w+ly"", text):\r\n    return (m.start(), m.end(), m.group(0))']",[0.22681384963758205],[0.024848313208065288],[0.049129493369018916],[0.26673913043478237],[0.4465384615384613]
['def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;'],[0.08771161290666785],[0.008978561941612215],[0.018534556351725892],[0.11983333333333344],[0.20349999999999993]
"['def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ']",[0.13605188457410267],[0.0350377074780568],[0.04996983081835384],[0.21500000000000008],[0.2341999999999999]
['def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num '],[0.32008544594477334],[0.12318730094418044],[0.14065448283491322],[0.17750000000000013],[0.8390000000000001]
"['def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result']",[0.17437752257878295],[0.08002489007697738],[0.09493712331507874],[0.115625],[0.4069230769230768]
['def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) '],[0.13740226271662487],[0.0344304732639438],[0.04825000617398441],[0.11642857142857173],[0.35049999999999976]
"['def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min']",[0.1805745375619066],[0.02181746664620608],[0.04214735026808701],[0.11833333333333311],[0.5399999999999996]
"['import re\r\ndef words_ae(text):\r\n list = re.findall(""[ae]\\w+"", text)\r\n return list']",[0.20992698384617248],[0.038832958978836256],[0.057028822559699],[0.28884615384615403],[0.455]
"['import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ']",[0.10145423039514599],[0.004583778001395926],[0.026301771030168744],[0.24926470588235322],[0.1256666666666664]
"['def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ']",[0.3127069641152257],[0.01925798203835429],[0.046281412884087485],[0.18653846153846157],[0.99375]
"['def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area']",[0.332679403123875],[0.1585372960089826],[0.17197198315318338],[0.306875],[0.6933333333333341]
['import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result'],[0.21142010987356255],[0.04914249153011338],[0.07912992120828412],[0.24586956521739117],[0.4715384615384615]
"['def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even']",[0.15376283870425403],[0.04414983054845235],[0.06638637275341358],[0.22633333333333322],[0.27818181818181836]
"[""import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))""]",[0.31617527340212903],[0.13606821363299704],[0.14651749536013753],[0.3996153846153846],[0.5825]
"['def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ']",[0.16776761889757894],[0.0611563097641699],[0.07774749915947797],[0.10966666666666647],[0.4224999999999999]
"['import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return """"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return """".join(ans) + (heap[0][1] if heap else """")']",[0.10257530565954993],[0.0038930517247594176],[0.010144341126206163],[0.17856382978723417],[0.16269999999999993]
"['def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume']",[0.3929480558529627],[0.10923598033707754],[0.13637568751921778],[0.5005555555555551],[0.825625]
"['def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2']",[0.3309087931887855],[0.054209934575580904],[0.08936968262400208],[0.3945000000000008],[0.785555555555554]
"['def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result']",[0.25719050035171864],[0.07496234423910998],[0.08758170844981596],[0.3908333333333326],[0.4753846153846149]
"['def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;']",[0.13627589015360309],[0.01441131064173333],[0.022207401487830496],[0.17015151515151541],[0.32333333333333336]
"['import re  \r\nregex = r\'^[a-z]$|^([a-z]).*\\1$\'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn ""Valid"" \r\n\telse: \r\n\t\treturn ""Invalid"" ']",[0.18022873585489008],[0.03661278930551544],[0.04596882078071209],[0.20261904761904778],[0.4357142857142858]
"['def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ']",[0.18319663322708632],[0.05599952505349393],[0.07081298188082533],[0.10142857142857162],[0.5045454545454552]
"[""import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')""]",[0.17980376995736197],[0.019242402910235722],[0.03235362930016467],[0.23333333333333364],[0.42928571428571466]
"['def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ']",[0.11476087830050608],[0.010337965897773287],[0.017969837060901182],[0.19912280701754387],[0.23161290322580702]
"['def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]']",[0.10149169018019918],[0.02708424362582774],[0.03811461671447797],[0.12423728813559345],[0.19153061224489792]
['def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max'],[0.22556856945355272],[0.07170999626466758],[0.11199285297811407],[0.3228571428571435],[0.3957142857142856]
"['def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))']",[0.29353611450026296],[0.13087896515233824],[0.1871342711292565],[0.3413235294117652],[0.5148076923076914]
"[""def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch""]",[0.13502191819390294],[0.05235909369489504],[0.06672062152103479],[0.1830769230769229],[0.23793103448275837]
"['def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter']",[0.35159125023705884],[0.10702048105753031],[0.14017785322404072],[0.38666666666666677],[0.7725]
['def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result'],[0.14139467637835845],[0.03284454448346937],[0.0442897165855192],[0.16066666666666632],[0.3277777777777775]
['def Extract(lst): \r\n    return [item[0] for item in lst] '],[0.47740914141554136],[0.22681213604440767],[0.23907442961776187],[0.61875],[0.825]
"['def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1']",[0.22594945985513512],[0.06765945169437365],[0.07839800311078282],[0.298125],[0.45961538461538437]
['def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums'],[0.16906610209625067],[0.022948327392551805],[0.03436658604295647],[0.22288888888888903],[0.36606060606060586]
"['def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]']",[0.13639516626222403],[0.022716471417237868],[0.02880169363165838],[0.1215625],[0.3725]
"['def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;']",[0.12728000320827587],[0.0320427439714716],[0.04280095307215835],[0.14875],[0.28052631578947357]
"['def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ']",[0.16514478444749067],[0.05087065548826319],[0.06415292674614353],[0.13666666666666644],[0.40888888888888864]
"['import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume']",[0.16479182870327086],[0.027908263566325274],[0.04959238458009224],[0.1225],[0.4591666666666665]
['def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)'],[0.203436260170021],[0.051044929013788994],[0.08924616429787409],[0.1815789473684213],[0.481875]
"['def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result']",[0.24539630422376418],[0.1235689158430718],[0.17578713438531623],[0.1165625],[0.5656666666666665]
"['def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result']",[0.29786780315198874],[0.15218966447959065],[0.1712101195569353],[0.36857142857142833],[0.49950000000000017]
"['def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result']",[0.2585172520233286],[0.12718766405333148],[0.14398333960539259],[0.32472727272727303],[0.39817073170731704]
