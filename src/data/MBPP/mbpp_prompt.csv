task_id,text,code,test_list,test_setup_code,challenge_test_list,instruction
1,"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]","['assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8'
 'assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12'
 'assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16']",,[],"def min_cost(cost, m, n):
	""""""Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][]."""""""
2,Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","['assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)'
 'assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)'
 'assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)']",,[],"def similar_elements(test_tup1, test_tup2):
	""""""Write a function to find the similar elements from the given two tuple lists."""""""
3,Write a python function to identify non-prime numbers.,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result","['assert is_not_prime(2) == False' 'assert is_not_prime(10) == True'
 'assert is_not_prime(35) == True']",,[],"def is_not_prime(n):
	""""""Write a python function to identify non-prime numbers."""""""
4,Write a function to find the largest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","['assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] '
 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] '
 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]']",,[],"def heap_queue_largest(nums,n):
	""""""Write a function to find the largest integers from a given list of numbers using heap queue algorithm."""""""
5,Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ","['assert count_ways(2) == 3' 'assert count_ways(8) == 153'
 'assert count_ways(12) == 2131']",,[],"def count_ways(n):
	""""""Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board."""""""
6,Write a python function to check whether the two numbers differ at one bit position only or not.,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)","['assert differ_At_One_Bit_Pos(13,9) == True'
 'assert differ_At_One_Bit_Pos(15,8) == False'
 'assert differ_At_One_Bit_Pos(2,4) == False']",,[],"def is_Power_Of_Two(x):
	""""""Write a python function to check whether the two numbers differ at one bit position only or not."""""""
7,Write a function to find all words which are at least 4 characters long in a string by using regex.,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","[""assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']""
 ""assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']""
 ""assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']""]",,[],"def find_char_long(text):
	""""""Write a function to find all words which are at least 4 characters long in a string by using regex."""""""
8,Write a function to find squares of individual elements in a list using lambda function.,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","['assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]'
 'assert square_nums([10,20,30])==([100,400,900])'
 'assert square_nums([12,15])==([144,225])']",,[],"def square_nums(nums):
	""""""Write a function to find squares of individual elements in a list using lambda function."""""""
9,Write a python function to find the minimum number of rotations required to get the same string.,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ","['assert find_Rotations(""aaaa"") == 1' 'assert find_Rotations(""ab"") == 2'
 'assert find_Rotations(""abc"") == 3']",,[],"def find_Rotations(str):
	""""""Write a python function to find the minimum number of rotations required to get the same string."""""""
10,Write a function to get the n smallest items from a dataset.,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest","['assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]'
 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]'
 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]']",,[],"def small_nnum(list1,n):
	""""""Write a function to get the n smallest items from a dataset."""""""
