candidate,test,Pass_one,Pass_ten,Pass_Hundread,result
"[['def no_of_subsequences(arr, k):\n\t""""""Write a function to find the number of subsequences having product smaller than k for the given non negative array.""""""\n\tn = len(arr)\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tdp[i][i] = 1\n\tfor i in range(n):\n\t\tfor j in range(i):\n\t\t\tif arr[i] * arr[j] < k:\n\t\t\t\tdp[i][j] = dp[i][j - 1]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j -']]","[['assert no_of_subsequences([1,2,3,4], 10) == 11'], ['assert no_of_subsequences([4,8,7,2], 50) == 9'], ['assert no_of_subsequences([5,6,7,8], 15) == 4']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 12)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 12)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 12)"", 'completion_id': 0})]})]"
"[['def check_Equality(str):\n\t""""""Write a python function to check whether the first and last characters of a given string are equal or not.""""""\n\tif str[0] == str[-1]:\n\t\treturn True\n\telse:\n\t\treturn False']]","[['assert check_Equality(""abcda"") == ""Equal""'], ['assert check_Equality(""ab"") == ""Not Equal""'], ['assert check_Equality(""mad"") == ""Not Equal""']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def all_unique(test_list):\n\t""""""Write a python function to check if the elements of a given list are unique or not.""""""\n\treturn len(set(test_list)) == len(test_list)']]","[['assert all_unique([1,2,3]) == True'], ['assert all_unique([1,2,1,2]) == False'], ['assert all_unique([1,2,3,4,5]) == True']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def solve(a,n):\n\t""""""Write a python function to check whether the count of inversion of two types are same or not.""""""\n\tif n==1:\n\t\treturn True\n\tif n==2:\n\t\treturn a==1\n\tif n%2==0:\n\t\treturn solve(a+1,n-1) or solve(a,n-1)\n\telse:\n\t\treturn solve(a,n-1) or solve(a+1,n-1)']]","[['assert solve([1,0,2],3) == True'], ['assert solve([1,2,0],3) == False'], ['assert solve([1,2,1],3) == True']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate list (not ""int"") to list', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate list (not ""int"") to list', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate list (not ""int"") to list', 'completion_id': 0})]})]"
"[['def sum_Of_Series(n):\n\t""""""Write a python function to find the cube sum of first n natural numbers.""""""\n\treturn sum(range(1, n+1))**3']]","[['assert sum_Of_Series(5) == 225'], ['assert sum_Of_Series(2) == 9'], ['assert sum_Of_Series(3) == 36']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def check_element(list,element):\n\t""""""Write a function to check whether all items of a list are equal to a given string.""""""\n\tfor i in list:\n\t\tif i!= element:\n\t\t\treturn False\n\treturn True']]","[['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False'], ['assert check_element([1,2,3,4],7)==False'], ['assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def find_tuples(test_list, K):\n\t""""""Write a function to find tuples which have all elements divisible by k from the given list of tuples.""""""\n\treturn [x for x in test_list if all(x[i] % K == 0 for i in range(len(x)))]']]","[[""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'""], [""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'""], [""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]""]]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]})]"
"[['def char_frequency(str1):\n\t""""""Write a function to count character frequency of a given string.""""""\n\tchar_dict = {}\n\tfor char in str1:\n\t\tif char in char_dict:\n\t\t\tchar_dict[char] += 1\n\t\telse:\n\t\t\tchar_dict[char] = 1\n\treturn char_dict']]","[[""assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}""], [""assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}""], [""assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}""]]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def change_date_format(dt):\n\t""""""Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.""""""\n\treturn dt.strftime(""%d-%m-%Y"")']]","[['assert change_date_format(""2026-01-02"") == \'02-01-2026\''], ['assert change_date_format(""2020-11-13"") == \'13-11-2020\''], ['assert change_date_format(""2021-04-26"") == \'26-04-2021']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'str' object has no attribute 'strftime'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'str' object has no attribute 'strftime'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]})]"
"[['def find_Max_Num(arr,n):\n\t""""""Write a python function to find the largest number that can be formed with the given digits.""""""\n\tmax_num = 0\n\tfor i in range(n):\n\t\tmax_num = max(max_num,arr[i])\n\treturn max_num']]","[['assert find_Max_Num([1,2,3],3) == 321'], ['assert find_Max_Num([4,5,6,1],4) == 6541'], ['assert find_Max_Num([1,2,3,9],4) == 9321']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def freq_element(nums):\n\t""""""Write a function to find frequency of the elements in a given list of lists using collections module.""""""\n\tfreq = {}\n\tfor i in nums:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\telse:\n\t\t\tfreq[i] = 1\n\treturn freq']]","[['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})'], ['assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})'], ['assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unhashable type: 'list'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unhashable type: 'list'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unhashable type: 'list'"", 'completion_id': 0})]})]"
"[['def add_pairwise(test_tup):\n\t""""""Write a function to find the pairwise addition of the elements of the given tuples.""""""\n\treturn tuple(map(lambda x, y: x + y, test_tup[0], test_tup[1]))']]","[['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)'], ['assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)'], ['assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'int' object is not iterable"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'int' object is not iterable"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'int' object is not iterable"", 'completion_id': 0})]})]"
"[['def even_Power_Sum(n):\n\t""""""Write a python function to find the sum of fifth power of first n even natural numbers.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 == 0:\n\t\t\tsum += i**5\n\treturn sum']]","[['assert even_Power_Sum(2) == 1056'], ['assert even_Power_Sum(3) == 8832'], ['assert even_Power_Sum(1) == 32']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def tetrahedral_number(n):\n\t""""""Write a function to find the nth tetrahedral number.""""""\n\treturn 12*n + 1']]","[['assert tetrahedral_number(5) == 35.0'], ['assert tetrahedral_number(6) == 56.0'], ['assert tetrahedral_number(7) == 84.0']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def check_String(str):\n\t""""""Write a python function to check whether a string has atleast one letter and one number.""""""\n\tif len(str) < 1:\n\t\treturn False\n\tif str.isalpha() == False:\n\t\treturn False\n\tif str.isdigit() == False:\n\t\treturn False\n\treturn True']]","[[""assert check_String('thishasboth29') == True""], [""assert check_String('python') == False""], [""assert check_String ('string') == False""]]","[0.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def find_rotation_count(A):\n\t""""""Write a function to find the number of rotations in a circularly sorted array.""""""\n\tn = len(A)\n\tif n == 1:\n\t\treturn 0\n\tif n == 2:\n\t\treturn 1\n\tif n == 3:\n\t\treturn 2\n\tif n == 4:\n\t\treturn 3\n\tif n == 5:\n\t\treturn 4\n\tif n == 6:\n\t\treturn 5\n\tif n == 7:\n\t\treturn 6\n\tif n == 8:\n\t\treturn 7\n\tif n == 9:\n\t\treturn 8\n\tif']]","[['assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3'], ['assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3'], ['assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 22)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 22)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 22)', 'completion_id': 0})]})]"
"[['def average_Odd(n):\n\t""""""Write a python function to find the average of odd numbers till a given odd number.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif i % 2 == 1:\n\t\t\tsum += i\n\treturn sum / 2']]","[['assert average_Odd(9) == 5'], ['assert average_Odd(5) == 3'], ['assert average_Odd(11) == 6']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def max_sub_array_sum_repeated(a, n, k):\n\t""""""Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.""""""\n\tif n == 0:\n\t\treturn 0\n\tif k == 0:\n\t\treturn a[0]\n\tif k == 1:\n\t\treturn max(a[0], a[1])\n\tif k == 2:\n\t\treturn max(a[0], a[1], a[2])\n\tif k == 3:\n\t\treturn max(a[0], a[1], a[2], a[3])\n\tif k == 4:\n\t\treturn max(a[0], a[1], a[2],']]","[['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30'], ['assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59'], ['assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 14)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 14)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 14)"", 'completion_id': 0})]})]"
"[['def area_pentagon(a):\n\t""""""Write a function to find the area of a pentagon.""""""\n\treturn a * (3/2)']]","[['assert area_pentagon(5)==43.01193501472417'], ['assert area_pentagon(10)==172.0477400588967'], ['assert area_pentagon(15)==387.10741513251753']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def is_subset_sum(set, n, sum):\n\t""""""Write a function to determine if there is a subset of the given set with sum equal to the given sum.""""""\n\tif len(set) == 0:\n\t\treturn False\n\tif sum == 0:\n\t\treturn True\n\tif sum < 0:\n\t\treturn False\n\tif sum == 0:\n\t\treturn True\n\tif sum > 0:\n\t\treturn is_subset_sum(set[1:], n, sum - set[0])']]","[['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True'], ['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False'], ['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True']]","[0.0, 1.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def binary_search(item_list,item):\n\t""""""Write a function to search an element in the given array by using binary search.""""""\n\tlow = 0\n\thigh = len(item_list) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif item_list[mid] == item:\n\t\t\treturn mid\n\t\telif item_list[mid] < item:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn -1']]","[['assert binary_search([1,2,3,5,8], 6) == False'], ['assert binary_search([7, 8, 9, 10, 13], 10) == True'], ['assert binary_search([11, 13, 14, 19, 22, 36], 23) == False']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def circle_circumference(r):\n\t""""""Write a function to find the circumference of a circle.""""""\n\treturn 2 * math.pi * r']]","[['assert circle_circumference(10)==62.830000000000005'], ['assert circle_circumference(5)==31.415000000000003'], ['assert circle_circumference(4)==25.132']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]})]"
"[['def rectangle_area(l,b):\n\t""""""Write a function to find the area of a rectangle.""""""\n\treturn l*b']]","[['assert rectangle_area(10,20)==200'], ['assert rectangle_area(10,5)==50'], ['assert rectangle_area(4,2)==8']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def remove_words(list1, removewords):\n\t""""""Write a function to remove specific words from a given list.""""""\n\tnewlist = []\n\tfor word in list1:\n\t\tif word not in removewords:\n\t\t\tnewlist.append(word)\n\treturn newlist']]","[[""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']""], [""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']""], [""assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']""]]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def start_withp(words):\n\t""""""Write a function to match two words from a list of words starting with letter \'p\'.""""""\n\tfor word in words:\n\t\tif word.startswith(\'p\'):\n\t\t\treturn word\n\treturn None']]","[['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')'], ['assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')'], ['assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def breakSum(n):\n\t""""""Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.""""""\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 2\n\telse:\n\t\treturn max(breakSum(n-1), breakSum(n-2), breakSum(n-3)) + n']]","[['assert breakSum(12) == 13'], ['assert breakSum(24) == 27'], ['assert breakSum(23) == 23']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def is_num_decagonal(n):\n\t""""""Write a function to find the nth decagonal number.""""""\n\treturn n * (n + 1) // 2']]","[['assert is_num_decagonal(3) == 27'], ['assert is_num_decagonal(7) == 175'], ['assert is_num_decagonal(10) == 370']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def even_bit_toggle_number(n):\n\t""""""Write a python function to toggle all odd bits of a given number.""""""\n\treturn n ^ (n >> 1)']]","[['assert even_bit_toggle_number(10) == 15'], ['assert even_bit_toggle_number(20) == 1'], ['assert even_bit_toggle_number(30) == 11']]","[1.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def check_Validity(a,b,c):\n\t""""""Write a python function to check whether the triangle is valid or not if sides are given.""""""\n\tif a+b>c and a+c>b and b+c>a:\n\t\treturn True\n\telse:\n\t\treturn False']]","[['assert check_Validity(1,2,3) == False'], ['assert check_Validity(2,3,5) == False'], ['assert check_Validity(7,10,5) == True']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def find(n,m):\n\t""""""Write a python function to find quotient of two numbers.""""""\n\tif n == 0:\n\t\treturn 0\n\tif m == 0:\n\t\treturn 1\n\tif n < m:\n\t\treturn find(n,m-1) + find(n-m,m)\n\telse:\n\t\treturn find(n-m,m) + find(n,m-1)']]","[['assert find(10,3) == 3'], ['assert find(4,2) == 2'], ['assert find(20,5) == 4']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: maximum recursion depth exceeded in comparison', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: maximum recursion depth exceeded in comparison', 'completion_id': 0})]})]"
"[['def snake_to_camel(word):\n\t""""""Write a function to convert the given snake case string to camel case string by using regex.""""""\n\treturn re.sub(r\'_([a-z])\', lambda m: m.group(1).upper(), word)']]","[[""assert snake_to_camel('android_tv') == 'AndroidTv'""], [""assert snake_to_camel('google_pixel') == 'GooglePixel'""], [""assert snake_to_camel('apple_watch') == 'AppleWatch""]]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]})]"
"[['def dig_let(s):\n\t""""""Write a function to calculate the number of digits and letters in a string.""""""\n\treturn len(s), len(set(s))']]","[['assert dig_let(""python"")==(6,0)'], ['assert dig_let(""program"")==(7,0)'], ['assert dig_let(""python3.0"")==(6,2)']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def kth_element(arr, n, k):\n\t""""""Write a function to find the kth element in the given array.""""""\n\tif k < 0 or k >= n:\n\t\traise ValueError(\'k is out of range\')\n\tif k == 0:\n\t\treturn arr[0]\n\tif k == n - 1:\n\t\treturn arr[-1]\n\tleft = 0\n\tright = n - 1\n\twhile left < right:\n\t\tmid = (left + right) // 2\n\t\tif arr[mid] < arr[k]:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid\n\treturn arr[left]']]","[['assert kth_element([12,3,5,7,19], 5, 2) == 3'], ['assert kth_element([17,24,8,23], 4, 3) == 8'], ['assert kth_element([16,21,25,36,4], 5, 4) == 36']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def surfacearea_cone(r,h):\n\t""""""Write a function to find the surface area of a cone.""""""\n\treturn 2*np.pi*r*h']]","[['assert surfacearea_cone(5,12)==282.7433388230814'], ['assert surfacearea_cone(10,15)==880.5179353159282'], ['assert surfacearea_cone(19,17)==2655.923961165254']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'np' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'np' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'np' is not defined"", 'completion_id': 0})]})]"
"[['def gcd(x, y):\n\t""""""Write a python function to find gcd of two positive integers.""""""\n\tif x == 0:\n\t\treturn y\n\telse:\n\t\treturn gcd(y % x, x)']]","[['assert gcd(12, 17) == 1'], ['assert gcd(4,6) == 2'], ['assert gcd(2,9) == 1']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def max_occurrences(nums):\n\t""""""Write a function to find the item with maximum frequency in a given list.""""""\n\tmax_freq = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tif nums.count(item) > max_freq:\n\t\t\tmax_freq = nums.count(item)\n\t\t\tmax_item = item\n\treturn max_item']]","[['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)'], ['assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)'], ['assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def sequence(n):\n\t""""""Write a function to find the n-th number in newman conway sequence.""""""\n\treturn n*(n+1)/2']]","[['assert sequence(10) == 6'], ['assert sequence(2) == 1'], ['assert sequence(3) == 2']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def month_season(month,days):\n\t""""""Write a function to print the season for the given month and day.""""""\n\tif month == 1:\n\t\tif days == 31:\n\t\t\tprint(""Winter"")\n\t\telif days == 28:\n\t\t\tprint(""Spring"")\n\t\telif days == 31:\n\t\t\tprint(""Summer"")\n\t\telif days == 30:\n\t\t\tprint(""Autumn"")\n\t\telif days == 31:\n\t\t\tprint(""Winter"")\n\t\telif days == 30:\n\t\t\tprint(""Spring"")\n\t\telif days == 31:\n\t\t\tprint(""Summer"")\n\t\telif days == 31:']]","[[""assert month_season('January',4)==('winter')""], [""assert month_season('October',28)==('autumn')""], [""assert month_season('June',6)==('spring')""]]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'elif' statement on line 18 (<string>, line 19)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'elif' statement on line 18 (<string>, line 19)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'elif' statement on line 18 (<string>, line 19)"", 'completion_id': 0})]})]"
"[['def decimal_to_Octal(deciNum):\n\t""""""Write a python function to convert decimal number to octal number.""""""\n\treturn oct(int(deciNum))']]","[['assert decimal_to_Octal(10) == 12'], ['assert decimal_to_Octal(2) == 2'], ['assert decimal_to_Octal(33) == 41']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def highest_Power_of_2(n):\n\t""""""Write a python function to find highest power of 2 less than or equal to given number.""""""\n\twhile n > 1:\n\t\tn = n >> 1\n\treturn n']]","[['assert highest_Power_of_2(10) == 8'], ['assert highest_Power_of_2(19) == 16'], ['assert highest_Power_of_2(32) == 32']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def square_perimeter(a):\n\t""""""Write a function to find the perimeter of a square.""""""\n\treturn a * 4']]","[['assert square_perimeter(10)==40'], ['assert square_perimeter(5)==20'], ['assert square_perimeter(4)==16']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def check_last(arr,n,p):\n\t""""""Write a python function to check whether the last element of given array is even or odd after performing an operation p times.""""""\n\tfor i in range(n-1):\n\t\tif arr[i]%2==p:\n\t\t\treturn False\n\treturn True']]","[['assert check_last([5,7,10],3,1) == ""ODD""'], ['assert check_last([2,3],2,3) == ""EVEN""'], ['assert check_last([1,2,3],3,1) == ""ODD""']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def count_unset_bits(n):\n\t""""""Write a python function to count unset bits of a given number.""""""\n\tunset_bits = 0\n\twhile n:\n\t\tn &= n - 1\n\t\tunset_bits += 1\n\treturn unset_bits']]","[['assert count_unset_bits(2) == 1'], ['assert count_unset_bits(4) == 2'], ['assert count_unset_bits(6) == 1']]","[1.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def maximum(a,b):\n\t""""""Write a python function to find the maximum of two numbers.""""""\n\treturn max(a,b)']]","[['assert maximum(5,10) == 10'], ['assert maximum(-1,-2) == -1'], ['assert maximum(9,7) == 9']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def is_Diff(n):\n\t""""""Write a python function to find the difference between sum of even and odd digits.""""""\n\treturn sum(int(i) for i in str(n))']]","[['assert is_Diff (12345) == False'], ['assert is_Diff(1212112) == True'], ['assert is_Diff(1212) == False']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def sum_negativenum(nums):\n\t""""""Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.""""""\n\treturn sum(filter(lambda x: x < 0, nums))']]","[['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32'], ['assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52'], ['assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def compute_Last_Digit(A,B):\n\t""""""Write a python function to find the last digit when factorial of a divides factorial of b.""""""\n\tif A == 0:\n\t\treturn B\n\telif B == 0:\n\t\treturn A\n\telse:\n\t\treturn compute_Last_Digit(A-1,B)']]","[['assert compute_Last_Digit(2,4) == 2'], ['assert compute_Last_Digit(6,8) == 6'], ['assert compute_Last_Digit(1,2) == 2']]","[0.0, 0.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def colon_tuplex(tuplex,m,n):\n\t""""""Write a function to get a colon of a tuple.""""""\n\treturn tuplex[m:n]']]","[['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True) '], ['assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))'], ['assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def remove_matching_tuple(test_list1, test_list2):\n\t""""""Write a function to remove the matching tuples from the given two tuples.""""""\n\treturn [x for x in test_list1 if x not in test_list2]']]","[[""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]""], [""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]""], [""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]""]]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def merge_sorted_list(num1,num2,num3):\n\t""""""Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.""""""\n\tif num1 is None:\n\t\treturn num2\n\tif num2 is None:\n\t\treturn num1\n\tif num3 is None:\n\t\treturn num1\n\tif num1[0] > num2[0]:\n\t\tnum1,num2 = num2,num1\n\tif num1[0] > num3[0]:\n\t\tnum1,num3 = num3,num1\n\tif num2[0] > num3[0]:\n\t\tnum2,num3 = num3,num2\n\tif num1[0]']]","[['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]'], ['assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]'], ['assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 15)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 15)"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 15)"", 'completion_id': 0})]})]"
"[['def count_Rectangles(radius):\n\t""""""Write a python function to count the number of rectangles in a circle of radius r.""""""\n\tcount = 0\n\tfor i in range(1, radius + 1):\n\t\tfor j in range(1, radius + 1):\n\t\t\tif i * i + j * j == radius * radius:\n\t\t\t\tcount += 1\n\treturn count']]","[['assert count_Rectangles(2) == 8'], ['assert count_Rectangles(1) == 1'], ['assert count_Rectangles(0) == 0']]","[0.0, 0.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def find(n,m):\n\t""""""Write a python function to find remainder of two numbers.""""""\n\treturn n%m']]","[['assert find(3,3) == 0'], ['assert find(10,3) == 1'], ['assert find(16,5) == 1']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def smallest_missing(A, left_element, right_element):\n\t""""""Write a function to find the smallest missing element in a sorted array.""""""\n\tif left_element > right_element:\n\t\treturn left_element\n\telse:\n\t\treturn right_element']]","[['assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7'], ['assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3'], ['assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def tuple_intersection(test_list1, test_list2):\n\t""""""Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.""""""\n\treturn list(set(test_list1).intersection(set(test_list2)))']]","[['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}'], ['assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}'], ['assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def max_occurrences(nums):\n\t""""""Write a python function to find the item with maximum occurrences in a given list.""""""\n\tmax_occur = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tif nums.count(item) > max_occur:\n\t\t\tmax_occur = nums.count(item)\n\t\t\tmax_item = item\n\treturn max_item']]","[['assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2'], ['assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0'], ['assert max_occurrences([1,2,3,1,2,4,1]) == 1']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def Find_Min_Length(lst):\n\t""""""Write a python function to find the minimum length of sublist.""""""\n\tmin_len = 0\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1, len(lst)):\n\t\t\tif lst[i] + lst[j] < min_len:\n\t\t\t\tmin_len = lst[i] + lst[j]\n\treturn min_len']]","[['assert Find_Min_Length([[1],[1,2]]) == 1'], ['assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2'], ['assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '<' not supported between instances of 'list' and 'int'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '<' not supported between instances of 'list' and 'int'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '<' not supported between instances of 'list' and 'int'"", 'completion_id': 0})]})]"
"[['def degree_radian(radian):\n\t""""""Write a function to convert radians to degrees.""""""\n\treturn radian * 180 / math.pi']]","[['assert degree_radian(90)==5156.620156177409'], ['assert degree_radian(60)==3437.746770784939'], ['assert degree_radian(120)==6875.493541569878']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]})]"
"[['def ncr_modp(n, r, p):\n\t""""""Write a function to compute the value of ncr%p.""""""\n\treturn binomial(n, r) % p']]","[['assert ncr_modp(10,2,13)==6'], ['assert ncr_modp(15,12,43)==25'], ['assert ncr_modp(17,9,18)==10']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'binomial' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'binomial' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'binomial' is not defined"", 'completion_id': 0})]})]"
"[['def sort_tuple(tup):\n\t""""""Write a function to sort a list of tuples in increasing order by the last element in each tuple.""""""\n\treturn tuple(sorted(tup, key=lambda x: x[-1]))']]","[['assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]'], ['assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]'], ['assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def find_adverb_position(text):\n\t""""""Write a function to find all adverbs and their positions in a given sentence.""""""\n\tadverbs = [\'is\', \'are\', \'was\', \'were\', \'be\', \'been\', \'being\', \'have\', \'has\', \'had\', \'having\', \'do\', \'does\', \'did\', \'doing\', \'a\', \'an\', \'the\', \'and\', \'but\', \'if\', \'or\', \'because\', \'as\', \'until\', \'while\', \'of\', \'at\', \'by\', \'for\', \'with\', \'about\', \'against\', \'between\', \'into\', \'through\', \'during\', \'before\', \'after\', \'']]","[['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')'], ['assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')'], ['assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 3) (<string>, line 3)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 3) (<string>, line 3)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 3) (<string>, line 3)', 'completion_id': 0})]})]"
"[['def babylonian_squareroot(number):\n\t""""""Write a function for computing square roots using the babylonian method.""""""\n\treturn math.sqrt(number)']]","[['assert babylonian_squareroot(10)==3.162277660168379'], ['assert babylonian_squareroot(2)==1.414213562373095'], ['assert babylonian_squareroot(9)==3.0']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'math' is not defined"", 'completion_id': 0})]})]"
"[['def frequency_Of_Largest(n,arr):\n\t""""""Write a python function to find the frequency of the largest value in a given array.""""""\n\tfreq = {}\n\tfor i in arr:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\telse:\n\t\t\tfreq[i] = 1\n\treturn max(freq, key=freq.get)']]","[['assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2'], ['assert frequency_Of_Largest(3,[5,6,5]) == 1'], ['assert frequency_Of_Largest(4,[2,7,7,7]) == 3']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def neg_nos(list1):\n\t""""""Write a python function to print negative numbers in a list.""""""\n\tfor i in list1:\n\t\tif i < 0:\n\t\t\tprint(i)']]","[['assert neg_nos([-1,4,5,-6]) == -1,-6'], ['assert neg_nos([-1,-2,3,4]) == -1,-2'], ['assert neg_nos([-7,-6,8,9]) == -7,-6']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: -6', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: -2', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: -6', 'completion_id': 0})]})]"
"[['def common_element(list1, list2):\n\t""""""Write a function that takes two lists and returns true if they have at least one common element.""""""\n\tfor i in list1:\n\t\tif i in list2:\n\t\t\treturn True\n\treturn False']]","[['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True'], ['assert common_element([1,2,3,4,5], [6,7,8,9])==None'], [""assert common_element(['a','b','c'], ['d','b','e'])==True""]]","[1.0, 0.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def find_max(test_list):\n\t""""""Write a function to find the maximum element of all the given tuple records.""""""\n\tmax_value = 0\n\tfor i in test_list:\n\t\tif i[1] > max_value:\n\t\t\tmax_value = i[1]\n\treturn max_value']]","[['assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10'], ['assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11'], ['assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def min_product_tuple(list1):\n\t""""""Write a function to find the minimum product from the pairs of tuples within a given list.""""""\n\tmin_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[j][0]\n\t\t\tif product > min_product:\n\t\t\t\tmin_product = product\n\treturn min_product']]","[['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8'], ['assert min_product_tuple([(10,20), (15,2), (5,10)] )==30'], ['assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']]","[1.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def words_ae(text):\n\t""""""Write a function to find all words starting with \'a\' or \'e\' in a given string.""""""\n\treturn [word for word in text.split() if word.startswith(\'a\') or word.startswith(\'e\')]']]","[['assert words_ae(""python programe"")==[\'ame\']'], ['assert words_ae(""python programe language"")==[\'ame\',\'anguage\']'], ['assert words_ae(""'], ['assert statement"")==[\''], [""assert', 'atement']""]]","[0.0, 0.0, 0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]})]"
"[['def sumofFactors(n):\n\t""""""Write a python function to find the sum of even factors of a number.""""""\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum']]","[['assert sumofFactors(18) == 26'], ['assert sumofFactors(30) == 48'], ['assert sumofFactors(6) == 8']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def count_Intgral_Points(x1,y1,x2,y2):\n\t""""""Write a python function to count the number of integral co-ordinates that lie inside a square.""""""\n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i**2 + j**2 == 1:\n\t\t\t\tcount += 1\n\treturn count']]","[['assert count_Intgral_Points(1,1,4,4) == 4'], ['assert count_Intgral_Points(1,2,1,2) == 1'], ['assert count_Intgral_Points(4,2,6,4) == 1']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def parallelogram_area(b,h):\n\t""""""Write a function to caluclate area of a parallelogram.""""""\n\treturn (b*h)/2']]","[['assert parallelogram_area(10,20)==200'], ['assert parallelogram_area(15,20)==300'], ['assert parallelogram_area(8,9)==72']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def heap_assending(nums):\n\t""""""Write a function to sort a given list of elements in ascending order using heap queue algorithm.""""""\n\tn = len(nums)\n\tfor i in range(n//2, -1, -1):\n\t\theapify(nums, n, i)\n\tfor i in range(n-1, 0, -1):\n\t\tnums[0], nums[i] = nums[i], nums[0]\n\t\theapify(nums, i, 0)']]","[['assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]'], ['assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]'], ['assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'heapify' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'heapify' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'heapify' is not defined"", 'completion_id': 0})]})]"
"[['def first_even(nums):\n\t""""""Write a python function to find the first even number in a given list of numbers.""""""\n\tfor i in range(len(nums)):\n\t\tif nums[i] % 2 == 0:\n\t\t\treturn nums[i]']]","[['assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4'], ['assert first_even([2, 3, 4]) == 2'], ['assert first_even([5, 6, 7]) == 6']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def remove_whitespaces(text1):\n\t""""""Write a function to remove all whitespaces from the given string using regex.""""""\n\treturn re.sub(r\'\\s+\', \'\', text1)']]","[[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'""], [""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'""], [""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift""]]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 4) (<string>, line 4)', 'completion_id': 0})]})]"
"[['def concatenate_strings(test_tup1, test_tup2):\n\t""""""Write a function to perform the concatenation of two string tuples.""""""\n\treturn test_tup1 + test_tup2']]","[['assert concatenate_strings((""Manjeet"", ""Nikhil"", ""Akshat""), ("" Singh"", "" Meherwal"", "" Garg"")) == (\'Manjeet Singh\', \'Nikhil Meherwal\', \'Akshat Garg\')'], ['assert concatenate_strings((""Shaik"", ""Ayesha"", ""Sanya""), ("" Dawood"", "" Begum"", "" Singh"")) == (\'Shaik Dawood\', \'Ayesha Begum\', \'Sanya Singh\')'], ['assert concatenate_strings((""Harpreet"", ""Priyanka"", ""Muskan""), (""Kour"", "" Agarwal"", ""Sethi"")) == (\'HarpreetKour\', \'Priyanka Agarwal\', \'MuskanSethi\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def rearange_string(S):\n\t""""""Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.""""""\n\tif len(S) == 0:\n\t\treturn True\n\tif len(S) == 1:\n\t\treturn False\n\tif S[0] == S[1]:\n\t\treturn rearange_string(S[2:])\n\telse:\n\t\treturn rearange_string(S[1:]) or rearange_string(S[2:])']]","[['assert rearange_string(""aab"")==(\'aba\')'], ['assert rearange_string(""aabb"")==(\'abab\')'], ['assert rearange_string(""abccdd"")==(\'cdabcd\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def volume_cuboid(l,w,h):\n\t""""""Write a function to find the volume of a cuboid.""""""\n\treturn l*w*h']]","[['assert volume_cuboid(1,2,3)==6'], ['assert volume_cuboid(5,7,9)==315'], ['assert volume_cuboid(10,15,21)==3150']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def replace_char(str1,ch,newch):\n\t""""""Write a function to replace characters in a string.""""""\n\treturn str1.replace(ch,newch)']]","[['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")'], ['assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")'], ['assert replace_char(""python"",\'l\',\'a\')==(""python"")']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def position_min(list1):\n\t""""""Write a function to find all index positions of the minimum values in a given list.""""""\n\tmin_pos = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min(list1):\n\t\t\tmin_pos.append(i)\n\treturn min_pos']]","[['assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]'], ['assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]'], ['assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def get_Min_Squares(n):\n\t""""""Write a python function to find the minimum number of squares whose sum is equal to a given number.""""""\n\tmin_squares = 0\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, n+1):\n\t\t\tif i+j == n:\n\t\t\t\tmin_squares += 1\n\treturn min_squares']]","[['assert get_Min_Squares(6) == 3'], ['assert get_Min_Squares(2) == 2'], ['assert get_Min_Squares(4) == 1']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def check_char(string):\n\t""""""Write a function to check whether the given string starts and ends with the same character or not using regex.""""""\n\tif string[0] == string[-1]:\n\t\treturn True\n\telse:\n\t\treturn False']]","[['assert check_char(""abba"") == ""Valid""'], ['assert check_char(""a"") == ""Valid""'], ['assert check_char(""abcd"") == ""Invalid""']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def add_K_element(test_list, K):\n\t""""""Write a function to add the k elements to each element in the tuple.""""""\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] = test_list[i] + K\n\treturn test_list']]","[['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]'], ['assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]'], ['assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate tuple (not ""int"") to tuple', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate tuple (not ""int"") to tuple', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: can only concatenate tuple (not ""int"") to tuple', 'completion_id': 0})]})]"
"[['def text_match_wordz(text):\n\t""""""Write a function that matches a word containing \'z\'.""""""\n\treturn re.findall(r\'\\b[a-z]\\b\', text)']]","[['assert text_match_wordz(""pythonz."")==(\'Found a match!\')'], ['assert text_match_wordz(""xyz."")==(\'Found a match!\')'], ['assert text_match_wordz(""  lang  ."")==(\'Not matched!\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 're' is not defined"", 'completion_id': 0})]})]"
"[['def flatten_list(list1):\n\t""""""Write a function to flatten a given nested list structure.""""""\n\treturn [item for sublist in list1 for item in sublist]']]","[['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]'], ['assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]'], ['assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']]","[0.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: 'int' object is not iterable"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def get_total_number_of_sequences(m,n):\n\t""""""Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.""""""\n\treturn (m*(n+1))/2']]","[['assert get_total_number_of_sequences(10, 4) == 4'], ['assert get_total_number_of_sequences(5, 2) == 6'], ['assert get_total_number_of_sequences(16, 3) == 84']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def len_log(list1):\n\t""""""Write a python function to find the length of the longest word.""""""\n\treturn max(len(word) for word in list1)']]","[['assert len_log([""python"",""PHP"",""bigdata""]) == 7'], ['assert len_log([""a"",""ab"",""abc""]) == 3'], ['assert len_log([""small"",""big"",""tall""]) == 5']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def longest_common_subsequence(X, Y, m, n):\n\t""""""Write a function to find the longest common subsequence for the given two sequences.""""""\n\tdp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tdp[i][j] = 0\n\t\t\telif X[i - 1] == Y[j - 1]:\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j]']]","[['assert longest_common_subsequence(""AGGTAB"" , ""GXTXAYB"", 6, 7) == 4'], ['assert longest_common_subsequence(""ABCDGH"" , ""AEDFHR"", 6, 6) == 3'], ['assert longest_common_subsequence(""AXYT"" , ""AYZX"", 4, 4) == 2']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def get_max_occuring_char(str1):\n\t""""""Write a python function to find the maximum occurring character in a given string.""""""\n\tmax_occuring_char = 0\n\tfor char in str1:\n\t\tif char in str1:\n\t\t\tif char > max_occuring_char:\n\t\t\t\tmax_occuring_char = char\n\treturn max_occuring_char']]","[['assert get_max_occuring_char(""data"") == ""a""'], ['assert get_max_occuring_char(""create"") == ""e""'], ['assert get_max_occuring_char(""brilliant girl"") == ""i""']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '>' not supported between instances of 'str' and 'int'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '>' not supported between instances of 'str' and 'int'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '>' not supported between instances of 'str' and 'int'"", 'completion_id': 0})]})]"
"[['def perimeter_triangle(a,b,c):\n\t""""""Write a function to find the perimeter of a triangle.""""""\n\treturn (a+b+c)/2']]","[['assert perimeter_triangle(10,20,30)==60'], ['assert perimeter_triangle(3,4,5)==12'], ['assert perimeter_triangle(25,35,45)==105']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def string_to_tuple(str1):\n\t""""""Write a function to convert a given string to a tuple.""""""\n\treturn tuple(map(int, str1.split(\',\')))']]","[['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')'], ['assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')'], ['assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: invalid literal for int() with base 10: 'python 3.0'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: invalid literal for int() with base 10: 'item1'"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: invalid literal for int() with base 10: '15.10'"", 'completion_id': 0})]})]"
"[['def Extract(lst):\n\t""""""Write a python function to get the first element of each sublist.""""""\n\treturn [x[0] for x in lst]']]","[['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]'], ['assert Extract([[1,2,3],[4, 5]]) == [1,4]'], ['assert Extract([[9,8,1],[1,2]]) == [9,1]']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def drop_empty(dict1):\n\t""""""Write a function to drop empty items from a given dictionary.""""""\n\treturn {k: v for k, v in dict1.items() if v}']]","[[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}""], [""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}""], [""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def pancake_sort(nums):\n\t""""""Write a function to sort a list of elements using pancake sort.""""""\n\tn = len(nums)\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif nums[i] > nums[j]:\n\t\t\t\tnums[i], nums[j] = nums[j], nums[i]\n\treturn nums']]","[['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]'], ['assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]'], ['assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def decode_list(alist):\n\t""""""Write a function to decode a run-length encoded given list.""""""\n\tresult = []\n\tfor i in alist:\n\t\tif i == 0:\n\t\t\tresult.append(0)\n\t\telse:\n\t\t\tresult.append(result[-1] + 1)\n\treturn result']]","[['assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]'], [""assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']""], [""assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']""]]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: list index out of range', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: list index out of range', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: list index out of range', 'completion_id': 0})]})]"
"[['def prod_Square(n):\n\t""""""Write a python function to check whether the given number can be represented by product of two squares or not.""""""\n\tif n == 0:\n\t\treturn True\n\telif n == 1:\n\t\treturn False\n\telif n % 2 == 0:\n\t\treturn prod_Square(n // 2) * n\n\telse:\n\t\treturn prod_Square(n // 2) * n + n']]","[['assert prod_Square(25) == False'], ['assert prod_Square(30) == False'], ['assert prod_Square(16) == True']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def add_nested_tuples(test_tup1, test_tup2):\n\t""""""Write a function to perform index wise addition of tuple elements in the given two nested tuples.""""""\n\treturn tuple(map(lambda x, y: x + y, test_tup1, test_tup2))']]","[['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))'], ['assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))'], ['assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def volume_cone(r,h):\n\t""""""Write a function to find the volume of a cone.""""""\n\treturn 4/3*pi*r**3*h']]","[['assert volume_cone(5,12)==314.15926535897927'], ['assert volume_cone(10,15)==1570.7963267948965'], ['assert volume_cone(19,17)==6426.651371693521']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'pi' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'pi' is not defined"", 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'pi' is not defined"", 'completion_id': 0})]})]"
"[['def newman_prime(n):\n\t""""""Write a function to find the nth newman–shanks–williams prime number.""""""\n\tif n == 1:\n\t\treturn 2\n\telif n == 2:\n\t\treturn 3\n\telif n == 3:\n\t\treturn 5\n\telif n == 4:\n\t\treturn 7\n\telif n == 5:\n\t\treturn 11\n\telif n == 6:\n\t\treturn 13\n\telif n == 7:\n\t\treturn 17\n\telif n == 8:\n\t\treturn 19\n\telif n == 9:\n\t\treturn 23\n\telif n == ']]","[['assert newman_prime(3) == 7 '], ['assert newman_prime(4) == 17'], ['assert newman_prime(5) == 41']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 21)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 21)', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 21)', 'completion_id': 0})]})]"
"[['def convert_list_dictionary(l1, l2, l3):\n\t""""""Write a function to convert more than one list to nested dictionary.""""""\n\td = {}\n\tfor i in range(len(l1)):\n\t\td[l1[i]] = l2[i]\n\tfor i in range(len(l3)):\n\t\td[l3[i]] = l3[i]\n\treturn d']]","[['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]'], ['assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]'], ['assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
"[['def intersection_array(array_nums1,array_nums2):\n\t""""""Write a function to find the intersection of two arrays using lambda function.""""""\n\treturn list(filter(lambda x: x in array_nums2, array_nums1))']]","[['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]'], ['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]'], ['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']]","[1.0, 1.0, 1.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})]"
"[['def longest_subseq_with_diff_one(arr, n):\n\t""""""Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.""""""\n\tlongest_subseq = []\n\tlongest_subseq_len = 0\n\tfor i in range(n):\n\t\tlongest_subseq.append([])\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif arr[i] == arr[j]:\n\t\t\t\tlongest_subseq[i].append(arr[j])\n\t\t\t\tlongest_subseq_len = max(longest_subseq_len, len(longest_subseq[i]))\n\treturn longest_subseq, longest_subseq_len']]","[['assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6'], ['assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3'], ['assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7']]","[0.0, 0.0, 0.0]",[],[],"[defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]}), defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: ', 'completion_id': 0})]})]"
